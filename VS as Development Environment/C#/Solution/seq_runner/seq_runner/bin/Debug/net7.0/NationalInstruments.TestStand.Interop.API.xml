<?xml version="1.0"?><doc><members>
    <member name="T:NationalInstruments.TestStand.Interop.API.PropertyRepresentations">
      <summary>These constants indicate the representation of a PropertyObject.</summary>
      <seealso cref="EvaluationTypes.AllowedArrayRepresentations" />
      <seealso cref="EvaluationTypes.AllowedRepresentations" />
      <seealso cref="PropertyObject" />
      <seealso cref="PropertyObjectType" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyRepresentations.PropertyRepresentation_None">
      <summary>(Value: 0) This is the default representation for non-numeric property objects.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyRepresentations.PropertyRepresentation_Float64">
      <summary>(Value: 1) Specifies double-precision, 64-bit floating-point representation.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyRepresentations.PropertyRepresentation_Int64">
      <summary>(Value: 2) Specifies signed 64-bit integer representation. </summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyRepresentations.PropertyRepresentation_UInt64">
      <summary>(Value: 3) Specifies unsigned 64-bit integer representation.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.APILocations">
      <summary>Use this enumeration with the Locations.AddAPILocation, AnalysisUtilities.ValidateExpression, AnalysisUtilities.ValidatePath, or AnalysisUtilities.ValidateRemoteHost methods to refer to a Location when using an API property or method. The syntax of the enumeration is <c>APILocation_BaseClassName_APIPropertyOrMethodName</c>. For example, <c>APILocation_ActiveXModule_ActiveXReferenceExpr</c> refers to the <c>ActiveXModule.ActiveXReferenceExpr</c> property.</summary>
      <seealso cref="&quot;AnalysisUtilities.ValidateExpression&quot;javascript:TSAnalyzer('/RefTopics/AnalysisUtilities_ValidateExpression_M.htm')" />
      <seealso cref="&quot;AnalysisUtilities.ValidatePath&quot;javascript:TSAnalyzer('/RefTopics/AnalysisUtilities_ValidatePath_M.htm')" />
      <seealso cref="&quot;AnalysisUtilities.ValidateRemoteHost&quot;javascript:TSAnalyzer('/RefTopics/AnalysisUtilities_ValidateRemoteHost_M.htm')" />
      <seealso cref="Locations.AddAPILocation" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_LabVIEWParameterElement_ElementCaption">
      <summary>(Value: 125)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_LabVIEWParameter_ParameterCaption">
      <summary>(Value: 126)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_DotNetParameter_ParameterName">
      <summary>(Value: 127)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_None">
      <summary>(Value: 0) Use this value to refer to a location that is not associated with an API property or method.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_Step_SwitchExecOperation">
      <summary>(Value: 33)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_Step_SwitchExecOperationOrder">
      <summary>(Value: 34)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_Step_SwitchExecRoutesToConnect">
      <summary>(Value: 35)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_Step_SwitchExecRoutesToDisconnect">
      <summary>(Value: 36)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_Step_SwitchExecVirtualDevice">
      <summary>(Value: 37)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_Step_SwitchExecWaitForDebounce">
      <summary>(Value: 38)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_Step_UniqueStepId">
      <summary>(Value: 39)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_Step_UseMutex">
      <summary>(Value: 40)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_Step_WindowActivation">
      <summary>(Value: 41)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_LabVIEWModule_VIPath">
      <summary>(Value: 42)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_LabVIEWModule_VIType">
      <summary>(Value: 43)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_LabVIEWModule_RemoteHost">
      <summary>(Value: 44)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_LabVIEWModule_RemotePortNumber">
      <summary>(Value: 45)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_LabVIEWModule_RemoteConnectionTimeout">
      <summary>(Value: 46)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_LabVIEWModule_ProjectPath">
      <summary>(Value: 47)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_LabVIEWModule_GetVIAbsolutePath">
      <summary>(Value: 48)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_LabVIEWParameter_ValueExpr">
      <summary>(Value: 49)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_LabVIEWParameterElement_ValueExpr">
      <summary>(Value: 50)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_CommonCModule_ModulePath">
      <summary>(Value: 51)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_CommonCModule_ProjectFilePath">
      <summary>(Value: 52)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_CommonCModule_SourceFilePath">
      <summary>(Value: 53)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_CommonCModule_WorkspaceFilePath">
      <summary>(Value: 54)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_CommonCParameter_ValueExpr">
      <summary>(Value: 54)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_CommonCParameter_StringBufferSizeExpr">
      <summary>(Value: 56)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_DllParameter_ImaginaryPartValueExpr">
      <summary>(Value: 124)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_AdditionalResult_Condition">
      <summary>(Value: 57)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_AdditionalResult_Name">
      <summary>(Value: 58)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_AdditionalResult_ValueToLog">
      <summary>(Value: 59)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_DotNetModule_ProjectFilePath">
      <summary>(Value: 60)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_DotNetModule_SolutionFilePath">
      <summary>(Value: 61)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_DotNetModule_SourceFilePath">
      <summary>(Value: 62)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_DotNetModule_GetAssembly">
      <summary>(Value: 63)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_DotNetParameter_ValueExpr">
      <summary>(Value: 64)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_ActiveXModule_ActiveXReferenceExpr">
      <summary>(Value: 65)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_ActiveXModule_FilePath">
      <summary>(Value: 66)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_Step_BatchSyncOption">
      <summary>(Value: 1)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_Step_CustomActionExpression">
      <summary>(Value: 2)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_Step_CustomFalseAction">
      <summary>(Value: 3)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_Step_CustomFalseActionTargetByExpr">
      <summary>(Value: 4)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_Step_CustomTrueAction">
      <summary>(Value: 5)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_Step_CustomTrueActionTargetByExpr">
      <summary>(Value: 6)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_Step_EvalPrecondForInteractiveExecution">
      <summary>(Value: 7)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_Step_FailAction">
      <summary>(Value: 8)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_Step_FailActionTargetByExpr">
      <summary>(Value: 9)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_Step_IconName">
      <summary>(Value: 10)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_Step_IgnoreRTE">
      <summary>(Value: 11)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_Step_LoopIncExpression">
      <summary>(Value: 12)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_Step_LoopInitExpression">
      <summary>(Value: 13)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_Step_LoopStatusExpression">
      <summary>(Value: 14)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_Step_LoopType">
      <summary>(Value: 15)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_Step_LoopWhileExpression">
      <summary>(Value: 16)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_Step_ModuleLoadOption">
      <summary>(Value: 17)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_Step_ModuleUnloadOption">
      <summary>(Value: 18)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_Step_MutexNameOrRefExpr">
      <summary>(Value: 19)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_Step_PassAction">
      <summary>(Value: 20)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_Step_PassActionTargetByExpr">
      <summary>(Value: 21)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_Step_PostExpression">
      <summary>(Value: 22)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_Step_Precondition">
      <summary>(Value: 23)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_Step_PreExpression">
      <summary>(Value: 24)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_Step_RecordLoopIterationResults">
      <summary>(Value: 25)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_Step_RecordResult">
      <summary>(Value: 26)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_Step_RunMode">
      <summary>(Value: 27)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_Step_StatusExpression">
      <summary>(Value: 28)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_Step_StepFailCausesSequenceFail">
      <summary>(Value: 29)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_Step_SwitchExecConnectionLifetime">
      <summary>(Value: 30)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_Step_SwitchExecEnabled">
      <summary>(Value: 31)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_Step_SwitchExecMulticonnectMode">
      <summary>(Value: 32)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_SequenceFile_ModelPath">
      <summary>(Value: 123)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_ActiveXModule_RemoteHost">
      <summary>(Value: 67)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_ActiveXParameter_ValueExpr">
      <summary>(Value: 68)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_HTBasicModule_SubroutineFilePath">
      <summary>(Value: 70)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_SequenceCallModule_CustomCPUAffinityForNewThread">
      <summary>(Value: 71)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_SequenceCallModule_NewExecutionBreakOnEntryExpr">
      <summary>(Value: 72)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_SequenceCallModule_NewExecutionModelPath">
      <summary>(Value: 73)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_SequenceCallModule_NewExecutionTypeMaskExpr">
      <summary>(Value: 74)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_SequenceCallModule_RemoteHost">
      <summary>(Value: 75)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_SequenceCallModule_SequenceFilePath">
      <summary>(Value: 76)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_SequenceCallModule_SequenceName">
      <summary>(Value: 77)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_SequenceCallModule_StoreActiveXReferenceExpr">
      <summary>(Value: 78)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_SequenceCallParameter_ValueExpr">
      <summary>(Value: 79)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_StepType_IconName">
      <summary>(Value: 80)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_StepType_ModuleLoadOption">
      <summary>(Value: 81)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_StepType_ModuleUnloadOption">
      <summary>(Value: 82)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_StepType_EvalPrecondForInteractiveExecution">
      <summary>(Value: 83)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_StepType_WindowActivation">
      <summary>(Value: 84)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_StepType_RunMode">
      <summary>(Value: 85)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_StepType_LoopInitExpression">
      <summary>(Value: 86)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_StepType_LoopIncExpression">
      <summary>(Value: 87)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_StepType_LoopWhileExpression">
      <summary>(Value: 88)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_StepType_LoopStatusExpression">
      <summary>(Value: 89)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_StepType_LoopType">
      <summary>(Value: 90)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_StepType_PassAction">
      <summary>(Value: 91)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_StepType_FailAction">
      <summary>(Value: 92)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_StepType_PassActionTargetByExpr">
      <summary>(Value: 93)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_StepType_FailActionTargetByExpr">
      <summary>(Value: 94)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_StepType_CustomActionExpression">
      <summary>(Value: 95)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_StepType_CustomTrueAction">
      <summary>(Value: 96)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_StepType_CustomFalseAction">
      <summary>(Value: 97)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_StepType_CustomTrueActionTargetByExpr">
      <summary>(Value: 98)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_StepType_CustomFalseActionTargetByExpr">
      <summary>(Value: 99)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_StepType_SwitchExecVirtualDevice">
      <summary>(Value: 100)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_StepType_SwitchExecOperation">
      <summary>(Value: 101)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_StepType_SwitchExecRoutesToConnect">
      <summary>(Value: 102)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_StepType_SwitchExecMulticonnectMode">
      <summary>(Value: 103)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_StepType_SwitchExecConnectionLifetime">
      <summary>(Value: 104)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_StepType_SwitchExecRoutesToDisconnect">
      <summary>(Value: 105)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_StepType_SwitchExecOperationOrder">
      <summary>(Value: 106)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_StepType_MutexNameOrRefExpr">
      <summary>(Value: 107)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_StepType_BatchSyncOption">
      <summary>(Value: 108)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_StepType_PreExpression">
      <summary>(Value: 109)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_StepType_PostExpression">
      <summary>(Value: 110)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_StepType_StatusExpression">
      <summary>(Value: 111)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_StepType_Precondition">
      <summary>(Value: 112)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_StepType_DefaultNameExpr">
      <summary>(Value: 113)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_StepType_DescriptionExpr">
      <summary>(Value: 114)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_StepType_MenuItemNameExpr">
      <summary>(Value: 115)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_StepType_IgnoreRTE">
      <summary>(Value: 116)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_StepType_RecordLoopIterationResults">
      <summary>(Value: 117)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_StepType_RecordResult">
      <summary>(Value: 118)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_StepType_StepFailCausesSequenceFail">
      <summary>(Value: 119)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_StepType_SwitchExecEnabled">
      <summary>(Value: 120)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_StepType_SwitchExecWaitForDebounce">
      <summary>(Value: 121)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_StepType_UseMutex">
      <summary>(Value: 122)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_Sequence_DisableResults">
      <summary>(Value: 128)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_LabVIEWModule_ClassPath">
      <summary>(Value: 129)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_LabVIEWModule_CallName">
      <summary>(Value: 130)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_Step_ResultRecordingOption">
      <summary>(Value: 131)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_StepType_ResultRecordingOption">
      <summary>(Value: 132)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_LabVIEWModule_NodeLibraryName">
      <summary>(Value: 133)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_LabVIEWNXGModule_ProjectPath">
      <summary>(Value: 134)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_LabVIEWNXGModule_GllPath">
      <summary>(Value: 135)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_LabVIEWNXGModule_QualifiedName">
      <summary>(Value: 136)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_LabVIEWNXGParameter_ParameterLabel">
      <summary>(Value: 137)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_LabVIEWNXGParameter_ValueExpression">
      <summary>(Value: 138)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_LabVIEWNXGModule_ModuleQualifiedName">
      <summary>(Value: 139)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_LabVIEWNXGParameter_Type">
      <summary>(Value: 140)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_LabVIEWModule_OverrideSourceProjectPath">
      <summary>(Value: 141)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_LabVIEWModule_OverrideSourceVIPath">
      <summary>(Value: 142)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_LabVIEWModule_OverrideSourceClassPath">
      <summary>(Value: 143)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_PythonModule_PythonVersion">
      <summary>(Value: 144)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_PythonModule_ModulePath">
      <summary>(Value: 145)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_PythonModule_PythonVirtualEnvironmentPath">
      <summary>(Value: 146)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_PythonModule_InterpreterReferenceExpr">
      <summary>(Value: 147)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_PythonModule_ClassName">
      <summary>(Value: 148)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_PythonModule_FunctionOrAttributeName">
      <summary>(Value: 149)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_PythonModule_ClassInstanceLocationExpr">
      <summary>(Value: 150)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_PythonParameter_ValueExpr">
      <summary>(Value: 151)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_LabVIEWModule_OverrideBinaryProjectPath">
      <summary>(Value: 152)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_LabVIEWModule_OverrideBinaryVIPath">
      <summary>(Value: 153)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.APILocations.APILocation_LabVIEWModule_OverrideBinaryClassPath">
      <summary>(Value: 154)</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.Reports">
      <summary>This class is a collection of Report objects.</summary>
      <seealso cref="Report" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Reports.Item(System.Object)">
      <summary>Returns a reference to an item at the specified index in the collection.</summary>
      <param name="index">Specifies the zero-based index of the <c>Report</c> object to retrieve.</param>
      <seealso cref="Report" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Reports.Count">
      <summary>Returns the number of items in the collection.</summary>
      <seealso cref="Report" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Reports.Insert(System.Int32)">
      <summary>Adds a new item to the collection and returns the <c>Report</c> object.</summary>
      <param name="index">Specifies the zero-based index of the location in the collection where you want to insert the <c>Report</c> object. Pass <c>-1</c> to insert the <c>Report</c> object at the end of the collection.</param>
      <seealso cref="Report" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Reports.Remove(System.Int32)">
      <summary>Removes the specified item from this collection and returns the <c>Report</c> object. The collection must always contain at least one <c>Report</c> object. If the collection contains only one <c>Report</c> object, the Report is not removed until another Report is added to the collection.</summary>
      <param name="index">Specifies the zero-based index of the <c>Report</c> object you want to remove.</param>
      <seealso cref="Report" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Reports.Clear">
      <summary>Removes all items from the collection. The collection must contain at least one <c>Report</c> object because this method also creates and adds a new empty <c>Report</c> object to the collection.</summary>
      <seealso cref="Report" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Reports.InsertExisting(NationalInstruments.TestStand.Interop.API.Report,System.Int32)">
      <summary>Inserts back into the collection a report you previously removed using Reports.Remove. The report must not be in another Reports collection.</summary>
      <param name="val">Specifies an existing <c>Report</c> object to insert into the collection.</param>
      <param name="index">Specifies the zero-based index of the location in the collection where you want to insert the <c>Report</c> object. Pass <c>-1</c> to insert the <c>Report</c> object at the end of the collection.</param>
      <seealso cref="Report" />
      <seealso cref="Reports" />
      <seealso cref="Reports.Remove" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Reports.Replace(NationalInstruments.TestStand.Interop.API.Report,NationalInstruments.TestStand.Interop.API.Report)">
      <summary>Replaces the Report object you specify in the collection and returns the <c>Report</c> object.</summary>
      <param name="oldVal">Specifies the <c>Report</c> object in the collection to replace. If the <c>Report</c> object you specify is the active report, the replacement <c>Report</c> object becomes the active report.</param>
      <param name="newVal">Specifies the replacement <c>Report</c> object. Pass <c>NULL</c> to create a new empty replacement <c>Report</c> object.</param>
      <seealso cref="Report" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Reports.ActiveReport">
      <summary>Specifies the active report in the collection. The TestStand ReportView control displays the currently active report.</summary>
      <seealso cref="Report" />
      <seealso cref="&quot;ReportView&quot;javascript:UILink('/RefTopics/ReportView.htm')" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.ResultLogger">
      <summary><c>ResultLogger</c> objects write TestStand results to a file. Use a ResultLog object to read the results from the file.</summary>
      <seealso cref="ResultLog" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.ResultLogger.Open(System.String,System.Boolean,System.Boolean)">
      <summary>Opens the results file you specify for writing and creates the file if it does not exist.</summary>
      <param name="path">Specifies the absolute path of the file in which to store results.</param>
      <param name="isOnTheFly">Specifies to log results on-the-fly by calling the ResultLogger.LogOnTheFlyStepResults method. If you pass <c>True</c>, TestStand does not log results attached as subproperties of the uutResult parameter of the ResultLogger.LogPostUUT method because TestStand logs those values when you call the <c>ResultLogger.LogOnTheFlyStepResults</c> method. </param>
      <param name="logInSeparateThread">Specifies to write the results to the file from a separate thread. If you pass <c>True</c>, the ResultLogger.LogBatchDone, ResultLogger.LogBatchStart, ResultLogger.LogBegin, ResultLogger.LogEnd, ResultLogger.LogOnTheFlyStepResults, ResultLogger.LogPostBatch, ResultLogger.LogPostUUT, ResultLogger.LogPreBatch, ResultLogger.LogPreUUT, ResultLogger.LogUUTDone, and ResultLogger.LogUUTStart methods return immediately after queuing data to the writing thread.</param>
      <seealso cref="ResultLogger.LogBatchDone" />
      <seealso cref="ResultLogger.LogBatchStart" />
      <seealso cref="ResultLogger.LogBegin" />
      <seealso cref="ResultLogger.LogEnd" />
      <seealso cref="ResultLogger.LogOnTheFlyStepResults" />
      <seealso cref="ResultLogger.LogPostBatch" />
      <seealso cref="ResultLogger.LogPostUUT" />
      <seealso cref="ResultLogger.LogPreBatch" />
      <seealso cref="ResultLogger.LogPreUUT" />
      <seealso cref="ResultLogger.LogUUTDone" />
      <seealso cref="ResultLogger.LogUUTStart" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.ResultLogger.Close">
      <summary>Completes all writing to the TestStand results (<c>.tsr</c>) file and closes the file.</summary>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.ResultLogger.LogBegin(NationalInstruments.TestStand.Interop.API.Thread,NationalInstruments.TestStand.Interop.API.Thread,NationalInstruments.TestStand.Interop.API.PropertyObject,NationalInstruments.TestStand.Interop.API.PropertyObject,System.String,System.Int32,System.Int32)">
      <summary>Logs parameters to the Model Plugin - Begin entry point.</summary>
      <param name="thread">Specifies the process model controller or test socket thread that invokes this method. </param>
      <param name="parentThread">Specifies the parent controller thread of the test socket thread. Pass <c>NULL</c> if no such thread exists.</param>
      <param name="modelThreadType">Pass an instance of an <c>NI_ModelThreadType</c> type that describes the thread parameter.</param>
      <param name="modelData">Specifies the process model-specific data. At a minimum, this parameter must be a container with a field named <c>ModelType</c> using the <c>NI_ModelType</c> type. For controller threads, this parameter must also contain a field named <c>TestSockets</c> using a container array type, where each element in the array contains a field named <c>MainSequenceResults</c> using an object reference type.</param>
      <param name="processModelClientPath">Specifies the absolute path of the process model client file. Pass an empty string if no such file exists.</param>
      <param name="numberOfSockets">Specifies the number of test sockets in the execution.</param>
      <param name="socketIndex">Specifies the test socket index for the thread parameter.</param>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.ResultLogger.LogPreBatch(NationalInstruments.TestStand.Interop.API.Thread,NationalInstruments.TestStand.Interop.API.PropertyObject,NationalInstruments.TestStand.Interop.API.PropertyObject,System.String,NationalInstruments.TestStand.Interop.API.PropertyObject,NationalInstruments.TestStand.Interop.API.PropertyObject,NationalInstruments.TestStand.Interop.API.PropertyObject,System.Boolean)">
      <summary>Logs parameters to the Model Plugin - Pre Batch entry point.</summary>
      <param name="thread">Specifies the process model controller or test socket thread that invokes this method.</param>
      <param name="modelThreadType">Pass an instance of an <c>NI_ModelThreadType</c> type that describes the thread parameter.</param>
      <param name="modelData">Specifies the process model-specific data. At a minimum, this parameter must be a container with a field named <c>ModelType</c> using the <c>NI_ModelType</c> type. For controller threads, this parameter must also contain a field named <c>TestSockets</c> using a container array type, where each element in the array contains a field named <c>MainSequenceResults</c> using an object reference type.</param>
      <param name="processModelClientPath">Pass the absolute path of the process model client file or an empty string if none exists.</param>
      <param name="startDate">Specifies an instance of the DateDetails custom data type that indicates the date on which the batch test began.</param>
      <param name="startTime">Specifies an instance of the TimeDetails custom data type that indicates the time at which the batch test began.</param>
      <param name="uut">Specifies the container that describes the batch.</param>
      <param name="continueTesting">Specifies whether testing continues to the next batch.
</param>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.ResultLogger.LogBatchStart(NationalInstruments.TestStand.Interop.API.Thread,NationalInstruments.TestStand.Interop.API.PropertyObject,NationalInstruments.TestStand.Interop.API.PropertyObject,System.String,NationalInstruments.TestStand.Interop.API.PropertyObject,NationalInstruments.TestStand.Interop.API.PropertyObject,NationalInstruments.TestStand.Interop.API.PropertyObject)">
      <summary>Logs parameters to the Model Plugin - Batch Start entry point.</summary>
      <remarks>Model Plugin - Batch Start</remarks>
      <param name="thread">Specifies the process model controller or test socket thread that invokes this method. </param>
      <param name="modelThreadType">Pass an instance of an <c>NI_ModelThreadType</c> type that describes the thread parameter.</param>
      <param name="modelData">Specifies the process model-specific data. At a minimum, this parameter must be a container with a field named <c>ModelType</c> using the <c>NI_ModelType</c> type. For controller threads, this parameter must also contain a field named <c>TestSockets</c> using a container array type, where each element in the array contains a field named <c>MainSequenceResults</c> using an object reference type.</param>
      <param name="processModelClientPath">Specifies the absolute path of the process model client file. Pass an empty string if no such file exists.</param>
      <param name="startDate">Specifies an instance of the DateDetails custom data type that indicates the date on which the batch test began.</param>
      <param name="startTime">Specifies an instance of the TimeDetails custom data type that indicates the time at which the batch test began.</param>
      <param name="uut">Specifies the container that describes the batch.</param>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.ResultLogger.LogPreUUT(NationalInstruments.TestStand.Interop.API.Thread,NationalInstruments.TestStand.Interop.API.PropertyObject,NationalInstruments.TestStand.Interop.API.PropertyObject,System.String,NationalInstruments.TestStand.Interop.API.PropertyObject,NationalInstruments.TestStand.Interop.API.PropertyObject,NationalInstruments.TestStand.Interop.API.PropertyObject,System.Boolean)">
      <summary>Logs parameters to the Model Plugin - Pre UUT entry point.</summary>
      <param name="thread">Specifies the process model controller or test socket thread that invokes this method.</param>
      <param name="modelThreadType">Pass an instance of an <c>NI_ModelThreadType</c> type that describes the thread parameter.</param>
      <param name="modelData">Specifies the process model-specific data. At a minimum, this parameter must be a container with a field named <c>ModelType</c> using the <c>NI_ModelType</c> type. For controller threads, this parameter must also contain a field named <c>TestSockets</c> using a container array type, where each element in the array contains a field named <c>MainSequenceResults</c> using an object reference type.</param>
      <param name="processModelClientPath">Specifies the absolute path of the process model client file. Pass an empty string if no such file exists.</param>
      <param name="startDate">Specifies an instance of the DateDetails custom data type that indicates the date on which the UUT test began.</param>
      <param name="startTime">Specifies an instance of the TimeDetails custom data type that indicates the time at which the UUT test began.</param>
      <param name="uut">Specifies the container that describes the UUT.</param>
      <param name="continueTesting">Specifies whether testing continues to the next UUT.</param>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.ResultLogger.LogUUTStart(NationalInstruments.TestStand.Interop.API.Thread,NationalInstruments.TestStand.Interop.API.PropertyObject,NationalInstruments.TestStand.Interop.API.PropertyObject,System.String,NationalInstruments.TestStand.Interop.API.PropertyObject,NationalInstruments.TestStand.Interop.API.PropertyObject,NationalInstruments.TestStand.Interop.API.PropertyObject)">
      <summary>Logs parameters to the Model Plugin - UUT Start entry point.</summary>
      <param name="thread">Specifies the process model controller or test socket thread that invokes this method.</param>
      <param name="modelThreadType">Pass an instance of an <c>NI_ModelThreadType</c> type that describes the thread parameter.</param>
      <param name="modelData">Specifies the process model-specific data. At a minimum, this parameter must be a container with a field named <c>ModelType</c> using the <c>NI_ModelType</c> type. For controller threads, this parameter must also contain a field named <c>TestSockets</c> using a container array type, where each element in the array contains a field named <c>MainSequenceResults</c> using an object reference type.</param>
      <param name="processModelClientPath">Specifies the absolute path of the process model client file. Pass an empty string if no such file exists.</param>
      <param name="startDate">Specifies an instance of the DateDetails custom data type that indicates the date on which the UUT test began.</param>
      <param name="startTime">Specifies an instance of the TimeDetails custom data type that indicates the time at which the UUT test began.</param>
      <param name="uut">Specifies the container that describes the UUT.</param>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.ResultLogger.LogOnTheFlyStepResults(NationalInstruments.TestStand.Interop.API.Thread,NationalInstruments.TestStand.Interop.API.PropertyObject,NationalInstruments.TestStand.Interop.API.PropertyObject,NationalInstruments.TestStand.Interop.API.PropertyObject,NationalInstruments.TestStand.Interop.API.PropertyObject,NationalInstruments.TestStand.Interop.API.PropertyObject)">
      <summary>Logs parameters to the Model Plugin - OnTheFly Step Results entry point.</summary>
      <param name="thread">Specifies the test socket thread that invokes this method.</param>
      <param name="uut">Specifies the container that describes the UUT.</param>
      <param name="steps">Pass the Steps parameter TestStand passed to the PostResults callback.</param>
      <param name="results">Pass the Results parameter TestStand passed to the PostResults callback.</param>
      <param name="callbackNames">Pass the CallbackNames parameter TestStand passed to the PostResults callback.</param>
      <param name="parentIds">Pass the ParentIds parameter TestStand passed to the PostResults callback.</param>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.ResultLogger.LogUUTDone(NationalInstruments.TestStand.Interop.API.Thread,NationalInstruments.TestStand.Interop.API.PropertyObject,NationalInstruments.TestStand.Interop.API.PropertyObject,System.String,NationalInstruments.TestStand.Interop.API.PropertyObject)">
      <summary>Logs parameters to the Model Plugin - UUT Done entry point.</summary>
      <remarks>Model Plugin - UUT Done</remarks>
      <param name="thread">Specifies the process model controller or test socket thread that invokes this method.</param>
      <param name="modelData">Specifies the process model-specific data. At a minimum, this parameter must be a container with a field named <c>ModelType</c> using the <c>NI_ModelType</c> type. For controller threads, this parameter must also contain a field named <c>TestSockets</c> using a container array type, where each element in the array contains a field named <c>MainSequenceResults</c> using an object reference type.</param>
      <param name="uut">Specifies the container that describes the UUT.</param>
      <param name="uutStatus">Specifies the result status for the UUT.</param>
      <param name="uutResult">Pass the result of the sequence call that invoked the <c>MainSequence</c> in the client sequence file.</param>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.ResultLogger.LogPostUUT(NationalInstruments.TestStand.Interop.API.Thread,NationalInstruments.TestStand.Interop.API.PropertyObject,NationalInstruments.TestStand.Interop.API.PropertyObject,System.String)">
      <summary>Logs parameters to the Model Plugin - Post UUT entry point.</summary>
      <remarks>Model Plugin - Post UUT</remarks>
      <param name="thread">Specifies the process model controller or test socket thread that invokes this method.</param>
      <param name="modelData">Specifies the process model-specific data. At a minimum, this parameter must be a container with a field named <c>ModelType</c> using the <c>NI_ModelType</c> type. For controller threads, this parameter must also contain a field named <c>TestSockets</c> using a container array type, where each element in the array contains a field named <c>MainSequenceResults</c> using an object reference type.</param>
      <param name="uut">Specifies the container that describes the UUT.</param>
      <param name="uutStatus">Specifies the result status for the UUT.</param>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.ResultLogger.LogBatchDone(NationalInstruments.TestStand.Interop.API.Thread,NationalInstruments.TestStand.Interop.API.PropertyObject,NationalInstruments.TestStand.Interop.API.PropertyObject,System.String)">
      <summary>Logs parameters to the Model Plugin - Batch Done entry point.</summary>
      <param name="thread">Specifies the process model controller or test socket thread that invokes this method. </param>
      <param name="modelData">Specifies the process model-specific data. At a minimum, this parameter must be a container with a field named <c>ModelType</c> using the <c>NI_ModelType</c> type. For controller threads, this parameter must also contain a field named <c>TestSockets</c> using a container array type, where each element in the array contains a field named <c>MainSequenceResults</c> using an object reference type.</param>
      <param name="uut">Specifies the container that describes the UUT.</param>
      <param name="uutStatus">Specifies the result status for the UUT.</param>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.ResultLogger.LogPostBatch(NationalInstruments.TestStand.Interop.API.Thread,NationalInstruments.TestStand.Interop.API.PropertyObject,NationalInstruments.TestStand.Interop.API.PropertyObject,System.String)">
      <summary>Logs parameters to the Model Plugin - Post Batch entry point.</summary>
      <remarks>Model Plugin - Post Batch</remarks>
      <param name="thread">Specifies the process model controller or test socket thread that invokes this method. </param>
      <param name="modelData">Specifies the process model-specific data. At a minimum, this parameter must be a container with a field named <c>ModelType</c> using the <c>NI_ModelType</c> type. For controller threads, this parameter must also contain a field named <c>TestSockets</c> using a container array type, where each element in the array contains a field named <c>MainSequenceResults</c> using an object reference type.</param>
      <param name="uut">Specifies the container that describes the UUT.</param>
      <param name="uutStatus">Specifies the result status for the UUT.</param>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.ResultLogger.LogEnd(NationalInstruments.TestStand.Interop.API.Thread,NationalInstruments.TestStand.Interop.API.PropertyObject)">
      <summary>Logs parameters to the Model Plugin - End entry point.</summary>
      <remarks>Model Plugin - End</remarks>
      <param name="thread">Specifies the process model controller or test socket thread that invokes this method. </param>
      <param name="modelData">Specifies the process model-specific data. At a minimum, this parameter must be a container with a field named <c>ModelType</c> using the <c>NI_ModelType</c> type. For controller threads, this parameter must also contain a field named <c>TestSockets</c> using a container array type, where each element in the array contains a field named <c>MainSequenceResults</c> using an object reference type.</param>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.ResultLogger.Path">
      <summary>Specifies the name of the TestStand results (<c>.tsr</c>) file on disk. You can change the path while logging to rename the file to best describe the contents of the file.</summary>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.ResultLogger.ContinueInNewFile(System.String)">
      <summary>Completes writing to the current TestStand results (<c>.tsr</c>) file, closes the file, and then opens a new file for future writing.</summary>
      <remarks>If a Begin record does not have a corresponding End record, this method creates an End record in the old file and copies the Begin record to the new file. This method deletes any records for in-progress UUTs or batches from the old file and copies the records to the new file.</remarks>
      <param name="path">Specifies the path of the new file.</param>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.ResultLogger.Flush">
      <summary>Completes all pending writes to the TestStand results (<c>.tsr</c>) file before returning, including writes queued to the writing thread if you enabled the logInSeparateThread parameter of the ResultLogger.Open method.</summary>
      <seealso cref="ResultLogger.Open" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.ResultLogger.DeferrableRename(System.String)">
      <summary>Calling this method is similar to assigning a new value to the ResultLogger.Path property. However, when you use this method, the <c>ResultLogger</c> object does not update the path property and execution continues if renaming the underlying file fails, such as in the case of remote file systems that do not support the rename operation. If the initial renaming operation fails, the <c>ResultLogger</c> object defers updating the path property. The <c>ResultLogger</c> object updates the path property and the name of the file on disk when the <c>ResultLogger</c> object closes or the ResultLogger.ContinueInNewFile method is invoked. If at this point the rename operation remains impossible, the <c>ResultLogger</c> object simulates renaming the file by copying the file to the new path and deleting the existing file.
While a deferred renaming operation is pending, if the value of the <c>ResultLogger.Path</c> property changes or an additional call to the <c>ResultLogger.DeferrableRename</c> method occurs, the <c>ResultLogger</c> object cancels any previously deferred renaming operation.</summary>
      <remarks>National Instruments recommends using the <c>ResultLogger.Path</c> property directly instead of the <c>ResultLogger.DeferrableRename</c> method whenever possible. The <c>ResultLogger.DeferrableRename</c> method is generally useful only in situations in which you repeatedly rename a single file to indicate status. For example, the default offline results generator process model plug-in uses the <c>ResultLogger.DeferrableRename</c> method to update the range of UUT serial numbers stored in the TestStand results (<c>.tsr</c>) file as UUTs execute.</remarks>
      <returns>A return value of <c>True</c> indicates that the rename operation succeeded and that the <c>ResultLogger</c> object updated the corresponding path property and renamed the TestStand results (<c>.tsr</c>) file on disk. A return value of <c>False</c> indicates that the rename operation failed and that the <c>ResultLogger</c> object did not update the corresponding path property and deferred renaming the file.</returns>
      <param name="path">Specifies the absolute path to use to rename the TestStand results (<c>.tsr</c>) file, such as <c>C:\OfflineResults\MyResults.tsr</c>.</param>
      <seealso cref="ResultLogger.Close" />
      <seealso cref="ResultLogger.ContinueInNewFile" />
      <seealso cref="ResultLogger.Path" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.ResultLogger.RecordFilesWritten">
      <summary>Specifies to store the paths of all offline results (<c>.tsr</c>) files when TestStand completes writing the file. The default value is <c>False</c>, which specifies to not record the filepaths. When this property is <c>True</c>, the internal record of completed files grows without bound unless you periodically pass <c>True</c> to the ResultLogger.GetFilesWritten method to clear the internal record.</summary>
      <remarks>Changing the value of the <c>ResultLogger.RecordFilesWritten</c> property from <c>True</c> to <c>False</c> only prevents TestStand from recording additional completed files and does not clear the internal record of files already completed. Call the <c>ResultLogger.GetFilesWritten</c> method to obtain or clear the list of complete offline results files. 
You can also modify the PreUUTLoop callback to record completed files. </remarks>
      <seealso cref="ResultLogger.GetFilesWritten" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.ResultLogger.GetFilesWritten(System.Boolean)">
      <summary>Returns the paths of all the completed offline results (<c>.tsr</c>) files TestStand recorded. You can also use this method to clear the internal record of completed paths.</summary>
      <param name="clear">Specifies to clear the internal record of completed <c>.tsr</c> files. When the clear parameter is <c>True</c>, subsequent calls to the <c>ResultLogger.GetFilesWritten</c> method return only files completed since the most recent call to the method. When the clear parameter is <c>False</c>, TestStand does not clear the internal record of completed <c>.tsr</c> files and subsequent calls to the <c>ResultLogger.GetFilesWritten</c> method return files returned from previous calls to the method and any files completed since the most recent call to the method.</param>
      <seealso cref="ResultLogger.RecordFilesWritten" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.ResultLog">
      <summary><c>ResultLog</c> objects read TestStand results from a file that a ResultLogger object creates.</summary>
      <seealso cref="ResultLogger" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.ResultLog.SimulateOnTheFly">
      <summary><div class="JG_approved">This property is reserved for internal use. Do not access it.</div></summary>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.ResultLog.Open(System.String)">
      <summary>Opens the results file for reading.</summary>
      <param name="path">Specifies the path of the TestStand results (<c>.tsr</c>) file to open.</param>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.ResultLog.Close">
      <summary>Closes the results file.</summary>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.ResultLog.ReadNextRecord(NationalInstruments.TestStand.Interop.API.ResultLogRecordTypes@,System.Int32@,System.Int32@,System.Object[])">
      <summary>Reads one record from the TestStand results (<c>.tsr</c>) file. Returns <c>False</c> if no more records exist.</summary>
      <param name="resultLogRecordType">Returns the type of record read.</param>
      <param name="executionId">Returns the ID of the execution that logged the record.</param>
      <param name="threadId">Returns the ID of the thread that logged the record.</param>
      <param name="objects">Returns the objects logged to the record.</param>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.ResultLog.SetReportPaths(NationalInstruments.TestStand.Interop.API.PropertyObject)">
      <summary>Stores an array of file paths. TestStand writes the file paths to a file with the same name as the <c>ResultLog</c> file with the addition of a <c>.reportlist</c> suffix. Use this method to record the paths of reports that are created from processing a <c>ResultLog</c> file.</summary>
      <param name="pathStringArray">Specifies a property object array of strings that contains report paths.</param>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.ResultLog.GetReportPaths">
      <summary>Returns the array of file paths the ResultLog.SetReportPaths method stores. If no paths have been stored, the method returns an empty array.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.ResultLog.OnTheFly">
      <summary>Returns a value that indicates whether the results file contains results stored on-the-fly in <c>ResultLogRecordType_OnTheFlyStepResults</c> records or if the results are stored as a subproperty tree under the <c>uut</c> result in <c>ResultLogRecordType_PostUUT</c> records.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.ResultLog.Path">
      <summary>Returns the absolute path of the results file.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.ResultLog.ClosedWhenWritten">
      <summary>Returns <c>True</c> if the ResultLogger.Close method was called when the file was written. A <c>False</c> value indicates that the writing process was aborted and that the file might be incomplete or corrupt.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.ResultLog.UniqueId">
      <summary>Returns a string that is globally unique to the result log file. Two result log files can return the same unique ID only if one file is a copy of the other. This property returns an empty string if you access it before a successful call to the ResultLog.Open method.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.ResultLog.SecondsAtStartIn1970UniversalCoordinatedTime">
      <summary>Returns the value of the Engine.SecondsAtStartIn1970UniversalCoordinatedTime property for the engine that created the TestStand results <c>.tsr</c> file. If the log file contains any custom properties that contain time values relative to the time the engine that created the <c>.tsr</c> started, you can use this value to adjust the values to be relative to the time the current engine started. The <c>Seconds</c> expression function and the Engine.SecondsSinceStart property return times relative to engine startup.</summary>
      <remarks>The ResultLog.ReadNextRecord method uses this property to automatically adjust the values of <c>TS.StartTime</c> result subproperties to be relative to the start time of the current engine.</remarks>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.ResultLog.FileSavedWithFeaturesToggled">
      <summary></summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.UndoItem2">
      <summary>The <c>UndoItem2</c> class inherits from the UndoItem class and supports all the <c>UndoItem</c> properties and methods. An object that supports <c>UndoItem</c> might not necessarily support <c>UndoItem2</c>.
You can also use the <c>UndoItem2</c> interface to make an edit to a TestStand file undoable if the UndoItemCreator does not provide enough functionality to undo an edit. To do this, create a COM object that implements the <c>UndoItem2</c> interface and send an instance of the object to the sequence editor using a <c>UIMsg_PushUndoItem</c> UI Message.
<para>Note: LabVIEW and LabWindows/CVI do not support implementing custom objects for this interface.</para></summary>
      <seealso cref="UndoItem.EditedFile" />
      <seealso cref="UIMessage.ActiveXData" />
      <seealso cref="UIMessageCodes" />
      <seealso cref="UndoItemCreator" />
      <seealso cref="UndoItem" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.UndoItem2.TopObjects">
      <summary>Returns the objects that, when combined with the corresponding items in the UndoItem2.LookupStrings property, specify the objects the UndoItem.Undo and UndoItem.Redo methods modify.</summary>
      <remarks>Calling the UndoItem.EditedObjects property returns all objects that <c>UndoItem2.TopObjects[i].GetPropertyObject(UndoItem2.LookupStrings[i])</c> references. If one of the objects does not exist, the <c>UndoItem.EditedObjects</c> property fails and returns an error that explains that the property the lookupstring parameter specifies does not exist. </remarks>
      <seealso cref="UndoItem.EditedObjects" />
      <seealso cref="UndoItem.Redo" />
      <seealso cref="UndoItem.Undo" />
      <seealso cref="UndoItem2.LookupStrings" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.UndoItem2.LookupStrings">
      <summary>Returns the lookup strings that, when combined with the corresponding items in the UndoItem2.TopObjects property, specify the objects the UndoItem.Undo and UndoItem.Redo methods modify.</summary>
      <remarks>Calling the UndoItem.EditedObjects property returns all objects that <c>UndoItem2.TopObjects[i].GetPropertyObject(UndoItem2.LookupStrings[i])</c> references. If one of the objects does not exist, the <c>UndoItem.EditedObjects</c> property fails and returns an error that explains that the property the lookupstring parameter specifies does not exist. </remarks>
      <seealso cref="UndoItem.EditedObjects" />
      <seealso cref="UndoItem.Redo" />
      <seealso cref="UndoItem.Undo" />
      <seealso cref="UndoItem2.TopObjects" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.ThreadTerminationOptions">
      <summary>Use these options to determine how a thread responds when its execution terminates.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ThreadTerminationOptions.ThreadTerminationOption_Normal">
      <summary>(Value: 0) Specifies that a thread stops when its execution terminates.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ThreadTerminationOptions.ThreadTerminationOption_Prompt">
      <summary>(Value: 1) Specifies that a thread does not stop when its execution terminates unless you set the Execution.OverrideNonTerminatableThreads property. If an execution attempts to terminate and the execution is running only threads that specify this option, the execution sends the UIMsg_NonTerminatableThreadsArePreventingTermination event. You can use this value to protect a process model worker thread so the thread does not stop if the user terminates the current UUT or batch.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ThreadTerminationOptions.ThreadTerminationOption_Never">
      <summary>(Value: 2) Specifies that a thread does not stop when its execution terminates. The thread must stop before its execution can end. Use this value to protect a thread so the thread does not stop and can complete its work even if its execution attempts to terminate.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.FailureActions">
      <summary>Use these options to specify whether execution proceeds to the Cleanup step group when a step sets the status property of the sequence to <c>Failed</c>.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.FailureActions.FailureAction_None">
      <summary>(Value: 0) Specifies that execution flow does not proceed to the Cleanup step group if the step sets the status property of the sequence to <c>Failed</c>.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.FailureActions.FailureAction_GotoCleanup">
      <summary>(Value: 1) Specifies that execution flow proceeds to the Cleanup step group if the step sets the status property of the sequence to <c>Failed</c>.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.FailureActions.FailureAction_UseStationOption">
      <summary>(Value: 2) Specifies that execution flow proceeds to the Cleanup step group if the step sets the status property of the sequence to <c>Failed</c> and the value of the  StationOptions.AlwaysGotoCleanupOnFailure property is <c>True</c>.</summary>
      <seealso cref="StationOptions.AlwaysGotoCleanupOnFailure" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.ResultRecordingOptions">
      <summary>Use these options to specify whether a step records a result.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ResultRecordingOptions.ResultRecordingOption_Disabled">
      <summary>(Value: 0) Specifies that the step does not record results.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ResultRecordingOptions.ResultRecordingOption_Enabled">
      <summary>(Value: 1) Specifies that the step records results unless the Sequence.DisableResults or StationOptions.DisableResults property is <c>True</c>.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ResultRecordingOptions.ResultRecordingOption_EnabledAndOverrideSequenceSetting">
      <summary>(Value: 2) Specifies that the step records results unless the StationOptions.DisableResults property is <c>True</c>.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.ResultLogRecordTypes">
      <summary>Use these options with the ResultLogger methods.</summary>
      <seealso cref="ResultLogger" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ResultLogRecordTypes.ResultLogRecordType_BatchStart">
      <summary>(Value: 3) Indicates a record the ResultLogger.LogBatchStart method creates. The record contains the following objects:<para><para>&#160;&#160;&#160;&#160;* <c>[0] ModelThreadType (NI_ModelThreadType)</c></para><para>&#160;&#160;&#160;&#160;* <c>[1] ModelData (container)</c></para><para>&#160;&#160;&#160;&#160;* <c>[2] ProcessModelClientPath (Path)</c></para><para>&#160;&#160;&#160;&#160;* <c>[3] StartDate (DateDetails)</c></para><para>&#160;&#160;&#160;&#160;* <c>[4] StartTime (TimeDetails)</c></para><para>&#160;&#160;&#160;&#160;* <c>[5] UUT (container)</c></para></para></summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ResultLogRecordTypes.ResultLogRecordType_UUTStart">
      <summary>(Value: 5) Indicates a record the ResultLogger.LogUUTStart method creates. The record contains the following objects:<para><para>&#160;&#160;&#160;&#160;* <c>[0] ModelThreadType (NI_ModelThreadType)</c></para><para>&#160;&#160;&#160;&#160;* <c>[1] ModelData (container)</c></para><para>&#160;&#160;&#160;&#160;* <c>[2] ProcessModelClientPath (Path)</c></para><para>&#160;&#160;&#160;&#160;* <c>[3] StartDate (DateDetails)</c></para><para>&#160;&#160;&#160;&#160;* <c>[4] StartTime (TimeDetails)</c></para><para>&#160;&#160;&#160;&#160;* <c>[5] UUT (container)</c></para></para></summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ResultLogRecordTypes.ResultLogRecordType_UUTDone">
      <summary>(Value: 7) Indicates a record the ResultLogger.LogUUTDone method creates. The record contains the following objects:<para><para>&#160;&#160;&#160;&#160;* <c>[0] ModelData (container)</c></para><para>&#160;&#160;&#160;&#160;* <c>[1] UUT (container)</c></para><para>&#160;&#160;&#160;&#160;* <c>[2] UUTStatus (String)</c></para><para>&#160;&#160;&#160;&#160;* <c>[3] UUTResult (Result)</c></para></para></summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ResultLogRecordTypes.ResultLogRecordType_BatchDone">
      <summary>(Value: 9) Indicates a record the ResultLogger.LogBatchDone method creates. The record contains the following objects:<para><para>&#160;&#160;&#160;&#160;* <c>[0] ModelData (container)</c></para><para>&#160;&#160;&#160;&#160;* <c>[1] UUT (container)</c></para><para>&#160;&#160;&#160;&#160;* <c>[2] UUTStatus (String)</c></para><para>&#160;&#160;&#160;&#160;* <c>[3] UUTResult (Result)</c></para></para></summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ResultLogRecordTypes.ResultLogRecordType_NotARecordType">
      <summary>(Value: 0) Indicates a value that is not a valid <c>ResultLogRecordType</c>.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ResultLogRecordTypes.ResultLogRecordType_Begin">
      <summary>(Value: 1) Indicates a record the ResultLogger.LogBegin method creates. The record contains the following objects:<para><para>&#160;&#160;&#160;&#160;* <c>[0] ModelThreadType (NI_ModelThreadType)</c></para><para>&#160;&#160;&#160;&#160;* <c>[1] ModelData (container)</c></para><para>&#160;&#160;&#160;&#160;* <c>[2] ProcessModelClientPath (Path)</c></para><para>&#160;&#160;&#160;&#160;* <c>[3] NumberOfSockets (number)</c></para><para>&#160;&#160;&#160;&#160;* <c>[4] SocketIndex (number)</c></para><para>&#160;&#160;&#160;&#160;* <c>[5] ParentThreadId (number)</c></para><para>&#160;&#160;&#160;&#160;* <c>[6] ParentExecutionId (number)</c></para></para></summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ResultLogRecordTypes.ResultLogRecordType_End">
      <summary>(Value: 11) Indicates a record the ResultLogger.LogEnd method creates. The record contains the <c>[0] ModelData (container)</c> object.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ResultLogRecordTypes.ResultLogRecordType_PreUUT">
      <summary>(Value: 4) Indicates a record the ResultLogger.LogPreUUT method creates. The record contains the following objects:<para><para>&#160;&#160;&#160;&#160;* <c>[0] ModelThreadType (NI_ModelThreadType)</c></para><para>&#160;&#160;&#160;&#160;* <c>[1] ModelData (container)</c></para><para>&#160;&#160;&#160;&#160;* <c>[2] ProcessModelClientPath (Path)</c></para><para>&#160;&#160;&#160;&#160;* <c>[3] StartDate (DateDetails)</c></para><para>&#160;&#160;&#160;&#160;* <c>[4] StartTime (TimeDetails)</c></para><para>&#160;&#160;&#160;&#160;* <c>[5] UUT (container)</c></para><para>&#160;&#160;&#160;&#160;* <c>[6] continueTesting (Boolean output parameter)</c></para></para></summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ResultLogRecordTypes.ResultLogRecordType_PostUUT">
      <summary>(Value: 8) Indicates a report the ResultLogger.LogPostUUT method creates. The record contains the following objects:<para><para>&#160;&#160;&#160;&#160;* <c>[0] ModelData (container)</c></para><para>&#160;&#160;&#160;&#160;* <c>[1] UUT (container)</c></para><para>&#160;&#160;&#160;&#160;* <c>[2] UUTStatus (string)</c></para><para>&#160;&#160;&#160;&#160;* <c>[3] UUTResult (container)</c></para></para></summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ResultLogRecordTypes.ResultLogRecordType_OnTheFlyStepResults">
      <summary>(Value: 6) Indicates a record the ResultLogger.LogOnTheFlyStepResults method creates. The record contains the following objects:<para><para>&#160;&#160;&#160;&#160;* <c>[0] UUT (container)</c></para><para>&#160;&#160;&#160;&#160;* <c>[1] CallbackNames (string array)</c></para><para>&#160;&#160;&#160;&#160;* <c>[2] ParentIds (number array)</c></para><para>&#160;&#160;&#160;&#160;* <c>[3] Results(container)</c></para></para></summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ResultLogRecordTypes.ResultLogRecordType_Deleted">
      <summary>(Value: 12) Indicates a result that has been deleted from a TestStand results (<c>.tsr</c>) file.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ResultLogRecordTypes.ResultLogRecordType_PreBatch">
      <summary>(Value: 2) Indicates a record the ResultLogger.LogPreBatch method creates.  The record contains the following objects:<para><para>&#160;&#160;&#160;&#160;* <c>[0] ModelThreadType (NI_ModelThreadType)</c></para><para>&#160;&#160;&#160;&#160;* <c>[1] ModelData (container)</c></para><para>&#160;&#160;&#160;&#160;* <c>[2] ProcessModelClientPath (Path)</c></para><para>&#160;&#160;&#160;&#160;* <c>[3] StartDate (DateDetails)</c></para><para>&#160;&#160;&#160;&#160;* <c>[4] StartTime (TimeDetails)</c></para><para>&#160;&#160;&#160;&#160;* <c>[5] UUT (container)</c></para><para>&#160;&#160;&#160;&#160;* <c>[6] continueTesting (Boolean output parameter)</c></para></para></summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ResultLogRecordTypes.ResultLogRecordType_PostBatch">
      <summary>(Value: 10) Indicates a record the ResultLogger.LogPostBatch method creates. The record contains the following objects:<para><para>&#160;&#160;&#160;&#160;* <c>[0] ModelData (container)</c></para><para>&#160;&#160;&#160;&#160;* <c>[1] UUT (container)</c></para><para>&#160;&#160;&#160;&#160;* <c>[2] UUTStatus (String)</c></para><para>&#160;&#160;&#160;&#160;* <c>[3] UUTResult (Result)</c></para></para></summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.VersionConstants">
      <summary></summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.VersionConstants.VersionConstant_MajorVersion">
      <summary>(Value: 21)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.VersionConstants.VersionConstant_MinorVersion">
      <summary>(Value: 1)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.VersionConstants.VersionConstant_RevisionVersion">
      <summary></summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.VersionConstants.VersionConstant_BuildVersion">
      <summary></summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.VersionConstants.VersionConstant_Version">
      <summary>(Value: &quot;21.1&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.VersionConstants.VersionConstant_FullVersion">
      <summary>(Value: &quot;21.1.0.0&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.VersionConstants.VersionConstant_YearBasedVersion">
      <summary>(Value: &quot;2021&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.VersionConstants.VersionConstant_DisplayVersion">
      <summary>(Value: &quot;2021(21.1.0.0)&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.VersionConstants.VersionConstant_Copyright">
      <summary></summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.VersionConstants.VersionConstant_Product">
      <summary>(Value: &quot;TestStand 2021 SP1&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.VersionConstants.VersionConstant_PatchVersion">
      <summary></summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.PostResultsCallbackOptions">
      <summary>Use these options to modify when TestStand invokes PostResults callbacks.</summary>
      <seealso cref="Execution.MaximumResultsPerPostResultsCallback" />
      <seealso cref="Execution.PostResultsCallback_PostFlushMask" />
      <seealso cref="Execution.PostResultsCallback_PreFlushMask" />
      <seealso cref="Execution.PostResultsCallbackInterval" />
      <seealso cref="Execution.PostResultsCallbackMask" />
      <seealso cref="Execution.PostResultsCallbackOptions" />
      <seealso cref="PostResultsCallbackMaskOptions" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PostResultsCallbackOptions.PostResultsCallbackOption_NoOptions">
      <summary>(Value: 0) Specifies no PostResults callback options.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PostResultsCallbackOptions.PostResultsCallbackOption_CallAfterProvisionalResult">
      <summary>(Value: 1) Overrides the options and specifies that TestStand calls the PostResults callback after collecting each provisional result.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.PostResultsCallbackMaskOptions">
      <summary>These constants represent the options you can use with the Execution.PostResultsCallbackMask, Execution.PostResultsCallback_PreFlushMask, and Execution.PostResultsCallback_PostFlushMask methods. Use the bitwise-OR operator to specify more than one option for a method.

</summary>
      <seealso cref="Execution.MaximumResultsPerPostResultsCallback" />
      <seealso cref="Execution.PostResultsCallback_PostFlushMask" />
      <seealso cref="Execution.PostResultsCallback_PreFlushMask" />
      <seealso cref="Execution.PostResultsCallbackInterval" />
      <seealso cref="Execution.PostResultsCallbackMask" />
      <seealso cref="Execution.PostResultsCallbackOptions" />
      <seealso cref="PostResultsCallbackOptions" />
      <seealso cref="&#xD;&#xA;" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PostResultsCallbackMaskOptions.PostResultsCallbackMaskOption_All">
      <summary>(Value: -1) Specifies to call PostResults callbacks with all accumulated results for all sequences except for SequenceFileLoad callback and SequenceFileUnload callback sequences.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PostResultsCallbackMaskOptions.PostResultsCallbackMaskOption_None">
      <summary>(Value: 0) Specifies not to call PostResults callbacks.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PostResultsCallbackMaskOptions.PostResultsCallbackMaskOption_PreStep">
      <summary>(Value: 1) Specifies to call PostResults callbacks with all accumulated results for all PreStep callback sequences.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PostResultsCallbackMaskOptions.PostResultsCallbackMaskOption_PostStep">
      <summary>(Value: 2) Specifies to call PostResults callbacks with all accumulated results for all PostStep callback sequences.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PostResultsCallbackMaskOptions.PostResultsCallbackMaskOption_PreInteractive">
      <summary>(Value: 4) Specifies to call PostResults callbacks with all accumulated results for all PreInteractive callback sequences.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PostResultsCallbackMaskOptions.PostResultsCallbackMaskOption_PostInteractive">
      <summary>(Value: 8) Specifies to call PostResults callbacks with all accumulated results for all PostInteractive callback sequences.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PostResultsCallbackMaskOptions.PostResultsCallbackMaskOption_PostResultListEntry">
      <summary>(Value: 16) Specifies to call PostResults callbacks with all accumulated results for all PostResultListEntry callback sequences.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PostResultsCallbackMaskOptions.PostResultsCallbackMaskOption_PostStepRuntimeError">
      <summary>(Value: 32) Specifies to call PostResults callbacks with all accumulated results for all PostStepRuntimeError callback sequences.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PostResultsCallbackMaskOptions.PostResultsCallbackMaskOption_PostStepFailure">
      <summary>(Value: 64) Specifies to call PostResults callbacks with all accumulated results for all PostStepFailure callback sequences.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PostResultsCallbackMaskOptions.PostResultsCallbackMaskOption_PostAction">
      <summary>(Value: 128) Specifies to call PostResults callbacks with all accumulated results for all PostAction callback sequences.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PostResultsCallbackMaskOptions.PostResultsCallbackMaskOption_SequenceCall">
      <summary>(Value: 256) Specifies to call PostResults callbacks with all accumulated results for all non-Engine callback sequences.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.ReadPropertyObjectFileOptions">
      <summary>These constants represent the options you can use with the Engine.ReadPropertyObjectFile method. Use the bitwise-OR operator to specify more than one option.</summary>
      <seealso cref="Engine.ReadPropertyObjectFile" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ReadPropertyObjectFileOptions.ReadPropertyObjectFileOption_None">
      <summary>(Value: 0x0) No options.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ReadPropertyObjectFileOptions.ReadPropertyObjectFileOption_TypesOnly">
      <summary>(Value: 0x2) Pass this option to read only the types for the specified file. The method does not read the main data object when you select this option.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.AdditionalResultKinds">
      <summary>Use these constants with the AdditionalResult.Kind property.</summary>
      <seealso cref="AdditionalResult.Kind" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.AdditionalResultKinds.AdditionalResultKind_Custom">
      <summary>(Value: 1) Specifies a custom additional result.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.AdditionalResultKinds.AdditionalResultKind_InParameter">
      <summary>(Value: 2) Specifies an additional result for the input value of a parameter.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.AdditionalResultKinds.AdditionalResultKind_OutParameter">
      <summary>(Value: 3) Specifies an additional result for the output value of a parameter.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.AdditionalResultKinds.AdditionalResultKind_Call">
      <summary>(Value: 4) Specifies an additional result for a .NET call.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.FileGlobalsScopeOptions">
      <summary>Use these constants with the SequenceFile.FileGlobalsScope property to specify the scope of the sequence file global variables.</summary>
      <seealso cref="SequenceFile.FileGlobalsScope" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.FileGlobalsScopeOptions.FileGlobalsScopeOption_SeparateForEachExecution">
      <summary>(Value: 0) Specifies that each execution that runs the sequence file creates a separate run-time copy of the global variables and initializes the variables to the default values. Threads within an execution share the run-time copy of the variables for the execution.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.FileGlobalsScopeOptions.FileGlobalsScopeOption_AllExecutionsShare">
      <summary>(Value: 1) Specifies that the first execution that runs the sequence file creates a run-time copy of the global variables and initializes the variables to the default values. Any other execution that runs the sequence file concurrently uses the same global variables. When the last execution that uses the sequence file global variables completes, TestStand discards the file global variables. A common use case for selecting this option might be when you want to share variables among multiple executions you start with the Batch or Parallel process model.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.SetTempFileDirectoryOptions">
      <summary>Use this enumeration with the Report.SetTempFileDirectoryEx method.</summary>
      <seealso cref="Report.SetTempFileDirectoryEx" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SetTempFileDirectoryOptions.SetTempFileDirectoryOption_Default">
      <summary>(Value: 0) Specifies the default option. When you use this value with the Report.SetTempFileDirectoryEx method, calling the Report.Load or Report.Save method modifies the directory path where TestStand saves the file the Report.GetTempFile method creates.
Using this value with the <c>Report.SetTempFileDirectoryEx</c> method results in the same behavior as using the Report.TempFileDirectory property to specify the directory path where TestStand saves the file the <c>Report.GetTempFile</c> method creates.</summary>
      <seealso cref="Report.GetTempFile" />
      <seealso cref="Report.Load" />
      <seealso cref="Report.Save" />
      <seealso cref="Report.SetTempFileDirectoryEx" />
      <seealso cref="Report.TempFileDirectory" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SetTempFileDirectoryOptions.SetTempFileDirectoryOption_NeverOverride">
      <summary>(Value: 1) Specifies to never override the directory path the <c>Report.SetTempFileDirectoryEx</c> method specifies when you call the <c>Report.Load</c> or <c>Report.Save</c> method. You can override the directory path by calling the <c>Report.SetTempFileDirectoryEx</c> method again.</summary>
      <seealso cref="Report.SetTempFileDirectoryEx" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.EngineEnvironment">
      <summary></summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.IEngineEnvironment">
      <summary></summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.EngineEnvironmentClass">
      <summary></summary>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngineEnvironment.ReadFile(System.String)">
      <summary></summary>
      <param name="path"></param>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineEnvironmentClass.ReadFile(System.String)">
      <summary></summary>
      <param name="path"></param>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngineEnvironment.WriteFile">
      <summary></summary>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineEnvironmentClass.WriteFile">
      <summary></summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngineEnvironment.EnvironmentPath">
      <summary></summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineEnvironmentClass.EnvironmentPath">
      <summary></summary>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngineEnvironment.GetTestStandPath(NationalInstruments.TestStand.Interop.API.TestStandPaths,System.Boolean)">
      <summary></summary>
      <param name="testStandPath"></param>
      <param name="resolveAbsolutePath"></param>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineEnvironmentClass.GetTestStandPath(NationalInstruments.TestStand.Interop.API.TestStandPaths,System.Boolean)">
      <summary></summary>
      <param name="testStandPath"></param>
      <param name="resolveAbsolutePath"></param>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngineEnvironment.SetTestStandPath(NationalInstruments.TestStand.Interop.API.TestStandPaths,System.String)">
      <summary></summary>
      <param name="testStandPath"></param>
      <param name="path"></param>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineEnvironmentClass.SetTestStandPath(NationalInstruments.TestStand.Interop.API.TestStandPaths,System.String)">
      <summary></summary>
      <param name="testStandPath"></param>
      <param name="path"></param>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.EngineInitializationSettings">
      <summary>Use the EngineInitializationSettings class to configure options that must be set prior to Engine construction.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.IEngineInitializationSettings">
      <summary>Use the EngineInitializationSettings class to configure options that must be set prior to Engine construction.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.EngineInitializationSettingsClass">
      <summary>Use the EngineInitializationSettings class to configure options that must be set prior to Engine construction.</summary>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngineInitializationSettings.SetEnvironmentPath(System.String)">
      <summary>Specify the environment configuration (.tsenv) file to use to initialize the TestStand engine.  Pass an empty string to specify the global environment.</summary>
      <remarks>Calling SetEnvironmentPath is unnecessary if you wish to run in the global environment. If no call to SetEnvironmentPath has been made prior to startup, the engine defaults to the global environment. You may call SetEnvironmentPath multiple times before creating the TestStand engine. Each call supersedes the prior calls.
SetEnvironmentPath throws an exception if you call it after the engine has already been created.</remarks>
      <param name="path">Specifies the absolute path of environment configuration (.tsenv) file from which to initialize the TestStand engine.</param>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineInitializationSettingsClass.SetEnvironmentPath(System.String)">
      <summary>Specify the environment configuration (.tsenv) file to use to initialize the TestStand engine.  Pass an empty string to specify the global environment.</summary>
      <remarks>Calling SetEnvironmentPath is unnecessary if you wish to run in the global environment. If no call to SetEnvironmentPath has been made prior to startup, the engine defaults to the global environment. You may call SetEnvironmentPath multiple times before creating the TestStand engine. Each call supersedes the prior calls.
SetEnvironmentPath throws an exception if you call it after the engine has already been created.</remarks>
      <param name="path">Specifies the absolute path of environment configuration (.tsenv) file from which to initialize the TestStand engine.</param>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngineInitializationSettings.CanInitializeEngine">
      <summary>Check whether it is possible to initialize the TestStand Engine.</summary>
      <remarks>It is not possible to initialize the TestStand engine after it has been constructed.</remarks>
      <returns>Returns <c>True</c> if it is still possible to initialize the TestStand engine, <c>False</c> otherwise.</returns>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineInitializationSettingsClass.CanInitializeEngine">
      <summary>Check whether it is possible to initialize the TestStand Engine.</summary>
      <remarks>It is not possible to initialize the TestStand engine after it has been constructed.</remarks>
      <returns>Returns <c>True</c> if it is still possible to initialize the TestStand engine, <c>False</c> otherwise.</returns>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngineInitializationSettings.SetInternalStartupOption(NationalInstruments.TestStand.Interop.API.InternalStartupOptions,System.Object)">
      <summary>Specifies the value for the internal startup option the option parameter specifies.</summary>
      <param name="option">Specifies the internal startup option the method sets.</param>
      <param name="newValue">Specifies the value of the internal startup option the option parameter specifies.</param>
      <seealso cref="Engine.SetInternalOption" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineInitializationSettingsClass.SetInternalStartupOption(NationalInstruments.TestStand.Interop.API.InternalStartupOptions,System.Object)">
      <summary>Specifies the value for the internal startup option the option parameter specifies.</summary>
      <param name="option">Specifies the internal startup option the method sets.</param>
      <param name="newValue">Specifies the value of the internal startup option the option parameter specifies.</param>
      <seealso cref="Engine.SetInternalOption" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.OutputRecordStream">
      <summary></summary>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.OutputRecordStream.WriteRecord(NationalInstruments.TestStand.Interop.API.PropertyObject,System.String)">
      <summary>Write a record to the stream.</summary>
      <param name="record">The record to write.  The record parameter may either be a container or an array. If the record parameter is a container, the container represents the record, and each subproperty is a field.  If the record parameter is an array, the entire array represents the record, and each array element is a field.
</param>
      <param name="mapping">Specifies the mapping from elements (either subproperties or array elements) in the record parameter to fields in the stream.  The mapping is a comma-separated list of index ranges.  For example, "0, 3-5, 8-7" specifies that elements 0, 3, 4, 5, 8, and 7 be written as the fields to the stream.  The final range in the list may be open-ended.  For example, "2, 3-" indicates that elements 2, 3, and all elements beyond 3 be written to the stream.  If the record parameter is a container, the range list may include individual subproperty names.  For example, "Temperature, Pressure, 0-1" specifies that the subproperties "Temperature" and "Pressure", then elements 0 and 1 be written as fields to the stream.  For convenience, you may specify an empty string to specify all elements be written in order.  That is, an empty string is equivalent to "0-".  The default value of the mapping parameter is an empty string.</param>
      <seealso cref="OutputRecordStream.WriteRecordFrom" />
      <seealso cref="&#xD;&#xA;" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.OutputRecordStream.WriteRecordFrom(NationalInstruments.TestStand.Interop.API.SequenceContext,System.Object[])">
      <summary>Write a record to the stream.</summary>
      <param name="context">Specifies the <c>SequenceContext</c> against which to evaluate the lookup strings specified by the <c>record</c> parameter. </param>
      <param name="record">An array of lookup strings specifying the fields to write to the stream.  The lookup strings are evaluated relative to the <c>SequenceContext</c> specified by the <c>context</c> parameter.</param>
      <seealso cref="OutputRecordStream.WriteRecord" />
      <seealso cref="InputRecordStream.ReadRecordTo" />
      <seealso cref="&#xD;&#xA;" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.OutputRecordStream.Flush">
      <summary>Write any buffered data to the underlying device.</summary>
      <remarks>The exact behavior of <c>OutputRecordStream.Flush</c> depends on the implementation details of the class that implements the <c>OutputRecordStream</c> interface.  For example, <c>OutputRecordStream.Flush</c> may do nothing for streams with no buffering.</remarks>
      <seealso cref="OutputRecordStream.Close" />
      <seealso cref="ExecutionOutputRecordStream.Flush" />
      <seealso cref="&#xD;&#xA;" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.OutputRecordStream.Close">
      <summary>Flush any remaining buffered data to the underlying device, and close this stream.</summary>
      <remarks>The exact behavior of <c>Close</c> depends on the implementation details of the class that implements the <c>OutputRecordStream</c> interface.  National Instruments recommends all implementations explicitly call <c>OutputRecordStream.Flush</c> to clear buffered data, regardless of whether there is actually any buffered data, to ensure the implementation is future-proof.
</remarks>
      <seealso cref="OutputRecordStream.Flush" />
      <seealso cref="ExecutionOutputRecordStream.Close" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.OutputRecordStream.GetStreamInfo(System.String@)">
      <summary>Get descriptive information about this stream useful for displaying to the user.</summary>
      <returns>string - A string describing the location of the underlying stream.  The exact details are up to the implementation.  For file streams, this could be the absolute path of the underlying file.  For other types of streams, it could be an appropriate Uniform Resource Identifier (URI).
</returns>
      <param name="streamDescription">Outputs an implementation dependent stream description.</param>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.InputRecordStream">
      <summary></summary>
      <seealso cref="CsvFileInputRecordStream" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.InputRecordStream.ReadRecord(NationalInstruments.TestStand.Interop.API.PropertyObject,System.String)">
      <summary>Read the next record from the stream.</summary>
      <returns>Returns <c>0</c> if a record was successfully read.  Returns non-zero if end of file was encountered before reading a record.</returns>
      <param name="record">Specifies where to store the incoming record. The record parameter may be a container, array, or string.  If it is a container, the container represents the record, and each subproperty is a field.  If the record parameter is an array, the array represents the record, and each array element is a field.  If the record parameter is a string, the fields are written to the string as a comma-separated list.</param>
      <param name="mapping">Specifies the mapping to elements (subproperties or array elements) in the record parameter from fields in the <c>InputRecordStream</c>.  Mapping is not supported if the record parameter is a string. The mapping is a comma-separated list of index ranges.  For example, "0, 3-5, 8-7" specifies that fields from the incoming record be stored to elements 0, 3, 4, 5, 8, and 7 of the container or array.  The last range in the list may be open-ended.  For example, "2, 3-" specifies that fields from the incoming record be written to elements 2, 3, and all elements beyond 3 of the container or array. If the record parameter is a container, the range list may include individual subproperty names.  For example, "Temperature, Pressure, 0-1" specifies that fields from the incoming record be written to the subproperties "Temperature" and "Pressure" followed by elements 0 and 1. For convenience, you may specify an empty string to specify all elements be written in order.  That is, an empty string is equivalent to "0-". The default value is an empty string.</param>
      <seealso cref="InputRecordStream.ReadRecordTo" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.InputRecordStream.ReadRecordTo(NationalInstruments.TestStand.Interop.API.SequenceContext,System.String[])">
      <summary>Read the next record from this stream.</summary>
      <returns>Returns <c>0</c> if a record was successfully read.  Returns non-zero if end of file was encountered before reading a record.</returns>
      <param name="context">Specifies the <c>SequenceContext</c> against which to evaluate the lookup strings specified by the record parameter. </param>
      <param name="record">An array of lookup strings specifying where to store the fields from the incoming record.  The lookup strings are evaluated relative to the <c>SequenceContext</c> specified by the context parameter.</param>
      <seealso cref="InputRecordStream.ReadRecord" />
      <seealso cref="OutputRecordStream.WriteRecordFrom" />
      <seealso cref="&#xD;&#xA;" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.InputRecordStream.FieldMapping">
      <summary>Specifies which fields to read from the <c>InputRecordStream</c>.</summary>
      <remarks>The mapping is a comma-separated list of index ranges.  For example, <c>0, 3-5, 8-7</c> specifies that fields 0, 3, 4, 5, 8, and 7 of each record in the stream be stored to fields 0-5 of each read record output from <c>InputRecordStream.ReadRecord</c> or <c>InputRecordStream.ReadRecordTo</c>.  The last range in the list may be open-ended.  For example, <c>2, 3-</c> specifies that fields 2, 3, and fields beyond 3 will be stored to fields 0, 1, and fields beyond 1 of each read record.

<para>Note: This mapping is distinct from and may be used in combination with the mapping parameter in calls to <c>ReadRecord</c>.</para></remarks>
      <returns>Specifies which fields to read from the <c>InputRecordStream</c>.
</returns>
      <seealso cref="InputRecordStream.ReadRecord" />
      <seealso cref="InputRecordStream.ReadRecordTo" />
      <seealso cref="&#xD;&#xA;" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.InputRecordStream.SkipRecords(System.Int32)">
      <summary>Skip the specified number of records.</summary>
      <returns>Returns <c>0</c> if <c>numRecords</c> were successfully skipped.  Returns non-zero if end of file was encountered before numRecords were skipped.</returns>
      <param name="numRecords">The number of records to skip.  If numRecords is <c>0</c>, <c>InputRecordStream.SkipRecords</c> returns successfully without modifying the stream. Classes that implement the <c>InputRecordStream</c> interface are not required to support negative values for <c>numRecords</c>.</param>
      <seealso cref="InputRecordStream.ReadRecord" />
      <seealso cref="&#xD;&#xA;" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.InputRecordStream.Close">
      <summary>Close this <c>InputRecordStream</c>.</summary>
      <remarks>The exact behavior of <c>Close</c> depends on the implementation details of the class that implements the <c>InputRecordStream</c> interface.</remarks>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.PropertyValueTypes">
      <summary>These constants indicate the type of value a PropertyObject stores.</summary>
      <seealso cref="Engine.NewPropertyObject" />
      <seealso cref="PropertyObject" />
      <seealso cref="PropertyObject.NewSubProperty" />
      <seealso cref="PropertyObjectType.ValueType" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyValueTypes.PropValType_Array">
      <summary>(Value: 6) Specifies an array. This is not a valid value for PropertyObject creation methods such as Engine.NewPropertyObject and PropertyObject.NewSubProperty.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyValueTypes.PropValType_Container">
      <summary>(Value: 0) Specifies a container.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyValueTypes.PropValType_String">
      <summary>(Value: 1) Specifies a string.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyValueTypes.PropValType_Boolean">
      <summary>(Value: 2) Specifies a Boolean type.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyValueTypes.PropValType_Number">
      <summary>(Value: 3) Specifies a number.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyValueTypes.PropValType_NamedType">
      <summary>(Value: 4) Use this value with PropertyObject creation methods such as <c>Engine.NewPropertyObject</c> and <c>PropertyObject.NewSubProperty</c> to create an instance of a named type. This is not a valid value for the PropertyObjectType.ValueType property.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyValueTypes.PropValType_Reference">
      <summary>(Value: 5) Specifies an object reference.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyValueTypes.PropValType_Enum">
      <summary>(Value: 7) Specifies an enumeration.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.FindFilePromptOptions">
      <summary>Use these constants to specify the promptOption parameter of the Engine.FindFileEx method.
The promptOption parameter specifies whether to prompt the user for a file location when TestStand cannot find the file in the search directory paths.</summary>
      <seealso cref="Engine.FindFileEx" />
      <seealso cref="&quot;Preferences tab&quot;javascript:RefLink('/InfoTopics/DB_Station_Opt_Pref_Tab.htm')" />
      <seealso cref="&quot;Station Options dialog box&quot;javascript:RefLink('/InfoTopics/DB_Station_Opt.htm')" />
      <seealso cref="StationOptions.PromptToFindFiles" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.FindFilePromptOptions.FindFile_PromptHonorUserPreference">
      <summary>(Value: 1) Prompt the user to locate the file if the Prompt to Find Files option on the Preferences tab of the Station Options dialog box is enabled.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.FindFilePromptOptions.FindFile_PromptEnable">
      <summary>(Value: 2) Prompt the user to locate the file.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.FindFilePromptOptions.FindFile_PromptDisable">
      <summary>(Value: 3) Do not prompt the user to locate the file.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.FindPathStatusValues">
      <summary>The Engine.FindPath method returns one of these constants to indicate the results of the path search.</summary>
      <seealso cref="Engine.DisplaySearchDirDialog" />
      <seealso cref="Engine.FindPath" />
      <seealso cref="Engine.SearchDirectories" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.FindPathStatusValues.FindPath_PathIsFile">
      <summary>(Value: 1) The FindPath method returned the path of a file.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.FindPathStatusValues.FindPath_PathIsDir">
      <summary>(Value: 2) The FindPath method returned the path of a directory.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.FindPathStatusValues.FindPath_PathNotFound">
      <summary>(Value: 3) The FindPath method failed to locate a directory or file with the name you specified.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.FindPathStatusValues.FindPath_PathNotValid">
      <summary>(Value: 4) The pathname you passed to the FindPath method is not valid.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.TSError">
      <summary>These are the error values the TestStand ActiveX API can return. Refer to the error message TestStand returns for a detailed description of why the error occurred. Whenever a method or property in the TestStand API fails, check the TSError code for the application development environment, as follows:
LabWindows/CVI
If the HRESULT for an API function is equal to <c>DISP_E_EXCEPTION</c>, check the value of the sCode member of the ERRORINFO structure. If the HRESULT is not equal to <c>DISP_E_EXCEPTION</c>, the error is not a TSError. You can use the value of the HRESULT to determine the type of error.
LabVIEW
Check the value of the code number in the &quot;error out&quot; cluster.
Microsoft Visual C/C++ using #import
Use the Error() method of the _com_error class to obtain the error code.
Microsoft Visual Basic .NET
Check the value of ErrorCode from the COMException class in a Try/Catch block to obtain the error code as follows:<para><code>Try</code></para><para><code>...</code></para><para><code>Catch exception As COMException</code></para><para><code>&#160;&#160;&#160;&#160;&#160;MessageBox.Show ("Error " + exception.ErrorCode.ToString() + ": " + exception.Message)</code></para><para><code>EndIf</code></para>
C#
Check the value of ErrorCode from the COMException class in a Try/Catch block to obtain the error code as follows:<para><code>try {</code></para><para><code>...</code></para><para><code>}</code></para><para><code>catch (COMException exception) {</code></para><para><code>&#160;&#160;&#160;&#160;&#160;MessageBox.Show ("Error " + exception.ErrorCode.ToString() + ": " + exception.Message);</code></para><para><code>}</code></para>
The following error codes are listed alphabetically. Press &lt;Ctrl-F&gt; to search for the error code value.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_NoError">
      <summary>(Value: 0)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_OutOfMemory">
      <summary>(Value: -17000)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_ProgramError">
      <summary>(Value: -17001)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_RegistryAccessError">
      <summary>(Value: -17002)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_RegistryItemNotFound">
      <summary>(Value: -17003)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_DLLNotLoadable">
      <summary>(Value: -17004)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_FunctionNotFoundInLib">
      <summary>(Value: -17005)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_UnableToAllocateSystemResource">
      <summary>(Value: -17006)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_UnableToInitializeOLESystemDLLs">
      <summary>(Value: -17007)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_BadFileFormat">
      <summary>(Value: -17100)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_FileFormatIsOutOfDate">
      <summary>(Value: -17099)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_IOError">
      <summary>(Value: -17200)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_UnableToOpenFile">
      <summary>(Value: -17201)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_BadNetPath">
      <summary>(Value: -17202)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_DriveNotReady">
      <summary>(Value: -17203)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_InvalidPathname">
      <summary>(Value: -17204)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_AccessDenied">
      <summary>(Value: -17205)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_FileAlreadyExists">
      <summary>(Value: -17206)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_DiskFull">
      <summary>(Value: -17207)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_FileWasNotFound">
      <summary>(Value: -17208)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_SharingViolation">
      <summary>(Value: -17209)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_WriteProtected">
      <summary>(Value: -17210)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_InvalidDrive">
      <summary>(Value: -17211)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_PathNotFound">
      <summary>(Value: -17212)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_UnableToCloseFile">
      <summary>(Value: -17213)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_ValueIsInvalidOrOutOfRange">
      <summary>(Value: -17300)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_IndexOutOfRange">
      <summary>(Value: -17301)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_NoItemsInList">
      <summary>(Value: -17302)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_TooManyItems">
      <summary>(Value: -17303)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_UnRecognizedValue">
      <summary>(Value: -17304)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_DuplicateItemOrValue">
      <summary>(Value: -17305)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_UnknownVariableOrProperty">
      <summary>(Value: -17306)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_UnknownType">
      <summary>(Value: -17307)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_UnexpectedType">
      <summary>(Value: -17308)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_IllegalOperationOnValue">
      <summary>(Value: -17309)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_ArrayLocked">
      <summary>(Value: -17310)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_IncompatibleParameters">
      <summary>(Value: -17311)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_UnableToPassByReference">
      <summary>(Value: -17312)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_ExprTypeIncompatibleWithParameter">
      <summary>(Value: -17313)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_ExprValueNotSuperSetOfParameter">
      <summary>(Value: -17314)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_WrongNumberOfParameters">
      <summary>(Value: -17315)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_EvaluationContextNotAvailable">
      <summary>(Value: -17316)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_SingleDimensionalNumericArrayExpected">
      <summary>(Value: -17317)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_LValueExpected">
      <summary>(Value: -17318)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_BadPropertyOrVariableName">
      <summary>(Value: -17319)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_UnknownFunctionOrSequenceName">
      <summary>(Value: -17320)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_TypeMismatchError">
      <summary>(Value: -17321)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_BadExpressionError">
      <summary>(Value: -17322)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_OperationOnlyValidWhenSuspended">
      <summary>(Value: -17323)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_ArrayIndexOutOfBounds">
      <summary>(Value: -17324)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_WrongNumberOfArrayIndices">
      <summary>(Value: -17325)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_MismatchedArrayBounds">
      <summary>(Value: -17326)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_NameAlreadyInUse">
      <summary>(Value: -17327)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_MissingType">
      <summary>(Value: -17328)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_TypeConflict">
      <summary>(Value: -17329)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_CurrentSeqFileNotAvailable">
      <summary>(Value: -17330)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_ItemCannotBeDeleted">
      <summary>(Value: -17331)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_ObjectTypeIncompatibleWithParameter">
      <summary>(Value: -17332)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_TypeCannotBeDeleted">
      <summary>(Value: -17333)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_TypeWithDependingInstancesCannotBeDeleted">
      <summary>(Value: -17334)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_ObjectCannotBeAdded">
      <summary>(Value: -17335)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_InvalidAdapterName">
      <summary>(Value: -17336)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_StepTypeNotFound">
      <summary>(Value: -17337)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_ThreadCreationFailed">
      <summary>(Value: -17400)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_OperationInProgress">
      <summary>(Value: -17401)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_OperationTimedOut">
      <summary>(Value: -17402)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_OperationFailed">
      <summary>(Value: -17500)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_UnexpectedSystemError">
      <summary>(Value: -17501)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_OS_Exception">
      <summary>(Value: -17502)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_ModuleLoadFailure">
      <summary>(Value: -17600)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_ModuleNotSpecified">
      <summary>(Value: -17601)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_SequenceAborted">
      <summary>(Value: -17602)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_SequenceTerminated">
      <summary>(Value: -17603)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_OperationCanceled">
      <summary>(Value: -17604)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_UnableToLaunchCVI">
      <summary>(Value: -17701)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_CVIOleError">
      <summary>(Value: -17702)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_CVINotReg">
      <summary>(Value: -17703)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_CVIAutoCmdFailed">
      <summary>(Value: -17704)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_CVIRegValueTypeMismatch">
      <summary>(Value: -17705)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_CVIRegValueNotFound">
      <summary>(Value: -17706)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_CVIRegKeyNotFound">
      <summary>(Value: -17707)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_CVIRegGenericReadError">
      <summary>(Value: -17708)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_CVIModuleHasUnresolvedReferences">
      <summary>(Value: -17709)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_CVIFuncNotFoundInModule">
      <summary>(Value: -17710)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_CVICantConnectToTecrunServer">
      <summary>(Value: -17711)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_CVIUnableToTerminateUserProgInCVI">
      <summary>(Value: -17712)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_DispUnknownInterface">
      <summary>(Value: -17801)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_DispUnknownMemberName">
      <summary>(Value: -17802)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_DispUnknownMemberID">
      <summary>(Value: -17803)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_DispUnknownParamName">
      <summary>(Value: -17804)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_DispUnknownParamID">
      <summary>(Value: -17805)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_DispMissingParamName">
      <summary>(Value: -17806)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_DispMissingParamID">
      <summary>(Value: -17807)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_DispWrongNumPositionalParams">
      <summary>(Value: -17808)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_DispMissingRequiredArg">
      <summary>(Value: -17809)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_AutomationObjNotValid">
      <summary>(Value: -17810)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_FileNotConvertableToSeqFile">
      <summary>(Value: -17901)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_LVAutoServerError">
      <summary>(Value: -18001)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_RStringNotFound">
      <summary>(Value: -18051)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_DDEFail">
      <summary>(Value: -18101)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_NoFileAssoc">
      <summary>(Value: -18151)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_FailToRegisterClipFormat">
      <summary>(Value: -18251)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_TypeLibraryReadError">
      <summary>(Value: -18351)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_RemoteSequenceError">
      <summary>(Value: -17850)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_RemoteSequenceErrorUnableToConnect">
      <summary>(Value: -17851)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_RemoteSequenceRemoteExecutionDenied">
      <summary>(Value: -17852)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_RemoteHostNotSpecified">
      <summary>(Value: -17853)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_DoesNotHaveRequiredPrivilege">
      <summary>(Value: -18360)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_FileFormatNewerThanCurrentVersion">
      <summary>(Value: -17098)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_StackOverflow">
      <summary>(Value: -17008)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_ActiveXAutomationServerException">
      <summary>(Value: -17811)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_VisualStudioAutomationError">
      <summary>(Value: -18500)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_DispObsoleteMember">
      <summary>(Value: -17812)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_LVReportedError">
      <summary>(Value: -18002)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_AdapterNoConnectToAutoServer">
      <summary>(Value: -18201)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_AdapterServerConnectionLost">
      <summary>(Value: -18202)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_LVRTDllNotLoaded">
      <summary>(Value: -17338)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_SourceCodeControlError">
      <summary>(Value: -18370)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_ReadObjectNotFound">
      <summary>(Value: -17339)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_TwoDimensionalNumericArrayExpected">
      <summary>(Value: -17340)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_LabVIEWTypeNotSupportedInCVI">
      <summary>(Value: -17341)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_InvalidRegularExpression">
      <summary>(Value: -17342)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_ArrayTypeExpected">
      <summary>(Value: -17343)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_ArrayDimensionExpected">
      <summary>(Value: -17344)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_ArrayDimensionSizeExpected">
      <summary>(Value: -17345)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_InvalidPointer">
      <summary>(Value: -17346)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_EmptyExpressionError">
      <summary>(Value: -17347)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_LVMissingRequiredArg">
      <summary>(Value: -18003)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_LVRunTimeEngineError">
      <summary>(Value: -18004)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_WatchExpressionError">
      <summary>(Value: -18380)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_MeasStudioInterfaceNotFound">
      <summary>(Value: -18390)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_MethodOrPropertyNotAvailable">
      <summary>(Value: -18400)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_TypePaletteFileLoadErrors">
      <summary>(Value: 17902)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_LVTypeConversionError">
      <summary>(Value: -18005)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_MismatchedItems">
      <summary>(Value: -17348)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_XMLError">
      <summary>(Value: -18600)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_DNAssemblyMissing">
      <summary>(Value: -18700)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_ObjectLocked">
      <summary>(Value: -17349)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_MemoryChecking">
      <summary>(Value: -17214)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_EvaluateFunctionEmptyExpressionError">
      <summary>(Value: -17350)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_UnexpectedChangeCount">
      <summary>(Value: -17351)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_CVIVersionNotSupported">
      <summary>(Value: -17714)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_ConvertedErrorCode">
      <summary>(Value: -17009)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_ExternalServerUnavailable">
      <summary>(Value: -17012)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_NotSupported">
      <summary>(Value: -17503)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_Int32Overflow">
      <summary>(Value: -17010)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_UInt32Overflow">
      <summary>(Value: -17011)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_UnableToOpenDirectory">
      <summary>(Value: -17215)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_CVINonDllModuleNotSupported">
      <summary>(Value: -17713)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_Int64Overflow">
      <summary>(Value: -17013)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_UInt64Overflow">
      <summary>(Value: -17014)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_UnexpectedEndOfFile">
      <summary>(Value: -17216)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_LV_NXG_AutoServerError">
      <summary>(Value: -18520)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_LV_NXG_ReportedError">
      <summary>(Value: -18521)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_LV_NXG_MissingRequiredArg">
      <summary>(Value: -18522)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_LV_NXG_RunTimeEngineError">
      <summary>(Value: -18523)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_LV_NXG_TypeConversionError">
      <summary>(Value: -18524)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_LV_NXG_RTEDllNotLoaded">
      <summary>(Value: -18525)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TSError.TS_Err_LV_NXG_AutoBuildError">
      <summary>(Value: -18526)</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.ModuleLoadOptions">
      <summary>Use these constants to set the sequence file and step code module options that control when TestStand loads code modules and subsequence files. When you use one of these constants with the SequenceFile.ModuleLoadOption property, it applies to all steps in the sequence file. When you use one of these constants with the Step.ModuleLoadOption property, it applies to a particular step. When you use one of these constants with the StepType.ModuleLoadOption property, it applies to subsequent steps of this type.</summary>
      <seealso cref="SequenceFile.ModuleLoadOption" />
      <seealso cref="Step.ModuleLoadOption" />
      <seealso cref="StepType.ModuleLoadOption" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ModuleLoadOptions.LoadOption_PreloadWhenOpened">
      <summary>(Value: 1) Loads the code module for a step when TestStand loads the sequence file containing the step into memory.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ModuleLoadOptions.LoadOption_PreloadWhenExecuted">
      <summary>(Value: 2) Loads the code module for a step when any sequence in the sequence file containing the step begins executing.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ModuleLoadOptions.LoadOption_DynamicLoad">
      <summary>(Value: 3) Does not load the code module for a step until the step is ready to call it.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ModuleLoadOptions.LoadOption_UseStepLoadOption">
      <summary>(Value: 4) Loads each code module according to the load option for the step that uses it. This option is valid only for the SequenceFile.ModuleLoadOption property.</summary>
      <seealso cref="SequenceFile.ModuleLoadOption" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.ModuleUnloadOptions">
      <summary>Use these constants to set the sequence file and step code module options that control when TestStand unloads code modules and subsequence files. When you use one of these constants with the SequenceFile.ModuleUnloadOption property, it applies to all steps in the sequence file. When you use one of these constants with the Step.ModuleUnloadOption property, it applies to a particular step. When you use one of these constants with the StepType.ModuleUnloadOption property, it applies to subsequent steps of this type.</summary>
      <seealso cref="SequenceFile.ModuleUnloadOption" />
      <seealso cref="Step.ModuleUnloadOption" />
      <seealso cref="StepType.ModuleUnloadOption" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ModuleUnloadOptions.UnloadOption_OnPreconditionFailure">
      <summary>(Value: 1) Unloads the code module for a step if the precondition for the step evaluates to <c>False</c>.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ModuleUnloadOptions.UnloadOption_AfterStepExecution">
      <summary>(Value: 2) Unloads the code module for a step after the step finishes executing.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ModuleUnloadOptions.UnloadOption_AfterSequenceExecution">
      <summary>(Value: 3) Unloads the code module for a step after the sequence containing the step finishes executing.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ModuleUnloadOptions.UnloadOption_WithSequenceFile">
      <summary>(Value: 4) Unloads the code module for a step when TestStand unloads the sequence file from memory that contains the step.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ModuleUnloadOptions.UnloadOption_UseStepUnloadOption">
      <summary>(Value: 5) Unloads the code module for a step according to the unload option for the step. This option is valid only for the SequenceFile.ModuleUnloadOption property.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.UIMessageCodes">
      <summary>Use these constants for the eventCode parameter of the Thread.PostUIMessageEx and Engine.PostUIMessage methods. These methods allow you to pass data with the message using the numericDataParam, stringDataParam, and activeXDataParam parameters.
<para>Note: A user interface can respond to ModelState messages by displaying a label that describes the current state of the testing process.</para></summary>
      <seealso cref="Engine.DisplayRunTimeErrorDialogEx" />
      <seealso cref="Engine.GetOutputMessages" />
      <seealso cref="Engine.NewOutputMessages" />
      <seealso cref="Engine.OutputMessagesEnabled" />
      <seealso cref="Engine.PostUIMessage" />
      <seealso cref="Engine.Shutdown" />
      <seealso cref="&quot;Execution tab&quot;javascript:RefLink('/InfoTopics/DB_Station_Opt_Exe_Tab.htm')" />
      <seealso cref="Execution.ClientFile" />
      <seealso cref="Locations.GotoLocation" />
      <seealso cref="OutputMessage.Post" />
      <seealso cref="OutputMessages" />
      <seealso cref="OutputMessages.CopyMessagesToCollection" />
      <seealso cref="OutputMessages.TransferMessagesToCollection" />
      <seealso cref="&quot;Station Options dialog box&quot;javascript:RefLink('/InfoTopics/DB_Station_Opt.htm')" />
      <seealso cref="Thread.PostUIMessageEx" />
      <seealso cref="UIMessage" />
      <seealso cref="UIMessage.ActiveXData" />
      <seealso cref="UIMessage.Event" />
      <seealso cref="UIMessage.Execution" />
      <seealso cref="UndoItem" />
      <seealso cref="UndoItem.EditedFile" />
      <seealso cref="UndoItem.UndoStack" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UIMessageCodes.UIMsg_BreakOnUserRequest">
      <summary>(Value: 1) TestStand posts this message to the user interface to notify it that the execution suspended in response to a user request. The user interface must update the display accordingly.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UIMessageCodes.UIMsg_BreakOnBreakpoint">
      <summary>(Value: 2) TestStand posts this message to the user interface to notify it that the execution has suspended. The user interface must update the display accordingly.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UIMessageCodes.UIMsg_BreakOnRunTimeError">
      <summary>(Value: 3) TestStand posts this message to the user interface to notify it that a run-time error has been encountered in the execution. The user interface must update the display accordingly.<para>Note: The engine posts this event only when you select Show Dialog from the On Run-Time Error ring control on the Execution tab of the Station Options dialog box. A user interface typically calls the Engine.DisplayRunTimeErrorDialogEx method.</para></summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UIMessageCodes.UIMsg_Trace">
      <summary>(Value: 4) TestStand posts this message to the user interface to notify it that the execution has reached a trace point. The user interface must update the display accordingly.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UIMessageCodes.UIMsg_TerminatingExecution">
      <summary>(Value: 5) TestStand posts this message just before terminating an execution. The execution does not actually terminate until the user interface releases the UIMessage.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UIMessageCodes.UIMsg_AbortingExecution">
      <summary>(Value: 6) TestStand posts this message just before aborting an execution. TestStand does not actually abort execution until the user interface releases the UIMessage.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UIMessageCodes.UIMsg_KillingExecutionThreads">
      <summary>(Value: 7) TestStand posts this message just before killing the threads in an execution. TestStand does not actually kill the threads until the user interface releases the UIMessage.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UIMessageCodes.UIMsg_EndExecution">
      <summary>(Value: 8) TestStand posts this message after an execution completes. The user interface must update the display accordingly.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UIMessageCodes.UIMsg_ShutDownComplete">
      <summary>(Value: 9) TestStand posts this message when a shutdown completes. If this is not the final shutdown, the user interface can continue to load and execute sequences. </summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UIMessageCodes.UIMsg_StartExecution">
      <summary>(Value: 10) TestStand posts this message when an execution begins. This message serves to notify the user interface to update the display accordingly.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UIMessageCodes.UIMsg_ProgressPercent">
      <summary>(Value: 11) TestStand step modules post this message to the user interface to notify it to update the progress indicator associated with an execution. The activeXDataParam parameter specifies an execution. The numericDataParam parameter specifies a value from 0 to 100 that indicates the percentage of progress the current execution reports. This value indicates the progress of operations for which the execution chooses to report the amount of progress. The value does not necessarily reflect the progress of the execution as a whole.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UIMessageCodes.UIMsg_ProgressText">
      <summary>(Value: 12) TestStand step modules post this message to the user interface to notify it to update the progress message associated with an execution. The activeXDataParam parameter specifies an execution. The stringDataParam parameter specifies a progress message.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UIMessageCodes.UIMsg_StartInteractiveExecution">
      <summary>(Value: 13) TestStand posts this message whenever an interactive execution begins.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UIMessageCodes.UIMsg_EndInteractiveExecution">
      <summary>(Value: 14) TestStand posts this message whenever an interactive execution ends.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UIMessageCodes.UIMsg_TerminatingInteractiveExecution">
      <summary>(Value: 15) TestStand posts this message just before terminating an interactive execution. The interactive execution does not actually terminate until the user interface message is released.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UIMessageCodes.UIMsg_TerminationCancelled">
      <summary>(Value: 16) TestStand posts this message to notify the user interface to update the display when a pending termination is cancelled.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UIMessageCodes.UIMsg_UserMessageBase">
      <summary>(Value: 10000) Codes for all user-defined messages must be greater than or equal to the value of this constant. Define and use event codes greater than <c>UIMsg_UserMessageBase</c> only when you can ensure that the event code does not conflict with event codes for messages that other custom TestStand components, such as add-on products, define. National Instruments recommends using the  Engine.RegisterUIMessage method to obtain an event code for a message to guarantee that the code is unique for the lifetime of the engine. Components that generate and process the message call this method, which returns the previously assigned message code if the message is already assigned.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UIMessageCodes.UIMsg_ResumeFromBreak">
      <summary>(Value: 17) TestStand posts this message when an execution resumes after being suspended at a breakpoint. The execution resumes when the user interface message is released.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UIMessageCodes.UIMsg_StartFileExecution">
      <summary>(Value: 18) TestStand posts this message when it begins using a sequence file. TestStand specifies the file in the UIMessage.ActiveXData property.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UIMessageCodes.UIMsg_EndFileExecution">
      <summary>(Value: 19) TestStand posts this message when the execution finishes using a sequence file. TestStand specifies the file in the UIMessage.ActiveXData property.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UIMessageCodes.UIMsg_LocalizationSettingChanged">
      <summary>(Value: 21) TestStand posts this message to notify the user interface that the decimal point localization setting has changed in the system setting for the operating system or in the StationOptions.UseLocalizedDecimalPoint setting. When a user interface receives this message, it should refresh any values it displays that these changes might affect.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UIMessageCodes.UIMsg_ShutDownCancelled">
      <summary>(Value: 20) TestStand posts this message to notify the user interface that the user cancelled a pending shutdown.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UIMessageCodes.UIMsg_ReportLocationChanged">
      <summary>(Value: 37) The TestStand Engine posts this message to the user interface whenever you change the location of the report.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UIMessageCodes.UIMsg_OpenWindows">
      <summary>(Value: 22) Post this message to the user interface to instruct it to open a file in a window. If the file or execution is already open, the application brings the file to the front. A file can be specified by a pathname in the stringDataParam parameter or by a PropertyObjectFile object in the activeXDataParam parameter. An execution can be specified by an Execution object in the activeXDataParam parameter. A list of files and/or executions can be specified by an array of references to PropertyObjectFile and Execution objects in the activeXDataParam parameter. For sequence files, the stringDataParam parameter can also contain a '|' separator followed by the name of a sequence to display. If you specify the sequence file in the activeXDataParam parameter, you can specify just the sequence name in the stringDataParam parameter. This constant does not support opening workspace files. </summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UIMessageCodes.UIMsg_TileWindows">
      <summary>(Value: 23) Post this message to the user interface to instruct it to tile the windows the activeXDataParam parameter specifies. Use an array of ActiveX reference objects that reference a PropertyObjectFile or an Execution for the activeXDataParam parameter. The user interface tiles the windows that correspond to the objects in the array. To tile all windows, pass a <c>NULL</c> reference for the activeXDataParam parameter or use the <c>Nothing</c> keyword if you are using the ActiveX/COM Adapter.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UIMessageCodes.UIMsg_CascadeWindows">
      <summary>(Value: 24) Post this message to the user interface to instruct it to cascade the windows the activeXDataParam parameter specifies. Use an array of ActiveX reference objects that reference a PropertyObjectFile or an Execution for the activeXDataParam parameter. The user interface cascades the windows that correspond to the objects in the array. To cascade all windows, pass a <c>NULL</c> reference for the activeXDataParam parameter or use the <c>Nothing</c> keyword if you are using the ActiveX/COM Adapter.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UIMessageCodes.UIMsg_ReportChanged">
      <summary>(Value: 25) The TestStand Engine posts this message to the user interface whenever you update the report of an execution. This allows the user interface to refresh the Report view if it is showing.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UIMessageCodes.UIMsg_CloseWindows">
      <summary>(Value: 26) Post this message to the user interface to instruct it to close a window or windows that display a PropertyObjectFile or an execution. Specify the window by passing a PropertyObjectFile or Execution reference for the activeXDataParam parameter, or specify several windows by passing an ActiveX reference array of such objects for the activeXDataParam parameter. Pass a <c>NULL</c> reference, or use the <c>Nothing</c> keyword if you are using the ActiveX/COM Adapter, to close all currently open document windows in the user interface.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UIMessageCodes.UIMsg_RefreshWindows">
      <summary>(Value: 27) Post this message to the user interface to instruct it to refresh the data it displays for the corresponding PropertyObjectFile or SequenceContext you pass for the activeXDataParam parameter. Pass a single reference or an ActiveX array of references using the activeXDataParam parameter to specify which window or windows to refresh. Pass a SequenceContext object to refresh the values for the steps which the user interface displays for that execution. Pass <c>NULL</c> for the activeXDataParam parameter to refresh the displays for all the files and executions. The <c>Overriding SequenceFilePostStepFailure Callback</c> and the <c>Overriding SequenceFilePostStepRuntimeError Callback</c> examples located in the <c>&lt;TestStand Public&gt;\Examples\Modifying Process Models\Overriding Engine Callbacks</c> directory demonstrate how to use this UIMessage.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UIMessageCodes.UIMsg_ClientFileChanged">
      <summary>(Value: 28) An Execution object posts this message when a client changes the value of the Execution.ClientFile property. The UIMessage.Execution property references the Execution that sends the message.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UIMessageCodes.UIMsg_DisplayReport">
      <summary>(Value: 29) Post this message when you want the user interface to display the current contents of the execution report.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UIMessageCodes.UIMsg_ModelState_Initializing">
      <summary>(Value: 30) TestStand process models post this message to the user interface before performing initialization prior to testing. The numericDataParam parameter specifies the test-socket index. The activeXDataParam parameter contains a reference to the sequence context for the process model sequence file that posts the message.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UIMessageCodes.UIMsg_ModelState_Waiting">
      <summary>(Value: 31) TestStand process models post this message to the user interface before waiting for an action to occur, such as the user entering a serial number in response to a prompt. The numericDataParam parameter specifies the test-socket index. The activeXDataParam parameter contains a reference to the sequence context for the process model sequence file that posts the message.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UIMessageCodes.UIMsg_ModelState_Identified">
      <summary>(Value: 32) TestStand process models post this message to the user interface after identifying the serial number for a unit under test (UUT) or batch of UUTs. The stringDataParam parameter specifies the UUT serial number unless the execution is a batch controller. If the execution is a batch controller, the stringDataParam parameter specifies the batch serial number. The numericDataParam  parameter specifies the test-socket index. The activeXDataParam parameter contains a reference to the sequence context for the process model sequence file that posts the message.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UIMessageCodes.UIMsg_ModelState_EnabledStateSet">
      <summary>(Value: 36) TestStand Batch process models post this message to the user interface after setting the enabled state of a test-socket execution. The value of the stringDataParam parameter is <c>True</c> if the socket is enabled and <c>False</c> if the socket is disabled. The numericDataParam parameter specifies the test-socket index. The activeXDataParam parameter contains a reference to the sequence context for the process model sequence file that posts the message.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UIMessageCodes.UIMsg_ModelState_PostProcessingComplete">
      <summary>(Value: 35) TestStand process models post this message to the user interface after generating the report and logging the data for a client sequence file. The numericDataParam parameter specifies the test-socket index. The activeXDataParam parameter contains a reference to the sequence context for the process model sequence file that posts the message.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UIMessageCodes.UIMsg_ModelState_TestingComplete">
      <summary>(Value: 34) TestStand process models post this message to the user interface after the <c>MainSequence</c> in the client sequence file returns control to the model. If the execution is not a batch controller or a parallel controller, the stringDataParam parameter specifies the UUT result status. If the execution is a batch controller or a parallel controller, the value of the stringDataParam parameter specifies the overall status of the controlling execution, which by default can be <c>Passed, Failed, Error, Terminated</c>, or <c>Aborted</c>. The numericDataParam parameter specifies the test-socket index. The activeXDataParam parameter contains a reference to the sequence context for the process model sequence file that posts the message.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UIMessageCodes.UIMsg_ModelState_BeginTesting">
      <summary>(Value: 33) TestStand process models post this message to the user interface prior to calling <c>MainSequence</c> in the client sequence file. The numericDataParam parameter specifies the test-socket index. The activeXDataParam parameter contains a reference to the sequence context for the process model sequence file that posts the message.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UIMessageCodes.UIMsg_GotoLocation">
      <summary>(Value: 38) The Locations.GotoLocation method posts this message to the user interface to instruct the user interface to select the Locations passed in as the activeXDataParam parameter.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UIMessageCodes.UIMsg_PushUndoItem">
      <summary>(Value: 39) Post this message to the sequence editor to instruct the sequence editor to push an undo item onto an UndoStack. An undo item is a COM object that implements the UndoItem interface. You pass the undo item as the activeXDataParam parameter. The sequence editor uses the UndoItem.EditedFile property to determine which UndoStack to push the undo item onto. Send this message synchronously to determine which UndoStack the sequence editor placed the undo item onto immediately after the call to the <c>PostUIMessage</c> method returns by checking the UndoItem.UndoStack property.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UIMessageCodes.UIMsg_OutputMessages">
      <summary>(Value: 40) TestStand posts this message at periodic intervals when it holds references to output messages that calls to the OutputMessage.Post method queue.  TestStand transfers the queued messages to an OutputMessages collection attached to the UIMessage.ActiveXData property for this event. Ensure that an application that processes output messages copies the output message references from the collection in <c>UIMessage.ActiveXData</c> to a private OutputMessages collection by passing the private collection to the OutputMessages.CopyMessagesToCollection method. An application calls the Engine.NewOutputMessages method to create a private OutputMessage collection. TestStand generates this event only if the Engine.OutputMessagesEnabled property is <c>True</c>. Because there can be more than one handler for this event, ensure that the application does not modify the OutputMessages collection the <c>UIMessage.ActiveXData</c> property holds.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UIMessageCodes.UIMsg_ModelState_PostProcessing">
      <summary>(Value: 43) TestStand process models post this message to the user interface before generating the report and logging the data for a client sequence file. The numericDataParam parameter specifies the test-socket index. The activeXDataParam parameter contains a reference to the sequence context for the process model sequence file that posts the message.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UIMessageCodes.UIMsg_TypePaletteFileListChanged">
      <summary>(Value: 41) TestStand posts this message to the user interface to notify it that the type palette file list has changed. The user interface must update its display accordingly. This event occurs after calling the Engine.UnloadTypePaletteFiles, Engine.LoadTypePaletteFilesEx, and Engine.SetTypePaletteFileList methods.</summary>
      <seealso cref="Engine.LoadTypePaletteFilesEx" />
      <seealso cref="Engine.SetTypePaletteFileList" />
      <seealso cref="Engine.UnloadTypePaletteFiles" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UIMessageCodes.UIMsg_NonTerminatableThreadsArePreventingTermination">
      <summary>(Value: 42) An execution posts this message when it attempts to terminate and every thread in the execution uses a value of ThreadTerminationOptions_Prompt for the Thread.TerminationOption property. A user interface typically handles this event by prompting users to terminate all threads. If the user chooses to terminate all threads, the user interface calls the Execution.OverrideNonTerminatableThreads property to signal the threads that use a value of <c>ThreadTerminationOptions_Prompt</c> for the <c>Thread.TerminationOption</c> property to stop running.</summary>
      <seealso cref="Execution.OverrideNonTerminatableThreads" />
      <seealso cref="Thread.TerminationOption" />
      <seealso cref="ThreadTerminationOptions" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UIMessageCodes.UIMsg_ReportCollectionChanged">
      <summary>(Value: 44) The TestStand Engine posts this message when the content or an active report changes for the Reports collection of an execution. If the active report changes, the activeXDataParam parameter contains a reference to the previously active report.</summary>
      <seealso cref="Reports" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UIMessageCodes.UIMsg_RuntimeError">
      <summary>(Value: 45) TestStand posts this message to the user interface to notify the user interface that the execution has encountered a run-time error. The user interface can alter the error, for example, by adding contextual information to the error message.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.RTEOptions">
      <summary>Use these constants with the StationOptions.RTEOption and Execution.RTEOptionForThisExecution properties, the Thread.SetBatchRTEOption method, the ApplicationMgr.DisplayCustomRunTimeErrorDialog event, or to check the return value for runTimeErrorAction parameter of Engine.DisplayRunTimeErrorDialogEx method.</summary>
      <seealso cref="Engine.DisplayRunTimeErrorDialogEx" />
      <seealso cref="Execution.RTEOptionForThisExecution" />
      <seealso cref="&quot;Run-Time Error dialog box&quot;javascript:RefLink('/InfoTopics/DB_Run_Time_Error.htm')" />
      <seealso cref="StationOptions.RTEOption" />
      <seealso cref="Thread.SetBatchRTEOption" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.RTEOptions.RTEOption_Continue">
      <summary>(Value: 1) Instructs the execution to process the error by propagating the error to the calling sequence, if one exists. If the current step group is Setup or Main, the execution jumps directly to the Cleanup step group.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.RTEOptions.RTEOption_Ignore">
      <summary>(Value: 2) Instructs the execution to ignore the error and continue normal execution.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.RTEOptions.RTEOption_Abort">
      <summary>(Value: 3) Instructs the execution to abort the execution.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.RTEOptions.RTEOption_Retry">
      <summary>(Value: 4) Instructs the execution to ignore the error and re-execute the step that caused the error condition. For the StationOptions.RTEOption property, the Execution.RTEOptionForThisExecution property, and the Thread.SetBatchRTEOption method, TestStand interprets the <c>RTEOption_Retry</c> value as <c>RTEOption_Continue</c>.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.RTEOptions.RTEOption_ShowDialog">
      <summary>(Value: 0) Instructs the execution to launch the Run-Time Error dialog box when an error occurs. </summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.ReportConversion">
      <summary>This data type contains values that specify how to handle linefeeds and carriage returns in report text.</summary>
      <seealso cref="Report.GetTempFile" />
      <seealso cref="Report.LaunchViewer" />
      <seealso cref="Report.Save" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ReportConversion.ReportConv_NoConversion">
      <summary>(Value: 0) Do not convert carriage returns and linefeeds.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ReportConversion.ReportConv_ToCRLF">
      <summary>(Value: 1) Convert each linefeed to a carriage return followed by a linefeed. You usually use this option when writing a report from memory to disk.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ReportConversion.ReportConv_FromCRLF">
      <summary>(Value: 2) Convert carriage return/linefeed combinations to linefeeds. You usually use this option when reading a report from disk into memory.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.SequenceTypes">
      <summary>This data type contains values that specify the sequence type. Use the values of this enumeration with the Sequence.Type property.</summary>
      <seealso cref="Sequence" />
      <seealso cref="Sequence.GetEffectiveType" />
      <seealso cref="Sequence.Type" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SequenceTypes.SeqType_Normal">
      <summary>(Value: 0) The sequence is not a callback or an entry point.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SequenceTypes.SeqType_Callback">
      <summary>(Value: 1) The sequence is a Process Model callback.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SequenceTypes.SeqType_ExeEntryPoint">
      <summary>(Value: 3) The sequence is an Execution entry point.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SequenceTypes.SeqType_CfgEntryPoint">
      <summary>(Value: 5) The sequence is a Configuration entry point.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SequenceTypes.SeqType_ReservedCallback">
      <summary>(Value: 7) Only the Sequence.GetEffectiveType method returns this value. The sequence is one of the predefined callbacks TestStand reserves.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.Engine">
      <summary>Use the <c>Engine</c> class to create and access objects of other classes, control executions, launch built-in dialog boxes, implement a Tools menu, find files and directories, and invoke various utilities. Create the <c>Engine</c> object directly using ActiveX. To access the <c>Engine</c> object from a step, use the TestStand API to obtain the value of the <c>Engine</c> property from the <c>SequenceContext</c> class or pass the <c>SequenceContext</c> property <c>RunState.Engine</c> as an object parameter to the step.
The following examples show how to create the initial Engine object:
(Platform: LabWindows/CVI)
<c>CAObjHandle engineObj = 0;</c><para><code>TS_NewEngine(NULL, &amp;engineObj);</code></para>
(Platform: Visual Basic)
<c>'Place the TestStand Engine ActiveX control on the main form.</c>
(Platform: Visual C/C++)
<c>#import &quot;C:\TestStand\Bin\teapi.dll&quot;</c><para><code>TS::IEnginePtr engine;</code></para><para><code>HRESULT hr = engine.CreateInstance(__uuidof(TS::Engine))</code></para>;</summary>
      <seealso cref="SequenceContext.Engine" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.IEngine">
      <summary>Use the <c>Engine</c> class to create and access objects of other classes, control executions, launch built-in dialog boxes, implement a Tools menu, find files and directories, and invoke various utilities. Create the <c>Engine</c> object directly using ActiveX. To access the <c>Engine</c> object from a step, use the TestStand API to obtain the value of the <c>Engine</c> property from the <c>SequenceContext</c> class or pass the <c>SequenceContext</c> property <c>RunState.Engine</c> as an object parameter to the step.
The following examples show how to create the initial Engine object:
(Platform: LabWindows/CVI)
<c>CAObjHandle engineObj = 0;</c><para><code>TS_NewEngine(NULL, &amp;engineObj);</code></para>
(Platform: Visual Basic)
<c>'Place the TestStand Engine ActiveX control on the main form.</c>
(Platform: Visual C/C++)
<c>#import &quot;C:\TestStand\Bin\teapi.dll&quot;</c><para><code>TS::IEnginePtr engine;</code></para><para><code>HRESULT hr = engine.CreateInstance(__uuidof(TS::Engine))</code></para>;</summary>
      <seealso cref="SequenceContext.Engine" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.EngineClass">
      <summary>Use the <c>Engine</c> class to create and access objects of other classes, control executions, launch built-in dialog boxes, implement a Tools menu, find files and directories, and invoke various utilities. Create the <c>Engine</c> object directly using ActiveX. To access the <c>Engine</c> object from a step, use the TestStand API to obtain the value of the <c>Engine</c> property from the <c>SequenceContext</c> class or pass the <c>SequenceContext</c> property <c>RunState.Engine</c> as an object parameter to the step.
The following examples show how to create the initial Engine object:
(Platform: LabWindows/CVI)
<c>CAObjHandle engineObj = 0;</c><para><code>TS_NewEngine(NULL, &amp;engineObj);</code></para>
(Platform: Visual Basic)
<c>'Place the TestStand Engine ActiveX control on the main form.</c>
(Platform: Visual C/C++)
<c>#import &quot;C:\TestStand\Bin\teapi.dll&quot;</c><para><code>TS::IEnginePtr engine;</code></para><para><code>HRESULT hr = engine.CreateInstance(__uuidof(TS::Engine))</code></para>;</summary>
      <seealso cref="SequenceContext.Engine" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.GetTestStandPath(NationalInstruments.TestStand.Interop.API.TestStandPaths)">
      <summary>Returns the pathname of the TestStand directory the testStandPath parameter specifies.</summary>
      <remarks>The pathname does not contain a trailing backslash.</remarks>
      <param name="testStandPath">Specifies the TestStand directory to return.</param>
      <seealso cref="Engine.SearchDirectories" />
      <seealso cref="TestStandPaths" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.GetTestStandPath(NationalInstruments.TestStand.Interop.API.TestStandPaths)">
      <summary>Returns the pathname of the TestStand directory the testStandPath parameter specifies.</summary>
      <remarks>The pathname does not contain a trailing backslash.</remarks>
      <param name="testStandPath">Specifies the TestStand directory to return.</param>
      <seealso cref="Engine.SearchDirectories" />
      <seealso cref="TestStandPaths" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.Utility">
      <summary>Returns a reference to the Utility object, which you can use to access utility functions.</summary>
      <seealso cref="Utility" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.Utility">
      <summary>Returns a reference to the Utility object, which you can use to access utility functions.</summary>
      <seealso cref="Utility" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.ShutDown(System.Boolean)">
      <summary>Attempts to close all open sequence files and terminate all executions.</summary>
      <remarks>If you are writing a user interface that does not use the TestStand User Interface (UI) Controls, call this function before exiting the application.
TestStand sends a UIMsg_ShutDownComplete message to notify you when the shut down is complete.</remarks>
      <param name="final">Pass <c>True</c> when performing the final shutdown before exiting the application. Passing <c>False</c> permits the user to cancel shutdown when executions are running.</param>
      <seealso cref="&quot;Shutting Down the Engine&quot;../InfoTopics/App_Shutting_Down_the_Engine.html" />
      <seealso cref="UIMessageCodes" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.ShutDown(System.Boolean)">
      <summary>Attempts to close all open sequence files and terminate all executions.</summary>
      <remarks>If you are writing a user interface that does not use the TestStand User Interface (UI) Controls, call this function before exiting the application.
TestStand sends a UIMsg_ShutDownComplete message to notify you when the shut down is complete.</remarks>
      <param name="final">Pass <c>True</c> when performing the final shutdown before exiting the application. Passing <c>False</c> permits the user to cancel shutdown when executions are running.</param>
      <seealso cref="&quot;Shutting Down the Engine&quot;../InfoTopics/App_Shutting_Down_the_Engine.html" />
      <seealso cref="UIMessageCodes" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.GetSequenceFile(System.String,System.Int32)">
      <summary><para>Note: This method is obsolete. Use the Engine.GetSequenceFileEx method instead.</para></summary>
      <remarks>Returns the SequenceFile object for the sequence file the sequenceFilePath parameter specifies.</remarks>
      <returns>A SequenceFile object.</returns>
      <param name="seqFilePath">Specifies the pathname of the sequence file.</param>
      <param name="getSeqFileFlags">Specifies one or more GetSeqFileOptions constants. Use the bitwise-OR operator to specify multiple sequence file flags.</param>
      <seealso cref="Engine.GetSequenceFileEx" />
      <seealso cref="Engine.NewSequenceFile" />
      <seealso cref="Engine.ReleaseSequenceFileEx" />
      <seealso cref="GetSeqFileOptions" />
      <seealso cref="SequenceFile" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.GetSequenceFile(System.String,System.Int32)">
      <summary><para>Note: This method is obsolete. Use the Engine.GetSequenceFileEx method instead.</para></summary>
      <remarks>Returns the SequenceFile object for the sequence file the sequenceFilePath parameter specifies.</remarks>
      <returns>A SequenceFile object.</returns>
      <param name="seqFilePath">Specifies the pathname of the sequence file.</param>
      <param name="getSeqFileFlags">Specifies one or more GetSeqFileOptions constants. Use the bitwise-OR operator to specify multiple sequence file flags.</param>
      <seealso cref="Engine.GetSequenceFileEx" />
      <seealso cref="Engine.NewSequenceFile" />
      <seealso cref="Engine.ReleaseSequenceFileEx" />
      <seealso cref="GetSeqFileOptions" />
      <seealso cref="SequenceFile" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.NewSequenceFile">
      <summary>Creates and returns a new SequenceFile object.</summary>
      <remarks>Call the Engine.ReleaseSequenceFileEx method on this object before you release it.
This method stores the new sequence file in the internal cache of the engine and adds a load reference to the sequence file. TestStand uses the load reference count to determine when to unload the sequence file from the internal cache of the engine. In addition to this method, the SequenceFile.AddLoadReference and Engine.GetSequenceFileEx methods add a load reference to the sequence file. The <c>Engine.ReleaseSequenceFileEx</c> method removes a load reference.
You must call <c>Engine.ReleaseSequenceFileEx</c> for each load reference you add to the sequence file. When you release the last load reference, TestStand unloads the file from the internal cache of the engine. While unloading the file from the internal cache of the engine, TestStand executes the SequenceFileUnload callback sequence, if applicable.</remarks>
      <seealso cref="Engine.GetSequenceFileEx" />
      <seealso cref="Engine.NewPropertyObjectFile" />
      <seealso cref="Engine.ReleaseSequenceFileEx" />
      <seealso cref="SequenceFile" />
      <seealso cref="SequenceFile.AddLoadReference" />
      <seealso cref="SequenceFile.Save" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.NewSequenceFile">
      <summary>Creates and returns a new SequenceFile object.</summary>
      <remarks>Call the Engine.ReleaseSequenceFileEx method on this object before you release it.
This method stores the new sequence file in the internal cache of the engine and adds a load reference to the sequence file. TestStand uses the load reference count to determine when to unload the sequence file from the internal cache of the engine. In addition to this method, the SequenceFile.AddLoadReference and Engine.GetSequenceFileEx methods add a load reference to the sequence file. The <c>Engine.ReleaseSequenceFileEx</c> method removes a load reference.
You must call <c>Engine.ReleaseSequenceFileEx</c> for each load reference you add to the sequence file. When you release the last load reference, TestStand unloads the file from the internal cache of the engine. While unloading the file from the internal cache of the engine, TestStand executes the SequenceFileUnload callback sequence, if applicable.</remarks>
      <seealso cref="Engine.GetSequenceFileEx" />
      <seealso cref="Engine.NewPropertyObjectFile" />
      <seealso cref="Engine.ReleaseSequenceFileEx" />
      <seealso cref="SequenceFile" />
      <seealso cref="SequenceFile.AddLoadReference" />
      <seealso cref="SequenceFile.Save" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.NewSequence">
      <summary>Creates and returns a new Sequence object.</summary>
      <remarks>Pass the new Sequence object to the SequenceFile.InsertSequenceEx method to add a sequence to a sequence file.
<para>Note: TestStand does not validate sequence names you create programmatically for invalid characters, such as spaces, which can result in errors when you use expressions. Use the PropertyObject.ValidateNewElementName method to validate sequence names. Names of sequences in a PropertyObject array can contain any character. However, sequence names cannot be empty or contain control characters. You cannot have duplicate sequence names.</para></remarks>
      <seealso cref="PropertyObject.ValidateNewElementName" />
      <seealso cref="Sequence" />
      <seealso cref="SequenceFile.InsertSequenceEx" />
      <seealso cref="SequenceFile.RemoveSequence" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.NewSequence">
      <summary>Creates and returns a new Sequence object.</summary>
      <remarks>Pass the new Sequence object to the SequenceFile.InsertSequenceEx method to add a sequence to a sequence file.
<para>Note: TestStand does not validate sequence names you create programmatically for invalid characters, such as spaces, which can result in errors when you use expressions. Use the PropertyObject.ValidateNewElementName method to validate sequence names. Names of sequences in a PropertyObject array can contain any character. However, sequence names cannot be empty or contain control characters. You cannot have duplicate sequence names.</para></remarks>
      <seealso cref="PropertyObject.ValidateNewElementName" />
      <seealso cref="Sequence" />
      <seealso cref="SequenceFile.InsertSequenceEx" />
      <seealso cref="SequenceFile.RemoveSequence" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.NewStep(System.String,System.String)">
      <summary>Creates and returns a new Step object.</summary>
      <remarks>Pass the new Step object to the Sequence.InsertStep method to add a step to a sequence.
When you use this method to create a new <c>Step</c> object, the step name is empty. You can use the following code snippet to set the default name of the new step:
<para><code>Step.Name = Step.StepType.AsPropertyObject.EvaluateEx(Step.StepType.DefaultNameExpr, EvalOption_DoNotAlterValues).GetValString(&quot;&quot;, 0)</code></para>
<para>Note: TestStand does not validate step names you create programmatically for invalid characters. Use the PropertyObject.ValidateNewElementName method to validate step names. Step names in a sequence can contain any character.</para></remarks>
      <param name="adapterKeyNameVal">Specifies the key name of the module Adapter object to use to create the step. Pass an empty string to use the adapter the step type designates or, if the step has no designated adapter, to use the adapter the Engine.DefaultAdapter property specifies.</param>
      <param name="stepTypeName">Specifies the name of the step type with which to create the step. The step type must already be in memory. The sequence editor and custom user interfaces load step types into memory when calling the Engine.LoadTypePaletteFilesEx method or when loading a sequence file from disk. To create a new step type, use the Engine.NewStepType method.</param>
      <seealso cref="AdapterKeyNames" />
      <seealso cref="Engine.DefaultAdapter" />
      <seealso cref="Engine.LoadTypePaletteFilesEx" />
      <seealso cref="Engine.NewStepType" />
      <seealso cref="PropertyObject.ValidateNewElementName" />
      <seealso cref="Sequence.InsertStep" />
      <seealso cref="Sequence.RemoveStep" />
      <seealso cref="Step" />
      <seealso cref="Step.CreateNewUniqueStepId" />
      <seealso cref="StepTypes" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.NewStep(System.String,System.String)">
      <summary>Creates and returns a new Step object.</summary>
      <remarks>Pass the new Step object to the Sequence.InsertStep method to add a step to a sequence.
When you use this method to create a new <c>Step</c> object, the step name is empty. You can use the following code snippet to set the default name of the new step:
<para><code>Step.Name = Step.StepType.AsPropertyObject.EvaluateEx(Step.StepType.DefaultNameExpr, EvalOption_DoNotAlterValues).GetValString(&quot;&quot;, 0)</code></para>
<para>Note: TestStand does not validate step names you create programmatically for invalid characters. Use the PropertyObject.ValidateNewElementName method to validate step names. Step names in a sequence can contain any character.</para></remarks>
      <param name="adapterKeyNameVal">Specifies the key name of the module Adapter object to use to create the step. Pass an empty string to use the adapter the step type designates or, if the step has no designated adapter, to use the adapter the Engine.DefaultAdapter property specifies.</param>
      <param name="stepTypeName">Specifies the name of the step type with which to create the step. The step type must already be in memory. The sequence editor and custom user interfaces load step types into memory when calling the Engine.LoadTypePaletteFilesEx method or when loading a sequence file from disk. To create a new step type, use the Engine.NewStepType method.</param>
      <seealso cref="AdapterKeyNames" />
      <seealso cref="Engine.DefaultAdapter" />
      <seealso cref="Engine.LoadTypePaletteFilesEx" />
      <seealso cref="Engine.NewStepType" />
      <seealso cref="PropertyObject.ValidateNewElementName" />
      <seealso cref="Sequence.InsertStep" />
      <seealso cref="Sequence.RemoveStep" />
      <seealso cref="Step" />
      <seealso cref="Step.CreateNewUniqueStepId" />
      <seealso cref="StepTypes" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.NewUser(NationalInstruments.TestStand.Interop.API.User)">
      <summary>Creates and returns a new User object.</summary>
      <remarks>Typically, only the sequence editor uses this method.</remarks>
      <param name="userProfile">Specifies a User object with which to create the new user. The new user inherits the privileges from the User object the userProfile parameter specifies. The new user is not added as a member of any user groups of which the User object is a member.
Pass a <c>NULL</c> reference if you want to create a NewUser object without using a user profile. The new user inherits the default values as specified by the User standard data type.
You can obtain user groups using the Engine.GetUserGroup method.</param>
      <seealso cref="Engine.CurrentUser" />
      <seealso cref="Engine.GetUser" />
      <seealso cref="Engine.GetUserGroup" />
      <seealso cref="User" />
      <seealso cref="UsersFile" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.NewUser(NationalInstruments.TestStand.Interop.API.User)">
      <summary>Creates and returns a new User object.</summary>
      <remarks>Typically, only the sequence editor uses this method.</remarks>
      <param name="userProfile">Specifies a User object with which to create the new user. The new user inherits the privileges from the User object the userProfile parameter specifies. The new user is not added as a member of any user groups of which the User object is a member.
Pass a <c>NULL</c> reference if you want to create a NewUser object without using a user profile. The new user inherits the default values as specified by the User standard data type.
You can obtain user groups using the Engine.GetUserGroup method.</param>
      <seealso cref="Engine.CurrentUser" />
      <seealso cref="Engine.GetUser" />
      <seealso cref="Engine.GetUserGroup" />
      <seealso cref="User" />
      <seealso cref="UsersFile" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.UserNameExists(System.String)">
      <summary>Returns <c>True</c> if a user with a specific login name exists.</summary>
      <param name="loginName">Specifies the login name to find.</param>
      <seealso cref="Engine.CurrentUser" />
      <seealso cref="Engine.GetUser" />
      <seealso cref="User" />
      <seealso cref="UsersFile" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.UserNameExists(System.String)">
      <summary>Returns <c>True</c> if a user with a specific login name exists.</summary>
      <param name="loginName">Specifies the login name to find.</param>
      <seealso cref="Engine.CurrentUser" />
      <seealso cref="Engine.GetUser" />
      <seealso cref="User" />
      <seealso cref="UsersFile" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.GetUser(System.String)">
      <summary>Obtains the User" object that contains a specific login name.</summary>
      <remarks>Returns <c>NULL</c> if no User object has the specified login name.</remarks>
      <param name="loginName">Specifies the login name to find.</param>
      <seealso cref="Engine.CurrentUser" />
      <seealso cref="Engine.DisplayEditUserDialog" />
      <seealso cref="Engine.UsersFile" />
      <seealso cref="User" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.GetUser(System.String)">
      <summary>Obtains the User" object that contains a specific login name.</summary>
      <remarks>Returns <c>NULL</c> if no User object has the specified login name.</remarks>
      <param name="loginName">Specifies the login name to find.</param>
      <seealso cref="Engine.CurrentUser" />
      <seealso cref="Engine.DisplayEditUserDialog" />
      <seealso cref="Engine.UsersFile" />
      <seealso cref="User" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.CurrentUserHasPrivilege(System.String)">
      <summary>Confirms whether the current user or any user group of which the user is a member has a specific privilege.</summary>
      <remarks>Returns <c>True</c> when the privilege property is <c>True</c>, when the privilege property of any group that contains the privilege is <c>True</c>, or when privilege checking is disabled, the StationOptions.EnableUserPrivilegeChecking property is <c>False</c>. If privilege checking is disabled but the StationOptions.RequireUserLogin property is <c>True</c>, this function returns <c>True</c> only if a user is currently logged on.</remarks>
      <returns>Returns <c>True</c> if the current user has the privilege.</returns>
      <param name="privilegeName">Specifies the name of the privilege to check. You can specify the name of any privilege property. You can specify the full privilege path in the user privileges property view, such as <c>Debug.RunSelectedTests</c>, or you can specify the base privilege name, such as <c>RunSelectedTests</c>. If you specify only the base privilege name and more than one instance of the base privilege name exists, the method returns the value of the first base privilege it finds with that name. You can pass <c>&quot;*&quot;</c> as the string argument to determine whether a user is currently logged in.</param>
      <seealso cref="StationOptions.EnableUserPrivilegeChecking" />
      <seealso cref="StationOptions.RequireUserLogin" />
      <seealso cref="User" />
      <seealso cref="User.HasPrivilege" />
      <seealso cref="UserPrivileges" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.CurrentUserHasPrivilege(System.String)">
      <summary>Confirms whether the current user or any user group of which the user is a member has a specific privilege.</summary>
      <remarks>Returns <c>True</c> when the privilege property is <c>True</c>, when the privilege property of any group that contains the privilege is <c>True</c>, or when privilege checking is disabled, the StationOptions.EnableUserPrivilegeChecking property is <c>False</c>. If privilege checking is disabled but the StationOptions.RequireUserLogin property is <c>True</c>, this function returns <c>True</c> only if a user is currently logged on.</remarks>
      <returns>Returns <c>True</c> if the current user has the privilege.</returns>
      <param name="privilegeName">Specifies the name of the privilege to check. You can specify the name of any privilege property. You can specify the full privilege path in the user privileges property view, such as <c>Debug.RunSelectedTests</c>, or you can specify the base privilege name, such as <c>RunSelectedTests</c>. If you specify only the base privilege name and more than one instance of the base privilege name exists, the method returns the value of the first base privilege it finds with that name. You can pass <c>&quot;*&quot;</c> as the string argument to determine whether a user is currently logged in.</param>
      <seealso cref="StationOptions.EnableUserPrivilegeChecking" />
      <seealso cref="StationOptions.RequireUserLogin" />
      <seealso cref="User" />
      <seealso cref="User.HasPrivilege" />
      <seealso cref="UserPrivileges" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.GetAdapter(System.Int32)">
      <summary>Returns a module Adapter object from the list of module adapters.</summary>
      <remarks>Each adapter defines a module-specific adapter interface. You must obtain the module-specific adapter interface for an Adapter class object to configure the adapter.</remarks>
      <param name="adapterIndex">Specifies a zero-based index for the Adapter object to return. You can obtain the number of Adapter objects from the Engine.NumAdapters property. To obtain a reference to a specific adapter, or to iterate through the adapters in a specific order, use the Engine.GetAdapterByKeyName method instead.</param>
      <seealso cref="Adapter" />
      <seealso cref="Engine.GetAdapterByKeyName" />
      <seealso cref="Engine.NumAdapters" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.GetAdapter(System.Int32)">
      <summary>Returns a module Adapter object from the list of module adapters.</summary>
      <remarks>Each adapter defines a module-specific adapter interface. You must obtain the module-specific adapter interface for an Adapter class object to configure the adapter.</remarks>
      <param name="adapterIndex">Specifies a zero-based index for the Adapter object to return. You can obtain the number of Adapter objects from the Engine.NumAdapters property. To obtain a reference to a specific adapter, or to iterate through the adapters in a specific order, use the Engine.GetAdapterByKeyName method instead.</param>
      <seealso cref="Adapter" />
      <seealso cref="Engine.GetAdapterByKeyName" />
      <seealso cref="Engine.NumAdapters" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.NewExecution(NationalInstruments.TestStand.Interop.API.SequenceFile,System.String,NationalInstruments.TestStand.Interop.API.SequenceFile,System.Boolean,System.Int32,System.Object,System.Object,System.Object)">
      <summary>Creates and returns a new Execution object.</summary>
      <remarks>When you call this method, the execution begins immediately.
Sequence editor and user interface programs use this method to run sequences.
You can  pass parameters as arguments to this method when executing an entry point or sequence.</remarks>
      <param name="sequenceFileParam">Specifies the SequenceFile object that contains the sequence to execute. If the execution uses a process model, pass the client SequenceFile object.</param>
      <param name="sequenceNameParam">Specifies the name of the sequence or Process Model entry point to execute.</param>
      <param name="processModelParam">Pass the process model SequenceFile object if you want to execute a Process Model entry point. Otherwise, a <c>NULL</c> object reference in LabVIEW, <c>0</c> in LabWindows/CVI, or the <c>Nothing</c> keyword in Visual Basic, pass a <c>NULL</c> dispatch pointer in Microsoft Foundation Classes.</param>
      <param name="breakAtFirstStep">Pass <c>True</c> to suspend execution before executing the first step.</param>
      <param name="executionTypeMaskParam">Pass <c>0</c> for the default behavior or pass one or more ExecutionTypeMask constants. Use the bitwise-OR operator to pass multiple constants.</param>
      <param name="sequenceArgsParam">Specifies a PropertyObject object that contains the arguments to the sequence you want to execute. Each subproperty of the PropertyObject object represents a parameter to the sequence. The subproperties must appear in the same order as the sequence parameters.</param>
      <param name="editArgsParam">Specifies an EditArgs object that indicates which items are currently selected in the user interface. This is required only for Process Model entry points.</param>
      <param name="InteractiveArgsParam">Specifies an InteractiveArgs object that indicates which steps are currently selected in the user interface and contains looping information necessary for an interactive execution. Pass this parameter only for interactive executions.</param>
      <seealso cref="EditArgs" />
      <seealso cref="Engine.NewEditArgs" />
      <seealso cref="Engine.NewHierarchicalExecution" />
      <seealso cref="Engine.NewInteractiveArgs" />
      <seealso cref="&quot;Executing a Sequence&quot;javascript:APILink('/InfoTopics/App_Executing_a_Sequence.html')" />
      <seealso cref="Execution" />
      <seealso cref="ExecutionTypeMask" />
      <seealso cref="InteractiveArgs" />
      <seealso cref="&quot;Omitting Optional Parameters&quot;javascript:APILink('/InfoTopics/Optional_Parameters.htm')" />
      <seealso cref="&quot;Process Model Entry Points&quot;javascript:APILink('/InfoTopics/App_Process_Model_Entry_Points.html')" />
      <seealso cref="SequenceFile" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.NewExecution(NationalInstruments.TestStand.Interop.API.SequenceFile,System.String,NationalInstruments.TestStand.Interop.API.SequenceFile,System.Boolean,System.Int32,System.Object,System.Object,System.Object)">
      <summary>Creates and returns a new Execution object.</summary>
      <remarks>When you call this method, the execution begins immediately.
Sequence editor and user interface programs use this method to run sequences.
You can  pass parameters as arguments to this method when executing an entry point or sequence.</remarks>
      <param name="sequenceFileParam">Specifies the SequenceFile object that contains the sequence to execute. If the execution uses a process model, pass the client SequenceFile object.</param>
      <param name="sequenceNameParam">Specifies the name of the sequence or Process Model entry point to execute.</param>
      <param name="processModelParam">Pass the process model SequenceFile object if you want to execute a Process Model entry point. Otherwise, a <c>NULL</c> object reference in LabVIEW, <c>0</c> in LabWindows/CVI, or the <c>Nothing</c> keyword in Visual Basic, pass a <c>NULL</c> dispatch pointer in Microsoft Foundation Classes.</param>
      <param name="breakAtFirstStep">Pass <c>True</c> to suspend execution before executing the first step.</param>
      <param name="executionTypeMaskParam">Pass <c>0</c> for the default behavior or pass one or more ExecutionTypeMask constants. Use the bitwise-OR operator to pass multiple constants.</param>
      <param name="sequenceArgsParam">Specifies a PropertyObject object that contains the arguments to the sequence you want to execute. Each subproperty of the PropertyObject object represents a parameter to the sequence. The subproperties must appear in the same order as the sequence parameters.</param>
      <param name="editArgsParam">Specifies an EditArgs object that indicates which items are currently selected in the user interface. This is required only for Process Model entry points.</param>
      <param name="InteractiveArgsParam">Specifies an InteractiveArgs object that indicates which steps are currently selected in the user interface and contains looping information necessary for an interactive execution. Pass this parameter only for interactive executions.</param>
      <seealso cref="EditArgs" />
      <seealso cref="Engine.NewEditArgs" />
      <seealso cref="Engine.NewHierarchicalExecution" />
      <seealso cref="Engine.NewInteractiveArgs" />
      <seealso cref="&quot;Executing a Sequence&quot;javascript:APILink('/InfoTopics/App_Executing_a_Sequence.html')" />
      <seealso cref="Execution" />
      <seealso cref="ExecutionTypeMask" />
      <seealso cref="InteractiveArgs" />
      <seealso cref="&quot;Omitting Optional Parameters&quot;javascript:APILink('/InfoTopics/Optional_Parameters.htm')" />
      <seealso cref="&quot;Process Model Entry Points&quot;javascript:APILink('/InfoTopics/App_Process_Model_Entry_Points.html')" />
      <seealso cref="SequenceFile" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.CallFrontEndCallback(System.String,NationalInstruments.TestStand.Interop.API.PropertyObject)">
      <summary><para>Note: This method is obsolete. Use the Engine.CallFrontEndCallbackEx method instead.</para></summary>
      <remarks>Calls the Front-End callback sequence specified by sequenceName.</remarks>
      <returns>The Execution object of the newly created execution.</returns>
      <param name="sequenceNameParam">Specifies the name of the Front-End callback sequence to call.</param>
      <param name="argumentList">Specifies a PropertyObject object that contains the parameters to pass to the sequence. Each subproperty of the PropertyObject object represents a parameter to the sequence. The subproperties must appear in the same order as the sequence parameters.</param>
      <seealso cref="Engine.CallFrontEndCallbackEx" />
      <seealso cref="FrontEndCallbacks" />
      <seealso cref="PropertyObject" />
      <seealso cref="TypeConflictHandlerTypes" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.CallFrontEndCallback(System.String,NationalInstruments.TestStand.Interop.API.PropertyObject)">
      <summary><para>Note: This method is obsolete. Use the Engine.CallFrontEndCallbackEx method instead.</para></summary>
      <remarks>Calls the Front-End callback sequence specified by sequenceName.</remarks>
      <returns>The Execution object of the newly created execution.</returns>
      <param name="sequenceNameParam">Specifies the name of the Front-End callback sequence to call.</param>
      <param name="argumentList">Specifies a PropertyObject object that contains the parameters to pass to the sequence. Each subproperty of the PropertyObject object represents a parameter to the sequence. The subproperties must appear in the same order as the sequence parameters.</param>
      <seealso cref="Engine.CallFrontEndCallbackEx" />
      <seealso cref="FrontEndCallbacks" />
      <seealso cref="PropertyObject" />
      <seealso cref="TypeConflictHandlerTypes" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.AbortAll">
      <summary>Aborts all existing executions.</summary>
      <seealso cref="Engine.BreakAll" />
      <seealso cref="Engine.TerminateAll" />
      <seealso cref="Execution.Abort" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.AbortAll">
      <summary>Aborts all existing executions.</summary>
      <seealso cref="Engine.BreakAll" />
      <seealso cref="Engine.TerminateAll" />
      <seealso cref="Execution.Abort" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.BreakAll">
      <summary>Suspends all existing executions.</summary>
      <seealso cref="Engine.AbortAll" />
      <seealso cref="Engine.TerminateAll" />
      <seealso cref="Execution.Break" />
      <seealso cref="Execution.Resume" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.BreakAll">
      <summary>Suspends all existing executions.</summary>
      <seealso cref="Engine.AbortAll" />
      <seealso cref="Engine.TerminateAll" />
      <seealso cref="Execution.Break" />
      <seealso cref="Execution.Resume" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.TerminateAll">
      <summary>Terminates all existing executions.</summary>
      <seealso cref="Engine.AbortAll" />
      <seealso cref="Engine.BreakAll" />
      <seealso cref="Execution.CancelTermination" />
      <seealso cref="Execution.Terminate" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.TerminateAll">
      <summary>Terminates all existing executions.</summary>
      <seealso cref="Engine.AbortAll" />
      <seealso cref="Engine.BreakAll" />
      <seealso cref="Execution.CancelTermination" />
      <seealso cref="Execution.Terminate" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.NewInteractiveArgs">
      <summary>Creates and returns an InteractiveArgs object.</summary>
      <remarks>You can pass the object this method returns as a parameter to one of the following methods: Engine.NewExecution, Engine.NewHierarchicalExecution, or Thread.DoInteractiveExecution.</remarks>
      <seealso cref="EditArgs" />
      <seealso cref="Engine.NewExecution" />
      <seealso cref="Engine.NewHierarchicalExecution" />
      <seealso cref="InteractiveArgs" />
      <seealso cref="Thread.DoInteractiveExecution" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.NewInteractiveArgs">
      <summary>Creates and returns an InteractiveArgs object.</summary>
      <remarks>You can pass the object this method returns as a parameter to one of the following methods: Engine.NewExecution, Engine.NewHierarchicalExecution, or Thread.DoInteractiveExecution.</remarks>
      <seealso cref="EditArgs" />
      <seealso cref="Engine.NewExecution" />
      <seealso cref="Engine.NewHierarchicalExecution" />
      <seealso cref="InteractiveArgs" />
      <seealso cref="Thread.DoInteractiveExecution" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.NewEditArgs">
      <summary>Creates and returns an EditArgs object. </summary>
      <remarks>You can pass the object this method returns as a parameter to one of the following methods: Engine.NewExecution, Engine.NewHierarchicalExecution, Engine.GetEditTimeToolMenuItems, Engine.GetRunTimeToolMenuItems, Engine.NewEditContext, Sequence.EvalEntryPointNameExpressionEx, Sequence.EvalEntryPointEnabledExpressionEx, and RunTimeMenuItem.InvokeItem.</remarks>
      <seealso cref="EditArgs" />
      <seealso cref="Engine.GetEditTimeToolMenuItems" />
      <seealso cref="Engine.GetRunTimeToolMenuItems" />
      <seealso cref="Engine.NewEditContext" />
      <seealso cref="Engine.NewExecution" />
      <seealso cref="Engine.NewHierarchicalExecution" />
      <seealso cref="RunTimeMenuItem.InvokeItem" />
      <seealso cref="Sequence.EvalEntryPointEnabledExpressionEx" />
      <seealso cref="Sequence.EvalEntryPointNameExpressionEx" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.NewEditArgs">
      <summary>Creates and returns an EditArgs object. </summary>
      <remarks>You can pass the object this method returns as a parameter to one of the following methods: Engine.NewExecution, Engine.NewHierarchicalExecution, Engine.GetEditTimeToolMenuItems, Engine.GetRunTimeToolMenuItems, Engine.NewEditContext, Sequence.EvalEntryPointNameExpressionEx, Sequence.EvalEntryPointEnabledExpressionEx, and RunTimeMenuItem.InvokeItem.</remarks>
      <seealso cref="EditArgs" />
      <seealso cref="Engine.GetEditTimeToolMenuItems" />
      <seealso cref="Engine.GetRunTimeToolMenuItems" />
      <seealso cref="Engine.NewEditContext" />
      <seealso cref="Engine.NewExecution" />
      <seealso cref="Engine.NewHierarchicalExecution" />
      <seealso cref="RunTimeMenuItem.InvokeItem" />
      <seealso cref="Sequence.EvalEntryPointEnabledExpressionEx" />
      <seealso cref="Sequence.EvalEntryPointNameExpressionEx" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.NewPropertyObject(NationalInstruments.TestStand.Interop.API.PropertyValueTypes,System.Boolean,System.String,System.Int32)">
      <summary>Creates and returns a new PropertyObject object.</summary>
      <remarks>TestStand does not validate property names you create programmatically for invalid characters, such as spaces, which can result in errors when you use expressions. Use the PropertyObject.ValidateNewName, PropertyObject.ValidateNewSubPropertyName, or PropertyObject.ValidateNewElementName methods to validate property names. TestStand expressions require PropertyObject names to be strings that contain only letters, numbers, and underscores. PropertyObject names cannot contain spaces, start with a number, or be empty.
Additionally, the PropertyObject name cannot be <c>Value</c>, and you cannot have duplicate subproperty names.
For example, <c>MyVariableName_2000</c> is a valid PropertyObject name.
Names of elements in a PropertyObject array can contain any character. Both sequence names and step names are examples of such named array elements. However, sequence names cannot be empty or contain control characters. You cannot have duplicate sequence names. The name <c>NI</c> is reserved at the root level for attributes.</remarks>
      <param name="ValueType">Specifies the type of value you want the property to contain.</param>
      <param name="asArray">Pass <c>True</c> if you want the property value to be an array.</param>
      <param name="typeNameParam">If you pass <c>PropValType_NamedType</c> for the ValueType parameter, pass the name of the type for this parameter. Otherwise, pass an empty string. If you pass a type name, the type must already be in memory. Refer to NamedPropertyTypes for a list of built-in name types.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <seealso cref="NamedPropertyTypes" />
      <seealso cref="PropertyObject" />
      <seealso cref="PropertyObject.ValidateNewElementName" />
      <seealso cref="PropertyObject.ValidateNewName" />
      <seealso cref="PropertyObject.ValidateNewSubPropertyName" />
      <seealso cref="PropertyOptions" />
      <seealso cref="PropertyValueTypes" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.NewPropertyObject(NationalInstruments.TestStand.Interop.API.PropertyValueTypes,System.Boolean,System.String,System.Int32)">
      <summary>Creates and returns a new PropertyObject object.</summary>
      <remarks>TestStand does not validate property names you create programmatically for invalid characters, such as spaces, which can result in errors when you use expressions. Use the PropertyObject.ValidateNewName, PropertyObject.ValidateNewSubPropertyName, or PropertyObject.ValidateNewElementName methods to validate property names. TestStand expressions require PropertyObject names to be strings that contain only letters, numbers, and underscores. PropertyObject names cannot contain spaces, start with a number, or be empty.
Additionally, the PropertyObject name cannot be <c>Value</c>, and you cannot have duplicate subproperty names.
For example, <c>MyVariableName_2000</c> is a valid PropertyObject name.
Names of elements in a PropertyObject array can contain any character. Both sequence names and step names are examples of such named array elements. However, sequence names cannot be empty or contain control characters. You cannot have duplicate sequence names. The name <c>NI</c> is reserved at the root level for attributes.</remarks>
      <param name="ValueType">Specifies the type of value you want the property to contain.</param>
      <param name="asArray">Pass <c>True</c> if you want the property value to be an array.</param>
      <param name="typeNameParam">If you pass <c>PropValType_NamedType</c> for the ValueType parameter, pass the name of the type for this parameter. Otherwise, pass an empty string. If you pass a type name, the type must already be in memory. Refer to NamedPropertyTypes for a list of built-in name types.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <seealso cref="NamedPropertyTypes" />
      <seealso cref="PropertyObject" />
      <seealso cref="PropertyObject.ValidateNewElementName" />
      <seealso cref="PropertyObject.ValidateNewName" />
      <seealso cref="PropertyObject.ValidateNewSubPropertyName" />
      <seealso cref="PropertyOptions" />
      <seealso cref="PropertyValueTypes" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.RegisterUIMessageCallback(System.Int32)">
      <summary><para>Note: This method is obsolete. Use the Engine.RegisterUIMessageCallbackEx method instead. Calling this method on a 64-bit instance of the TestStand Engine results in an error.</para></summary>
      <remarks>Registers a C function as the user interface message event callback.
<para>Note: National Instruments recommends using the Application Manager control with the ApplicationMgr.AfterUIMessageEvent and ApplicationMgr.UIMessageEvent events as needed. Refer to the example user interface applications TestStand provides, located in the <c>&lt;TestStand&gt;\UserInterfaces</c> directory.</para>
You can use a C function as the Event callback, instead of using ActiveX events or polling. Ensure the Engine.UIMessagePollingEnabled property is <c>False</c> or TestStand does not call the callback.
The callback function must use the following C function prototype:
<c>void __cdecl UIMessageCallback(struct IDispatch *UIMessageDisp);</c>
The UIMessageDisp parameter is the IDispatch pointer to a UIMessage object. Because this pointer is passed to the callback as a parameter, do not release it when you finish using it.
<para>Note: Use this method only inside of the sequence editor or user interface.</para></remarks>
      <param name="callbackFuncAddr">Specifies the address of the callback function.</param>
      <seealso cref="Engine.GetUIMessage" />
      <seealso cref="Engine.UIMessageEvent" />
      <seealso cref="Engine.UIMessagePollingEnabled" />
      <seealso cref="StationOptions.UIMessageDelay" />
      <seealso cref="StationOptions.UIMessageMinDelay" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.RegisterUIMessageCallback(System.Int32)">
      <summary><para>Note: This method is obsolete. Use the Engine.RegisterUIMessageCallbackEx method instead. Calling this method on a 64-bit instance of the TestStand Engine results in an error.</para></summary>
      <remarks>Registers a C function as the user interface message event callback.
<para>Note: National Instruments recommends using the Application Manager control with the ApplicationMgr.AfterUIMessageEvent and ApplicationMgr.UIMessageEvent events as needed. Refer to the example user interface applications TestStand provides, located in the <c>&lt;TestStand&gt;\UserInterfaces</c> directory.</para>
You can use a C function as the Event callback, instead of using ActiveX events or polling. Ensure the Engine.UIMessagePollingEnabled property is <c>False</c> or TestStand does not call the callback.
The callback function must use the following C function prototype:
<c>void __cdecl UIMessageCallback(struct IDispatch *UIMessageDisp);</c>
The UIMessageDisp parameter is the IDispatch pointer to a UIMessage object. Because this pointer is passed to the callback as a parameter, do not release it when you finish using it.
<para>Note: Use this method only inside of the sequence editor or user interface.</para></remarks>
      <param name="callbackFuncAddr">Specifies the address of the callback function.</param>
      <seealso cref="Engine.GetUIMessage" />
      <seealso cref="Engine.UIMessageEvent" />
      <seealso cref="Engine.UIMessagePollingEnabled" />
      <seealso cref="StationOptions.UIMessageDelay" />
      <seealso cref="StationOptions.UIMessageMinDelay" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.GetUIMessage">
      <summary>Obtains the next available message from the queue.</summary>
      <remarks>Use this method to poll for UIMessages.</remarks>
      <seealso cref="Engine.RegisterUIMessageCallback" />
      <seealso cref="Engine.UIMessageEvent" />
      <seealso cref="Engine.UIMessagePollingEnabled" />
      <seealso cref="StationOptions.UIMessageDelay" />
      <seealso cref="StationOptions.UIMessageMinDelay" />
      <seealso cref="UIMessage" />
      <seealso cref="&quot;User Interface (UI) Messages&quot;/InfoTopics/App_User_Interface_UI_Messages.html" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.GetUIMessage">
      <summary>Obtains the next available message from the queue.</summary>
      <remarks>Use this method to poll for UIMessages.</remarks>
      <seealso cref="Engine.RegisterUIMessageCallback" />
      <seealso cref="Engine.UIMessageEvent" />
      <seealso cref="Engine.UIMessagePollingEnabled" />
      <seealso cref="StationOptions.UIMessageDelay" />
      <seealso cref="StationOptions.UIMessageMinDelay" />
      <seealso cref="UIMessage" />
      <seealso cref="&quot;User Interface (UI) Messages&quot;/InfoTopics/App_User_Interface_UI_Messages.html" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.DisplayLoginDialog(System.String,System.String,System.String,System.Boolean,NationalInstruments.TestStand.Interop.API.User@)">
      <summary>Launches a login dialog box.</summary>
      <remarks>A drop-down list box in the dialog box contains the login names of all current TestStand users.
The LoginLogout Front-End callback calls this method.</remarks>
      <returns>Returns <c>True</c> if you click OK in the dialog box. Returns <c>False</c> if you click Cancel.</returns>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.</param>
      <param name="initialLoginName">Specifies the initial login name you want displayed in the dialog box. If you pass an empty string, the first login name in the ring control is selected.</param>
      <param name="initialPassword">Specifies the initial password you want displayed in the dialog box. It appears on screen as all asterisks (*).</param>
      <param name="modalToAppMainWind">By default, the dialog box is modal to the last active window of the calling thread, or if there is none, to the last active window from AppMainHwnd. If you set this option, the dialog box is modal with respect to the window handle of the Engine.AppMainHwnd property. Typically, you do not need to set this option.</param>
      <param name="userObject">Returns the User object that represents the user who logged in.</param>
      <seealso cref="Engine.AppMainHwnd" />
      <seealso cref="Engine.CurrentUser" />
      <seealso cref="Engine.GetUser" />
      <seealso cref="User" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.DisplayLoginDialog(System.String,System.String,System.String,System.Boolean,NationalInstruments.TestStand.Interop.API.User@)">
      <summary>Launches a login dialog box.</summary>
      <remarks>A drop-down list box in the dialog box contains the login names of all current TestStand users.
The LoginLogout Front-End callback calls this method.</remarks>
      <returns>Returns <c>True</c> if you click OK in the dialog box. Returns <c>False</c> if you click Cancel.</returns>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.</param>
      <param name="initialLoginName">Specifies the initial login name you want displayed in the dialog box. If you pass an empty string, the first login name in the ring control is selected.</param>
      <param name="initialPassword">Specifies the initial password you want displayed in the dialog box. It appears on screen as all asterisks (*).</param>
      <param name="modalToAppMainWind">By default, the dialog box is modal to the last active window of the calling thread, or if there is none, to the last active window from AppMainHwnd. If you set this option, the dialog box is modal with respect to the window handle of the Engine.AppMainHwnd property. Typically, you do not need to set this option.</param>
      <param name="userObject">Returns the User object that represents the user who logged in.</param>
      <seealso cref="Engine.AppMainHwnd" />
      <seealso cref="Engine.CurrentUser" />
      <seealso cref="Engine.GetUser" />
      <seealso cref="User" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.DisplayEditUserDialog(System.String,NationalInstruments.TestStand.Interop.API.User,System.Boolean)">
      <summary>Launches a dialog box in which you can edit user information for a specific user. You can edit the name, comment, and password.</summary>
      <remarks>Calling the PropertyObject.DisplayPropertiesDialog method on a User object and passing default dialog options is equivalent to calling this method.</remarks>
      <returns>Returns <c>True</c> if you click OK in the dialog box. Returns <c>False</c> if you click Cancel.</returns>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.</param>
      <param name="userObject">Specifies the User object you want to edit.</param>
      <param name="modalToAppMainWind">By default, the dialog box is modal to the last active window of the calling thread, or if there is none, to the last active window from AppMainHwnd. If you set this option, the dialog box is modal with respect to the window handle the Engine.AppMainHwnd property returns. Typically, you do not need to set this option.</param>
      <seealso cref="Engine.AppMainHwnd" />
      <seealso cref="PropertyObject.DisplayPropertiesDialog" />
      <seealso cref="User" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.DisplayEditUserDialog(System.String,NationalInstruments.TestStand.Interop.API.User,System.Boolean)">
      <summary>Launches a dialog box in which you can edit user information for a specific user. You can edit the name, comment, and password.</summary>
      <remarks>Calling the PropertyObject.DisplayPropertiesDialog method on a User object and passing default dialog options is equivalent to calling this method.</remarks>
      <returns>Returns <c>True</c> if you click OK in the dialog box. Returns <c>False</c> if you click Cancel.</returns>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.</param>
      <param name="userObject">Specifies the User object you want to edit.</param>
      <param name="modalToAppMainWind">By default, the dialog box is modal to the last active window of the calling thread, or if there is none, to the last active window from AppMainHwnd. If you set this option, the dialog box is modal with respect to the window handle the Engine.AppMainHwnd property returns. Typically, you do not need to set this option.</param>
      <seealso cref="Engine.AppMainHwnd" />
      <seealso cref="PropertyObject.DisplayPropertiesDialog" />
      <seealso cref="User" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.DisplayNewUserDialog(System.String,System.Boolean,NationalInstruments.TestStand.Interop.API.User@)">
      <summary>Launches a dialog box for creating a new user.</summary>
      <returns>Returns <c>True</c> if you click OK in the dialog box. Returns <c>False</c> if you click Cancel.</returns>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.</param>
      <param name="modalToAppMainWind">By default, the dialog box is modal to the last active window of the calling thread, or if there is none, to the last active window from AppMainHwnd. If you set this option, the dialog box is modal with respect to the window handle of the Engine.AppMainHwnd property. Typically, you do not need to set this option.</param>
      <param name="userObject">Returns the User object that represents the newly created user.</param>
      <seealso cref="Engine.AppMainHwnd" />
      <seealso cref="Engine.DisplayEditUserDialog" />
      <seealso cref="PropertyObject.DisplayPropertiesDialog" />
      <seealso cref="User" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.DisplayNewUserDialog(System.String,System.Boolean,NationalInstruments.TestStand.Interop.API.User@)">
      <summary>Launches a dialog box for creating a new user.</summary>
      <returns>Returns <c>True</c> if you click OK in the dialog box. Returns <c>False</c> if you click Cancel.</returns>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.</param>
      <param name="modalToAppMainWind">By default, the dialog box is modal to the last active window of the calling thread, or if there is none, to the last active window from AppMainHwnd. If you set this option, the dialog box is modal with respect to the window handle of the Engine.AppMainHwnd property. Typically, you do not need to set this option.</param>
      <param name="userObject">Returns the User object that represents the newly created user.</param>
      <seealso cref="Engine.AppMainHwnd" />
      <seealso cref="Engine.DisplayEditUserDialog" />
      <seealso cref="PropertyObject.DisplayPropertiesDialog" />
      <seealso cref="User" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.DisplaySearchDirDialog(System.String,System.Boolean,System.Boolean)">
      <summary>Launches a dialog box in which you can edit the list of TestStand search directories.</summary>
      <returns>Returns <c>True</c> if you make modifications and click OK in the dialog box. Returns <c>False</c> if you click Cancel or make no modifications.</returns>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.</param>
      <param name="readOnly">Pass <c>True</c> if you want a read-only version of the dialog box.</param>
      <param name="modalToAppMainWind">By default, the dialog box is modal to the last active window of the calling thread, or if there is none, to the last active window from AppMainHwnd. If you set this option, the dialog box is modal with respect to the window handle of the Engine.AppMainHwnd property. Typically, you do not need to set this option.</param>
      <seealso cref="Engine.AppMainHwnd" />
      <seealso cref="Engine.ConfigDirectory" />
      <seealso cref="Engine.ConfigFile" />
      <seealso cref="Engine.SearchDirectories" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.DisplaySearchDirDialog(System.String,System.Boolean,System.Boolean)">
      <summary>Launches a dialog box in which you can edit the list of TestStand search directories.</summary>
      <returns>Returns <c>True</c> if you make modifications and click OK in the dialog box. Returns <c>False</c> if you click Cancel or make no modifications.</returns>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.</param>
      <param name="readOnly">Pass <c>True</c> if you want a read-only version of the dialog box.</param>
      <param name="modalToAppMainWind">By default, the dialog box is modal to the last active window of the calling thread, or if there is none, to the last active window from AppMainHwnd. If you set this option, the dialog box is modal with respect to the window handle of the Engine.AppMainHwnd property. Typically, you do not need to set this option.</param>
      <seealso cref="Engine.AppMainHwnd" />
      <seealso cref="Engine.ConfigDirectory" />
      <seealso cref="Engine.ConfigFile" />
      <seealso cref="Engine.SearchDirectories" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.DisplayOptionsDialog(System.String,System.Boolean,System.Boolean)">
      <summary>Launches the Station Options dialog box.</summary>
      <remarks>The Station Options dialog box contains numerous settings that affect execution, user privileges, and process models. Click OK in the dialog box to save these options in the engine configuration file Engine.ConfigFile property.</remarks>
      <returns>Returns <c>True</c> if you click OK in the dialog box. Returns <c>False</c> if you click Cancel.</returns>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.</param>
      <param name="readOnly">Pass <c>True</c> if you want a read-only version of the dialog box.</param>
      <param name="modalToAppMainWind">By default, the dialog box is modal to the last active window of the calling thread, or if there is none, to the last active window from AppMainHwnd. If you set this option, the dialog box is modal with respect to the window handle the Engine.AppMainHwnd property returns. Typically, you do not need to set this option.</param>
      <seealso cref="Engine.AppMainHwnd" />
      <seealso cref="Engine.ConfigDirectory" />
      <seealso cref="Engine.ConfigFile" />
      <seealso cref="Engine.StationOptions" />
      <seealso cref="&quot;Station Options dialog box&quot;javascript:RefLink('/InfoTopics/DB_Station_Opt.htm')" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.DisplayOptionsDialog(System.String,System.Boolean,System.Boolean)">
      <summary>Launches the Station Options dialog box.</summary>
      <remarks>The Station Options dialog box contains numerous settings that affect execution, user privileges, and process models. Click OK in the dialog box to save these options in the engine configuration file Engine.ConfigFile property.</remarks>
      <returns>Returns <c>True</c> if you click OK in the dialog box. Returns <c>False</c> if you click Cancel.</returns>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.</param>
      <param name="readOnly">Pass <c>True</c> if you want a read-only version of the dialog box.</param>
      <param name="modalToAppMainWind">By default, the dialog box is modal to the last active window of the calling thread, or if there is none, to the last active window from AppMainHwnd. If you set this option, the dialog box is modal with respect to the window handle the Engine.AppMainHwnd property returns. Typically, you do not need to set this option.</param>
      <seealso cref="Engine.AppMainHwnd" />
      <seealso cref="Engine.ConfigDirectory" />
      <seealso cref="Engine.ConfigFile" />
      <seealso cref="Engine.StationOptions" />
      <seealso cref="&quot;Station Options dialog box&quot;javascript:RefLink('/InfoTopics/DB_Station_Opt.htm')" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.DisplayRunTimeErrorDialog(System.String,System.String,System.Boolean,System.Boolean,System.Boolean@,System.Boolean@,NationalInstruments.TestStand.Interop.API.RTEOptions@)">
      <summary><para>Note: This method is obsolete. Use the Engine.DisplayRunTimeErrorDialogEx method instead.</para></summary>
      <remarks>Launches the Run-Time Error dialog box. The sequence editor and user interface typically call this function in response to a UIMsg_BreakOnRunTimeError event. The Run-Time Error dialog box allows the user to specify how the execution is to proceed.</remarks>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.</param>
      <param name="errorMessage">Specifies the error message to display in the dialog box.</param>
      <param name="inCleanupStepGroup">Pass <c>True</c> if the run-time error occurred in the Cleanup step group of the sequence. This information affects the list of options the dialog box displays to the user.</param>
      <param name="modalToAppMainWind">By default, the dialog box is modal to the last active window of the calling thread, or if there is none, to the last active window from AppMainHwnd. If you set this option, the dialog box is modal with respect to the window handle of the Engine.AppMainHwnd property. Typically, you do not need to set this option.</param>
      <param name="displayOnNextError">Returns a value that indicates whether the user wants this dialog box to launch again if another run-time error occurs in the current execution.</param>
      <param name="suspendExecution">Returns a value that indicates whether the user wants the current execution to suspend at the location of the run-time error.</param>
      <param name="runTimeErrorAction">Returns the option the user selects in the dialog box to specify how the execution should proceed.</param>
      <seealso cref="Engine.AppMainHwnd" />
      <seealso cref="Engine.DisplayRunTimeErrorDialogEx" />
      <seealso cref="RTEOptions" />
      <seealso cref="&quot;Run-Time Error dialog box&quot;javascript:RefLink('/InfoTopics/DB_Run_Time_Error.htm')" />
      <seealso cref="UIMessage.Event" />
      <seealso cref="UIMessageCodes" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.DisplayRunTimeErrorDialog(System.String,System.String,System.Boolean,System.Boolean,System.Boolean@,System.Boolean@,NationalInstruments.TestStand.Interop.API.RTEOptions@)">
      <summary><para>Note: This method is obsolete. Use the Engine.DisplayRunTimeErrorDialogEx method instead.</para></summary>
      <remarks>Launches the Run-Time Error dialog box. The sequence editor and user interface typically call this function in response to a UIMsg_BreakOnRunTimeError event. The Run-Time Error dialog box allows the user to specify how the execution is to proceed.</remarks>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.</param>
      <param name="errorMessage">Specifies the error message to display in the dialog box.</param>
      <param name="inCleanupStepGroup">Pass <c>True</c> if the run-time error occurred in the Cleanup step group of the sequence. This information affects the list of options the dialog box displays to the user.</param>
      <param name="modalToAppMainWind">By default, the dialog box is modal to the last active window of the calling thread, or if there is none, to the last active window from AppMainHwnd. If you set this option, the dialog box is modal with respect to the window handle of the Engine.AppMainHwnd property. Typically, you do not need to set this option.</param>
      <param name="displayOnNextError">Returns a value that indicates whether the user wants this dialog box to launch again if another run-time error occurs in the current execution.</param>
      <param name="suspendExecution">Returns a value that indicates whether the user wants the current execution to suspend at the location of the run-time error.</param>
      <param name="runTimeErrorAction">Returns the option the user selects in the dialog box to specify how the execution should proceed.</param>
      <seealso cref="Engine.AppMainHwnd" />
      <seealso cref="Engine.DisplayRunTimeErrorDialogEx" />
      <seealso cref="RTEOptions" />
      <seealso cref="&quot;Run-Time Error dialog box&quot;javascript:RefLink('/InfoTopics/DB_Run_Time_Error.htm')" />
      <seealso cref="UIMessage.Event" />
      <seealso cref="UIMessageCodes" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.DisplayOpenFileDialog(System.String,System.String,System.String,System.Boolean,System.String@,System.String@,System.Int32,System.String,System.Int32,System.String,System.Object)">
      <summary><para>Note: This method is obsolete. Use the Engine.DisplayFileDialog method instead.</para></summary>
      <remarks>Launches a dialog box in which the user can select a file. The user can choose whether the dialog box returns an absolute or relative pathname for the file. The dialog box can only return a relative pathname when the file is located under one of the TestStand search directories. If the file is not located under any of the TestStand search directories and the user requests that the dialog box return a relative pathname, the dialog box prompts the user to add the name of the directory that contains the file to the list of TestStand search directories. You can pass a sequence file object to include the directory among the list of valid search directories for a relative pathname.</remarks>
      <returns>Returns <c>True</c> if you click OK in the dialog box. Returns <c>False</c> if you click Cancel.</returns>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.</param>
      <param name="okButtonText">Specifies a string to display on the OK button. Pass an empty string to use the default.</param>
      <param name="initialPath">Specifies the path of the directory you want the user to browse initially. Pass an empty string to specify the current directory.</param>
      <param name="modalToAppMainWind">By default, the dialog box is modal to the last active window of the calling thread, or if there is none, to the last active window from AppMainHwnd. If you set this option, the dialog box is modal with respect to the window handle that the Engine.AppMainHwnd property returns. Typically, you do not need to set this option.</param>
      <param name="selectedPath">Returns the pathname the user specifies in the dialog box. The path can be relative.</param>
      <param name="absolutePath">Returns the absolute pathname of the file the user selects.</param>
      <param name="openFileDialogFlags">Pass <c>0</c> for the default behavior, or pass one or more OpenFileDialogOptions constants. Use the bitwise-OR operator to specify multiple flags.</param>
      <param name="defaultExtension">Specifies the extension to append to the pathname if the user specifies no extension. Do not include the period in the extension.</param>
      <param name="win32Flags">Specifies the WindowsFileDialogFlags.</param>
      <param name="fileFilter">Specifies the extensions files must have to appear in the dialog box. Each filter the string contains has two parts. The first part is a descriptive name for the filter and the second part lists the extensions the file can have. Specify multiple extensions using a semi-colon (;) as a delimiter, and end each section with a vertical bar (|). End the string with a final vertical bar (|). The following example illustrates this format:
<c>&quot;Sequence Files (*.seq)|*.seq|Report Files (*.txt;*.htm;*.html)|*.txt;*.htm;*.html||&quot;</c></param>
      <param name="currentSequenceFile">Specifies a SequenceFile object if you want to include the directory of the sequence file in the list of valid search directories for a relative pathname.</param>
      <seealso cref="Engine.AppMainHwnd" />
      <seealso cref="Engine.DisplayFileDialog" />
      <seealso cref="&quot;Omitting Optional Parameters&quot;javascript:APILink('/InfoTopics/Optional_Parameters.htm')" />
      <seealso cref="OpenFileDialogOptions" />
      <seealso cref="WindowsFileDialogFlags" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.DisplayOpenFileDialog(System.String,System.String,System.String,System.Boolean,System.String@,System.String@,System.Int32,System.String,System.Int32,System.String,System.Object)">
      <summary><para>Note: This method is obsolete. Use the Engine.DisplayFileDialog method instead.</para></summary>
      <remarks>Launches a dialog box in which the user can select a file. The user can choose whether the dialog box returns an absolute or relative pathname for the file. The dialog box can only return a relative pathname when the file is located under one of the TestStand search directories. If the file is not located under any of the TestStand search directories and the user requests that the dialog box return a relative pathname, the dialog box prompts the user to add the name of the directory that contains the file to the list of TestStand search directories. You can pass a sequence file object to include the directory among the list of valid search directories for a relative pathname.</remarks>
      <returns>Returns <c>True</c> if you click OK in the dialog box. Returns <c>False</c> if you click Cancel.</returns>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.</param>
      <param name="okButtonText">Specifies a string to display on the OK button. Pass an empty string to use the default.</param>
      <param name="initialPath">Specifies the path of the directory you want the user to browse initially. Pass an empty string to specify the current directory.</param>
      <param name="modalToAppMainWind">By default, the dialog box is modal to the last active window of the calling thread, or if there is none, to the last active window from AppMainHwnd. If you set this option, the dialog box is modal with respect to the window handle that the Engine.AppMainHwnd property returns. Typically, you do not need to set this option.</param>
      <param name="selectedPath">Returns the pathname the user specifies in the dialog box. The path can be relative.</param>
      <param name="absolutePath">Returns the absolute pathname of the file the user selects.</param>
      <param name="openFileDialogFlags">Pass <c>0</c> for the default behavior, or pass one or more OpenFileDialogOptions constants. Use the bitwise-OR operator to specify multiple flags.</param>
      <param name="defaultExtension">Specifies the extension to append to the pathname if the user specifies no extension. Do not include the period in the extension.</param>
      <param name="win32Flags">Specifies the WindowsFileDialogFlags.</param>
      <param name="fileFilter">Specifies the extensions files must have to appear in the dialog box. Each filter the string contains has two parts. The first part is a descriptive name for the filter and the second part lists the extensions the file can have. Specify multiple extensions using a semi-colon (;) as a delimiter, and end each section with a vertical bar (|). End the string with a final vertical bar (|). The following example illustrates this format:
<c>&quot;Sequence Files (*.seq)|*.seq|Report Files (*.txt;*.htm;*.html)|*.txt;*.htm;*.html||&quot;</c></param>
      <param name="currentSequenceFile">Specifies a SequenceFile object if you want to include the directory of the sequence file in the list of valid search directories for a relative pathname.</param>
      <seealso cref="Engine.AppMainHwnd" />
      <seealso cref="Engine.DisplayFileDialog" />
      <seealso cref="&quot;Omitting Optional Parameters&quot;javascript:APILink('/InfoTopics/Optional_Parameters.htm')" />
      <seealso cref="OpenFileDialogOptions" />
      <seealso cref="WindowsFileDialogFlags" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.DisplayStepPropDialog(System.String,NationalInstruments.TestStand.Interop.API.Step,System.Boolean,System.Boolean,System.Boolean,System.Boolean@,System.Boolean@)">
      <summary>Launches a dialog box in which you can edit the properties of a step.</summary>
      <remarks>Calling the PropertyObject.DisplayPropertiesDialog method on a Step object is equivalent to calling this method.</remarks>
      <returns>Returns <c>True</c> if you click OK in the dialog box. Returns <c>False</c> if you click Cancel.</returns>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.</param>
      <param name="step">Specifies the Step object that contains the properties you want to edit.</param>
      <param name="readOnly">Pass <c>True</c> to launch a read-only version of the dialog box.</param>
      <param name="modalToAppMainWind">By default, the dialog box is modal to the last active window of the calling thread, or if there is none, to the last active window from AppMainHwnd. If you set this option, the dialog box is modal with respect to the window handle of the Engine.AppMainHwnd property. Typically, you do not need to set this option.</param>
      <param name="showViewContentsBtn">Pass <c>True</c> to show a View Contents button in the dialog box. If you pass <c>True</c>, the viewContents parameter of this method returns <c>True</c> when a user clicks the View Contents button.</param>
      <param name="viewContents">Returns <c>True</c> if the user clicks the View Contents button in the dialog box.</param>
      <param name="modifiedStep">Returns <c>True</c> if the step was modified.</param>
      <seealso cref="Engine.AppMainHwnd" />
      <seealso cref="PropertyObject.DisplayPropertiesDialog" />
      <seealso cref="Step" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.DisplayStepPropDialog(System.String,NationalInstruments.TestStand.Interop.API.Step,System.Boolean,System.Boolean,System.Boolean,System.Boolean@,System.Boolean@)">
      <summary>Launches a dialog box in which you can edit the properties of a step.</summary>
      <remarks>Calling the PropertyObject.DisplayPropertiesDialog method on a Step object is equivalent to calling this method.</remarks>
      <returns>Returns <c>True</c> if you click OK in the dialog box. Returns <c>False</c> if you click Cancel.</returns>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.</param>
      <param name="step">Specifies the Step object that contains the properties you want to edit.</param>
      <param name="readOnly">Pass <c>True</c> to launch a read-only version of the dialog box.</param>
      <param name="modalToAppMainWind">By default, the dialog box is modal to the last active window of the calling thread, or if there is none, to the last active window from AppMainHwnd. If you set this option, the dialog box is modal with respect to the window handle of the Engine.AppMainHwnd property. Typically, you do not need to set this option.</param>
      <param name="showViewContentsBtn">Pass <c>True</c> to show a View Contents button in the dialog box. If you pass <c>True</c>, the viewContents parameter of this method returns <c>True</c> when a user clicks the View Contents button.</param>
      <param name="viewContents">Returns <c>True</c> if the user clicks the View Contents button in the dialog box.</param>
      <param name="modifiedStep">Returns <c>True</c> if the step was modified.</param>
      <seealso cref="Engine.AppMainHwnd" />
      <seealso cref="PropertyObject.DisplayPropertiesDialog" />
      <seealso cref="Step" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.DisplaySequencePropDialog(System.String,NationalInstruments.TestStand.Interop.API.Sequence,System.Boolean,System.Boolean,System.Boolean,System.Boolean@)">
      <summary>Launches a dialog box in which you can edit the properties of a sequence.</summary>
      <remarks>Calling this method is equivalent to calling the PropertyObject.DisplayPropertiesDialog method on a Sequence object. Locking and unlocking a file on the Advanced tab immediately apply to the file. To determine whether the lock state changes, even when the return value from the method is <c>False</c>, you can use the PropertyObjectFile.Locked property to acquire the lock state before and after calling this method and compare the values.</remarks>
      <returns>Returns <c>True</c> if you make modifications and click OK in the dialog box. Returns <c>False</c> if you click Cancel or make no modifications.</returns>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.</param>
      <param name="sequence">Specifies the Sequence object that contains the properties you want to edit.</param>
      <param name="readOnly">Pass <c>True</c> if you want a read-only version of the dialog box.</param>
      <param name="modalToAppMainWind">By default, the dialog box is modal to the last active window of the calling thread, or if there is none, to the last active window from AppMainHwnd. If you set this option, the dialog box is modal with respect to the window handle of the Engine.AppMainHwnd property. Typically, you do not need to set this option.</param>
      <param name="showViewContentsBtn">Pass <c>True</c> to show a View Contents button in the dialog box. If you pass <c>True</c>, the viewContents parameter of this method returns <c>True</c> if the user clicks the View Contents button in the dialog box.</param>
      <param name="viewContents">Returns <c>True</c> if the user clicks the View Contents button in the dialog box.</param>
      <seealso cref="Engine.AppMainHwnd" />
      <seealso cref="PropertyObject.DisplayPropertiesDialog" />
      <seealso cref="PropertyObjectFile.Locked" />
      <seealso cref="Sequence" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.DisplaySequencePropDialog(System.String,NationalInstruments.TestStand.Interop.API.Sequence,System.Boolean,System.Boolean,System.Boolean,System.Boolean@)">
      <summary>Launches a dialog box in which you can edit the properties of a sequence.</summary>
      <remarks>Calling this method is equivalent to calling the PropertyObject.DisplayPropertiesDialog method on a Sequence object. Locking and unlocking a file on the Advanced tab immediately apply to the file. To determine whether the lock state changes, even when the return value from the method is <c>False</c>, you can use the PropertyObjectFile.Locked property to acquire the lock state before and after calling this method and compare the values.</remarks>
      <returns>Returns <c>True</c> if you make modifications and click OK in the dialog box. Returns <c>False</c> if you click Cancel or make no modifications.</returns>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.</param>
      <param name="sequence">Specifies the Sequence object that contains the properties you want to edit.</param>
      <param name="readOnly">Pass <c>True</c> if you want a read-only version of the dialog box.</param>
      <param name="modalToAppMainWind">By default, the dialog box is modal to the last active window of the calling thread, or if there is none, to the last active window from AppMainHwnd. If you set this option, the dialog box is modal with respect to the window handle of the Engine.AppMainHwnd property. Typically, you do not need to set this option.</param>
      <param name="showViewContentsBtn">Pass <c>True</c> to show a View Contents button in the dialog box. If you pass <c>True</c>, the viewContents parameter of this method returns <c>True</c> if the user clicks the View Contents button in the dialog box.</param>
      <param name="viewContents">Returns <c>True</c> if the user clicks the View Contents button in the dialog box.</param>
      <seealso cref="Engine.AppMainHwnd" />
      <seealso cref="PropertyObject.DisplayPropertiesDialog" />
      <seealso cref="PropertyObjectFile.Locked" />
      <seealso cref="Sequence" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.DisplaySeqFilePropDialog(System.String,NationalInstruments.TestStand.Interop.API.SequenceFile,System.Boolean,System.Boolean,System.Boolean,System.Boolean@)">
      <summary>Launches a dialog box in which you can edit the properties of a sequence file.</summary>
      <remarks>You can edit the load/unload options, model options, and other options. Calling the PropertyObject.DisplayPropertiesDialog method on a SequenceFile object is equivalent to calling this method. Locking and unlocking a file on the Advanced tab of the Sequence File Properties dialog box immediately changes the lock state of the file. To determine whether the lock state changes, even when the return value from the method is <c>False</c>, you can use the PropertyObjectFile.Locked property to acquire the lock state before and after calling this method and compare the values.</remarks>
      <returns>Returns <c>True</c> if you make modifications and click OK in the dialog box. Returns <c>False</c> if you click Cancel or make no modifications.</returns>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.</param>
      <param name="sequenceFileParam">Pass a SequenceFile object to specify which sequence file you want to edit.</param>
      <param name="readOnly">Pass <c>True</c> if you want a read-only version of the dialog box.</param>
      <param name="modalToAppMainWind">By default, the dialog box is modal to the last active window of the calling thread, or if there is none, to the last active window from AppMainHwnd. If you set this option, the dialog box is modal with respect to the window handle of the Engine.AppMainHwnd property. Typically, you do not need to set this option.</param>
      <param name="showViewContentsBtn">Pass <c>True</c> to show a View Contents button in the dialog box. If you pass <c>True</c>, the viewContents parameter of this method returns <c>True</c> when a user clicks the View Contents button.</param>
      <param name="viewContents">Returns <c>True</c> if a user clicks the View Contents button in the dialog box.</param>
      <seealso cref="&quot;Advanced tab&quot;javascript:RefLink('/InfoTopics/DB_Seq_File_Prop_Adv_Tab.htm')" />
      <seealso cref="&#xD;&#xA;Engine.AppMainHwnd" />
      <seealso cref="PropertyObject.DisplayPropertiesDialog" />
      <seealso cref="PropertyObjectFile.Locked" />
      <seealso cref="&quot;Sequence File Properties dialog box&quot;javascript:RefLink('/InfoTopics/DB_Seq_File_Prop.htm')" />
      <seealso cref="SequenceFile" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.DisplaySeqFilePropDialog(System.String,NationalInstruments.TestStand.Interop.API.SequenceFile,System.Boolean,System.Boolean,System.Boolean,System.Boolean@)">
      <summary>Launches a dialog box in which you can edit the properties of a sequence file.</summary>
      <remarks>You can edit the load/unload options, model options, and other options. Calling the PropertyObject.DisplayPropertiesDialog method on a SequenceFile object is equivalent to calling this method. Locking and unlocking a file on the Advanced tab of the Sequence File Properties dialog box immediately changes the lock state of the file. To determine whether the lock state changes, even when the return value from the method is <c>False</c>, you can use the PropertyObjectFile.Locked property to acquire the lock state before and after calling this method and compare the values.</remarks>
      <returns>Returns <c>True</c> if you make modifications and click OK in the dialog box. Returns <c>False</c> if you click Cancel or make no modifications.</returns>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.</param>
      <param name="sequenceFileParam">Pass a SequenceFile object to specify which sequence file you want to edit.</param>
      <param name="readOnly">Pass <c>True</c> if you want a read-only version of the dialog box.</param>
      <param name="modalToAppMainWind">By default, the dialog box is modal to the last active window of the calling thread, or if there is none, to the last active window from AppMainHwnd. If you set this option, the dialog box is modal with respect to the window handle of the Engine.AppMainHwnd property. Typically, you do not need to set this option.</param>
      <param name="showViewContentsBtn">Pass <c>True</c> to show a View Contents button in the dialog box. If you pass <c>True</c>, the viewContents parameter of this method returns <c>True</c> when a user clicks the View Contents button.</param>
      <param name="viewContents">Returns <c>True</c> if a user clicks the View Contents button in the dialog box.</param>
      <seealso cref="&quot;Advanced tab&quot;javascript:RefLink('/InfoTopics/DB_Seq_File_Prop_Adv_Tab.htm')" />
      <seealso cref="&#xD;&#xA;Engine.AppMainHwnd" />
      <seealso cref="PropertyObject.DisplayPropertiesDialog" />
      <seealso cref="PropertyObjectFile.Locked" />
      <seealso cref="&quot;Sequence File Properties dialog box&quot;javascript:RefLink('/InfoTopics/DB_Seq_File_Prop.htm')" />
      <seealso cref="SequenceFile" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.DisplayPreconditionDialog(System.String,NationalInstruments.TestStand.Interop.API.Sequence,System.Boolean,System.Boolean,System.Object)">
      <summary>Launches a dialog box in which you can edit the preconditions for a step or for all steps in a sequence.</summary>
      <returns>Returns <c>True</c> if you make modifications and click OK in the dialog box. Returns <c>False</c> if you click Cancel or make no modifications.</returns>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.</param>
      <param name="sequence">Specifies the sequence in which to edit preconditions.</param>
      <param name="readOnly">Pass <c>True</c> if you want a read-only version of the dialog box.</param>
      <param name="modalToAppMainWind">By default, the dialog box is modal to the last active window of the calling thread, or if there is none, to the last active window from AppMainHwnd. If you set this option, the dialog box is modal with respect to the window handle of the Engine.AppMainHwnd property. Typically, you do not need to set this option.</param>
      <param name="initialStep">Specifies a Step object if you want the dialog box to display only the preconditions for a particular step.</param>
      <seealso cref="Engine.AppMainHwnd" />
      <seealso cref="Engine.DisplayStepPropDialog" />
      <seealso cref="&quot;Omitting Optional Parameters&quot;javascript:APILink('/InfoTopics/Optional_Parameters.htm')" />
      <seealso cref="Sequence" />
      <seealso cref="Step" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.DisplayPreconditionDialog(System.String,NationalInstruments.TestStand.Interop.API.Sequence,System.Boolean,System.Boolean,System.Object)">
      <summary>Launches a dialog box in which you can edit the preconditions for a step or for all steps in a sequence.</summary>
      <returns>Returns <c>True</c> if you make modifications and click OK in the dialog box. Returns <c>False</c> if you click Cancel or make no modifications.</returns>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.</param>
      <param name="sequence">Specifies the sequence in which to edit preconditions.</param>
      <param name="readOnly">Pass <c>True</c> if you want a read-only version of the dialog box.</param>
      <param name="modalToAppMainWind">By default, the dialog box is modal to the last active window of the calling thread, or if there is none, to the last active window from AppMainHwnd. If you set this option, the dialog box is modal with respect to the window handle of the Engine.AppMainHwnd property. Typically, you do not need to set this option.</param>
      <param name="initialStep">Specifies a Step object if you want the dialog box to display only the preconditions for a particular step.</param>
      <seealso cref="Engine.AppMainHwnd" />
      <seealso cref="Engine.DisplayStepPropDialog" />
      <seealso cref="&quot;Omitting Optional Parameters&quot;javascript:APILink('/InfoTopics/Optional_Parameters.htm')" />
      <seealso cref="Sequence" />
      <seealso cref="Step" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.DisplayBrowseExprDialog(System.String,NationalInstruments.TestStand.Interop.API.SequenceContext,System.String,System.Int32,System.Int32,System.String,System.Boolean,System.Boolean,System.String@,System.Int32@,System.Int32@)">
      <summary><para>Note: This method is obsolete. Use the Engine.DisplayBrowseExprDialogEx method instead.</para></summary>
      <remarks>Launches a dialog box in which you can construct an expression string using variables, properties, constants, operators, and functions.</remarks>
      <returns>Returns <c>True</c> if you click OK in the dialog box. Returns <c>False</c> if you click Cancel.</returns>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.</param>
      <param name="sequenceContextParam">Specifies the sequence context into which to browse. You can use the SequenceFile.NewEditContext method to obtain an edit time sequence context from a sequence file.</param>
      <param name="expressionIn">Specifies the initial expression string for the dialog box. This string must be a localized expression.</param>
      <param name="selectionStartIn">Specifies the zero-based index of the location in the initial expression where the selected text begins. If you want a cursor instead of selected text, pass the same index for selectionEndIn.</param>
      <param name="selectionEndIn">Specifies the index of the location in the initial expression of the first character beyond the selected text. If you want a cursor instead of selected text, pass the same index for selectionStartIn.</param>
      <param name="initialVariableName">Specifies the name of the initial variable or property to show as selected in the dialog box.</param>
      <param name="usesCRLF">If the initial expression string uses a carriage return/linefeed combination (&quot;\r\n&quot;) to indicate the end of a line of text, pass <c>True</c> for this parameter. If the string uses only a linefeed (&quot;\n&quot;), pass <c>False</c>. This parameter also determines if the carriage return/linefeed is inserted in the output expression for new lines.
</param>
      <param name="modalToAppMainWind">By default, the dialog box is modal to the last active window of the calling thread, or if there is none, to the last active window from AppMainHwnd. If you set this option, the dialog box is modal with respect to the window handle of the Engine.AppMainHwnd property. Typically, you do not need to set this option.</param>
      <param name="expressionOut">Returns the resulting expression from the dialog box when the user clicks OK. This expression string is a localized expression. Refer to Engine.DelocalizeExpression for more information about converting a localized expression string to a standard form suitable for evaluation.</param>
      <param name="selectionStartOut">Returns the index of the start of the selected text in the resulting expression when the user clicks OK.</param>
      <param name="selectionEndOut">Returns the index of the first character beyond the selected text in the resulting expression when the user clicks OK.</param>
      <seealso cref="Engine.AppMainHwnd" />
      <seealso cref="Engine.DelocalizeExpression" />
      <seealso cref="Engine.DisplayBrowseExprDialogEx" />
      <seealso cref="Engine.LocalizeExpression" />
      <seealso cref="SequenceContext" />
      <seealso cref="SequenceFile.NewEditContext" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.DisplayBrowseExprDialog(System.String,NationalInstruments.TestStand.Interop.API.SequenceContext,System.String,System.Int32,System.Int32,System.String,System.Boolean,System.Boolean,System.String@,System.Int32@,System.Int32@)">
      <summary><para>Note: This method is obsolete. Use the Engine.DisplayBrowseExprDialogEx method instead.</para></summary>
      <remarks>Launches a dialog box in which you can construct an expression string using variables, properties, constants, operators, and functions.</remarks>
      <returns>Returns <c>True</c> if you click OK in the dialog box. Returns <c>False</c> if you click Cancel.</returns>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.</param>
      <param name="sequenceContextParam">Specifies the sequence context into which to browse. You can use the SequenceFile.NewEditContext method to obtain an edit time sequence context from a sequence file.</param>
      <param name="expressionIn">Specifies the initial expression string for the dialog box. This string must be a localized expression.</param>
      <param name="selectionStartIn">Specifies the zero-based index of the location in the initial expression where the selected text begins. If you want a cursor instead of selected text, pass the same index for selectionEndIn.</param>
      <param name="selectionEndIn">Specifies the index of the location in the initial expression of the first character beyond the selected text. If you want a cursor instead of selected text, pass the same index for selectionStartIn.</param>
      <param name="initialVariableName">Specifies the name of the initial variable or property to show as selected in the dialog box.</param>
      <param name="usesCRLF">If the initial expression string uses a carriage return/linefeed combination (&quot;\r\n&quot;) to indicate the end of a line of text, pass <c>True</c> for this parameter. If the string uses only a linefeed (&quot;\n&quot;), pass <c>False</c>. This parameter also determines if the carriage return/linefeed is inserted in the output expression for new lines.
</param>
      <param name="modalToAppMainWind">By default, the dialog box is modal to the last active window of the calling thread, or if there is none, to the last active window from AppMainHwnd. If you set this option, the dialog box is modal with respect to the window handle of the Engine.AppMainHwnd property. Typically, you do not need to set this option.</param>
      <param name="expressionOut">Returns the resulting expression from the dialog box when the user clicks OK. This expression string is a localized expression. Refer to Engine.DelocalizeExpression for more information about converting a localized expression string to a standard form suitable for evaluation.</param>
      <param name="selectionStartOut">Returns the index of the start of the selected text in the resulting expression when the user clicks OK.</param>
      <param name="selectionEndOut">Returns the index of the first character beyond the selected text in the resulting expression when the user clicks OK.</param>
      <seealso cref="Engine.AppMainHwnd" />
      <seealso cref="Engine.DelocalizeExpression" />
      <seealso cref="Engine.DisplayBrowseExprDialogEx" />
      <seealso cref="Engine.LocalizeExpression" />
      <seealso cref="SequenceContext" />
      <seealso cref="SequenceFile.NewEditContext" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.DisplayToolMenuDialog(System.String,System.Boolean,System.Boolean)">
      <summary>Launches a dialog box in which you can edit the Tools menu items.</summary>
      <returns>Returns <c>True</c> if you make modifications and click OK in the dialog box. Returns <c>False</c> if you click Cancel or make no modifications.</returns>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.</param>
      <param name="readOnly">Pass <c>True</c> if you want a read-only version of the dialog box.</param>
      <param name="modalToAppMainWind">By default, the dialog box is modal to the last active window of the calling thread, or if there is none, to the last active window from AppMainHwnd. If you set this option, the dialog box is modal with respect to the window handle of the Engine.AppMainHwnd property. Typically, you do not need to set this option.</param>
      <seealso cref="Engine.AppMainHwnd" />
      <seealso cref="Engine.GetEditTimeToolMenuItems" />
      <seealso cref="Engine.GetRunTimeToolMenuItems" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.DisplayToolMenuDialog(System.String,System.Boolean,System.Boolean)">
      <summary>Launches a dialog box in which you can edit the Tools menu items.</summary>
      <returns>Returns <c>True</c> if you make modifications and click OK in the dialog box. Returns <c>False</c> if you click Cancel or make no modifications.</returns>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.</param>
      <param name="readOnly">Pass <c>True</c> if you want a read-only version of the dialog box.</param>
      <param name="modalToAppMainWind">By default, the dialog box is modal to the last active window of the calling thread, or if there is none, to the last active window from AppMainHwnd. If you set this option, the dialog box is modal with respect to the window handle of the Engine.AppMainHwnd property. Typically, you do not need to set this option.</param>
      <seealso cref="Engine.AppMainHwnd" />
      <seealso cref="Engine.GetEditTimeToolMenuItems" />
      <seealso cref="Engine.GetRunTimeToolMenuItems" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.DisplayExternalViewerDialog(System.String,System.Boolean,System.Boolean)">
      <summary>Launches a dialog box in which you can edit the external file viewer settings.</summary>
      <remarks>The external viewer settings specify the external viewer applications you use to view report files of various formats. Formats include text (<c>.txt</c>) and HTML (<c>.html</c>) files.</remarks>
      <returns>Returns <c>True</c> if you make modifications and click OK in the dialog box. Returns <c>False</c> if you click Cancel or make no modifications.</returns>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.</param>
      <param name="readOnly">Pass <c>True</c> if you want a read-only version of the dialog box.</param>
      <param name="modalToAppMainWind">By default, the dialog box is modal to the last active window of the calling thread, or if there is none, to the last active window from AppMainHwnd. If you set this option, the dialog box is modal with respect to the window handle of the Engine.AppMainHwnd property. Typically, you do not need to set this option.</param>
      <seealso cref="Engine.AppMainHwnd" />
      <seealso cref="Engine.ConfigDirectory" />
      <seealso cref="Engine.ConfigFile" />
      <seealso cref="Engine.ExternalReportViewers" />
      <seealso cref="Engine.LaunchExternalViewer" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.DisplayExternalViewerDialog(System.String,System.Boolean,System.Boolean)">
      <summary>Launches a dialog box in which you can edit the external file viewer settings.</summary>
      <remarks>The external viewer settings specify the external viewer applications you use to view report files of various formats. Formats include text (<c>.txt</c>) and HTML (<c>.html</c>) files.</remarks>
      <returns>Returns <c>True</c> if you make modifications and click OK in the dialog box. Returns <c>False</c> if you click Cancel or make no modifications.</returns>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.</param>
      <param name="readOnly">Pass <c>True</c> if you want a read-only version of the dialog box.</param>
      <param name="modalToAppMainWind">By default, the dialog box is modal to the last active window of the calling thread, or if there is none, to the last active window from AppMainHwnd. If you set this option, the dialog box is modal with respect to the window handle of the Engine.AppMainHwnd property. Typically, you do not need to set this option.</param>
      <seealso cref="Engine.AppMainHwnd" />
      <seealso cref="Engine.ConfigDirectory" />
      <seealso cref="Engine.ConfigFile" />
      <seealso cref="Engine.ExternalReportViewers" />
      <seealso cref="Engine.LaunchExternalViewer" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.ConstructToolMenus(System.Object)">
      <summary><para>Note: This method is obsolete. Use the Engine.GetEditTimeToolMenuItems and Engine.GetRunTimeToolMenuItems methods instead.</para></summary>
      <remarks>Creates the internal data for the Tools menu that is visible in user interfaces and sequence editors.
Call this function to initialize the Tools menu and submenus for the first time or whenever the Engine.DisplayToolMenuDialog method modifies the Tools menu or submenus. This method also evaluates the hidden expressions to determine which items to include in the Tools menu. The number of Tools menu items and submenus remains fixed until the next time you call this function.</remarks>
      <returns>The number of Tools menus that exist. This number includes the Tools menu and submenus.</returns>
      <param name="editArgsParam">Specifies which items in the user interface are currently selected. The method uses this information to calculate the item text, hidden, and enabled states of each menu item by evaluating its item text, hidden, and enabled expressions.</param>
      <seealso cref="EditArgs" />
      <seealso cref="Engine.DisplayToolMenuDialog" />
      <seealso cref="Engine.GetEditTimeToolMenuItems" />
      <seealso cref="Engine.GetRunTimeToolMenuItems" />
      <seealso cref="&quot;Omitting Optional Parameters&quot;javascript:APILink('/InfoTopics/Optional_Parameters.htm')" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.ConstructToolMenus(System.Object)">
      <summary><para>Note: This method is obsolete. Use the Engine.GetEditTimeToolMenuItems and Engine.GetRunTimeToolMenuItems methods instead.</para></summary>
      <remarks>Creates the internal data for the Tools menu that is visible in user interfaces and sequence editors.
Call this function to initialize the Tools menu and submenus for the first time or whenever the Engine.DisplayToolMenuDialog method modifies the Tools menu or submenus. This method also evaluates the hidden expressions to determine which items to include in the Tools menu. The number of Tools menu items and submenus remains fixed until the next time you call this function.</remarks>
      <returns>The number of Tools menus that exist. This number includes the Tools menu and submenus.</returns>
      <param name="editArgsParam">Specifies which items in the user interface are currently selected. The method uses this information to calculate the item text, hidden, and enabled states of each menu item by evaluating its item text, hidden, and enabled expressions.</param>
      <seealso cref="EditArgs" />
      <seealso cref="Engine.DisplayToolMenuDialog" />
      <seealso cref="Engine.GetEditTimeToolMenuItems" />
      <seealso cref="Engine.GetRunTimeToolMenuItems" />
      <seealso cref="&quot;Omitting Optional Parameters&quot;javascript:APILink('/InfoTopics/Optional_Parameters.htm')" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.GetNumToolMenus">
      <summary><para>Note: This method is obsolete. Use the Engine.GetEditTimeToolMenuItems and Engine.GetRunTimeToolMenuItems methods instead.</para></summary>
      <remarks>Returns the number of Tools menus.
Call the Engine.ConstructToolMenus method before calling this function. The first Tools menu is the top-level menu. The rest of the menus are submenus.</remarks>
      <returns>The number of Tools menus.</returns>
      <seealso cref="Engine.ConstructToolMenus" />
      <seealso cref="Engine.GetEditTimeToolMenuItems" />
      <seealso cref="Engine.GetRunTimeToolMenuItems" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.GetNumToolMenus">
      <summary><para>Note: This method is obsolete. Use the Engine.GetEditTimeToolMenuItems and Engine.GetRunTimeToolMenuItems methods instead.</para></summary>
      <remarks>Returns the number of Tools menus.
Call the Engine.ConstructToolMenus method before calling this function. The first Tools menu is the top-level menu. The rest of the menus are submenus.</remarks>
      <returns>The number of Tools menus.</returns>
      <seealso cref="Engine.ConstructToolMenus" />
      <seealso cref="Engine.GetEditTimeToolMenuItems" />
      <seealso cref="Engine.GetRunTimeToolMenuItems" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.GetNumToolMenuItems(System.Int32)">
      <summary><para>Note: This method is obsolete. Use the Engine.GetEditTimeToolMenuItems and Engine.GetRunTimeToolMenuItems methods instead.</para></summary>
      <remarks>Returns the number of menu items a specific Tools menu contains.
Call the Engine.ConstructToolMenus method before calling this function.</remarks>
      <returns>The number of Tools menu items.</returns>
      <param name="menuIndex">Specifies the zero-based index of the Tools menu from which to obtain the number of Tools menu items.</param>
      <seealso cref="Engine.ConstructToolMenus" />
      <seealso cref="Engine.GetEditTimeToolMenuItems" />
      <seealso cref="Engine.GetRunTimeToolMenuItems" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.GetNumToolMenuItems(System.Int32)">
      <summary><para>Note: This method is obsolete. Use the Engine.GetEditTimeToolMenuItems and Engine.GetRunTimeToolMenuItems methods instead.</para></summary>
      <remarks>Returns the number of menu items a specific Tools menu contains.
Call the Engine.ConstructToolMenus method before calling this function.</remarks>
      <returns>The number of Tools menu items.</returns>
      <param name="menuIndex">Specifies the zero-based index of the Tools menu from which to obtain the number of Tools menu items.</param>
      <seealso cref="Engine.ConstructToolMenus" />
      <seealso cref="Engine.GetEditTimeToolMenuItems" />
      <seealso cref="Engine.GetRunTimeToolMenuItems" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.GetToolMenuItemInfo(System.Int32,System.Int32,System.String@,System.Int32@,System.Boolean@,System.Int32@)">
      <summary><para>Note: This method is obsolete. Use the Engine.GetEditTimeToolMenuItems and Engine.GetRunTimeToolMenuItems methods instead.</para></summary>
      <remarks>Returns information about a Tools menu item.</remarks>
      <param name="menuIndex">Specifies a zero-based index for a Tools menu or submenu.</param>
      <param name="itemIndex">Specifies a zero-based index for an item within the menu or submenu.</param>
      <param name="itemText">Returns the text to display in the menu item.</param>
      <param name="subMenuIndex">If the item is a submenu, this parameter returns the zero-based menu index of the Tools menu for the item. Otherwise, it returns <c>-1</c>.</param>
      <param name="enabled">If this parameter is <c>True</c>, enable the menu item. If this parameter is <c>False</c>, disable it.</param>
      <param name="uniqueItemID">Returns a unique ID to identify the menu item. Use this ID to invoke the Tools menu item or to obtain the menu item information again at a later time.</param>
      <seealso cref="Engine.GetEditTimeToolMenuItems" />
      <seealso cref="Engine.GetRunTimeToolMenuItems" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.GetToolMenuItemInfo(System.Int32,System.Int32,System.String@,System.Int32@,System.Boolean@,System.Int32@)">
      <summary><para>Note: This method is obsolete. Use the Engine.GetEditTimeToolMenuItems and Engine.GetRunTimeToolMenuItems methods instead.</para></summary>
      <remarks>Returns information about a Tools menu item.</remarks>
      <param name="menuIndex">Specifies a zero-based index for a Tools menu or submenu.</param>
      <param name="itemIndex">Specifies a zero-based index for an item within the menu or submenu.</param>
      <param name="itemText">Returns the text to display in the menu item.</param>
      <param name="subMenuIndex">If the item is a submenu, this parameter returns the zero-based menu index of the Tools menu for the item. Otherwise, it returns <c>-1</c>.</param>
      <param name="enabled">If this parameter is <c>True</c>, enable the menu item. If this parameter is <c>False</c>, disable it.</param>
      <param name="uniqueItemID">Returns a unique ID to identify the menu item. Use this ID to invoke the Tools menu item or to obtain the menu item information again at a later time.</param>
      <seealso cref="Engine.GetEditTimeToolMenuItems" />
      <seealso cref="Engine.GetRunTimeToolMenuItems" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.GetToolMenuItemInfoWithID(System.Int32,System.String@,System.Int32@,System.Boolean@)">
      <summary><para>Note: This method is obsolete. Use the Engine.GetEditTimeToolMenuItems and Engine.GetRunTimeToolMenuItems methods instead.</para></summary>
      <remarks>Returns information about a Tools menu item.</remarks>
      <param name="uniqueItemID">Specifies a Tools menu item ID you obtain from the Engine.GetToolMenuItemInfoEx method.</param>
      <param name="itemText">Returns the text to display in the menu item.</param>
      <param name="subMenuIndex">If the item is a submenu, this parameter returns the zero-based menu index of the Tools menu for the item. Otherwise, it returns <c>-1</c>.</param>
      <param name="enabled">If this parameter is <c>True</c>, enable the menu item. If this parameter is <c>False</c>, disable it.</param>
      <seealso cref="Engine.GetEditTimeToolMenuItems" />
      <seealso cref="Engine.GetRunTimeToolMenuItems" />
      <seealso cref="Engine.GetToolMenuItemInfoEx" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.GetToolMenuItemInfoWithID(System.Int32,System.String@,System.Int32@,System.Boolean@)">
      <summary><para>Note: This method is obsolete. Use the Engine.GetEditTimeToolMenuItems and Engine.GetRunTimeToolMenuItems methods instead.</para></summary>
      <remarks>Returns information about a Tools menu item.</remarks>
      <param name="uniqueItemID">Specifies a Tools menu item ID you obtain from the Engine.GetToolMenuItemInfoEx method.</param>
      <param name="itemText">Returns the text to display in the menu item.</param>
      <param name="subMenuIndex">If the item is a submenu, this parameter returns the zero-based menu index of the Tools menu for the item. Otherwise, it returns <c>-1</c>.</param>
      <param name="enabled">If this parameter is <c>True</c>, enable the menu item. If this parameter is <c>False</c>, disable it.</param>
      <seealso cref="Engine.GetEditTimeToolMenuItems" />
      <seealso cref="Engine.GetRunTimeToolMenuItems" />
      <seealso cref="Engine.GetToolMenuItemInfoEx" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.InvokeToolMenuItem(System.Int32,System.Int32)">
      <summary><para>Note: This method is obsolete. Use the Engine.GetEditTimeToolMenuItems and Engine.GetRunTimeToolMenuItems methods instead.</para></summary>
      <remarks>Executes the action associated with a Tools menu item, which you specify with a menu index and an item index.
<para>Note: You must call the Engine.ConstructToolMenus method before calling this function.</para></remarks>
      <param name="menuIndex">Specifies a zero-based index for a Tools menu or submenu.</param>
      <param name="itemIndex">Specifies a zero-based index for an item within a Tools menu or submenu.</param>
      <seealso cref="Engine.ConstructToolMenus" />
      <seealso cref="Engine.DisplayToolMenuDialog" />
      <seealso cref="Engine.GetEditTimeToolMenuItems" />
      <seealso cref="Engine.GetRunTimeToolMenuItems" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.InvokeToolMenuItem(System.Int32,System.Int32)">
      <summary><para>Note: This method is obsolete. Use the Engine.GetEditTimeToolMenuItems and Engine.GetRunTimeToolMenuItems methods instead.</para></summary>
      <remarks>Executes the action associated with a Tools menu item, which you specify with a menu index and an item index.
<para>Note: You must call the Engine.ConstructToolMenus method before calling this function.</para></remarks>
      <param name="menuIndex">Specifies a zero-based index for a Tools menu or submenu.</param>
      <param name="itemIndex">Specifies a zero-based index for an item within a Tools menu or submenu.</param>
      <seealso cref="Engine.ConstructToolMenus" />
      <seealso cref="Engine.DisplayToolMenuDialog" />
      <seealso cref="Engine.GetEditTimeToolMenuItems" />
      <seealso cref="Engine.GetRunTimeToolMenuItems" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.InvokeToolMenuItemWithID(System.Int32)">
      <summary><para>Note: This method is obsolete. Use the Engine.GetEditTimeToolMenuItems and Engine.GetRunTimeToolMenuItems methods instead.</para></summary>
      <remarks>Executes the action associated with a Tools menu item, which you specify with a unique Tools menu item ID.
<para>Note: You must call the Engine.ConstructToolMenus method before calling this function.</para></remarks>
      <param name="uniqueItemID">Specifies the Tools menu item ID you obtain from the Engine.GetToolMenuItemInfoEx method or the Menu_ToolIDProp property on the object the Engine.GetToolMenuStructure method returns.</param>
      <seealso cref="Engine.ConstructToolMenus" />
      <seealso cref="Engine.DisplayToolMenuDialog" />
      <seealso cref="Engine.GetEditTimeToolMenuItems" />
      <seealso cref="Engine.GetRunTimeToolMenuItems" />
      <seealso cref="Engine.GetToolMenuItemInfoEx" />
      <seealso cref="Engine.GetToolMenuStructure" />
      <seealso cref="MenuItemProperties" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.InvokeToolMenuItemWithID(System.Int32)">
      <summary><para>Note: This method is obsolete. Use the Engine.GetEditTimeToolMenuItems and Engine.GetRunTimeToolMenuItems methods instead.</para></summary>
      <remarks>Executes the action associated with a Tools menu item, which you specify with a unique Tools menu item ID.
<para>Note: You must call the Engine.ConstructToolMenus method before calling this function.</para></remarks>
      <param name="uniqueItemID">Specifies the Tools menu item ID you obtain from the Engine.GetToolMenuItemInfoEx method or the Menu_ToolIDProp property on the object the Engine.GetToolMenuStructure method returns.</param>
      <seealso cref="Engine.ConstructToolMenus" />
      <seealso cref="Engine.DisplayToolMenuDialog" />
      <seealso cref="Engine.GetEditTimeToolMenuItems" />
      <seealso cref="Engine.GetRunTimeToolMenuItems" />
      <seealso cref="Engine.GetToolMenuItemInfoEx" />
      <seealso cref="Engine.GetToolMenuStructure" />
      <seealso cref="MenuItemProperties" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.EvalToolMenuItemExprs(System.Object)">
      <summary><para>Note: This method is obsolete. Use the Engine.GetEditTimeToolMenuItems and Engine.GetRunTimeToolMenuItems methods instead.</para></summary>
      <remarks>Reevaluates the Enable Expression and Item Text Expression of all the items in the Tools menu.
You can extract the new Enabled Expression and Item Text Expression values for a particular Tools menu item by calling the Engine.GetToolMenuItemInfoEx or Engine.GetToolMenuItemInfoWithIDEx methods.
<para>Note: This method does not evaluate hidden expressions and does not change the number of menu items or submenus.</para></remarks>
      <param name="editArgsParam">Specifies the currently selected items in the user interface.</param>
      <seealso cref="EditArgs" />
      <seealso cref="Engine.DisplayToolMenuDialog" />
      <seealso cref="Engine.GetEditTimeToolMenuItems" />
      <seealso cref="Engine.GetRunTimeToolMenuItems" />
      <seealso cref="Engine.GetToolMenuItemInfoEx" />
      <seealso cref="Engine.GetToolMenuItemInfoWithIDEx" />
      <seealso cref="&quot;Omitting Optional Parameters&quot;javascript:APILink('/InfoTopics/Optional_Parameters.htm')" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.EvalToolMenuItemExprs(System.Object)">
      <summary><para>Note: This method is obsolete. Use the Engine.GetEditTimeToolMenuItems and Engine.GetRunTimeToolMenuItems methods instead.</para></summary>
      <remarks>Reevaluates the Enable Expression and Item Text Expression of all the items in the Tools menu.
You can extract the new Enabled Expression and Item Text Expression values for a particular Tools menu item by calling the Engine.GetToolMenuItemInfoEx or Engine.GetToolMenuItemInfoWithIDEx methods.
<para>Note: This method does not evaluate hidden expressions and does not change the number of menu items or submenus.</para></remarks>
      <param name="editArgsParam">Specifies the currently selected items in the user interface.</param>
      <seealso cref="EditArgs" />
      <seealso cref="Engine.DisplayToolMenuDialog" />
      <seealso cref="Engine.GetEditTimeToolMenuItems" />
      <seealso cref="Engine.GetRunTimeToolMenuItems" />
      <seealso cref="Engine.GetToolMenuItemInfoEx" />
      <seealso cref="Engine.GetToolMenuItemInfoWithIDEx" />
      <seealso cref="&quot;Omitting Optional Parameters&quot;javascript:APILink('/InfoTopics/Optional_Parameters.htm')" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.FindFile(System.String,System.String@,System.Boolean@,NationalInstruments.TestStand.Interop.API.FindFilePromptOptions,NationalInstruments.TestStand.Interop.API.FindFileSearchListOptions,System.Boolean,System.Object)">
      <summary><para>Note: This method is obsolete. Use the Engine.FindFileEx method intead.</para></summary>
      <returns>Returns <c>True</c> if the file is found.</returns>
      <param name="fileToFind">Specifies a string that contains the simple filename or relative pathname of the file to search for. TestStand expands macros in the path as specified by the Engine.ExpandPathMacros method before searching.</param>
      <param name="absolutePath">Returns the absolute pathname of the file if the file is found.</param>
      <param name="userCancelled">Returns <c>True</c> if the method prompts the user and the user cancels the find operation.</param>
      <param name="promptOption">Specifies whether to prompt the user if the file is not initially found.</param>
      <param name="srchListOption">Specifies file search options.</param>
      <param name="isCommand">If this flag is <c>True</c> and fileToFind has no file extension, then the FindFile method searches for files with the same basename that end in the common command extensions: <c>.exe</c>, <c>.com</c>, and <c>.bat</c>.</param>
      <param name="currentSequenceFile">If you pass a SequenceFile object for this parameter, the FindFile method initially searches the directory where the sequence file is stored if the Current Sequence File Directory option is enabled. Enable the current sequence file directory in the sequence editor by selecting Configure&#0187;Search Directories and enabling the Current Sequence File Directory option.</param>
      <seealso cref="Engine.ExpandPathMacros" />
      <seealso cref="Engine.FindPath" />
      <seealso cref="Engine.SearchDirectories" />
      <seealso cref="FindFilePromptOptions" />
      <seealso cref="FindFileSearchListOptions" />
      <seealso cref="&quot;Omitting Optional Parameters&quot;javascript:APILink('/InfoTopics/Optional_Parameters.htm')" />
      <seealso cref="SearchDirectoryTypes" />
      <seealso cref="&quot;Using the $(Platform) Path Macro to Locate the Correct Code Module in 32-bit TestStand and 64-bit TestStand&quot;javascript:TSFundLink('/InfoTopics/64PlatformMacro.html')" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.FindFile(System.String,System.String@,System.Boolean@,NationalInstruments.TestStand.Interop.API.FindFilePromptOptions,NationalInstruments.TestStand.Interop.API.FindFileSearchListOptions,System.Boolean,System.Object)">
      <summary><para>Note: This method is obsolete. Use the Engine.FindFileEx method intead.</para></summary>
      <returns>Returns <c>True</c> if the file is found.</returns>
      <param name="fileToFind">Specifies a string that contains the simple filename or relative pathname of the file to search for. TestStand expands macros in the path as specified by the Engine.ExpandPathMacros method before searching.</param>
      <param name="absolutePath">Returns the absolute pathname of the file if the file is found.</param>
      <param name="userCancelled">Returns <c>True</c> if the method prompts the user and the user cancels the find operation.</param>
      <param name="promptOption">Specifies whether to prompt the user if the file is not initially found.</param>
      <param name="srchListOption">Specifies file search options.</param>
      <param name="isCommand">If this flag is <c>True</c> and fileToFind has no file extension, then the FindFile method searches for files with the same basename that end in the common command extensions: <c>.exe</c>, <c>.com</c>, and <c>.bat</c>.</param>
      <param name="currentSequenceFile">If you pass a SequenceFile object for this parameter, the FindFile method initially searches the directory where the sequence file is stored if the Current Sequence File Directory option is enabled. Enable the current sequence file directory in the sequence editor by selecting Configure&#0187;Search Directories and enabling the Current Sequence File Directory option.</param>
      <seealso cref="Engine.ExpandPathMacros" />
      <seealso cref="Engine.FindPath" />
      <seealso cref="Engine.SearchDirectories" />
      <seealso cref="FindFilePromptOptions" />
      <seealso cref="FindFileSearchListOptions" />
      <seealso cref="&quot;Omitting Optional Parameters&quot;javascript:APILink('/InfoTopics/Optional_Parameters.htm')" />
      <seealso cref="SearchDirectoryTypes" />
      <seealso cref="&quot;Using the $(Platform) Path Macro to Locate the Correct Code Module in 32-bit TestStand and 64-bit TestStand&quot;javascript:TSFundLink('/InfoTopics/64PlatformMacro.html')" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.FindPath(System.String,System.String@,NationalInstruments.TestStand.Interop.API.FindPathStatusValues@,System.Object)">
      <summary>Searches for a file or directory under the TestStand search directories using a simple file or directory name or relative pathname.</summary>
      <returns>Returns <c>True</c> if the file or directory is found.</returns>
      <param name="pathToFind">Specifies a string that contains the simple file or directory name or relative pathname of the file or directory to search for. TestStand expands macros in the path as specified by the Engine.ExpandPathMacros method before searching.</param>
      <param name="absolutePath">Returns the absolute pathname of the file or directory if it is found.</param>
      <param name="statusFlag">Returns more information about the file or directory.</param>
      <param name="currentSequenceFile">If you pass a SequenceFile object for this parameter, the <c>Engine.FindPath</c> method initially searches the directory where the sequence file is stored if the Current Sequence File Directory option is enabled. Select Configure&#0187;Search Directories to launch the Edit Search Directories dialog box and enable the Current Sequence File Directory option.</param>
      <seealso cref="&quot;Edit Search Directories dialog box&quot;javascript:RefLink('/InfoTopics/DB_Search_Dir.htm')" />
      <seealso cref="Engine.ExpandPathMacros" />
      <seealso cref="Engine.FindFileEx" />
      <seealso cref="Engine.SearchDirectories" />
      <seealso cref="FindPathStatusValues" />
      <seealso cref="&quot;Omitting Optional Parameters&quot;javascript:APILink('/InfoTopics/Optional_Parameters.htm')" />
      <seealso cref="SearchDirectoryTypes" />
      <seealso cref="&quot;Using the $(Platform) Path Macro to Locate the Correct Code Module in 32-bit TestStand and 64-bit TestStand&quot;javascript:TSFundLink('/InfoTopics/64PlatformMacro.html')" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.FindPath(System.String,System.String@,NationalInstruments.TestStand.Interop.API.FindPathStatusValues@,System.Object)">
      <summary>Searches for a file or directory under the TestStand search directories using a simple file or directory name or relative pathname.</summary>
      <returns>Returns <c>True</c> if the file or directory is found.</returns>
      <param name="pathToFind">Specifies a string that contains the simple file or directory name or relative pathname of the file or directory to search for. TestStand expands macros in the path as specified by the Engine.ExpandPathMacros method before searching.</param>
      <param name="absolutePath">Returns the absolute pathname of the file or directory if it is found.</param>
      <param name="statusFlag">Returns more information about the file or directory.</param>
      <param name="currentSequenceFile">If you pass a SequenceFile object for this parameter, the <c>Engine.FindPath</c> method initially searches the directory where the sequence file is stored if the Current Sequence File Directory option is enabled. Select Configure&#0187;Search Directories to launch the Edit Search Directories dialog box and enable the Current Sequence File Directory option.</param>
      <seealso cref="&quot;Edit Search Directories dialog box&quot;javascript:RefLink('/InfoTopics/DB_Search_Dir.htm')" />
      <seealso cref="Engine.ExpandPathMacros" />
      <seealso cref="Engine.FindFileEx" />
      <seealso cref="Engine.SearchDirectories" />
      <seealso cref="FindPathStatusValues" />
      <seealso cref="&quot;Omitting Optional Parameters&quot;javascript:APILink('/InfoTopics/Optional_Parameters.htm')" />
      <seealso cref="SearchDirectoryTypes" />
      <seealso cref="&quot;Using the $(Platform) Path Macro to Locate the Correct Code Module in 32-bit TestStand and 64-bit TestStand&quot;javascript:TSFundLink('/InfoTopics/64PlatformMacro.html')" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.CreateTempFile(System.String,System.String,System.String)">
      <summary>Creates a unique temporary file with a specific basename and extension.</summary>
      <remarks>When TestStand shuts down, it automatically deletes the temporary file.</remarks>
      <returns>The pathname of the temporary file.</returns>
      <param name="baseName">Specifies the base name of the temporary file. If necessary, TestStand adds other characters to the name to make it unique.</param>
      <param name="extension">Specifies the file extension for the temporary file.</param>
      <param name="directory">Specifies the directory in which to store the temporary file. You can include a trailing backslash, but it is not required. Pass an empty string to use the <c>TestStand</c> subdirectory in the directory the TEMP environment variable specifies, which by default is <c>%USERPROFILE%\AppData\Local\Temp</c> on Windows 8.1/8/7/Vista and <c>%USERPROFILE%\Local Settings\Temp</c> on Microsoft Windows XP.</param>
      <seealso cref="Engine.TestStandDirectory" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.CreateTempFile(System.String,System.String,System.String)">
      <summary>Creates a unique temporary file with a specific basename and extension.</summary>
      <remarks>When TestStand shuts down, it automatically deletes the temporary file.</remarks>
      <returns>The pathname of the temporary file.</returns>
      <param name="baseName">Specifies the base name of the temporary file. If necessary, TestStand adds other characters to the name to make it unique.</param>
      <param name="extension">Specifies the file extension for the temporary file.</param>
      <param name="directory">Specifies the directory in which to store the temporary file. You can include a trailing backslash, but it is not required. Pass an empty string to use the <c>TestStand</c> subdirectory in the directory the TEMP environment variable specifies, which by default is <c>%USERPROFILE%\AppData\Local\Temp</c> on Windows 8.1/8/7/Vista and <c>%USERPROFILE%\Local Settings\Temp</c> on Microsoft Windows XP.</param>
      <seealso cref="Engine.TestStandDirectory" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.CheckExprSyntax(System.String,System.String@,System.Int32@,System.Int32@)">
      <summary>Checks the syntax of the expression parameter and returns error information.</summary>
      <remarks>Calling this method is equivalent to calling the Engine.CheckExpression method and passing a <c>NULL</c> reference to the evaluationContext parameter and passing <c>EvalOption_NoOptions</c> to the evaluationOptions parameter.</remarks>
      <returns>Returns <c>True</c> if the syntax is correct. Returns <c>False</c> if the expression contains a syntax error. If this method returns <c>False</c>, check the errorDescription, startErrPos, and endErrPos parameters for more information.</returns>
      <param name="expressionStr">Specifies the expression for which to check the syntax.</param>
      <param name="errorDescription">When a syntax error exists, this parameter returns an error message describing the type of error.</param>
      <param name="startErrPos">When a syntax error exists, this parameter returns the index of the location in the string where the error begins.</param>
      <param name="endErrPos">When a syntax error exists, this parameter returns the index of the location in the string of the first character beyond the syntax error.</param>
      <seealso cref="Engine.CheckExpression" />
      <seealso cref="EvaluationOptions" />
      <seealso cref="Expression.ValidateEvaluationType" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.CheckExprSyntax(System.String,System.String@,System.Int32@,System.Int32@)">
      <summary>Checks the syntax of the expression parameter and returns error information.</summary>
      <remarks>Calling this method is equivalent to calling the Engine.CheckExpression method and passing a <c>NULL</c> reference to the evaluationContext parameter and passing <c>EvalOption_NoOptions</c> to the evaluationOptions parameter.</remarks>
      <returns>Returns <c>True</c> if the syntax is correct. Returns <c>False</c> if the expression contains a syntax error. If this method returns <c>False</c>, check the errorDescription, startErrPos, and endErrPos parameters for more information.</returns>
      <param name="expressionStr">Specifies the expression for which to check the syntax.</param>
      <param name="errorDescription">When a syntax error exists, this parameter returns an error message describing the type of error.</param>
      <param name="startErrPos">When a syntax error exists, this parameter returns the index of the location in the string where the error begins.</param>
      <param name="endErrPos">When a syntax error exists, this parameter returns the index of the location in the string of the first character beyond the syntax error.</param>
      <seealso cref="Engine.CheckExpression" />
      <seealso cref="EvaluationOptions" />
      <seealso cref="Expression.ValidateEvaluationType" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.GetErrorString(NationalInstruments.TestStand.Interop.API.TSError,System.String@)">
      <summary>Returns an error description string that corresponds to a specific TSError code.</summary>
      <returns>Returns <c>False</c> when the errorCode is not a TSError.</returns>
      <param name="errorCode">Specifies the error code to describe.</param>
      <param name="errorString">Returns a description of the errorCode. If the error code is not a TSError, the parameter returns the string <c>&quot;User defined error code.&quot;</c></param>
      <seealso cref="StepProperties" />
      <seealso cref="TSError" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.GetErrorString(NationalInstruments.TestStand.Interop.API.TSError,System.String@)">
      <summary>Returns an error description string that corresponds to a specific TSError code.</summary>
      <returns>Returns <c>False</c> when the errorCode is not a TSError.</returns>
      <param name="errorCode">Specifies the error code to describe.</param>
      <param name="errorString">Returns a description of the errorCode. If the error code is not a TSError, the parameter returns the string <c>&quot;User defined error code.&quot;</c></param>
      <seealso cref="StepProperties" />
      <seealso cref="TSError" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.GetResourceString(System.String,System.String,System.Object,System.Object@)">
      <summary>Returns a string from the TestStand string resource file for the current language. You specify the string by category and symbol, which are the section and item labels for the string in the string resource file.</summary>
      <remarks>The string resource files are located in the <c>&lt;TestStand&gt;\Components\Language</c> and <c>&lt;TestStand&#160;Public&gt;\Components\Language</c> directories. Typically, you customize the strings in the resource files in the <c>&lt;TestStand&gt;\Components\Language</c> directory by adding a section and item with the same name to the corresponding file in the <c>&lt;TestStand&#160;Public&gt;\Components\Language</c> directory.
Use the <c>ResStr</c> expression function to retrieve a TestStand resource string from within an expression.</remarks>
      <returns>The resource string.</returns>
      <param name="section">Specifies the category or section label.</param>
      <param name="symbol">Specifies the symbol or item label.</param>
      <param name="defaultString">Specifies a default string to return when the string resource file does not contain an entry with the category and symbol you specify. If you do not specify this parameter and the string resource file does not contain the entry, this function returns the string, <c>String not found in table.</c></param>
      <param name="found">Returns <c>True</c> if the string is found in the resource file and <c>False</c> if the string is not found in the resource file.</param>
      <seealso cref="Engine.ReloadStringResourceFiles" />
      <seealso cref="&quot;Expression Functions&quot;javascript:TSFundLink('/InfoTopics/Operators_Function_Expr.htm')" />
      <seealso cref="&quot;Omitting Optional Parameters&quot;javascript:APILink('/InfoTopics/Optional_Parameters.htm')" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.GetResourceString(System.String,System.String,System.Object,System.Object@)">
      <summary>Returns a string from the TestStand string resource file for the current language. You specify the string by category and symbol, which are the section and item labels for the string in the string resource file.</summary>
      <remarks>The string resource files are located in the <c>&lt;TestStand&gt;\Components\Language</c> and <c>&lt;TestStand&#160;Public&gt;\Components\Language</c> directories. Typically, you customize the strings in the resource files in the <c>&lt;TestStand&gt;\Components\Language</c> directory by adding a section and item with the same name to the corresponding file in the <c>&lt;TestStand&#160;Public&gt;\Components\Language</c> directory.
Use the <c>ResStr</c> expression function to retrieve a TestStand resource string from within an expression.</remarks>
      <returns>The resource string.</returns>
      <param name="section">Specifies the category or section label.</param>
      <param name="symbol">Specifies the symbol or item label.</param>
      <param name="defaultString">Specifies a default string to return when the string resource file does not contain an entry with the category and symbol you specify. If you do not specify this parameter and the string resource file does not contain the entry, this function returns the string, <c>String not found in table.</c></param>
      <param name="found">Returns <c>True</c> if the string is found in the resource file and <c>False</c> if the string is not found in the resource file.</param>
      <seealso cref="Engine.ReloadStringResourceFiles" />
      <seealso cref="&quot;Expression Functions&quot;javascript:TSFundLink('/InfoTopics/Operators_Function_Expr.htm')" />
      <seealso cref="&quot;Omitting Optional Parameters&quot;javascript:APILink('/InfoTopics/Optional_Parameters.htm')" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.LaunchExternalViewer(System.String)">
      <summary>Launches an external file viewer.</summary>
      <remarks>Typically, you use this method to display test reports.
This method specifies the external viewer based on settings you can edit when you call the Engine.DisplayExternalViewerDialog method. If the dialog box contains no settings that apply to the file, TestStand launches a viewer based on the file extension association defined for the operating system.</remarks>
      <param name="FilePath">Specifies the pathname of the file to view.</param>
      <seealso cref="Engine.DisplayExternalViewerDialog" />
      <seealso cref="ExternalReportViewers" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.LaunchExternalViewer(System.String)">
      <summary>Launches an external file viewer.</summary>
      <remarks>Typically, you use this method to display test reports.
This method specifies the external viewer based on settings you can edit when you call the Engine.DisplayExternalViewerDialog method. If the dialog box contains no settings that apply to the file, TestStand launches a viewer based on the file extension association defined for the operating system.</remarks>
      <param name="FilePath">Specifies the pathname of the file to view.</param>
      <seealso cref="Engine.DisplayExternalViewerDialog" />
      <seealso cref="ExternalReportViewers" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.NotifyStartOfModalDialog">
      <summary><para>Note: This method is obsolete. Use the Engine.NotifyStartOfModalDialogEx method instead.</para></summary>
      <remarks>Notifies TestStand that you are about to launch a modal dialog box.</remarks>
      <returns>Returns the modalID to pass to the Engine.NotifyEndOfModalDialog method when the dialog box no longer appears onscreen.</returns>
      <seealso cref="Engine.NotifyEndOfModalDialog" />
      <seealso cref="Engine.NotifyStartOfModalDialogEx" />
      <seealso cref="Engine.RegisterModalWindow" />
      <seealso cref="Engine.UnregisterModalWindow" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.NotifyStartOfModalDialog">
      <summary><para>Note: This method is obsolete. Use the Engine.NotifyStartOfModalDialogEx method instead.</para></summary>
      <remarks>Notifies TestStand that you are about to launch a modal dialog box.</remarks>
      <returns>Returns the modalID to pass to the Engine.NotifyEndOfModalDialog method when the dialog box no longer appears onscreen.</returns>
      <seealso cref="Engine.NotifyEndOfModalDialog" />
      <seealso cref="Engine.NotifyStartOfModalDialogEx" />
      <seealso cref="Engine.RegisterModalWindow" />
      <seealso cref="Engine.UnregisterModalWindow" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.NotifyEndOfModalDialog(System.Int32)">
      <summary>Notifies TestStand that you are no longer displaying the modal dialog box the modalID parameter specifies.</summary>
      <remarks>TestStand uses this notification to determine when to re-enable the main window of the application.
<para>Note: Do not call this method when displaying a dialog box the TestStand API implements.</para></remarks>
      <param name="modalID">Specifies the modalID you receive as a return value from the Engine.NotifyStartOfModalDialogEx method.</param>
      <seealso cref="Engine.NotifyStartOfModalDialogEx" />
      <seealso cref="Engine.RegisterModalWindow" />
      <seealso cref="Engine.UnregisterModalWindow" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.NotifyEndOfModalDialog(System.Int32)">
      <summary>Notifies TestStand that you are no longer displaying the modal dialog box the modalID parameter specifies.</summary>
      <remarks>TestStand uses this notification to determine when to re-enable the main window of the application.
<para>Note: Do not call this method when displaying a dialog box the TestStand API implements.</para></remarks>
      <param name="modalID">Specifies the modalID you receive as a return value from the Engine.NotifyStartOfModalDialogEx method.</param>
      <seealso cref="Engine.NotifyStartOfModalDialogEx" />
      <seealso cref="Engine.RegisterModalWindow" />
      <seealso cref="Engine.UnregisterModalWindow" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.Globals">
      <summary>Returns the PropertyObject that contains the global variables for the test station.</summary>
      <remarks>When you are writing a GUI, use this property to display or edit global variables from the sequence editor or user interface.</remarks>
      <seealso cref="Engine.TemporaryGlobals" />
      <seealso cref="Engine.GlobalsFile" />
      <seealso cref="PropertyObject" />
      <seealso cref="SequenceContext.StationGlobals" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.Globals">
      <summary>Returns the PropertyObject that contains the global variables for the test station.</summary>
      <remarks>When you are writing a GUI, use this property to display or edit global variables from the sequence editor or user interface.</remarks>
      <seealso cref="Engine.TemporaryGlobals" />
      <seealso cref="Engine.GlobalsFile" />
      <seealso cref="PropertyObject" />
      <seealso cref="SequenceContext.StationGlobals" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.CurrentUser">
      <summary>Specifies the user who is currently logged in.</summary>
      <remarks>Use this property to obtain or set the User object for the user who is currently logged in. If no one is currently logged in, this property returns a <c>NULL</c> dispatch pointer or object reference. After you obtain the User object, call the User.HasPrivilege method to determine whether the user or a user group of which the user is a member has a specific privilege. If you set the property to <c>0</c> or <c>NULL</c>, you log out the current user.
If you are developing an application that uses the TestStand User Interface (UI) Controls, use the ApplicationMgr.Login method to change the current user to ensure that the Application Manager control properly sends an event to a user interface.</remarks>
      <seealso cref="&quot;ApplicationMgr.Login&quot;javascript:UILink('/RefTopics/ApplicationMgr_Login_M.htm')" />
      <seealso cref="Engine.CurrentUserHasPrivilege" />
      <seealso cref="User" />
      <seealso cref="User.HasPrivilege" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.CurrentUser">
      <summary>Specifies the user who is currently logged in.</summary>
      <remarks>Use this property to obtain or set the User object for the user who is currently logged in. If no one is currently logged in, this property returns a <c>NULL</c> dispatch pointer or object reference. After you obtain the User object, call the User.HasPrivilege method to determine whether the user or a user group of which the user is a member has a specific privilege. If you set the property to <c>0</c> or <c>NULL</c>, you log out the current user.
If you are developing an application that uses the TestStand User Interface (UI) Controls, use the ApplicationMgr.Login method to change the current user to ensure that the Application Manager control properly sends an event to a user interface.</remarks>
      <seealso cref="&quot;ApplicationMgr.Login&quot;javascript:UILink('/RefTopics/ApplicationMgr_Login_M.htm')" />
      <seealso cref="Engine.CurrentUserHasPrivilege" />
      <seealso cref="User" />
      <seealso cref="User.HasPrivilege" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.ApplicationIsEditor">
      <summary>Specifies whether the application is a sequence editor.</summary>
      <remarks>The default setting is <c>False</c>. Set this property to <c>True</c> if you are using the TestStand API to write a sequence editor. If you are writing a user interface, use the default setting.</remarks>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.ApplicationIsEditor">
      <summary>Specifies whether the application is a sequence editor.</summary>
      <remarks>The default setting is <c>False</c>. Set this property to <c>True</c> if you are using the TestStand API to write a sequence editor. If you are writing a user interface, use the default setting.</remarks>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.AppMainHwnd">
      <summary>Specifies the Window handle of the owner of modal dialog boxes.
</summary>
      <remarks>TestStand uses this property to make dialog boxes modal to the application. Do not set this property because TestStand sets it automatically when the application creates the TestStand Engine. Setting this property can cause dialog boxes to be modal to the wrong window. This property usually refers to the main window of the application but refers to the window of the dialog box when the application displays a modal dialog box.</remarks>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.AppMainHwnd">
      <summary>Specifies the Window handle of the owner of modal dialog boxes.
</summary>
      <remarks>TestStand uses this property to make dialog boxes modal to the application. Do not set this property because TestStand sets it automatically when the application creates the TestStand Engine. Setting this property can cause dialog boxes to be modal to the wrong window. This property usually refers to the main window of the application but refers to the window of the dialog box when the application displays a modal dialog box.</remarks>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.NumAdapters">
      <summary>Returns the number of module adapters available for use with TestStand.</summary>
      <remarks>TestStand maintains a list of available module adapters. Use the Engine.GetAdapter method to obtain a module adapter object by index.</remarks>
      <seealso cref="Engine.GetAdapter" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.NumAdapters">
      <summary>Returns the number of module adapters available for use with TestStand.</summary>
      <remarks>TestStand maintains a list of available module adapters. Use the Engine.GetAdapter method to obtain a module adapter object by index.</remarks>
      <seealso cref="Engine.GetAdapter" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.DefaultAdapter">
      <summary>Specifies the key name of the default adapter TestStand uses to create steps.</summary>
      <remarks>TestStand maintains a list of available module adapters. The adapter this property specifies is designated as the default adapter. This property contains the key name of the default module adapter. The Engine.DefaultAdapterIndex property indicates the index of the default module adapter.</remarks>
      <seealso cref="&quot;Adapter&quot;Adapter.htm" />
      <seealso cref="AdapterKeyNames" />
      <seealso cref="Engine.DefaultAdapterIndex" />
      <seealso cref="Engine.GetAdapter" />
      <seealso cref="Engine.NewStep" />
      <seealso cref="Engine.NumAdapters" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.DefaultAdapter">
      <summary>Specifies the key name of the default adapter TestStand uses to create steps.</summary>
      <remarks>TestStand maintains a list of available module adapters. The adapter this property specifies is designated as the default adapter. This property contains the key name of the default module adapter. The Engine.DefaultAdapterIndex property indicates the index of the default module adapter.</remarks>
      <seealso cref="&quot;Adapter&quot;Adapter.htm" />
      <seealso cref="AdapterKeyNames" />
      <seealso cref="Engine.DefaultAdapterIndex" />
      <seealso cref="Engine.GetAdapter" />
      <seealso cref="Engine.NewStep" />
      <seealso cref="Engine.NumAdapters" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.EnableUserPrivilegeChecking">
      <summary><para>Note: This property is obsolete. Use the StationOptions.EnableUserPrivilegeChecking property instead.</para></summary>
      <remarks>Specifies whether the sequence editor or user interface verifies user privileges.
When this property is <c>False</c>, the sequence editor or user interface does not verify that the user has the privileges necessary for performing specific operations. Instead, all operations that depend on user privileges are always available.</remarks>
      <seealso cref="Engine.CurrentUserHasPrivilege" />
      <seealso cref="StationOptions.EnableUserPrivilegeChecking" />
      <seealso cref="StationOptions.RequireUserLogin" />
      <seealso cref="User.HasPrivilege" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.EnableUserPrivilegeChecking">
      <summary><para>Note: This property is obsolete. Use the StationOptions.EnableUserPrivilegeChecking property instead.</para></summary>
      <remarks>Specifies whether the sequence editor or user interface verifies user privileges.
When this property is <c>False</c>, the sequence editor or user interface does not verify that the user has the privileges necessary for performing specific operations. Instead, all operations that depend on user privileges are always available.</remarks>
      <seealso cref="Engine.CurrentUserHasPrivilege" />
      <seealso cref="StationOptions.EnableUserPrivilegeChecking" />
      <seealso cref="StationOptions.RequireUserLogin" />
      <seealso cref="User.HasPrivilege" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.ConfigDirectory">
      <summary><para>Note: This property is obsolete. Use the Engine.GetTestStandPath method instead.</para></summary>
      <remarks>Returns the pathname of the TestStand configuration directory. The pathname does not contain a trailing backslash.
The configuration directory contains engine and sequence editor option files, the users file, the globals file, and the tools menu file.</remarks>
      <seealso cref="Engine.BinDirectory" />
      <seealso cref="Engine.GetTestStandPath" />
      <seealso cref="Engine.SearchDirectories" />
      <seealso cref="Engine.SetConfigDirectory" />
      <seealso cref="Engine.TestStandDirectory" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.ConfigDirectory">
      <summary><para>Note: This property is obsolete. Use the Engine.GetTestStandPath method instead.</para></summary>
      <remarks>Returns the pathname of the TestStand configuration directory. The pathname does not contain a trailing backslash.
The configuration directory contains engine and sequence editor option files, the users file, the globals file, and the tools menu file.</remarks>
      <seealso cref="Engine.BinDirectory" />
      <seealso cref="Engine.GetTestStandPath" />
      <seealso cref="Engine.SearchDirectories" />
      <seealso cref="Engine.SetConfigDirectory" />
      <seealso cref="Engine.TestStandDirectory" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.BinDirectory">
      <summary><para>Note: This property is obsolete. Use the Engine.GetTestStandPath method instead.</para>
</summary>
      <remarks>Returns the pathname of the <c>&lt;TestStand&gt;\Bin</c> directory. The pathname does not contain a trailing backslash.</remarks>
      <seealso cref="Engine.ConfigDirectory" />
      <seealso cref="Engine.GetTestStandPath" />
      <seealso cref="Engine.SearchDirectories" />
      <seealso cref="Engine.TestStandDirectory" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.BinDirectory">
      <summary><para>Note: This property is obsolete. Use the Engine.GetTestStandPath method instead.</para>
</summary>
      <remarks>Returns the pathname of the <c>&lt;TestStand&gt;\Bin</c> directory. The pathname does not contain a trailing backslash.</remarks>
      <seealso cref="Engine.ConfigDirectory" />
      <seealso cref="Engine.GetTestStandPath" />
      <seealso cref="Engine.SearchDirectories" />
      <seealso cref="Engine.TestStandDirectory" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.TestStandDirectory">
      <summary><para>Note: This property is obsolete. Use the Engine.GetTestStandPath method instead.</para></summary>
      <remarks>Returns the pathname of the directory in which you installed TestStand. The pathname does not contain a trailing backslash.</remarks>
      <seealso cref="Engine.BinDirectory" />
      <seealso cref="Engine.ConfigDirectory" />
      <seealso cref="Engine.GetTestStandPath" />
      <seealso cref="Engine.SearchDirectories" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.TestStandDirectory">
      <summary><para>Note: This property is obsolete. Use the Engine.GetTestStandPath method instead.</para></summary>
      <remarks>Returns the pathname of the directory in which you installed TestStand. The pathname does not contain a trailing backslash.</remarks>
      <seealso cref="Engine.BinDirectory" />
      <seealso cref="Engine.ConfigDirectory" />
      <seealso cref="Engine.GetTestStandPath" />
      <seealso cref="Engine.SearchDirectories" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.StepTypes">
      <summary><para>Note: This property is obsolete. Use the Engine.GetTypeNames and Engine.GetTypeDefinition properties instead.</para></summary>
      <remarks>If you attempt to read this property, TestStand returns an error.</remarks>
      <seealso cref="Engine.GetTypeDefinition" />
      <seealso cref="Engine.GetTypeNames" />
      <seealso cref="PropertyObject" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.StepTypes">
      <summary><para>Note: This property is obsolete. Use the Engine.GetTypeNames and Engine.GetTypeDefinition properties instead.</para></summary>
      <remarks>If you attempt to read this property, TestStand returns an error.</remarks>
      <seealso cref="Engine.GetTypeDefinition" />
      <seealso cref="Engine.GetTypeNames" />
      <seealso cref="PropertyObject" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.CustomDataTypes">
      <summary><para>Note: This property is obsolete. Use the Engine.GetTypeNames and Engine.GetTypeDefinition methods instead.</para></summary>
      <remarks>If you attempt to read this property, TestStand returns an error.</remarks>
      <seealso cref="Engine.GetTypeDefinition" />
      <seealso cref="Engine.GetTypeNames" />
      <seealso cref="PropertyObject" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.CustomDataTypes">
      <summary><para>Note: This property is obsolete. Use the Engine.GetTypeNames and Engine.GetTypeDefinition methods instead.</para></summary>
      <remarks>If you attempt to read this property, TestStand returns an error.</remarks>
      <seealso cref="Engine.GetTypeDefinition" />
      <seealso cref="Engine.GetTypeNames" />
      <seealso cref="PropertyObject" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.BuiltinDataTypes">
      <summary><para>Note: This property is obsolete. Use the Engine.GetTypeNames and Engine.GetTypeDefinition methods instead.</para></summary>
      <remarks>If you attempt to read this property, TestStand returns an error.</remarks>
      <seealso cref="Engine.GetTypeDefinition" />
      <seealso cref="Engine.GetTypeNames" />
      <seealso cref="PropertyObject" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.BuiltinDataTypes">
      <summary><para>Note: This property is obsolete. Use the Engine.GetTypeNames and Engine.GetTypeDefinition methods instead.</para></summary>
      <remarks>If you attempt to read this property, TestStand returns an error.</remarks>
      <seealso cref="Engine.GetTypeDefinition" />
      <seealso cref="Engine.GetTypeNames" />
      <seealso cref="PropertyObject" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.TracingEnabled">
      <summary><para>Note: This property is obsolete. Use the StationOptions.TracingEnabled property instead.</para></summary>
      <remarks>Specifies if tracing is enabled for sequence editors and user interfaces.</remarks>
      <seealso cref="Execution.TracingDisabled" />
      <seealso cref="StationOptions.BreakpointsEnabled" />
      <seealso cref="StationOptions.TracingEnabled" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.TracingEnabled">
      <summary><para>Note: This property is obsolete. Use the StationOptions.TracingEnabled property instead.</para></summary>
      <remarks>Specifies if tracing is enabled for sequence editors and user interfaces.</remarks>
      <seealso cref="Execution.TracingDisabled" />
      <seealso cref="StationOptions.BreakpointsEnabled" />
      <seealso cref="StationOptions.TracingEnabled" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.BreakpointsEnabled">
      <summary><para>Note: This property is obsolete. Use the StationOptions.BreakpointsEnabled property instead.</para></summary>
      <remarks>Specifies whether to stop on breakpoints. Set this property to <c>True</c> to stop on breakpoints. Set this property to <c>False</c> to ignore breakpoints.</remarks>
      <seealso cref="StationOptions.BreakpointsEnabled" />
      <seealso cref="StationOptions.TracingEnabled" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.BreakpointsEnabled">
      <summary><para>Note: This property is obsolete. Use the StationOptions.BreakpointsEnabled property instead.</para></summary>
      <remarks>Specifies whether to stop on breakpoints. Set this property to <c>True</c> to stop on breakpoints. Set this property to <c>False</c> to ignore breakpoints.</remarks>
      <seealso cref="StationOptions.BreakpointsEnabled" />
      <seealso cref="StationOptions.TracingEnabled" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.BreakOnRTE">
      <summary><para>Note: This property is obsolete. Use the StationOptions.RTEOption property instead.</para></summary>
      <remarks>Specifies whether the sequence editor or user interface breaks on run-time errors. In most sequence editors and user interfaces, breaking on a run-time error launches a dialog box in which you can choose how to proceed.</remarks>
      <seealso cref="StationOptions.RTEOption" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.BreakOnRTE">
      <summary><para>Note: This property is obsolete. Use the StationOptions.RTEOption property instead.</para></summary>
      <remarks>Specifies whether the sequence editor or user interface breaks on run-time errors. In most sequence editors and user interfaces, breaking on a run-time error launches a dialog box in which you can choose how to proceed.</remarks>
      <seealso cref="StationOptions.RTEOption" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.ExecutionMask">
      <summary><para>Note: This property is obsolete. Use the StationOptions.ExecutionMask property instead.</para></summary>
      <remarks>Sets or gets execution options.
Specifies the execution options using ExecutionMask constants. To specify multiple execution options, use the bitwise-OR operator.</remarks>
      <seealso cref="ExecutionMask" />
      <seealso cref="StationOptions.ExecutionMask" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.ExecutionMask">
      <summary><para>Note: This property is obsolete. Use the StationOptions.ExecutionMask property instead.</para></summary>
      <remarks>Sets or gets execution options.
Specifies the execution options using ExecutionMask constants. To specify multiple execution options, use the bitwise-OR operator.</remarks>
      <seealso cref="ExecutionMask" />
      <seealso cref="StationOptions.ExecutionMask" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.UIMessagePollingEnabled">
      <summary>Specifies if user interface message polling is enabled.</summary>
      <remarks>Default value is <c>False</c>. 
Set this property to <c>True</c> when writing a user interface which uses polling rather than events to obtain UIMessages from TestStand.
To poll, call the Engine.IsUIMessageQueueEmpty property. If <c>IsUIMessageQueueEmpty</c> returns <c>False</c>, call the Engine.GetUIMessage method to retrieve the next UIMessage. If your development environment requires you to explicitly release COM references, release the COM reference to the previous user interface message before obtaining the next one.
<para>Note: Do not set this property to <c>True</c> if you created the TestStand Engine as an ActiveX control or if you are using the TestStand User Interface (UI) Controls.</para></remarks>
      <seealso cref="Engine.GetUIMessage" />
      <seealso cref="Engine.IsUIMessageQueueEmpty" />
      <seealso cref="Engine.RegisterUIMessageCallbackEx" />
      <seealso cref="Engine.UIMessageEvent" />
      <seealso cref="&quot;Setting Up a User Interface Message Handler&quot;../InfoTopics/App_Set_Up_UIMsg_Handler.htm" />
      <seealso cref="StationOptions.UIMessageDelay" />
      <seealso cref="StationOptions.UIMessageMinDelay" />
      <seealso cref="UIMessage" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.UIMessagePollingEnabled">
      <summary>Specifies if user interface message polling is enabled.</summary>
      <remarks>Default value is <c>False</c>. 
Set this property to <c>True</c> when writing a user interface which uses polling rather than events to obtain UIMessages from TestStand.
To poll, call the Engine.IsUIMessageQueueEmpty property. If <c>IsUIMessageQueueEmpty</c> returns <c>False</c>, call the Engine.GetUIMessage method to retrieve the next UIMessage. If your development environment requires you to explicitly release COM references, release the COM reference to the previous user interface message before obtaining the next one.
<para>Note: Do not set this property to <c>True</c> if you created the TestStand Engine as an ActiveX control or if you are using the TestStand User Interface (UI) Controls.</para></remarks>
      <seealso cref="Engine.GetUIMessage" />
      <seealso cref="Engine.IsUIMessageQueueEmpty" />
      <seealso cref="Engine.RegisterUIMessageCallbackEx" />
      <seealso cref="Engine.UIMessageEvent" />
      <seealso cref="&quot;Setting Up a User Interface Message Handler&quot;../InfoTopics/App_Set_Up_UIMsg_Handler.htm" />
      <seealso cref="StationOptions.UIMessageDelay" />
      <seealso cref="StationOptions.UIMessageMinDelay" />
      <seealso cref="UIMessage" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.IsUIMessageQueueEmpty">
      <summary>Returns a value that indicates whether the user interface message queue is empty.</summary>
      <remarks>If you are writing a sequence editor or user interface, use this property when polling for UIMessages to determine whether a message in the queue is pending. You must set the Engine.UIMessagePollingEnabled property to <c>True</c> to poll for UIMessages.</remarks>
      <seealso cref="Engine.GetUIMessage" />
      <seealso cref="Engine.UIMessagePollingEnabled" />
      <seealso cref="UIMessage" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.IsUIMessageQueueEmpty">
      <summary>Returns a value that indicates whether the user interface message queue is empty.</summary>
      <remarks>If you are writing a sequence editor or user interface, use this property when polling for UIMessages to determine whether a message in the queue is pending. You must set the Engine.UIMessagePollingEnabled property to <c>True</c> to poll for UIMessages.</remarks>
      <seealso cref="Engine.GetUIMessage" />
      <seealso cref="Engine.UIMessagePollingEnabled" />
      <seealso cref="UIMessage" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.UIMessageDelay">
      <summary><para>Note: This property is obsolete. Use the StationOptions.UIMessageDelay property instead.</para></summary>
      <remarks>Specifies how many milliseconds must pass between postings of <c>UIMsg_Trace</c> events.
Set this property to specify how many milliseconds must pass before you receive the next <c>UIMsg_Trace</c> event. Use this property to slow down the posting of trace messages to the sequence editor or user interface to allow time for processing mouse events and/or to display the trace of an execution more slowly.
<para>Note: The value of this property can never be less than the value of the <c>Engine.UIMessageMinDelay</c> property. If set to a lesser value, TestStand automatically resets this property to the value of the UIMessageMinDelay property.</para></remarks>
      <seealso cref="Engine.GetUIMessage" />
      <seealso cref="Engine.RegisterUIMessageCallbackEx" />
      <seealso cref="Engine.UIMessageEvent" />
      <seealso cref="Engine.UIMessagePollingEnabled" />
      <seealso cref="StationOptions.UIMessageDelay" />
      <seealso cref="UIMessage" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.UIMessageDelay">
      <summary><para>Note: This property is obsolete. Use the StationOptions.UIMessageDelay property instead.</para></summary>
      <remarks>Specifies how many milliseconds must pass between postings of <c>UIMsg_Trace</c> events.
Set this property to specify how many milliseconds must pass before you receive the next <c>UIMsg_Trace</c> event. Use this property to slow down the posting of trace messages to the sequence editor or user interface to allow time for processing mouse events and/or to display the trace of an execution more slowly.
<para>Note: The value of this property can never be less than the value of the <c>Engine.UIMessageMinDelay</c> property. If set to a lesser value, TestStand automatically resets this property to the value of the UIMessageMinDelay property.</para></remarks>
      <seealso cref="Engine.GetUIMessage" />
      <seealso cref="Engine.RegisterUIMessageCallbackEx" />
      <seealso cref="Engine.UIMessageEvent" />
      <seealso cref="Engine.UIMessagePollingEnabled" />
      <seealso cref="StationOptions.UIMessageDelay" />
      <seealso cref="UIMessage" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.UIMessageMinDelay">
      <summary><para>Note: This property is obsolete. Use the StationOptions.UIMessageMinDelay property instead.</para></summary>
      <remarks>Specifies the minimum value allowed for the <c>Engine.UIMessageDelay</c> property.
Use this property to specify the minimum value allowed for the <c>UIMessageDelay</c> property for the sequence editor or user interface.</remarks>
      <seealso cref="Engine.GetUIMessage" />
      <seealso cref="Engine.RegisterUIMessageCallback" />
      <seealso cref="Engine.UIMessageEvent" />
      <seealso cref="Engine.UIMessagePollingEnabled" />
      <seealso cref="StationOptions.UIMessageMinDelay" />
      <seealso cref="UIMessage" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.UIMessageMinDelay">
      <summary><para>Note: This property is obsolete. Use the StationOptions.UIMessageMinDelay property instead.</para></summary>
      <remarks>Specifies the minimum value allowed for the <c>Engine.UIMessageDelay</c> property.
Use this property to specify the minimum value allowed for the <c>UIMessageDelay</c> property for the sequence editor or user interface.</remarks>
      <seealso cref="Engine.GetUIMessage" />
      <seealso cref="Engine.RegisterUIMessageCallback" />
      <seealso cref="Engine.UIMessageEvent" />
      <seealso cref="Engine.UIMessagePollingEnabled" />
      <seealso cref="StationOptions.UIMessageMinDelay" />
      <seealso cref="UIMessage" />
    </member>
    <member name="E:NationalInstruments.TestStand.Interop.API._TEEngineEvents_Event.UIMessageEvent">
      <summary>Handles user interface message events as ActiveX events.</summary>
      <remarks>You must implement this method if you are writing a user interface and you want to receive UIMessages as ActiveX events. If you are using the TestStand ActiveX control in Microsoft Visual Basic, double-click the TestStand control icon on the form to implement the ActiveX event callback.</remarks>
      <param name="msg">The user interface message that TestStand passes to the event.</param>
      <seealso cref="Engine.GetUIMessage" />
      <seealso cref="Engine.RegisterUIMessageCallback" />
      <seealso cref="Engine.UIMessagePollingEnabled" />
      <seealso cref="StationOptions.UIMessageDelay" />
      <seealso cref="StationOptions.UIMessageMinDelay" />
      <seealso cref="UIMessage" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.DisableResults">
      <summary><para>Note: This property is obsolete. Use the StationOptions.DisableResults property instead.</para></summary>
      <remarks>Disables recording of results for all steps.
When this property is <c>True</c>, TestStand does not record results for steps. When this property is <c>False</c>, TestStand records results based on the setting of the Step.RecordResult property of each individual step or based on the Sequence.DisableResults property and Execution.DisableResults property.
<para>Note: TestStand might not honor changes to this property in a running sequence until the sequence completes the current step group.</para></remarks>
      <seealso cref="Execution.DisableResults" />
      <seealso cref="Sequence.DisableResults" />
      <seealso cref="StationOptions.DisableResults" />
      <seealso cref="Step.RecordResult" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.DisableResults">
      <summary><para>Note: This property is obsolete. Use the StationOptions.DisableResults property instead.</para></summary>
      <remarks>Disables recording of results for all steps.
When this property is <c>True</c>, TestStand does not record results for steps. When this property is <c>False</c>, TestStand records results based on the setting of the Step.RecordResult property of each individual step or based on the Sequence.DisableResults property and Execution.DisableResults property.
<para>Note: TestStand might not honor changes to this property in a running sequence until the sequence completes the current step group.</para></remarks>
      <seealso cref="Execution.DisableResults" />
      <seealso cref="Sequence.DisableResults" />
      <seealso cref="StationOptions.DisableResults" />
      <seealso cref="Step.RecordResult" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.GetUserProfile(System.String)">
      <summary><para>Note: This method is obsolete. Use Engine.GetUserGroup method instead.</para></summary>
      <remarks>Obtains the User" object that contains a specific user profile. Returns <c>NULL</c> if the user profile does not exist.
The user profile is a template for an actual user. Pass the user profile object to the Engine.NewUser method to create a new user.</remarks>
      <param name="userProfileName">Specifies the name of the user profile to return.</param>
      <seealso cref="Engine.DisplayEditUserDialog" />
      <seealso cref="Engine.GetUser" />
      <seealso cref="Engine.NewUser" />
      <seealso cref="Engine.UsersFile" />
      <seealso cref="User" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.GetUserProfile(System.String)">
      <summary><para>Note: This method is obsolete. Use Engine.GetUserGroup method instead.</para></summary>
      <remarks>Obtains the User" object that contains a specific user profile. Returns <c>NULL</c> if the user profile does not exist.
The user profile is a template for an actual user. Pass the user profile object to the Engine.NewUser method to create a new user.</remarks>
      <param name="userProfileName">Specifies the name of the user profile to return.</param>
      <seealso cref="Engine.DisplayEditUserDialog" />
      <seealso cref="Engine.GetUser" />
      <seealso cref="Engine.NewUser" />
      <seealso cref="Engine.UsersFile" />
      <seealso cref="User" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.CommitGlobalsToDisk(System.Boolean)">
      <summary>Saves the current state of the station globals to disk.</summary>
      <remarks>Calling this method with an argument of <c>True</c> is equivalent to calling the PropertyObjectFile.WriteFile method on the object the Engine.GlobalsFile property returns.</remarks>
      <param name="promptOnSaveConflicts">TestStand writes the station globals to disk only if they change after TestStand has loaded or saved them. If another application changes the station globals on disk after TestStand has loaded or saved them, the action TestStand takes depends on the value you pass in this parameter. If you pass <c>True</c>, TestStand gives users the option to overwrite the changes the other application made. If you pass <c>False</c>, TestStand saves the station globals without prompting the user to resolve any conflicts between the changes in memory and the changes on disk.</param>
      <seealso cref="Engine.Globals" />
      <seealso cref="Engine.GlobalsFile" />
      <seealso cref="PropertyObjectFile.WriteFile" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.CommitGlobalsToDisk(System.Boolean)">
      <summary>Saves the current state of the station globals to disk.</summary>
      <remarks>Calling this method with an argument of <c>True</c> is equivalent to calling the PropertyObjectFile.WriteFile method on the object the Engine.GlobalsFile property returns.</remarks>
      <param name="promptOnSaveConflicts">TestStand writes the station globals to disk only if they change after TestStand has loaded or saved them. If another application changes the station globals on disk after TestStand has loaded or saved them, the action TestStand takes depends on the value you pass in this parameter. If you pass <c>True</c>, TestStand gives users the option to overwrite the changes the other application made. If you pass <c>False</c>, TestStand saves the station globals without prompting the user to resolve any conflicts between the changes in memory and the changes on disk.</param>
      <seealso cref="Engine.Globals" />
      <seealso cref="Engine.GlobalsFile" />
      <seealso cref="PropertyObjectFile.WriteFile" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.DisplayAdapterConfigDialog(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>Launches the Adapter Configuration dialog box, in which you can edit adapter-specific settings and select the default adapter.</summary>
      <returns>Returns <c>True</c> if the dialog box modifies adapter settings.</returns>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.</param>
      <param name="adapterSelectorReadOnly">Pass <c>True</c> if you want a read-only version of the Selected column in the dialog box.</param>
      <param name="adapterCfgReadOnly">Pass <c>True</c> if you want read-only versions of the Adapter Configuration controls in the dialog box.</param>
      <param name="hideAdapterSelector">Pass <c>True</c> to hide the Selected and Hidden columns in the dialog box. This is useful for user interfaces that do not require the ability to select a default adapter.</param>
      <param name="modalToAppMainWind">By default, the dialog box is modal to the last active window of the calling thread, or if there is none, to the last active window from AppMainHwnd. If you set this option, the dialog box is modal with respect to the window handle of the Engine.AppMainHwnd property. Typically, you do not need to set this option.</param>
      <seealso cref="&quot;ActiveXAdapter&quot;ActiveXAdapter.htm" />
      <seealso cref="&quot;Adapter&quot;Adapter.htm" />
      <seealso cref="&quot;Adapter Configuration dialog box&quot;javascript:RefLink('/InfoTopics/DB_AdapterConfig.htm')" />
      <seealso cref="&quot;CommonCAdapter&quot;CommonCAdapter.htm" />
      <seealso cref="&quot;CVIAdapter&quot;CVIAdapter.htm" />
      <seealso cref="&quot;DllAdapter&quot;DllAdapter.htm" />
      <seealso cref="&quot;DotNetAdapter&quot;DotNetAdapter.htm" />
      <seealso cref="Engine.AppMainHwnd" />
      <seealso cref="&#xD;&#xA;Engine.ConfigDirectory" />
      <seealso cref="Engine.ConfigFile" />
      <seealso cref="Engine.DefaultAdapter" />
      <seealso cref="Engine.DefaultAdapterIndex" />
      <seealso cref="&quot;HTBasicAdapter&quot;HTBasicAdapter.htm" />
      <seealso cref="&quot;LabVIEWAdapter&quot;LabVIEWAdapter.htm" />
      <seealso cref="&quot;SequenceAdapter&quot;SequenceAdapter.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.DisplayAdapterConfigDialog(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>Launches the Adapter Configuration dialog box, in which you can edit adapter-specific settings and select the default adapter.</summary>
      <returns>Returns <c>True</c> if the dialog box modifies adapter settings.</returns>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.</param>
      <param name="adapterSelectorReadOnly">Pass <c>True</c> if you want a read-only version of the Selected column in the dialog box.</param>
      <param name="adapterCfgReadOnly">Pass <c>True</c> if you want read-only versions of the Adapter Configuration controls in the dialog box.</param>
      <param name="hideAdapterSelector">Pass <c>True</c> to hide the Selected and Hidden columns in the dialog box. This is useful for user interfaces that do not require the ability to select a default adapter.</param>
      <param name="modalToAppMainWind">By default, the dialog box is modal to the last active window of the calling thread, or if there is none, to the last active window from AppMainHwnd. If you set this option, the dialog box is modal with respect to the window handle of the Engine.AppMainHwnd property. Typically, you do not need to set this option.</param>
      <seealso cref="&quot;ActiveXAdapter&quot;ActiveXAdapter.htm" />
      <seealso cref="&quot;Adapter&quot;Adapter.htm" />
      <seealso cref="&quot;Adapter Configuration dialog box&quot;javascript:RefLink('/InfoTopics/DB_AdapterConfig.htm')" />
      <seealso cref="&quot;CommonCAdapter&quot;CommonCAdapter.htm" />
      <seealso cref="&quot;CVIAdapter&quot;CVIAdapter.htm" />
      <seealso cref="&quot;DllAdapter&quot;DllAdapter.htm" />
      <seealso cref="&quot;DotNetAdapter&quot;DotNetAdapter.htm" />
      <seealso cref="Engine.AppMainHwnd" />
      <seealso cref="&#xD;&#xA;Engine.ConfigDirectory" />
      <seealso cref="Engine.ConfigFile" />
      <seealso cref="Engine.DefaultAdapter" />
      <seealso cref="Engine.DefaultAdapterIndex" />
      <seealso cref="&quot;HTBasicAdapter&quot;HTBasicAdapter.htm" />
      <seealso cref="&quot;LabVIEWAdapter&quot;LabVIEWAdapter.htm" />
      <seealso cref="&quot;SequenceAdapter&quot;SequenceAdapter.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.UnloadAllModules">
      <summary>Unloads all code modules associated with steps, step types, and substeps.</summary>
      <remarks>Call this method to force all modules to be unloaded and then reloaded when they are next called so you can rebuild DLLs and other code modules. This method also unloads the station model sequence file. Typically, you only call this method when no executions are running.</remarks>
      <seealso cref="Sequence.UnloadModules" />
      <seealso cref="SequenceFile.UnloadModules" />
      <seealso cref="Step.UnloadModule" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.UnloadAllModules">
      <summary>Unloads all code modules associated with steps, step types, and substeps.</summary>
      <remarks>Call this method to force all modules to be unloaded and then reloaded when they are next called so you can rebuild DLLs and other code modules. This method also unloads the station model sequence file. Typically, you only call this method when no executions are running.</remarks>
      <seealso cref="Sequence.UnloadModules" />
      <seealso cref="SequenceFile.UnloadModules" />
      <seealso cref="Step.UnloadModule" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.GetStationModelSequenceFile(System.String@)">
      <summary>Returns a reference to the process model sequence file TestStand associates with the test station.</summary>
      <remarks>Release this reference when you are done using it.
This method returns an error if the sequence file exists but TestStand cannot load it for some reason. For example, TestStand might be unable to load the sequence file if there are type conflicts that cannot be automatically resolved.</remarks>
      <param name="modelDescriptionString">Returns a string that describes the process model file.</param>
      <seealso cref="SequenceFile" />
      <seealso cref="SequenceFile.GetModelSequenceFile" />
      <seealso cref="StationOptions.AllowOtherModels" />
      <seealso cref="StationOptions.StationModelSequenceFilePath" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.GetStationModelSequenceFile(System.String@)">
      <summary>Returns a reference to the process model sequence file TestStand associates with the test station.</summary>
      <remarks>Release this reference when you are done using it.
This method returns an error if the sequence file exists but TestStand cannot load it for some reason. For example, TestStand might be unable to load the sequence file if there are type conflicts that cannot be automatically resolved.</remarks>
      <param name="modelDescriptionString">Returns a string that describes the process model file.</param>
      <seealso cref="SequenceFile" />
      <seealso cref="SequenceFile.GetModelSequenceFile" />
      <seealso cref="StationOptions.AllowOtherModels" />
      <seealso cref="StationOptions.StationModelSequenceFilePath" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.AutoLoginSystemUser">
      <summary><para>Note: This property is obsolete. Use the StationOptions.AutoLoginSystemUser property instead.</para></summary>
      <remarks>Specifies if the LoginLogout callback sequence uses the current user login for the operating system as the login for TestStand when first launching a user interface or sequence editor.
If the user login for the operating system does not exist in TestStand, the Login dialog box launches. If the user login for the operating system exists in TestStand, TestStand automatically logs the user in using the operating system login. 
<para>Note: TestStand does not perform password authentication for an automatic login.</para></remarks>
      <seealso cref="Engine.CallFrontEndCallbackEx" />
      <seealso cref="StationOptions.AutoLoginSystemUser" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.AutoLoginSystemUser">
      <summary><para>Note: This property is obsolete. Use the StationOptions.AutoLoginSystemUser property instead.</para></summary>
      <remarks>Specifies if the LoginLogout callback sequence uses the current user login for the operating system as the login for TestStand when first launching a user interface or sequence editor.
If the user login for the operating system does not exist in TestStand, the Login dialog box launches. If the user login for the operating system exists in TestStand, TestStand automatically logs the user in using the operating system login. 
<para>Note: TestStand does not perform password authentication for an automatic login.</para></remarks>
      <seealso cref="Engine.CallFrontEndCallbackEx" />
      <seealso cref="StationOptions.AutoLoginSystemUser" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.MajorVersion">
      <summary>Returns the major version number for the current version of TestStand.</summary>
      <remarks>The version number usually appears in the <c>MajorVersion.MinorVersion.RevisionVersion</c> format, such as <c>1.0.2</c>.</remarks>
      <seealso cref="Engine.BuildVersion" />
      <seealso cref="Engine.MinorVersion" />
      <seealso cref="Engine.PatchVersion" />
      <seealso cref="Engine.RevisionVersion" />
      <seealso cref="Engine.VersionString" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.MajorVersion">
      <summary>Returns the major version number for the current version of TestStand.</summary>
      <remarks>The version number usually appears in the <c>MajorVersion.MinorVersion.RevisionVersion</c> format, such as <c>1.0.2</c>.</remarks>
      <seealso cref="Engine.BuildVersion" />
      <seealso cref="Engine.MinorVersion" />
      <seealso cref="Engine.PatchVersion" />
      <seealso cref="Engine.RevisionVersion" />
      <seealso cref="Engine.VersionString" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.ReleaseSequenceFile(NationalInstruments.TestStand.Interop.API.SequenceFile)">
      <summary><para>Note: This method is obsolete. Use the Engine.ReleaseSequenceFileEx method instead.</para></summary>
      <remarks>Releases the SequenceFile object from the Engine internal cache.
<para>Note: Calling this method does not release the ActiveX reference to the sequence file.</para></remarks>
      <param name="sequenceFileToRelease">Pass a reference to the sequence file to release.</param>
      <seealso cref="Engine.GetSequenceFileEx" />
      <seealso cref="Engine.NewSequenceFile" />
      <seealso cref="Engine.ReleaseSequenceFileEx" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.ReleaseSequenceFile(NationalInstruments.TestStand.Interop.API.SequenceFile)">
      <summary><para>Note: This method is obsolete. Use the Engine.ReleaseSequenceFileEx method instead.</para></summary>
      <remarks>Releases the SequenceFile object from the Engine internal cache.
<para>Note: Calling this method does not release the ActiveX reference to the sequence file.</para></remarks>
      <param name="sequenceFileToRelease">Pass a reference to the sequence file to release.</param>
      <seealso cref="Engine.GetSequenceFileEx" />
      <seealso cref="Engine.NewSequenceFile" />
      <seealso cref="Engine.ReleaseSequenceFileEx" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.MinorVersion">
      <summary>Returns the minor version number for the current version of TestStand.</summary>
      <remarks>The version number usually appears in the <c>MajorVersion.MinorVersion.RevisionVersion</c> format, such as <c>1.0.2</c>.
<para>Note: Prior to TestStand 2016, the revision version sometimes indicated the service pack level.  Starting with TestStand 2016, all service packs are reflected in <c>Engine.MinorVersion</c> and <c>Engine.RevisionVersion</c> is always 0. </para></remarks>
      <seealso cref="Engine.BuildVersion" />
      <seealso cref="Engine.MajorVersion" />
      <seealso cref="Engine.PatchVersion" />
      <seealso cref="Engine.RevisionVersion" />
      <seealso cref="Engine.VersionString" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.MinorVersion">
      <summary>Returns the minor version number for the current version of TestStand.</summary>
      <remarks>The version number usually appears in the <c>MajorVersion.MinorVersion.RevisionVersion</c> format, such as <c>1.0.2</c>.
<para>Note: Prior to TestStand 2016, the revision version sometimes indicated the service pack level.  Starting with TestStand 2016, all service packs are reflected in <c>Engine.MinorVersion</c> and <c>Engine.RevisionVersion</c> is always 0. </para></remarks>
      <seealso cref="Engine.BuildVersion" />
      <seealso cref="Engine.MajorVersion" />
      <seealso cref="Engine.PatchVersion" />
      <seealso cref="Engine.RevisionVersion" />
      <seealso cref="Engine.VersionString" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.RevisionVersion">
      <summary>Returns the revision version number for the current version of TestStand.</summary>
      <remarks>The version number usually appears in the <c>MajorVersion.MinorVersion.RevisionVersion</c> format, such as <c>1.0.2</c>.
<para>Note: Prior to TestStand 2016, the revision version sometimes indicated the service pack level. Starting with TestStand 2016, all service packs are reflected in <c>Engine.MinorVersion</c> and <c>Engine.RevisionVersion</c> is always 0.</para></remarks>
      <seealso cref="Engine.BuildVersion" />
      <seealso cref="Engine.MajorVersion" />
      <seealso cref="Engine.MinorVersion" />
      <seealso cref="Engine.PatchVersion" />
      <seealso cref="Engine.VersionString" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.RevisionVersion">
      <summary>Returns the revision version number for the current version of TestStand.</summary>
      <remarks>The version number usually appears in the <c>MajorVersion.MinorVersion.RevisionVersion</c> format, such as <c>1.0.2</c>.
<para>Note: Prior to TestStand 2016, the revision version sometimes indicated the service pack level. Starting with TestStand 2016, all service packs are reflected in <c>Engine.MinorVersion</c> and <c>Engine.RevisionVersion</c> is always 0.</para></remarks>
      <seealso cref="Engine.BuildVersion" />
      <seealso cref="Engine.MajorVersion" />
      <seealso cref="Engine.MinorVersion" />
      <seealso cref="Engine.PatchVersion" />
      <seealso cref="Engine.VersionString" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.DisplayLoopOnStepsDialog(System.String,NationalInstruments.TestStand.Interop.API.Step,System.Boolean,System.Int32@,System.String@)">
      <summary>Launches a dialog box that prompts the user to provide interactive execution information required for the Loop On Selected Steps command.</summary>
      <returns>Returns <c>True</c> if you click OK in the dialog box. Returns <c>False</c> if you click Cancel.</returns>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.</param>
      <param name="selectedStep">Specifies a reference to the first currently selected step. The dialog box uses this step to display property information if the user browses to create the 'stop on' expression.</param>
      <param name="modalToAppMainWnd">By default, the dialog box is modal to the last active window of the calling thread, or if there is none, to the last active window from AppMainHwnd. If you set this option, the dialog box is modal with respect to the window handle the Engine.AppMainHwnd property returns. Typically, you do not need to set this option.</param>
      <param name="loopCountValue">Returns the value of the loop count the user specifies in the dialog box. A value of -1 indicates an infinite loop.</param>
      <param name="stopExpressionValue">Returns the value of the stop expression the user specifies in the dialog box. An empty string indicates that the stop expression is not used.</param>
      <seealso cref="Engine.AppMainHwnd" />
      <seealso cref="Step" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.DisplayLoopOnStepsDialog(System.String,NationalInstruments.TestStand.Interop.API.Step,System.Boolean,System.Int32@,System.String@)">
      <summary>Launches a dialog box that prompts the user to provide interactive execution information required for the Loop On Selected Steps command.</summary>
      <returns>Returns <c>True</c> if you click OK in the dialog box. Returns <c>False</c> if you click Cancel.</returns>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.</param>
      <param name="selectedStep">Specifies a reference to the first currently selected step. The dialog box uses this step to display property information if the user browses to create the 'stop on' expression.</param>
      <param name="modalToAppMainWnd">By default, the dialog box is modal to the last active window of the calling thread, or if there is none, to the last active window from AppMainHwnd. If you set this option, the dialog box is modal with respect to the window handle the Engine.AppMainHwnd property returns. Typically, you do not need to set this option.</param>
      <param name="loopCountValue">Returns the value of the loop count the user specifies in the dialog box. A value of -1 indicates an infinite loop.</param>
      <param name="stopExpressionValue">Returns the value of the stop expression the user specifies in the dialog box. An empty string indicates that the stop expression is not used.</param>
      <seealso cref="Engine.AppMainHwnd" />
      <seealso cref="Step" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.VersionString">
      <summary>Returns the full version of the TestStand Engine as a string.</summary>
      <remarks>Use this string for display purposes. Use the other version properties for conditional code.</remarks>
      <seealso cref="Engine.BuildVersion" />
      <seealso cref="Engine.MajorVersion" />
      <seealso cref="Engine.MinorVersion" />
      <seealso cref="Engine.PatchVersion" />
      <seealso cref="Engine.RevisionVersion" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.VersionString">
      <summary>Returns the full version of the TestStand Engine as a string.</summary>
      <remarks>Use this string for display purposes. Use the other version properties for conditional code.</remarks>
      <seealso cref="Engine.BuildVersion" />
      <seealso cref="Engine.MajorVersion" />
      <seealso cref="Engine.MinorVersion" />
      <seealso cref="Engine.PatchVersion" />
      <seealso cref="Engine.RevisionVersion" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.ReloadGlobals">
      <summary>Reloads global variables from disk. All global reference variables and properties that exist after you call this method retain the reference values they had before the call to ReloadGlobals. To clear reference values, explicitly set the references to nothing or delete the global reference variables and properties before you call this method.</summary>
      <seealso cref="Engine.CommitGlobalsToDisk" />
      <seealso cref="Engine.Globals" />
      <seealso cref="Engine.GlobalsFile" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.ReloadGlobals">
      <summary>Reloads global variables from disk. All global reference variables and properties that exist after you call this method retain the reference values they had before the call to ReloadGlobals. To clear reference values, explicitly set the references to nothing or delete the global reference variables and properties before you call this method.</summary>
      <seealso cref="Engine.CommitGlobalsToDisk" />
      <seealso cref="Engine.Globals" />
      <seealso cref="Engine.GlobalsFile" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.LocalizeExpression(System.String,NationalInstruments.TestStand.Interop.API.DecimalPointLocalizationOptions)">
      <summary>Converts an expression string to conform to the localization settings for the computer.</summary>
      <remarks>Call this method to localize an expression before you display it. The method replaces the periods that represent decimal points in the expression with the localized decimal point character. If the localized decimal point character is the comma character, the method also replaces commas that represent argument or expression separators with semicolons. The method does not change periods used as property field separators or any characters inside string constants.</remarks>
      <returns>String containing the localized expression.</returns>
      <param name="expressionString">Specifies an unlocalized expression string to convert.</param>
      <param name="decimalPointOption">Constant that specifies how the method determines which character is the localized decimal point that it uses to localize the expression.</param>
      <seealso cref="DecimalPointLocalizationOptions" />
      <seealso cref="Engine.DelocalizeExpression" />
      <seealso cref="Engine.GetLocalizedDecimalPoint" />
      <seealso cref="StationOptions.UseLocalizedDecimalPoint" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.LocalizeExpression(System.String,NationalInstruments.TestStand.Interop.API.DecimalPointLocalizationOptions)">
      <summary>Converts an expression string to conform to the localization settings for the computer.</summary>
      <remarks>Call this method to localize an expression before you display it. The method replaces the periods that represent decimal points in the expression with the localized decimal point character. If the localized decimal point character is the comma character, the method also replaces commas that represent argument or expression separators with semicolons. The method does not change periods used as property field separators or any characters inside string constants.</remarks>
      <returns>String containing the localized expression.</returns>
      <param name="expressionString">Specifies an unlocalized expression string to convert.</param>
      <param name="decimalPointOption">Constant that specifies how the method determines which character is the localized decimal point that it uses to localize the expression.</param>
      <seealso cref="DecimalPointLocalizationOptions" />
      <seealso cref="Engine.DelocalizeExpression" />
      <seealso cref="Engine.GetLocalizedDecimalPoint" />
      <seealso cref="StationOptions.UseLocalizedDecimalPoint" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.DelocalizeExpression(System.String,NationalInstruments.TestStand.Interop.API.DecimalPointLocalizationOptions)">
      <summary>Converts a localized expression string to a standard form suitable for evaluation. </summary>
      <remarks>TestStand requires expressions it evaluates through the expression function Evaluate or the PropertyObject.EvaluateEx method to be in a standard, non-localized form so the result of the evaluation does not depend on the localization settings of the computer.
Call this method to delocalize expressions you obtain from user input. The method replaces the localized decimal point characters that represent decimal points in the expression with the period character. If the localized decimal point character is the comma character, the method also replaces semicolons that represent argument separators or expression separators with commas. The method does not change characters inside string constants.</remarks>
      <returns>A string containing the delocalized expression.</returns>
      <param name="localizedExpressionString">Specifies the localized expression string to convert.</param>
      <param name="decimalPointOption">Pass a constant that specifies how the method determines which character the localized expression uses for the localized decimal point.</param>
      <seealso cref="DecimalPointLocalizationOptions" />
      <seealso cref="Engine.GetLocalizedDecimalPoint" />
      <seealso cref="Engine.LocalizeExpression" />
      <seealso cref="PropertyObject.EvaluateEx" />
      <seealso cref="StationOptions.UseLocalizedDecimalPoint" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.DelocalizeExpression(System.String,NationalInstruments.TestStand.Interop.API.DecimalPointLocalizationOptions)">
      <summary>Converts a localized expression string to a standard form suitable for evaluation. </summary>
      <remarks>TestStand requires expressions it evaluates through the expression function Evaluate or the PropertyObject.EvaluateEx method to be in a standard, non-localized form so the result of the evaluation does not depend on the localization settings of the computer.
Call this method to delocalize expressions you obtain from user input. The method replaces the localized decimal point characters that represent decimal points in the expression with the period character. If the localized decimal point character is the comma character, the method also replaces semicolons that represent argument separators or expression separators with commas. The method does not change characters inside string constants.</remarks>
      <returns>A string containing the delocalized expression.</returns>
      <param name="localizedExpressionString">Specifies the localized expression string to convert.</param>
      <param name="decimalPointOption">Pass a constant that specifies how the method determines which character the localized expression uses for the localized decimal point.</param>
      <seealso cref="DecimalPointLocalizationOptions" />
      <seealso cref="Engine.GetLocalizedDecimalPoint" />
      <seealso cref="Engine.LocalizeExpression" />
      <seealso cref="PropertyObject.EvaluateEx" />
      <seealso cref="StationOptions.UseLocalizedDecimalPoint" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.GetLocalizedDecimalPoint(NationalInstruments.TestStand.Interop.API.DecimalPointLocalizationOptions)">
      <summary>Returns the localized decimal point character.</summary>
      <returns>A string that contains the localized decimal point character.</returns>
      <param name="decimalPointOption">A constant that specifies how the method determines which character is the localized decimal point character.</param>
      <seealso cref="DecimalPointLocalizationOptions" />
      <seealso cref="Engine.DelocalizeExpression" />
      <seealso cref="Engine.LocalizeExpression" />
      <seealso cref="StationOptions.UseLocalizedDecimalPoint" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.GetLocalizedDecimalPoint(NationalInstruments.TestStand.Interop.API.DecimalPointLocalizationOptions)">
      <summary>Returns the localized decimal point character.</summary>
      <returns>A string that contains the localized decimal point character.</returns>
      <param name="decimalPointOption">A constant that specifies how the method determines which character is the localized decimal point character.</param>
      <seealso cref="DecimalPointLocalizationOptions" />
      <seealso cref="Engine.DelocalizeExpression" />
      <seealso cref="Engine.LocalizeExpression" />
      <seealso cref="StationOptions.UseLocalizedDecimalPoint" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.UseLocalizedDecimalPoint">
      <summary><para>Note: This property is obsolete. Use the StationOptions.UseLocalizedDecimalPoint property instead.</para></summary>
      <remarks>Specifies whether to use the operating system setting to determine the character used as a decimal point.
When this property is <c>True</c>, TestStand uses the operating system setting to determine the character it uses as the localized decimal point. When this property is <c>False</c>, TestStand uses the period character to represent decimal points.</remarks>
      <seealso cref="StationOptions.GetLanguages" />
      <seealso cref="StationOptions.Language" />
      <seealso cref="StationOptions.RecognizeMBChars" />
      <seealso cref="StationOptions.UseLocalizedDecimalPoint" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.UseLocalizedDecimalPoint">
      <summary><para>Note: This property is obsolete. Use the StationOptions.UseLocalizedDecimalPoint property instead.</para></summary>
      <remarks>Specifies whether to use the operating system setting to determine the character used as a decimal point.
When this property is <c>True</c>, TestStand uses the operating system setting to determine the character it uses as the localized decimal point. When this property is <c>False</c>, TestStand uses the period character to represent decimal points.</remarks>
      <seealso cref="StationOptions.GetLanguages" />
      <seealso cref="StationOptions.Language" />
      <seealso cref="StationOptions.RecognizeMBChars" />
      <seealso cref="StationOptions.UseLocalizedDecimalPoint" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.GetToolMenuItemInfoEx(System.Int32,System.Int32,System.String@,System.Int32@,System.Int32@,System.Int32@)">
      <summary><para>Note: This method is obsolete. Use the Engine.GetEditTimeToolMenuItems and Engine.GetRunTimeToolMenuItems methods instead.</para></summary>
      <remarks>Returns information about a Tools menu item, which you specify with a menu index and an item index.
Use this information when constructing a Tools menu in a user interface. You must call the Engine.ConstructToolMenus method before calling this function.</remarks>
      <param name="menuIndex">Specifies a zero-based index for a Tools menu or submenu.</param>
      <param name="itemIndex">Specifies a zero-based index for an item within the menu or submenu.</param>
      <param name="itemText">Returns the text to display in the menu item.</param>
      <param name="subMenuIndex">If the item is a submenu, this parameter returns the zero-based menu index of the Tools menu for the item. Otherwise, it returns <c>-1</c>.</param>
      <param name="itemAttributes">The bitwise-OR combination of one or more ToolMenuItemAttributes constants. Use the bitwise-AND operator to determine whether an item has a specific attribute.</param>
      <param name="uniqueItemID">Returns a unique ID to identify the menu item. Use this ID to invoke the Tools menu item or to obtain the menu item information again at a later time.</param>
      <seealso cref="Engine.ConstructToolMenus" />
      <seealso cref="Engine.GetEditTimeToolMenuItems" />
      <seealso cref="Engine.GetRunTimeToolMenuItems" />
      <seealso cref="ToolMenuItemAttributes" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.GetToolMenuItemInfoEx(System.Int32,System.Int32,System.String@,System.Int32@,System.Int32@,System.Int32@)">
      <summary><para>Note: This method is obsolete. Use the Engine.GetEditTimeToolMenuItems and Engine.GetRunTimeToolMenuItems methods instead.</para></summary>
      <remarks>Returns information about a Tools menu item, which you specify with a menu index and an item index.
Use this information when constructing a Tools menu in a user interface. You must call the Engine.ConstructToolMenus method before calling this function.</remarks>
      <param name="menuIndex">Specifies a zero-based index for a Tools menu or submenu.</param>
      <param name="itemIndex">Specifies a zero-based index for an item within the menu or submenu.</param>
      <param name="itemText">Returns the text to display in the menu item.</param>
      <param name="subMenuIndex">If the item is a submenu, this parameter returns the zero-based menu index of the Tools menu for the item. Otherwise, it returns <c>-1</c>.</param>
      <param name="itemAttributes">The bitwise-OR combination of one or more ToolMenuItemAttributes constants. Use the bitwise-AND operator to determine whether an item has a specific attribute.</param>
      <param name="uniqueItemID">Returns a unique ID to identify the menu item. Use this ID to invoke the Tools menu item or to obtain the menu item information again at a later time.</param>
      <seealso cref="Engine.ConstructToolMenus" />
      <seealso cref="Engine.GetEditTimeToolMenuItems" />
      <seealso cref="Engine.GetRunTimeToolMenuItems" />
      <seealso cref="ToolMenuItemAttributes" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.GetToolMenuItemInfoWithIDEx(System.Int32,System.String@,System.Int32@,System.Int32@)">
      <summary><para>Note: This method is obsolete. Use the Engine.GetEditTimeToolMenuItems and Engine.GetRunTimeToolMenuItems methods instead.</para></summary>
      <remarks>Returns information about a Tools menu item, which you specify with a unique Tools menu item ID.
The information returned is useful for constructing a Tools menu in a user interface. You must call the Engine.ConstructToolMenus method before calling this function.</remarks>
      <param name="uniqueItemID">Specifies the Tools menu item ID you obtain from the Engine.GetToolMenuItemInfoEx method or the Menu_ToolIDProp property on the object the  Engine.GetToolMenuStructure method returns.</param>
      <param name="itemText">Returns the text to display in the menu item.</param>
      <param name="subMenuIndex">If the item is a submenu, this parameter returns the zero-based menu index of the Tools menu for the item. Otherwise, it returns <c>-1</c>.</param>
      <param name="itemAttributes">The bitwise-OR combination of one or more ToolMenuItemAttributes constants. Use the bitwise-AND operator to determine whether an item has a specific attribute.</param>
      <seealso cref="Engine.ConstructToolMenus " />
      <seealso cref="Engine.GetEditTimeToolMenuItems" />
      <seealso cref="Engine.GetRunTimeToolMenuItems" />
      <seealso cref="Engine.GetToolMenuItemInfoEx" />
      <seealso cref="Engine.GetToolMenuStructure" />
      <seealso cref="MenuItemProperties" />
      <seealso cref="ToolMenuItemAttributes" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.GetToolMenuItemInfoWithIDEx(System.Int32,System.String@,System.Int32@,System.Int32@)">
      <summary><para>Note: This method is obsolete. Use the Engine.GetEditTimeToolMenuItems and Engine.GetRunTimeToolMenuItems methods instead.</para></summary>
      <remarks>Returns information about a Tools menu item, which you specify with a unique Tools menu item ID.
The information returned is useful for constructing a Tools menu in a user interface. You must call the Engine.ConstructToolMenus method before calling this function.</remarks>
      <param name="uniqueItemID">Specifies the Tools menu item ID you obtain from the Engine.GetToolMenuItemInfoEx method or the Menu_ToolIDProp property on the object the  Engine.GetToolMenuStructure method returns.</param>
      <param name="itemText">Returns the text to display in the menu item.</param>
      <param name="subMenuIndex">If the item is a submenu, this parameter returns the zero-based menu index of the Tools menu for the item. Otherwise, it returns <c>-1</c>.</param>
      <param name="itemAttributes">The bitwise-OR combination of one or more ToolMenuItemAttributes constants. Use the bitwise-AND operator to determine whether an item has a specific attribute.</param>
      <seealso cref="Engine.ConstructToolMenus " />
      <seealso cref="Engine.GetEditTimeToolMenuItems" />
      <seealso cref="Engine.GetRunTimeToolMenuItems" />
      <seealso cref="Engine.GetToolMenuItemInfoEx" />
      <seealso cref="Engine.GetToolMenuStructure" />
      <seealso cref="MenuItemProperties" />
      <seealso cref="ToolMenuItemAttributes" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.DisplayMessageBox(System.String,System.String,NationalInstruments.TestStand.Interop.API.MsgBoxTypes,System.Int32,System.Int32)">
      <summary>Launches a message dialog box.</summary>
      <remarks>Calling this method on a remote instance of the engine displays the message on the local computer.</remarks>
      <returns>Returns the user response. This is the same as the return value from the Microsoft Windows Software Development Kit MessageBox function. The following are typical values: IDOK (1), IDCANCEL (2), IDYES (6), IDNO (7).</returns>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.</param>
      <param name="messageText">Specifies the text to display in the message box.</param>
      <param name="msgBoxType">Specifies the type of message box. This tells the message box which icon to display.</param>
      <param name="dlgOptions">Specify CommonDlgOption_NoOptions or CommonDlgOption_ModalToAppMainWnd.</param>
      <param name="win32Flags">Specifies any additional flags the Windows SDK MessageBox function allows.</param>
      <seealso cref="CommonDialogOptions" />
      <seealso cref="MsgBoxTypes" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.DisplayMessageBox(System.String,System.String,NationalInstruments.TestStand.Interop.API.MsgBoxTypes,System.Int32,System.Int32)">
      <summary>Launches a message dialog box.</summary>
      <remarks>Calling this method on a remote instance of the engine displays the message on the local computer.</remarks>
      <returns>Returns the user response. This is the same as the return value from the Microsoft Windows Software Development Kit MessageBox function. The following are typical values: IDOK (1), IDCANCEL (2), IDYES (6), IDNO (7).</returns>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.</param>
      <param name="messageText">Specifies the text to display in the message box.</param>
      <param name="msgBoxType">Specifies the type of message box. This tells the message box which icon to display.</param>
      <param name="dlgOptions">Specify CommonDlgOption_NoOptions or CommonDlgOption_ModalToAppMainWnd.</param>
      <param name="win32Flags">Specifies any additional flags the Windows SDK MessageBox function allows.</param>
      <seealso cref="CommonDialogOptions" />
      <seealso cref="MsgBoxTypes" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.AlwaysGotoCleanupOnFailure">
      <summary><para>Note: This property is obsolete. Use the StationOptions.AlwaysGotoCleanupOnFailure property instead.</para></summary>
      <remarks>Overrides the Sequence.GotoCleanupOnFailure property setting when this property is <c>True</c>.</remarks>
      <seealso cref="Sequence.GotoCleanupOnFailure" />
      <seealso cref="StationOptions.AlwaysGotoCleanupOnFailure" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.AlwaysGotoCleanupOnFailure">
      <summary><para>Note: This property is obsolete. Use the StationOptions.AlwaysGotoCleanupOnFailure property instead.</para></summary>
      <remarks>Overrides the Sequence.GotoCleanupOnFailure property setting when this property is <c>True</c>.</remarks>
      <seealso cref="Sequence.GotoCleanupOnFailure" />
      <seealso cref="StationOptions.AlwaysGotoCleanupOnFailure" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.RegisterUIMessage(System.String)">
      <summary>Defines a new UIMessage that is guaranteed to be unique for the lifetime of the engine.</summary>
      <remarks>Use this method to define new messages for step types or user interfaces to ensure that they do not conflict with messages defined by other custom TestStand components, such as add-on products. This method returns the previously assigned message code if the message is already assigned.
Messages the <c>Engine.RegisterUIMessages</c> method defines do not generate an ApplicationMgr.UserMessage event, but TestStand does send the message to ApplicationMgr.UIMessageEvent.</remarks>
      <returns>Returns the event code for the message. Use this value as the eventCode parameter of the Thread.PostUIMessageEx method.
Returns <c>-1</c> if there are no more message codes available for registration.</returns>
      <param name="messageName">Specifies the name of the message to register.</param>
      <seealso cref="Engine.PostUIMessage" />
      <seealso cref="Thread.PostUIMessageEx" />
      <seealso cref="UIMessage" />
      <seealso cref="UIMessageCodes" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.RegisterUIMessage(System.String)">
      <summary>Defines a new UIMessage that is guaranteed to be unique for the lifetime of the engine.</summary>
      <remarks>Use this method to define new messages for step types or user interfaces to ensure that they do not conflict with messages defined by other custom TestStand components, such as add-on products. This method returns the previously assigned message code if the message is already assigned.
Messages the <c>Engine.RegisterUIMessages</c> method defines do not generate an ApplicationMgr.UserMessage event, but TestStand does send the message to ApplicationMgr.UIMessageEvent.</remarks>
      <returns>Returns the event code for the message. Use this value as the eventCode parameter of the Thread.PostUIMessageEx method.
Returns <c>-1</c> if there are no more message codes available for registration.</returns>
      <param name="messageName">Specifies the name of the message to register.</param>
      <seealso cref="Engine.PostUIMessage" />
      <seealso cref="Thread.PostUIMessageEx" />
      <seealso cref="UIMessage" />
      <seealso cref="UIMessageCodes" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.ExternalReportViewers">
      <summary>Returns a reference to the ExternalReportViewers object, which is a collection that contains a list of the current external report viewers.</summary>
      <remarks>You must obtain the external report viewer collection before adding or modifying an external report viewer.</remarks>
      <seealso cref="ExternalReportViewers" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.ExternalReportViewers">
      <summary>Returns a reference to the ExternalReportViewers object, which is a collection that contains a list of the current external report viewers.</summary>
      <remarks>You must obtain the external report viewer collection before adding or modifying an external report viewer.</remarks>
      <seealso cref="ExternalReportViewers" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.NewWorkspaceFile">
      <summary>Creates and returns a new WorkspaceFile object.</summary>
      <seealso cref="Engine.CurrentWorkspaceFile" />
      <seealso cref="Engine.OpenWorkspaceFile" />
      <seealso cref="WorkspaceFile" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.NewWorkspaceFile">
      <summary>Creates and returns a new WorkspaceFile object.</summary>
      <seealso cref="Engine.CurrentWorkspaceFile" />
      <seealso cref="Engine.OpenWorkspaceFile" />
      <seealso cref="WorkspaceFile" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.OpenWorkspaceFile(System.String,System.Int32,NationalInstruments.TestStand.Interop.API.TypeConflictHandlerTypes)">
      <summary>Returns the WorkspaceFile object for the workspace file the workspaceFilePath parameter specifies.</summary>
      <remarks>Reads the workspace file from disk. The path must be an absolute path. If the path is not absolute, TestStand raises an exception when trying to read the workspace file.</remarks>
      <param name="workspaceFilePath">Specifies the absolute pathname of the workspace file.</param>
      <param name="options">Specify one or more OpenWorkspaceFileOptions constants. Use the bitwise-OR operator to specify more than one option.</param>
      <param name="handlerType">Specifies how to handle type conflicts.</param>
      <seealso cref="Engine.CurrentWorkspaceFile" />
      <seealso cref="Engine.NewWorkspaceFile" />
      <seealso cref="OpenWorkspaceFileOptions" />
      <seealso cref="TypeConflictHandlerTypes" />
      <seealso cref="WorkspaceFile" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.OpenWorkspaceFile(System.String,System.Int32,NationalInstruments.TestStand.Interop.API.TypeConflictHandlerTypes)">
      <summary>Returns the WorkspaceFile object for the workspace file the workspaceFilePath parameter specifies.</summary>
      <remarks>Reads the workspace file from disk. The path must be an absolute path. If the path is not absolute, TestStand raises an exception when trying to read the workspace file.</remarks>
      <param name="workspaceFilePath">Specifies the absolute pathname of the workspace file.</param>
      <param name="options">Specify one or more OpenWorkspaceFileOptions constants. Use the bitwise-OR operator to specify more than one option.</param>
      <param name="handlerType">Specifies how to handle type conflicts.</param>
      <seealso cref="Engine.CurrentWorkspaceFile" />
      <seealso cref="Engine.NewWorkspaceFile" />
      <seealso cref="OpenWorkspaceFileOptions" />
      <seealso cref="TypeConflictHandlerTypes" />
      <seealso cref="WorkspaceFile" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.ReloadStringResourceFiles">
      <summary>Refreshes the TestStand Engine string table, affecting future calls to the Engine.GetResourceString method.</summary>
      <remarks>TestStand does not unload the strings but overwrites existing ones. Components that have already cached resource strings might not update with new values.
The string table is updated with the files corresponding to the last language selected.</remarks>
      <seealso cref="Engine.GetResourceString" />
      <seealso cref="StationOptions.Language" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.ReloadStringResourceFiles">
      <summary>Refreshes the TestStand Engine string table, affecting future calls to the Engine.GetResourceString method.</summary>
      <remarks>TestStand does not unload the strings but overwrites existing ones. Components that have already cached resource strings might not update with new values.
The string table is updated with the files corresponding to the last language selected.</remarks>
      <seealso cref="Engine.GetResourceString" />
      <seealso cref="StationOptions.Language" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.GetAdapterByKeyName(System.String)">
      <summary>Returns an Adapter object from the list of module adapters.</summary>
      <remarks>To access the properties and methods of a specific adapter, call GetAdapterByKeyName and then query the returned Adapter object for the interface of the desired adapter.</remarks>
      <returns>The adapter that has the specified key name.</returns>
      <param name="adapterKeyName">Specifies the name to use as a key to find the adapter in the list. Pass one of the AdapterKeyNames constants.</param>
      <seealso cref="Adapter" />
      <seealso cref="AdapterKeyNames" />
      <seealso cref="Engine.GetAdapter" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.GetAdapterByKeyName(System.String)">
      <summary>Returns an Adapter object from the list of module adapters.</summary>
      <remarks>To access the properties and methods of a specific adapter, call GetAdapterByKeyName and then query the returned Adapter object for the interface of the desired adapter.</remarks>
      <returns>The adapter that has the specified key name.</returns>
      <param name="adapterKeyName">Specifies the name to use as a key to find the adapter in the list. Pass one of the AdapterKeyNames constants.</param>
      <seealso cref="Adapter" />
      <seealso cref="AdapterKeyNames" />
      <seealso cref="Engine.GetAdapter" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.PostUIMessage(NationalInstruments.TestStand.Interop.API.Execution,NationalInstruments.TestStand.Interop.API.Thread,NationalInstruments.TestStand.Interop.API.UIMessageCodes,System.Double,System.String,System.Object,System.Boolean)">
      <summary>Posts a user interface message to the current sequence editor or user interface.</summary>
      <remarks>You can post the following messages from a step: <c>UIMsg_ProgressPercent</c> and <c>UIMsg_ProgressText</c>. These messages tell the user interface to display a progress indicator or text message for the execution.</remarks>
      <param name="executionParam">Specifies the execution to pass with the message.</param>
      <param name="threadParam">Specifies the thread to pass with the message.</param>
      <param name="eventCode">Specifies the type of UIMessage.</param>
      <param name="numericDataParam">Specifies numeric data to pass with the message. When you post a <c>UIMsg_ProgressPercent</c> event, this parameter specifies the percent done.</param>
      <param name="stringDataParam">Specifies string data to pass with the message. When you post a <c>UIMsg_ProgressText</c> event, this parameter specifies the text to display.</param>
      <param name="activeXDataParam">Specifies an ActiveX reference to pass with the message.</param>
      <param name="synchronous">Typically, you pass <c>True</c> for this parameter to direct the method to wait until the user interface processes the message. If you pass <c>False</c>, the method returns immediately without waiting for the user interface to handle the message. If you pass <c>False</c> and post messages faster than the user interface processes messages, the number of messages in the queue the user interface must handle grows unbounded and floods the user interface with messages, which causes the user interface to become unresponsive.</param>
      <seealso cref="Execution" />
      <seealso cref="Thread" />
      <seealso cref="Thread.PostUIMessageEx" />
      <seealso cref="UIMessageCodes" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.PostUIMessage(NationalInstruments.TestStand.Interop.API.Execution,NationalInstruments.TestStand.Interop.API.Thread,NationalInstruments.TestStand.Interop.API.UIMessageCodes,System.Double,System.String,System.Object,System.Boolean)">
      <summary>Posts a user interface message to the current sequence editor or user interface.</summary>
      <remarks>You can post the following messages from a step: <c>UIMsg_ProgressPercent</c> and <c>UIMsg_ProgressText</c>. These messages tell the user interface to display a progress indicator or text message for the execution.</remarks>
      <param name="executionParam">Specifies the execution to pass with the message.</param>
      <param name="threadParam">Specifies the thread to pass with the message.</param>
      <param name="eventCode">Specifies the type of UIMessage.</param>
      <param name="numericDataParam">Specifies numeric data to pass with the message. When you post a <c>UIMsg_ProgressPercent</c> event, this parameter specifies the percent done.</param>
      <param name="stringDataParam">Specifies string data to pass with the message. When you post a <c>UIMsg_ProgressText</c> event, this parameter specifies the text to display.</param>
      <param name="activeXDataParam">Specifies an ActiveX reference to pass with the message.</param>
      <param name="synchronous">Typically, you pass <c>True</c> for this parameter to direct the method to wait until the user interface processes the message. If you pass <c>False</c>, the method returns immediately without waiting for the user interface to handle the message. If you pass <c>False</c> and post messages faster than the user interface processes messages, the number of messages in the queue the user interface must handle grows unbounded and floods the user interface with messages, which causes the user interface to become unresponsive.</param>
      <seealso cref="Execution" />
      <seealso cref="Thread" />
      <seealso cref="Thread.PostUIMessageEx" />
      <seealso cref="UIMessageCodes" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.NewTypeUsageList(System.Int32)">
      <summary>Creates and returns a new TypeUsageList.</summary>
      <param name="reservedParam">Pass <c>0</c>.</param>
      <seealso cref="TypeUsageList" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.NewTypeUsageList(System.Int32)">
      <summary>Creates and returns a new TypeUsageList.</summary>
      <param name="reservedParam">Pass <c>0</c>.</param>
      <seealso cref="TypeUsageList" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.UnserializeObjectsAndTypes(System.String,NationalInstruments.TestStand.Interop.API.TypeUsageList@,System.Int32,NationalInstruments.TestStand.Interop.API.TypeConflictHandlerTypes)">
      <summary>Converts a string of serialized objects into an array of property objects and a TypeUsageList that contains types the PropertyObjects use.</summary>
      <remarks>Call this method to convert the return value of the Engine.SerializeObjects method into an array of property objects and a list of types. Typically, you use the <c>Engine.SerializeObjects</c> and Engine.UnserializeObjects methods to put TestStand data on the Microsoft Windows clipboard and to obtain data from it.
If you insert the array of property objects this method returns into a property object file, add the types it uses to the file. You can also add the types to the file by calling the TypeUsageList.Union method on the object the PropertyObjectFile.TypeUsageList property returns. Pass the typesUsed output value as the unionTypeUsageList parameter to <c>TypeUsageList.Union</c>.
When you unserialize a step or a sequence, call the Step.CreateNewUniqueStepId, Sequence.CreateNewUniqueStepIds, or Engine.CreateNewUniqueStepIds method to replace the unique step ID with a new unique ID.</remarks>
      <returns>Returns the array of unserialized property objects.</returns>
      <param name="stream">Specifies the serialized objects the Engine.SerializeObjects method creates.</param>
      <param name="typesUsed">Returns the list of types the serialized objects use.</param>
      <param name="reservedParam">Pass <c>0</c>.</param>
      <param name="handlerType">Specifies how to handle type conflicts in the stream.</param>
      <seealso cref="Engine.CreateNewUniqueStepIds" />
      <seealso cref="Engine.SerializeObjects" />
      <seealso cref="Engine.UnserializeObjects" />
      <seealso cref="PropertyObject.Serialize" />
      <seealso cref="PropertyObject.UnserializeEx" />
      <seealso cref="PropertyObjectFile.TypeUsageList" />
      <seealso cref="Sequence.CreateNewUniqueStepIds" />
      <seealso cref="Step.CreateNewUniqueStepId" />
      <seealso cref="TypeConflictHandlerTypes" />
      <seealso cref="TypeUsageList" />
      <seealso cref="TypeUsageList.Union" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.UnserializeObjectsAndTypes(System.String,NationalInstruments.TestStand.Interop.API.TypeUsageList@,System.Int32,NationalInstruments.TestStand.Interop.API.TypeConflictHandlerTypes)">
      <summary>Converts a string of serialized objects into an array of property objects and a TypeUsageList that contains types the PropertyObjects use.</summary>
      <remarks>Call this method to convert the return value of the Engine.SerializeObjects method into an array of property objects and a list of types. Typically, you use the <c>Engine.SerializeObjects</c> and Engine.UnserializeObjects methods to put TestStand data on the Microsoft Windows clipboard and to obtain data from it.
If you insert the array of property objects this method returns into a property object file, add the types it uses to the file. You can also add the types to the file by calling the TypeUsageList.Union method on the object the PropertyObjectFile.TypeUsageList property returns. Pass the typesUsed output value as the unionTypeUsageList parameter to <c>TypeUsageList.Union</c>.
When you unserialize a step or a sequence, call the Step.CreateNewUniqueStepId, Sequence.CreateNewUniqueStepIds, or Engine.CreateNewUniqueStepIds method to replace the unique step ID with a new unique ID.</remarks>
      <returns>Returns the array of unserialized property objects.</returns>
      <param name="stream">Specifies the serialized objects the Engine.SerializeObjects method creates.</param>
      <param name="typesUsed">Returns the list of types the serialized objects use.</param>
      <param name="reservedParam">Pass <c>0</c>.</param>
      <param name="handlerType">Specifies how to handle type conflicts in the stream.</param>
      <seealso cref="Engine.CreateNewUniqueStepIds" />
      <seealso cref="Engine.SerializeObjects" />
      <seealso cref="Engine.UnserializeObjects" />
      <seealso cref="PropertyObject.Serialize" />
      <seealso cref="PropertyObject.UnserializeEx" />
      <seealso cref="PropertyObjectFile.TypeUsageList" />
      <seealso cref="Sequence.CreateNewUniqueStepIds" />
      <seealso cref="Step.CreateNewUniqueStepId" />
      <seealso cref="TypeConflictHandlerTypes" />
      <seealso cref="TypeUsageList" />
      <seealso cref="TypeUsageList.Union" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.GetRemoteExecutorInterface(System.Object@)">
      <summary></summary>
      <returns>Specifies </returns>
      <param name="">Returns</param>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.GetRemoteExecutorInterface(System.Object@)">
      <summary></summary>
      <returns>Specifies </returns>
      <param name="">Returns</param>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.GetWatchExpressionsChangeCount">
      <summary>Returns the number of modifications made to the watch expression list the engine maintains or to the watch expressions in the list.</summary>
      <remarks>When you insert or remove a WatchExpression object from the watch expression list the engine maintains or when you modify a watch expression in the list, the engine increments the change count. The sequence editor and user interfaces can use this count to determine when to refresh the Watch View pane.</remarks>
      <seealso cref="WatchExpression" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.GetWatchExpressionsChangeCount">
      <summary>Returns the number of modifications made to the watch expression list the engine maintains or to the watch expressions in the list.</summary>
      <remarks>When you insert or remove a WatchExpression object from the watch expression list the engine maintains or when you modify a watch expression in the list, the engine increments the change count. The sequence editor and user interfaces can use this count to determine when to refresh the Watch View pane.</remarks>
      <seealso cref="WatchExpression" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.CreateNewUniqueStepIds(System.Object[])">
      <summary>Creates new unique step IDs for a set of steps.</summary>
      <remarks>Call this method after cloning or copying a group of steps to ensure that the steps in the copy contain unique IDs. This method also modifies certain steps, such as Goto steps, that refer to unique IDs so they refer to the newly generated IDs.</remarks>
      <param name="steps">Specifies an array of steps for which new unique step IDs are created.</param>
      <seealso cref="Sequence.CreateNewUniqueStepIds" />
      <seealso cref="Step.CreateNewUniqueStepId" />
      <seealso cref="Step.UniqueStepId" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.CreateNewUniqueStepIds(System.Object[])">
      <summary>Creates new unique step IDs for a set of steps.</summary>
      <remarks>Call this method after cloning or copying a group of steps to ensure that the steps in the copy contain unique IDs. This method also modifies certain steps, such as Goto steps, that refer to unique IDs so they refer to the newly generated IDs.</remarks>
      <param name="steps">Specifies an array of steps for which new unique step IDs are created.</param>
      <seealso cref="Sequence.CreateNewUniqueStepIds" />
      <seealso cref="Step.CreateNewUniqueStepId" />
      <seealso cref="Step.UniqueStepId" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.EnableRemote">
      <summary><para>Note: This property is obsolete. Use the StationOptions.AllowSequenceCallsFromRemoteMachine property instead.</para></summary>
      <remarks>Specifies if remote TestStand installations can execute sequences on the local computer.
When this property is <c>True</c>, TestStand allows instances of the TestStand Engine on remote computers to connect to the local computer to execute sequences. When this property is <c>False</c>, only instances of TestStand on the local computer can execute sequences on the local computer.</remarks>
      <seealso cref="Engine.IsRemote" />
      <seealso cref="StationOptions.AllowSequenceCallsFromRemoteMachine" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.EnableRemote">
      <summary><para>Note: This property is obsolete. Use the StationOptions.AllowSequenceCallsFromRemoteMachine property instead.</para></summary>
      <remarks>Specifies if remote TestStand installations can execute sequences on the local computer.
When this property is <c>True</c>, TestStand allows instances of the TestStand Engine on remote computers to connect to the local computer to execute sequences. When this property is <c>False</c>, only instances of TestStand on the local computer can execute sequences on the local computer.</remarks>
      <seealso cref="Engine.IsRemote" />
      <seealso cref="StationOptions.AllowSequenceCallsFromRemoteMachine" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.IsRemote">
      <summary>Specifies whether the engine was created to execute sequences on a remote computer.</summary>
      <remarks><para>Note: A TestStand Engine must set this property. National Instruments recommends not setting this property manually.</para>
When TestStand executes sequences on a remote computer, the software creates an instance of the TestStand Engine on the remote computer and sets this property on the remote engine to <c>True</c>. To determine whether the engine was created for remote execution, obtain the value of this property.
<para>Note: TestStand does not support remotely executing a sequence across different TestStand versions, for example, remotely executing a TestStand 2013 sequence from a computer running TestStand 2010.</para></remarks>
      <seealso cref="Engine.MasterEngine" />
      <seealso cref="StationOptions.AllowSequenceCallsFromRemoteMachine" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.IsRemote">
      <summary>Specifies whether the engine was created to execute sequences on a remote computer.</summary>
      <remarks><para>Note: A TestStand Engine must set this property. National Instruments recommends not setting this property manually.</para>
When TestStand executes sequences on a remote computer, the software creates an instance of the TestStand Engine on the remote computer and sets this property on the remote engine to <c>True</c>. To determine whether the engine was created for remote execution, obtain the value of this property.
<para>Note: TestStand does not support remotely executing a sequence across different TestStand versions, for example, remotely executing a TestStand 2013 sequence from a computer running TestStand 2010.</para></remarks>
      <seealso cref="Engine.MasterEngine" />
      <seealso cref="StationOptions.AllowSequenceCallsFromRemoteMachine" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.MasterEngine">
      <summary>Specifies the controlling engine for remote engines.</summary>
      <remarks><para>Note: A TestStand Engine must set this property. National Instruments recommends not setting this property manually.</para>
When TestStand executes sequences on a remote computer, it creates an instance of the TestStand Engine on the remote computer and sets this property on the remote engine to refer back to the controlling engine. If this engine is a remote engine, you can use this property to access the engine on the other computer.</remarks>
      <seealso cref="Engine.IsRemote" />
      <seealso cref="StationOptions.AllowSequenceCallsFromRemoteMachine" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.MasterEngine">
      <summary>Specifies the controlling engine for remote engines.</summary>
      <remarks><para>Note: A TestStand Engine must set this property. National Instruments recommends not setting this property manually.</para>
When TestStand executes sequences on a remote computer, it creates an instance of the TestStand Engine on the remote computer and sets this property on the remote engine to refer back to the controlling engine. If this engine is a remote engine, you can use this property to access the engine on the other computer.</remarks>
      <seealso cref="Engine.IsRemote" />
      <seealso cref="StationOptions.AllowSequenceCallsFromRemoteMachine" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.NewPropertyObjectFile(NationalInstruments.TestStand.Interop.API.PropertyObjectFileTypes)">
      <summary>Creates and returns a new PropertyObjectFile object.</summary>
      <remarks>Use this method to create type palette files, workspace files, project files, sequence files, and generic property object files. You cannot create a users file, configuration file, or a station globals file using this method.</remarks>
      <param name="fileType">Specifies the type of file to create.</param>
      <seealso cref="Engine.NewSequenceFile" />
      <seealso cref="Engine.NewWorkspaceFile" />
      <seealso cref="PropertyObjectFile" />
      <seealso cref="PropertyObjectFileTypes" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.NewPropertyObjectFile(NationalInstruments.TestStand.Interop.API.PropertyObjectFileTypes)">
      <summary>Creates and returns a new PropertyObjectFile object.</summary>
      <remarks>Use this method to create type palette files, workspace files, project files, sequence files, and generic property object files. You cannot create a users file, configuration file, or a station globals file using this method.</remarks>
      <param name="fileType">Specifies the type of file to create.</param>
      <seealso cref="Engine.NewSequenceFile" />
      <seealso cref="Engine.NewWorkspaceFile" />
      <seealso cref="PropertyObjectFile" />
      <seealso cref="PropertyObjectFileTypes" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.GlobalsFile">
      <summary>Returns the PropertyObjectFile that contains the test station global variables.</summary>
      <seealso cref="Engine.CommitGlobalsToDisk" />
      <seealso cref="Engine.ConfigDirectory" />
      <seealso cref="Engine.Globals" />
      <seealso cref="PropertyObjectFile" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.GlobalsFile">
      <summary>Returns the PropertyObjectFile that contains the test station global variables.</summary>
      <seealso cref="Engine.CommitGlobalsToDisk" />
      <seealso cref="Engine.ConfigDirectory" />
      <seealso cref="Engine.Globals" />
      <seealso cref="PropertyObjectFile" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.UsersFile">
      <summary>Returns the PropertyObjectFile that contains the list of TestStand users and user groups.</summary>
      <remarks>Sequence editors and user interfaces typically use this object to display users and user groups or to edit lists of users and user groups, their properties and privileges, and save those lists to disk.</remarks>
      <seealso cref="Engine.ConfigFile" />
      <seealso cref="Engine.CurrentUser" />
      <seealso cref="Engine.GetUser" />
      <seealso cref="Engine.GetUserGroup" />
      <seealso cref="Engine.GlobalsFile" />
      <seealso cref="UsersFile" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.UsersFile">
      <summary>Returns the PropertyObjectFile that contains the list of TestStand users and user groups.</summary>
      <remarks>Sequence editors and user interfaces typically use this object to display users and user groups or to edit lists of users and user groups, their properties and privileges, and save those lists to disk.</remarks>
      <seealso cref="Engine.ConfigFile" />
      <seealso cref="Engine.CurrentUser" />
      <seealso cref="Engine.GetUser" />
      <seealso cref="Engine.GetUserGroup" />
      <seealso cref="Engine.GlobalsFile" />
      <seealso cref="UsersFile" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.ConfigFile">
      <summary><para>Note: This property is obsolete. Use the Engine.GetEngineConfigFile property instead.</para></summary>
      <remarks>You can set the station options using the Station Options dialog box and the Search Directories dialog box.</remarks>
      <seealso cref="Engine.GlobalsFile" />
      <seealso cref="Engine.SearchDirectories" />
      <seealso cref="Engine.UsersFile" />
      <seealso cref="PropertyObjectFile" />
      <seealso cref="&quot;Search Directories dialog box&quot;javascript:RefLink('/InfoTopics/DB_Search_Dir.htm')" />
      <seealso cref="StationOptions" />
      <seealso cref="&quot;Station Options dialog box&quot;javascript:RefLink('/InfoTopics/DB_Station_Opt.htm')" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.ConfigFile">
      <summary><para>Note: This property is obsolete. Use the Engine.GetEngineConfigFile property instead.</para></summary>
      <remarks>You can set the station options using the Station Options dialog box and the Search Directories dialog box.</remarks>
      <seealso cref="Engine.GlobalsFile" />
      <seealso cref="Engine.SearchDirectories" />
      <seealso cref="Engine.UsersFile" />
      <seealso cref="PropertyObjectFile" />
      <seealso cref="&quot;Search Directories dialog box&quot;javascript:RefLink('/InfoTopics/DB_Search_Dir.htm')" />
      <seealso cref="StationOptions" />
      <seealso cref="&quot;Station Options dialog box&quot;javascript:RefLink('/InfoTopics/DB_Station_Opt.htm')" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.NewStepType">
      <summary>Creates and returns a new StepType object.</summary>
      <remarks>You must specify the name of the new step type by setting the StepType.Name property. You can add the type to a TypeUsageList object to associate the type with a particular PropertyObjectFile object. Once you create the step type, you can use the Engine.NewStep method to create an instance of the type.
<para>Note: TestStand does not validate step type names you create programmatically for invalid characters, such as spaces, which can result in errors when you use the data type. Use the TypeUsageList.ValidateNewTypeName method to validate step type names. TestStand requires step type names to be strings that contain only letters, numbers, and underscores. Step type names cannot contain spaces, start with a number, or be empty. Additionally, You cannot duplicate step type names already in memory.</para></remarks>
      <seealso cref="Engine.NewStep" />
      <seealso cref="PropertyObjectFile" />
      <seealso cref="StepType" />
      <seealso cref="StepType.Name" />
      <seealso cref="TypeUsageList" />
      <seealso cref="TypeUsageList.ValidateNewTypeName" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.NewStepType">
      <summary>Creates and returns a new StepType object.</summary>
      <remarks>You must specify the name of the new step type by setting the StepType.Name property. You can add the type to a TypeUsageList object to associate the type with a particular PropertyObjectFile object. Once you create the step type, you can use the Engine.NewStep method to create an instance of the type.
<para>Note: TestStand does not validate step type names you create programmatically for invalid characters, such as spaces, which can result in errors when you use the data type. Use the TypeUsageList.ValidateNewTypeName method to validate step type names. TestStand requires step type names to be strings that contain only letters, numbers, and underscores. Step type names cannot contain spaces, start with a number, or be empty. Additionally, You cannot duplicate step type names already in memory.</para></remarks>
      <seealso cref="Engine.NewStep" />
      <seealso cref="PropertyObjectFile" />
      <seealso cref="StepType" />
      <seealso cref="StepType.Name" />
      <seealso cref="TypeUsageList" />
      <seealso cref="TypeUsageList.ValidateNewTypeName" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.SmallImageList">
      <summary><para>Note: This property is obsolete. Use the Engine.SmallImageListEx property instead. Calling this property on a 64-bit instance of the TestStand Engine results in an error.</para></summary>
      <remarks>Returns the Microsoft Windows handle for the TestStand list of small images.
The TestStand Engine maintains lists of images for all the icons from the <c>&lt;TestStand&gt;\Components\Icons</c> and <c>"&lt;TestStand&#160;Public&gt;\Components\Icons</c> directories and images you add using the Engine.AddImage method. TestStand separates the images according to size and places each image in the list of large images or in the list of small images.
This method returns a Windows handle, HIMAGELIST, for the list of small images. You can use the image list functions in the Microsoft Windows Platform Software Development Kit to access the images in the list. Use this property as an alternative to using the Images collection.
<para>Note: You can access this image list only from the process that created it, which is the process that created the engine.</para></remarks>
      <seealso cref="Engine.AddImage" />
      <seealso cref="Engine.GetImageIndex" />
      <seealso cref="Engine.GetImageName" />
      <seealso cref="Engine.LargeImageList" />
      <seealso cref="Engine.NumImages" />
      <seealso cref="Images" />
      <seealso cref="Step.SmallIconIndex" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.SmallImageList">
      <summary><para>Note: This property is obsolete. Use the Engine.SmallImageListEx property instead. Calling this property on a 64-bit instance of the TestStand Engine results in an error.</para></summary>
      <remarks>Returns the Microsoft Windows handle for the TestStand list of small images.
The TestStand Engine maintains lists of images for all the icons from the <c>&lt;TestStand&gt;\Components\Icons</c> and <c>"&lt;TestStand&#160;Public&gt;\Components\Icons</c> directories and images you add using the Engine.AddImage method. TestStand separates the images according to size and places each image in the list of large images or in the list of small images.
This method returns a Windows handle, HIMAGELIST, for the list of small images. You can use the image list functions in the Microsoft Windows Platform Software Development Kit to access the images in the list. Use this property as an alternative to using the Images collection.
<para>Note: You can access this image list only from the process that created it, which is the process that created the engine.</para></remarks>
      <seealso cref="Engine.AddImage" />
      <seealso cref="Engine.GetImageIndex" />
      <seealso cref="Engine.GetImageName" />
      <seealso cref="Engine.LargeImageList" />
      <seealso cref="Engine.NumImages" />
      <seealso cref="Images" />
      <seealso cref="Step.SmallIconIndex" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.LargeImageList">
      <summary><para>Note: This property is obsolete. Use the Engine.LargeImageListEx property instead. Calling this property on a 64-bit instance of the TestStand Engine results in an error.</para></summary>
      <remarks>Returns the Microsoft Windows handle for the TestStand list of large images.
The TestStand Engine maintains lists of images for all the icons from the <c>&lt;TestStand&gt;\Components\Icons</c> and <c>&lt;TestStand&#160;Public&gt;\Components\Icons</c> directories and images you add using the Engine.AddImage method. TestStand separates the images according to size and places each image in the list of large images or in the list of small images.
This method returns a Windows handle, HIMAGELIST, for the list of large images. You can use the image list functions in the Microsoft Windows Platform Software Development Kit to access the images in the list. Use this property as an alternative to using the Images collection.
<para>Note: You can access this image list only from the process that created it, which is the process that created the engine.</para></remarks>
      <seealso cref="Engine.AddImage" />
      <seealso cref="Engine.GetImageIndex" />
      <seealso cref="Engine.GetImageName" />
      <seealso cref="Engine.NumImages" />
      <seealso cref="Engine.SmallImageList" />
      <seealso cref="Images" />
      <seealso cref="Step.LargeIconIndex" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.LargeImageList">
      <summary><para>Note: This property is obsolete. Use the Engine.LargeImageListEx property instead. Calling this property on a 64-bit instance of the TestStand Engine results in an error.</para></summary>
      <remarks>Returns the Microsoft Windows handle for the TestStand list of large images.
The TestStand Engine maintains lists of images for all the icons from the <c>&lt;TestStand&gt;\Components\Icons</c> and <c>&lt;TestStand&#160;Public&gt;\Components\Icons</c> directories and images you add using the Engine.AddImage method. TestStand separates the images according to size and places each image in the list of large images or in the list of small images.
This method returns a Windows handle, HIMAGELIST, for the list of large images. You can use the image list functions in the Microsoft Windows Platform Software Development Kit to access the images in the list. Use this property as an alternative to using the Images collection.
<para>Note: You can access this image list only from the process that created it, which is the process that created the engine.</para></remarks>
      <seealso cref="Engine.AddImage" />
      <seealso cref="Engine.GetImageIndex" />
      <seealso cref="Engine.GetImageName" />
      <seealso cref="Engine.NumImages" />
      <seealso cref="Engine.SmallImageList" />
      <seealso cref="Images" />
      <seealso cref="Step.LargeIconIndex" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.AddImage(System.Object@,System.String)">
      <summary>Adds an image to the list of images the engine maintains.</summary>
      <remarks>The engine maintains lists of images for all the icons from the <c>&lt;TestStand&gt;\Components\Icons</c> and <c>&lt;TestStand&#160;Public&gt;\Components\Icons</c> directories and images you add using this method. This method adds an image to the engine image lists and the Images collection.</remarks>
      <returns>The index of the added image.</returns>
      <param name="image">Must specify an icon image.</param>
      <param name="imageName">Specifies the name to associate with the image. The name must be unique among all images.</param>
      <seealso cref="Engine.GetImageIndex" />
      <seealso cref="Engine.GetImageName" />
      <seealso cref="Engine.LargeImageListEx" />
      <seealso cref="Engine.SmallImageListEx" />
      <seealso cref="Images" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.AddImage(System.Object@,System.String)">
      <summary>Adds an image to the list of images the engine maintains.</summary>
      <remarks>The engine maintains lists of images for all the icons from the <c>&lt;TestStand&gt;\Components\Icons</c> and <c>&lt;TestStand&#160;Public&gt;\Components\Icons</c> directories and images you add using this method. This method adds an image to the engine image lists and the Images collection.</remarks>
      <returns>The index of the added image.</returns>
      <param name="image">Must specify an icon image.</param>
      <param name="imageName">Specifies the name to associate with the image. The name must be unique among all images.</param>
      <seealso cref="Engine.GetImageIndex" />
      <seealso cref="Engine.GetImageName" />
      <seealso cref="Engine.LargeImageListEx" />
      <seealso cref="Engine.SmallImageListEx" />
      <seealso cref="Images" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.GetSequenceFileEx(System.String,System.Int32,NationalInstruments.TestStand.Interop.API.TypeConflictHandlerTypes)">
      <summary>Returns the SequenceFile object for the sequence file the sequenceFilePath parameter specifies.</summary>
      <remarks>Loads the sequence file from disk, if necessary. Call the Engine.ReleaseSequenceFileEx method on this object before releasing it.
This method loads the sequence file into the internal cache of the engine and adds a load reference to the sequence file. TestStand uses the load reference count to determine when to unload the sequence file from the internal cache of the engine. In addition to this method, the SequenceFile.AddLoadReference and Engine.NewSequenceFile methods add a load reference to the sequence file. The Engine.ReleaseSequenceFileEx method removes a load reference.
You must call the <c>Engine.ReleaseSequenceFileEx</c> method for each load reference you add to the sequence file. When you release the last load reference, TestStand unloads the file from the internal cache of the engine. While unloading the file from the cache, TestStand executes the SequenceFileUnload callback sequence, if applicable.
You can use the SequenceAdapter.GetSequenceFile method to examine the contents of a sequence file without running load and unload callbacks, without preloading modules, and without merging types.
You can use the GetSeqFile_GetFileOnlyIfInCache option with this method to determine whether a sequence file is already loaded in the engine internal cache.</remarks>
      <returns>A SequenceFile object.</returns>
      <param name="seqFilePath">Specifies the pathname of the sequence file. If the pathname is relative, this method tries to find it in the current directory, unless you specify the GetSeqFile_FindFile option.</param>
      <param name="getSeqFileFlags">Specifies one or more GetSeqFileOptions constants. Use the bitwise-OR operator to specify multiple sequence file flags.</param>
      <param name="handlerType">Specifies how to handle type conflicts.</param>
      <seealso cref="Engine.NewSequenceFile" />
      <seealso cref="Engine.ReleaseSequenceFileEx" />
      <seealso cref="GetSeqFileOptions" />
      <seealso cref="&quot;SequenceAdapter.GetSequenceFile&quot;SequenceAdapter_GetSequenceFile_M.htm" />
      <seealso cref="SequenceFile" />
      <seealso cref="SequenceFile.AddLoadReference" />
      <seealso cref="TypeConflictHandlerTypes" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.GetSequenceFileEx(System.String,System.Int32,NationalInstruments.TestStand.Interop.API.TypeConflictHandlerTypes)">
      <summary>Returns the SequenceFile object for the sequence file the sequenceFilePath parameter specifies.</summary>
      <remarks>Loads the sequence file from disk, if necessary. Call the Engine.ReleaseSequenceFileEx method on this object before releasing it.
This method loads the sequence file into the internal cache of the engine and adds a load reference to the sequence file. TestStand uses the load reference count to determine when to unload the sequence file from the internal cache of the engine. In addition to this method, the SequenceFile.AddLoadReference and Engine.NewSequenceFile methods add a load reference to the sequence file. The Engine.ReleaseSequenceFileEx method removes a load reference.
You must call the <c>Engine.ReleaseSequenceFileEx</c> method for each load reference you add to the sequence file. When you release the last load reference, TestStand unloads the file from the internal cache of the engine. While unloading the file from the cache, TestStand executes the SequenceFileUnload callback sequence, if applicable.
You can use the SequenceAdapter.GetSequenceFile method to examine the contents of a sequence file without running load and unload callbacks, without preloading modules, and without merging types.
You can use the GetSeqFile_GetFileOnlyIfInCache option with this method to determine whether a sequence file is already loaded in the engine internal cache.</remarks>
      <returns>A SequenceFile object.</returns>
      <param name="seqFilePath">Specifies the pathname of the sequence file. If the pathname is relative, this method tries to find it in the current directory, unless you specify the GetSeqFile_FindFile option.</param>
      <param name="getSeqFileFlags">Specifies one or more GetSeqFileOptions constants. Use the bitwise-OR operator to specify multiple sequence file flags.</param>
      <param name="handlerType">Specifies how to handle type conflicts.</param>
      <seealso cref="Engine.NewSequenceFile" />
      <seealso cref="Engine.ReleaseSequenceFileEx" />
      <seealso cref="GetSeqFileOptions" />
      <seealso cref="&quot;SequenceAdapter.GetSequenceFile&quot;SequenceAdapter_GetSequenceFile_M.htm" />
      <seealso cref="SequenceFile" />
      <seealso cref="SequenceFile.AddLoadReference" />
      <seealso cref="TypeConflictHandlerTypes" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.ShouldAutoLaunchExternalReportViewer(System.String)">
      <summary>Returns a value that indicates whether the user interface automatically launches an external report viewer when an execution finishes.</summary>
      <remarks>This method uses the report file extension and the external viewer configuration options to determine whether the user interface automatically launches the report viewer.</remarks>
      <returns>Returns <c>True</c> if the user interface launches the external viewer.</returns>
      <param name="FilePath">Specifies the report file path. This method uses only the file extension of the parameter.</param>
      <seealso cref="Engine.DisplayExternalViewerDialog" />
      <seealso cref="ExternalReportViewer.AutoLaunch" />
      <seealso cref="ExternalReportViewers" />
      <seealso cref="ExternalReportViewers.AutoLaunchDefaultExternalViewers" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.ShouldAutoLaunchExternalReportViewer(System.String)">
      <summary>Returns a value that indicates whether the user interface automatically launches an external report viewer when an execution finishes.</summary>
      <remarks>This method uses the report file extension and the external viewer configuration options to determine whether the user interface automatically launches the report viewer.</remarks>
      <returns>Returns <c>True</c> if the user interface launches the external viewer.</returns>
      <param name="FilePath">Specifies the report file path. This method uses only the file extension of the parameter.</param>
      <seealso cref="Engine.DisplayExternalViewerDialog" />
      <seealso cref="ExternalReportViewer.AutoLaunch" />
      <seealso cref="ExternalReportViewers" />
      <seealso cref="ExternalReportViewers.AutoLaunchDefaultExternalViewers" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.DefaultAdapterIndex">
      <summary>Specifies the index of the default module adapter TestStand uses to create steps.</summary>
      <remarks>TestStand maintains a list of available module adapters. The adapter this property specifies is designated as the default adapter. This property contains the list index of the default module adapter. Use the Engine.GetAdapter method to obtain a module adapter object by index. The Engine.DefaultAdapter property indicates the key name of the default modules adapter.</remarks>
      <seealso cref="Engine.DefaultAdapter" />
      <seealso cref="Engine.GetAdapter" />
      <seealso cref="Engine.NewStep" />
      <seealso cref="Engine.NumAdapters" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.DefaultAdapterIndex">
      <summary>Specifies the index of the default module adapter TestStand uses to create steps.</summary>
      <remarks>TestStand maintains a list of available module adapters. The adapter this property specifies is designated as the default adapter. This property contains the list index of the default module adapter. Use the Engine.GetAdapter method to obtain a module adapter object by index. The Engine.DefaultAdapter property indicates the key name of the default modules adapter.</remarks>
      <seealso cref="Engine.DefaultAdapter" />
      <seealso cref="Engine.GetAdapter" />
      <seealso cref="Engine.NewStep" />
      <seealso cref="Engine.NumAdapters" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.DisplayEditPathsInFilesDialog(System.String,System.Int32,System.Object)">
      <summary>Launches a dialog box in which you can edit the properties stored in TestStand files that contain pathnames.</summary>
      <remarks>This method first launches a dialog box in which you can select which files to edit. After you select those files, this method launches a dialog box that shows all the path properties within those files. You can use this dialog box to change the paths stored in any TestStand file, including sequence files, workspace files, project files, engine configuration files, the station globals file, and the user file.</remarks>
      <returns>Returns <c>True</c> if you modify one or more files from the dialog box.</returns>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.</param>
      <param name="dlgOptions">Specifies any combination of the EditPathsDialogOptions constants.</param>
      <param name="initialFile">Specifies an optional PropertyObjectFile object the dialog box initially selects in the list control. </param>
      <seealso cref="EditPathsDialogOptions" />
      <seealso cref="&quot;Omitting Optional Parameters&quot;javascript:APILink('/InfoTopics/Optional_Parameters.htm')" />
      <seealso cref="PropertyObjectFile" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.DisplayEditPathsInFilesDialog(System.String,System.Int32,System.Object)">
      <summary>Launches a dialog box in which you can edit the properties stored in TestStand files that contain pathnames.</summary>
      <remarks>This method first launches a dialog box in which you can select which files to edit. After you select those files, this method launches a dialog box that shows all the path properties within those files. You can use this dialog box to change the paths stored in any TestStand file, including sequence files, workspace files, project files, engine configuration files, the station globals file, and the user file.</remarks>
      <returns>Returns <c>True</c> if you modify one or more files from the dialog box.</returns>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.</param>
      <param name="dlgOptions">Specifies any combination of the EditPathsDialogOptions constants.</param>
      <param name="initialFile">Specifies an optional PropertyObjectFile object the dialog box initially selects in the list control. </param>
      <seealso cref="EditPathsDialogOptions" />
      <seealso cref="&quot;Omitting Optional Parameters&quot;javascript:APILink('/InfoTopics/Optional_Parameters.htm')" />
      <seealso cref="PropertyObjectFile" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.DisplayRunTimeErrorDialogEx(System.String,NationalInstruments.TestStand.Interop.API.SequenceContext,System.Int32,System.Boolean@,System.Boolean@,System.Boolean@,NationalInstruments.TestStand.Interop.API.RTEOptions@)">
      <summary>Launches the Run-Time Error dialog box to display error information for the specified sequence context.</summary>
      <remarks>The sequence editor and user interfaces typically call this function in response to a UIMsg_BreakOnRunTimeError event. The dialog box allows the user to specify how the execution is to proceed.
If you use this method within an Engine callback, use the ThisContext.Caller property to pass the sequence context of the sequence that generated the error.</remarks>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.</param>
      <param name="sequenceContextParam">Specifies the sequence context from the thread that caused the run-time error.</param>
      <param name="dlgOptions">Specify CommonDlgOption_NoOptions or CommonDlgOption_ModalToAppMainWnd.</param>
      <param name="suspendExecution">Returns a value that indicates whether the user wants the current execution to suspend at the location of the run-time error.</param>
      <param name="dontShowAgainForExecution">Returns a value that indicates whether the user wants this dialog box to launch again if another run-time error occurs in the current execution. If this value is <c>True</c>, set the Execution.RTEOptionForThisExecution property to specify what to do on a run-time error for this execution.</param>
      <param name="dontShowAgainForBatch">Returns a value that indicates whether the user wants this dialog box to launch again if another run-time error occurs in any execution that has a thread from the same batch as the thread in the sequence context you specify. If this value is <c>True</c>, call the Thread.SetBatchRTEOption method to set what to do on a run-time error for these executions.</param>
      <param name="runTimeErrorAction">Returns the option the user selects in the dialog box to specify how the execution is to proceed.</param>
      <seealso cref="CommonDialogOptions" />
      <seealso cref="Execution.RTEOptionForThisExecution" />
      <seealso cref="&quot;Run-Time Error dialog box&quot;javascript:RefLink('/InfoTopics/DB_Run_Time_Error.htm')" />
      <seealso cref="RTEOptions" />
      <seealso cref="SequenceContext" />
      <seealso cref="Thread.SetBatchRTEOption" />
      <seealso cref="UIMessage.Event" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.DisplayRunTimeErrorDialogEx(System.String,NationalInstruments.TestStand.Interop.API.SequenceContext,System.Int32,System.Boolean@,System.Boolean@,System.Boolean@,NationalInstruments.TestStand.Interop.API.RTEOptions@)">
      <summary>Launches the Run-Time Error dialog box to display error information for the specified sequence context.</summary>
      <remarks>The sequence editor and user interfaces typically call this function in response to a UIMsg_BreakOnRunTimeError event. The dialog box allows the user to specify how the execution is to proceed.
If you use this method within an Engine callback, use the ThisContext.Caller property to pass the sequence context of the sequence that generated the error.</remarks>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.</param>
      <param name="sequenceContextParam">Specifies the sequence context from the thread that caused the run-time error.</param>
      <param name="dlgOptions">Specify CommonDlgOption_NoOptions or CommonDlgOption_ModalToAppMainWnd.</param>
      <param name="suspendExecution">Returns a value that indicates whether the user wants the current execution to suspend at the location of the run-time error.</param>
      <param name="dontShowAgainForExecution">Returns a value that indicates whether the user wants this dialog box to launch again if another run-time error occurs in the current execution. If this value is <c>True</c>, set the Execution.RTEOptionForThisExecution property to specify what to do on a run-time error for this execution.</param>
      <param name="dontShowAgainForBatch">Returns a value that indicates whether the user wants this dialog box to launch again if another run-time error occurs in any execution that has a thread from the same batch as the thread in the sequence context you specify. If this value is <c>True</c>, call the Thread.SetBatchRTEOption method to set what to do on a run-time error for these executions.</param>
      <param name="runTimeErrorAction">Returns the option the user selects in the dialog box to specify how the execution is to proceed.</param>
      <seealso cref="CommonDialogOptions" />
      <seealso cref="Execution.RTEOptionForThisExecution" />
      <seealso cref="&quot;Run-Time Error dialog box&quot;javascript:RefLink('/InfoTopics/DB_Run_Time_Error.htm')" />
      <seealso cref="RTEOptions" />
      <seealso cref="SequenceContext" />
      <seealso cref="Thread.SetBatchRTEOption" />
      <seealso cref="UIMessage.Event" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.DisplayBrowseExprDialogEx(System.String,NationalInstruments.TestStand.Interop.API.PropertyObject,System.String,System.Int32,System.Int32,System.String,System.Int32,System.String@,System.Int32@,System.Int32@)">
      <summary>Launches a dialog box in which you can construct an expression string using variables, properties, constants, operators, and functions.</summary>
      <returns>Returns <c>True</c> if you click OK in the dialog box. Returns <c>False</c> if you click Cancel.</returns>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.</param>
      <param name="objectToBrowse">Specifies the object into which to browse. This is usually a SequenceContext object. You can use the SequenceFile.NewEditContext or Engine.NewEditContext methods to create a sequence context.</param>
      <param name="expressionIn">Specifies the initial expression string for the dialog box. You can pass an empty string for this parameter. This string must be a localized expression.</param>
      <param name="selectionStartIn">Specifies the zero-based index of the location in the initial expression where the selected text begins. If you want a cursor instead of selected text, pass the same index for selectionEndIn.</param>
      <param name="selectionEndIn">Specifies the index of the location in the initial expression of the first character beyond the selected text. If you want a cursor instead of selected text, pass the same index for selectionStartIn. Pass -1 to select to the end of the text.</param>
      <param name="initialVariableName">Specifies the name of the initial variable or property to show as selected in the dialog box. You can pass an empty string for the parameter to select the first item.</param>
      <param name="dlgOptions">Specifies any combination of the BrowseExprDialogOptions constants.</param>
      <param name="expressionOut">Returns the resulting expression from the dialog box when the user clicks OK. This expression string is a localized expression. You can convert a localized expression string to a standard form suitable for evaluation.</param>
      <param name="selectionStartOut">Returns the index of the start of the selected text in the resulting expression when the user clicks OK.</param>
      <param name="selectionEndOut">Returns the index of the first character beyond the selected text in the resulting expression when the user clicks OK.</param>
      <seealso cref="BrowseExprDialogOptions" />
      <seealso cref="Engine.DelocalizeExpression" />
      <seealso cref="Engine.LocalizeExpression" />
      <seealso cref="Engine.NewEditContext" />
      <seealso cref="PropertyObject" />
      <seealso cref="SequenceContext" />
      <seealso cref="SequenceFile.NewEditContext" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.DisplayBrowseExprDialogEx(System.String,NationalInstruments.TestStand.Interop.API.PropertyObject,System.String,System.Int32,System.Int32,System.String,System.Int32,System.String@,System.Int32@,System.Int32@)">
      <summary>Launches a dialog box in which you can construct an expression string using variables, properties, constants, operators, and functions.</summary>
      <returns>Returns <c>True</c> if you click OK in the dialog box. Returns <c>False</c> if you click Cancel.</returns>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.</param>
      <param name="objectToBrowse">Specifies the object into which to browse. This is usually a SequenceContext object. You can use the SequenceFile.NewEditContext or Engine.NewEditContext methods to create a sequence context.</param>
      <param name="expressionIn">Specifies the initial expression string for the dialog box. You can pass an empty string for this parameter. This string must be a localized expression.</param>
      <param name="selectionStartIn">Specifies the zero-based index of the location in the initial expression where the selected text begins. If you want a cursor instead of selected text, pass the same index for selectionEndIn.</param>
      <param name="selectionEndIn">Specifies the index of the location in the initial expression of the first character beyond the selected text. If you want a cursor instead of selected text, pass the same index for selectionStartIn. Pass -1 to select to the end of the text.</param>
      <param name="initialVariableName">Specifies the name of the initial variable or property to show as selected in the dialog box. You can pass an empty string for the parameter to select the first item.</param>
      <param name="dlgOptions">Specifies any combination of the BrowseExprDialogOptions constants.</param>
      <param name="expressionOut">Returns the resulting expression from the dialog box when the user clicks OK. This expression string is a localized expression. You can convert a localized expression string to a standard form suitable for evaluation.</param>
      <param name="selectionStartOut">Returns the index of the start of the selected text in the resulting expression when the user clicks OK.</param>
      <param name="selectionEndOut">Returns the index of the first character beyond the selected text in the resulting expression when the user clicks OK.</param>
      <seealso cref="BrowseExprDialogOptions" />
      <seealso cref="Engine.DelocalizeExpression" />
      <seealso cref="Engine.LocalizeExpression" />
      <seealso cref="Engine.NewEditContext" />
      <seealso cref="PropertyObject" />
      <seealso cref="SequenceContext" />
      <seealso cref="SequenceFile.NewEditContext" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.SaveAllModifiedSeqFiles(System.Int32)">
      <summary>Saves all modified sequence files in the engine internal cache.</summary>
      <remarks>If this method prompts the user to save a file and the user selects No, subsequent calls to this method do not prompt the user to save the file unless the file is modified further.</remarks>
      <returns>Returns <c>True</c> if all modified files were saved successfully. Returns <c>False</c> if one or more files could not be saved or if the user cancels the operation.</returns>
      <param name="options">Specify one or more SaveAllSeqFileOptions constants. Use the bitwise-OR operator to specify multiple sequence file flags.</param>
      <seealso cref="SaveAllSeqFileOptions" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.SaveAllModifiedSeqFiles(System.Int32)">
      <summary>Saves all modified sequence files in the engine internal cache.</summary>
      <remarks>If this method prompts the user to save a file and the user selects No, subsequent calls to this method do not prompt the user to save the file unless the file is modified further.</remarks>
      <returns>Returns <c>True</c> if all modified files were saved successfully. Returns <c>False</c> if one or more files could not be saved or if the user cancels the operation.</returns>
      <param name="options">Specify one or more SaveAllSeqFileOptions constants. Use the bitwise-OR operator to specify multiple sequence file flags.</param>
      <seealso cref="SaveAllSeqFileOptions" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.CallFrontEndCallbackEx(System.String,NationalInstruments.TestStand.Interop.API.PropertyObject,NationalInstruments.TestStand.Interop.API.TypeConflictHandlerTypes,System.Int32)">
      <summary>Calls the Front-End callback sequence the sequenceNameParam parameter specifies.</summary>
      <remarks>Front-End callbacks, which are callbacks the TestStand Sequence Editor or a TestStand User Interface call, allow you to customize the sequence editors and user interfaces on the system. Each sequence editor or user interface chooses which Front-End callbacks it calls. The <c>FrontEndCallbacks.seq</c> file in the <c>&lt;TestStand&gt;\Components\Callbacks\FrontEnd</c> directory contains the Front-End callbacks National Instruments defines. Currently, National Instruments defines only the LoginLogout Front-End callback. You can override the National Instruments version of LoginLogout or add custom Front-End callbacks in the <c>FrontEndCallbacks.seq</c> file, which is located in the <c>&lt;TestStand&#160;Public&gt;\Components\Callbacks\FrontEnd</c> directory.</remarks>
      <returns>The Execution object of the newly created execution.</returns>
      <param name="sequenceNameParam">Specifies the name of the Front-End callback sequence to call.</param>
      <param name="argumentList">Specifies a PropertyObject that contains the parameters to pass to the sequence. Each subproperty of the PropertyObject represents a parameter to the sequence. The subproperties must appear in the same order as the sequence parameters.</param>
      <param name="handlerType">Specifies how to handle type conflicts.</param>
      <param name="reservedParam"><para>Note: This parameter is reserved.</para></param>
      <seealso cref="CallbackTypes" />
      <seealso cref="DefaultModelCallbacks" />
      <seealso cref="Execution" />
      <seealso cref="FrontEndCallbacks" />
      <seealso cref="PropertyObject" />
      <seealso cref="SeqFileCallbacks" />
      <seealso cref="TypeConflictHandlerTypes" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.CallFrontEndCallbackEx(System.String,NationalInstruments.TestStand.Interop.API.PropertyObject,NationalInstruments.TestStand.Interop.API.TypeConflictHandlerTypes,System.Int32)">
      <summary>Calls the Front-End callback sequence the sequenceNameParam parameter specifies.</summary>
      <remarks>Front-End callbacks, which are callbacks the TestStand Sequence Editor or a TestStand User Interface call, allow you to customize the sequence editors and user interfaces on the system. Each sequence editor or user interface chooses which Front-End callbacks it calls. The <c>FrontEndCallbacks.seq</c> file in the <c>&lt;TestStand&gt;\Components\Callbacks\FrontEnd</c> directory contains the Front-End callbacks National Instruments defines. Currently, National Instruments defines only the LoginLogout Front-End callback. You can override the National Instruments version of LoginLogout or add custom Front-End callbacks in the <c>FrontEndCallbacks.seq</c> file, which is located in the <c>&lt;TestStand&#160;Public&gt;\Components\Callbacks\FrontEnd</c> directory.</remarks>
      <returns>The Execution object of the newly created execution.</returns>
      <param name="sequenceNameParam">Specifies the name of the Front-End callback sequence to call.</param>
      <param name="argumentList">Specifies a PropertyObject that contains the parameters to pass to the sequence. Each subproperty of the PropertyObject represents a parameter to the sequence. The subproperties must appear in the same order as the sequence parameters.</param>
      <param name="handlerType">Specifies how to handle type conflicts.</param>
      <param name="reservedParam"><para>Note: This parameter is reserved.</para></param>
      <seealso cref="CallbackTypes" />
      <seealso cref="DefaultModelCallbacks" />
      <seealso cref="Execution" />
      <seealso cref="FrontEndCallbacks" />
      <seealso cref="PropertyObject" />
      <seealso cref="SeqFileCallbacks" />
      <seealso cref="TypeConflictHandlerTypes" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.DisplaySequenceFileCallbacksDialog(System.String,NationalInstruments.TestStand.Interop.API.SequenceFile,System.Int32,System.String@,System.Int32@,System.Int32@)">
      <summary>Launches a dialog box in which you can show, add, and remove Sequence File callbacks.</summary>
      <returns>Returns <c>True</c> if you make modifications and click OK in the dialog box. Returns <c>False</c> if you click Cancel or make no modifications.</returns>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.</param>
      <param name="sequenceFileParam">Pass a SequenceFile object to specify which sequence file you want to edit.</param>
      <param name="dlgOptions">Specifies any combination of the CommonDialogOptions constants.</param>
      <param name="sequenceToEdit">Returns to the dialog box the name of the callback sequence the user chose to edit. An empty string indicates the user did not select a callback to edit.</param>
      <param name="numCallbacksAdded">Returns the number of callbacks the dialog box added to the sequence file. Callbacks are added to the end of the list of sequences.</param>
      <param name="numCallbacksDeleted">Returns the number of callbacks that the dialog box deleted from the sequence file.</param>
      <seealso cref="CallbackTypes" />
      <seealso cref="CommonDialogOptions" />
      <seealso cref="SequenceFile" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.DisplaySequenceFileCallbacksDialog(System.String,NationalInstruments.TestStand.Interop.API.SequenceFile,System.Int32,System.String@,System.Int32@,System.Int32@)">
      <summary>Launches a dialog box in which you can show, add, and remove Sequence File callbacks.</summary>
      <returns>Returns <c>True</c> if you make modifications and click OK in the dialog box. Returns <c>False</c> if you click Cancel or make no modifications.</returns>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.</param>
      <param name="sequenceFileParam">Pass a SequenceFile object to specify which sequence file you want to edit.</param>
      <param name="dlgOptions">Specifies any combination of the CommonDialogOptions constants.</param>
      <param name="sequenceToEdit">Returns to the dialog box the name of the callback sequence the user chose to edit. An empty string indicates the user did not select a callback to edit.</param>
      <param name="numCallbacksAdded">Returns the number of callbacks the dialog box added to the sequence file. Callbacks are added to the end of the list of sequences.</param>
      <param name="numCallbacksDeleted">Returns the number of callbacks that the dialog box deleted from the sequence file.</param>
      <seealso cref="CallbackTypes" />
      <seealso cref="CommonDialogOptions" />
      <seealso cref="SequenceFile" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.GetProductRegistrationInfo(System.String@,System.String@,System.String@)">
      <summary>Returns the product registration information for this installation of TestStand.</summary>
      <remarks>This method returns the information you entered at install time or from the National Instruments License Manager when activating the license for TestStand.</remarks>
      <returns>Returns <c>True</c> if this is a registered installation of TestStand.</returns>
      <param name="userName">Returns the name of the user currently logged into the National Instruments License Manager.</param>
      <param name="companyName">Returns the company name of the user currently logged into the National Instruments License Manager.</param>
      <param name="serialNumber">Returns the serial number for this installation of TestStand.</param>
      <seealso cref="Engine.GetLicenseDescription" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.GetProductRegistrationInfo(System.String@,System.String@,System.String@)">
      <summary>Returns the product registration information for this installation of TestStand.</summary>
      <remarks>This method returns the information you entered at install time or from the National Instruments License Manager when activating the license for TestStand.</remarks>
      <returns>Returns <c>True</c> if this is a registered installation of TestStand.</returns>
      <param name="userName">Returns the name of the user currently logged into the National Instruments License Manager.</param>
      <param name="companyName">Returns the company name of the user currently logged into the National Instruments License Manager.</param>
      <param name="serialNumber">Returns the serial number for this installation of TestStand.</param>
      <seealso cref="Engine.GetLicenseDescription" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.SetProductRegistrationInfo(System.String,System.String,System.String)">
      <summary><para>Note: This method is obsolete. The National Instruments License Manager sets user registration information when you activate TestStand.</para></summary>
      <remarks>Sets the product registration information for this installation of TestStand.
This method sets the information that you entered in the TestStand Product Registration dialog box, which launches the first time you launch the sequence editor after installation.</remarks>
      <returns>Returns <c>False</c></returns>
      <param name="userName">This parameter is obsolete and no longer supported.</param>
      <param name="companyName">This parameter is obsolete and no longer supported.</param>
      <param name="serialNumber">This parameter is obsolete and no longer supported.</param>
      <seealso cref="Engine.GetLicenseDescription" />
      <seealso cref="Engine.GetProductRegistrationInfo" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.SetProductRegistrationInfo(System.String,System.String,System.String)">
      <summary><para>Note: This method is obsolete. The National Instruments License Manager sets user registration information when you activate TestStand.</para></summary>
      <remarks>Sets the product registration information for this installation of TestStand.
This method sets the information that you entered in the TestStand Product Registration dialog box, which launches the first time you launch the sequence editor after installation.</remarks>
      <returns>Returns <c>False</c></returns>
      <param name="userName">This parameter is obsolete and no longer supported.</param>
      <param name="companyName">This parameter is obsolete and no longer supported.</param>
      <param name="serialNumber">This parameter is obsolete and no longer supported.</param>
      <seealso cref="Engine.GetLicenseDescription" />
      <seealso cref="Engine.GetProductRegistrationInfo" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.ReleaseSequenceFileEx(NationalInstruments.TestStand.Interop.API.SequenceFile,System.Int32)">
      <summary>Releases the SequenceFile object from the internal cache of the engine.</summary>
      <remarks>Call this method to release the sequence file you obtained from the Engine.NewSequenceFile or Engine.GetSequenceFileEx methods.
This method removes a load reference from the sequence file. TestStand uses the load reference count to determine when to unload the sequence file from the internal cache of the engine.
When you release the last load reference, TestStand unloads the file from the internal cache of the engine. While unloading the file from the internal cache of the engine, TestStand executes the SequenceFileUnload callback, if applicable.
If this method generates an error, TestStand does not release the object from the internal cache of the engine. If your development environment requires you to explicitly release COM references, only release the COM reference to a SequenceFile object if this method succeeds.
Use the <c>ReleaseSeqFile_DoNotRunUnloadCallback</c> option to prevent the SequenceFileUnload callback from running if the callback exists and the load reference being released is the last load reference. TestStand executes the SequenceFileUnloadCallback after this method returns.
<para>Note: Calling this method does not release the ActiveX reference to the sequence file.</para></remarks>
      <returns>Returns <c>True</c> if the file was removed from the TestStand internal cache. Returns <c>False</c> if the file remained in the cache because it has multiple load references or if TestStand initiates the execution of the SequenceFileUnload callback sequence for the SequenceFile object.
Refer to SequenceFile.CanUnload for more information about loading and unloading files in the cache.</returns>
      <param name="sequenceFileToRelease">Specifies a reference to the sequence file to release.</param>
      <param name="options">Specify one or more ReleaseSeqFileOptions constants. Use the bitwise-OR operator to specify multiple sequence file flags.</param>
      <seealso cref="Engine.GetSequenceFileEx" />
      <seealso cref="Engine.NewSequenceFile" />
      <seealso cref="ReleaseSeqFileOptions" />
      <seealso cref="SequenceFile" />
      <seealso cref="SequenceFile.AddLoadReference" />
      <seealso cref="SequenceFile.CanUnload" />
      <seealso cref="SequenceFile.IsExecuting" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.ReleaseSequenceFileEx(NationalInstruments.TestStand.Interop.API.SequenceFile,System.Int32)">
      <summary>Releases the SequenceFile object from the internal cache of the engine.</summary>
      <remarks>Call this method to release the sequence file you obtained from the Engine.NewSequenceFile or Engine.GetSequenceFileEx methods.
This method removes a load reference from the sequence file. TestStand uses the load reference count to determine when to unload the sequence file from the internal cache of the engine.
When you release the last load reference, TestStand unloads the file from the internal cache of the engine. While unloading the file from the internal cache of the engine, TestStand executes the SequenceFileUnload callback, if applicable.
If this method generates an error, TestStand does not release the object from the internal cache of the engine. If your development environment requires you to explicitly release COM references, only release the COM reference to a SequenceFile object if this method succeeds.
Use the <c>ReleaseSeqFile_DoNotRunUnloadCallback</c> option to prevent the SequenceFileUnload callback from running if the callback exists and the load reference being released is the last load reference. TestStand executes the SequenceFileUnloadCallback after this method returns.
<para>Note: Calling this method does not release the ActiveX reference to the sequence file.</para></remarks>
      <returns>Returns <c>True</c> if the file was removed from the TestStand internal cache. Returns <c>False</c> if the file remained in the cache because it has multiple load references or if TestStand initiates the execution of the SequenceFileUnload callback sequence for the SequenceFile object.
Refer to SequenceFile.CanUnload for more information about loading and unloading files in the cache.</returns>
      <param name="sequenceFileToRelease">Specifies a reference to the sequence file to release.</param>
      <param name="options">Specify one or more ReleaseSeqFileOptions constants. Use the bitwise-OR operator to specify multiple sequence file flags.</param>
      <seealso cref="Engine.GetSequenceFileEx" />
      <seealso cref="Engine.NewSequenceFile" />
      <seealso cref="ReleaseSeqFileOptions" />
      <seealso cref="SequenceFile" />
      <seealso cref="SequenceFile.AddLoadReference" />
      <seealso cref="SequenceFile.CanUnload" />
      <seealso cref="SequenceFile.IsExecuting" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.CurrentWorkspaceFile">
      <summary>Specifies the current workspace file.</summary>
      <remarks>Use this property to establish a connection to the source code control provider specified in the workspace file. If no current workspace file exists, this property is a <c>NULL</c> dispatch pointer or object reference. To disconnect the current source code control provider, set this property to <c>NULL</c>.</remarks>
      <seealso cref="WorkspaceFile" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.CurrentWorkspaceFile">
      <summary>Specifies the current workspace file.</summary>
      <remarks>Use this property to establish a connection to the source code control provider specified in the workspace file. If no current workspace file exists, this property is a <c>NULL</c> dispatch pointer or object reference. To disconnect the current source code control provider, set this property to <c>NULL</c>.</remarks>
      <seealso cref="WorkspaceFile" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.SecondsSinceStart">
      <summary>Returns the number of seconds since you created the engine.</summary>
      <seealso cref="Engine.SecondsSince1970UniversalCoordinatedTime" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.SecondsSinceStart">
      <summary>Returns the number of seconds since you created the engine.</summary>
      <seealso cref="Engine.SecondsSince1970UniversalCoordinatedTime" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.RegisterModalWindow(NationalInstruments.TestStand.Interop.API.SequenceContext,System.Int32,System.Boolean@)">
      <summary>Notifies TestStand that the specified window is a modal dialog box.</summary>
      <remarks>Call this method after you create a modal dialog box. TestStand disables the main application window and forwards any activation requests to the specified window. Call the Engine.UnregisterModalWindow method when the dialog box closes.
You must call this method after you have created the dialog box window. An alternative to using this method is to call the Engine.NotifyStartOfModalDialogEx method, which you must call before creating the dialog box window.
For a Microsoft Visual Basic modal dialog box, if you display the dialog box from multiple threads at the same time, you must use an executable ActiveX Automation server project and set the project settings to Thread Per Object.</remarks>
      <returns>Returns the modalID to pass to the Engine.UnregisterModalWindow method when the dialog box no longer appears on screen.</returns>
      <param name="sequenceContextParam">If you display the dialog box from the step of an execution, pass the sequence context of the step; otherwise, pass a <c>NULL</c> reference. If you pass a sequence context, this method serializes calls from multiple threads the same way the Engine.NotifyStartOfModalDialogEx method serializes calls.</param>
      <param name="modalHWND">Specifies the window handle of the modal dialog box.</param>
      <param name="shouldAbort">Returns <c>True</c> when the user terminates or aborts the corresponding execution for the sequence context parameter you passed while you were blocked inside this method call. The step skips launching the dialog box and returns as soon as possible. You can call Engine.UnregisterModalWindow in this case, though it is not necessary.</param>
      <seealso cref="Engine.NotifyEndOfModalDialog" />
      <seealso cref="Engine.NotifyStartOfModalDialogEx" />
      <seealso cref="Engine.UnregisterModalWindow" />
      <seealso cref="SequenceContext" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.RegisterModalWindow(NationalInstruments.TestStand.Interop.API.SequenceContext,System.Int32,System.Boolean@)">
      <summary>Notifies TestStand that the specified window is a modal dialog box.</summary>
      <remarks>Call this method after you create a modal dialog box. TestStand disables the main application window and forwards any activation requests to the specified window. Call the Engine.UnregisterModalWindow method when the dialog box closes.
You must call this method after you have created the dialog box window. An alternative to using this method is to call the Engine.NotifyStartOfModalDialogEx method, which you must call before creating the dialog box window.
For a Microsoft Visual Basic modal dialog box, if you display the dialog box from multiple threads at the same time, you must use an executable ActiveX Automation server project and set the project settings to Thread Per Object.</remarks>
      <returns>Returns the modalID to pass to the Engine.UnregisterModalWindow method when the dialog box no longer appears on screen.</returns>
      <param name="sequenceContextParam">If you display the dialog box from the step of an execution, pass the sequence context of the step; otherwise, pass a <c>NULL</c> reference. If you pass a sequence context, this method serializes calls from multiple threads the same way the Engine.NotifyStartOfModalDialogEx method serializes calls.</param>
      <param name="modalHWND">Specifies the window handle of the modal dialog box.</param>
      <param name="shouldAbort">Returns <c>True</c> when the user terminates or aborts the corresponding execution for the sequence context parameter you passed while you were blocked inside this method call. The step skips launching the dialog box and returns as soon as possible. You can call Engine.UnregisterModalWindow in this case, though it is not necessary.</param>
      <seealso cref="Engine.NotifyEndOfModalDialog" />
      <seealso cref="Engine.NotifyStartOfModalDialogEx" />
      <seealso cref="Engine.UnregisterModalWindow" />
      <seealso cref="SequenceContext" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.UnregisterModalWindow(System.Int32)">
      <summary>Notifies TestStand that the specified window is no longer a modal dialog box.</summary>
      <remarks>Call this method when a dialog box you registered with the Engine.RegisterModalWindow method closes.</remarks>
      <param name="modalID">Pass the modalID you receive as a return value from the  Engine.RegisterModalWindow.</param>
      <seealso cref="Engine.NotifyEndOfModalDialog" />
      <seealso cref="Engine.NotifyStartOfModalDialogEx" />
      <seealso cref="Engine.RegisterModalWindow" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.UnregisterModalWindow(System.Int32)">
      <summary>Notifies TestStand that the specified window is no longer a modal dialog box.</summary>
      <remarks>Call this method when a dialog box you registered with the Engine.RegisterModalWindow method closes.</remarks>
      <param name="modalID">Pass the modalID you receive as a return value from the  Engine.RegisterModalWindow.</param>
      <seealso cref="Engine.NotifyEndOfModalDialog" />
      <seealso cref="Engine.NotifyStartOfModalDialogEx" />
      <seealso cref="Engine.RegisterModalWindow" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.DisplayFileDialog(System.String,System.String,System.String,System.String[]@,System.String[]@,System.Int32,System.String,System.Int32,System.String,System.Object,System.Object@,System.Object@)">
      <summary>Launches a dialog box in which the user can select files or directories to open or to save.</summary>
      <remarks>This method launches the TestStand File dialog box. Depending on the options you pass, TestStand selects a single file, multiple files, a single directory, or multiple directories. Additional options specify whether TestStand returns absolute or relative pathnames for the selected files. TestStand can return a relative pathname only when the file is located under one of the TestStand search directories. If the file is not located under any of the TestStand search directories and the user requests that TestStand return a relative pathname, the dialog box prompts the user to add the name of the directory that contains the file to the list of TestStand search directories. You can pass a SequenceFile object, WorkspaceFile object, or a project file object to include its directory among the list of search directories that are valid for a relative pathname.</remarks>
      <returns>Returns <c>True</c> if you click OK in the dialog box. Returns <c>False</c> if you click Cancel.</returns>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.</param>
      <param name="okButtonText">Specifies a string to display on the OK button. Pass an empty string to use the default.</param>
      <param name="initialPath">For a file selection dialog box, specify the path of the file you want the dialog box to display initially. If you specify the path of a directory, the filename control in the dialog box remains empty. For a directory selection dialog box, specify the path of the directory you want the user to browse initially. Pass an empty string to specify the current directory. The path must specify an existing file or directory.</param>
      <param name="selectedPaths">Returns the array of pathnames of the files or directories the user selected. The pathnames can be relative or absolute depending on the dialog box settings.</param>
      <param name="absolutePaths">Returns the array of absolute pathnames of the files or directories the user selected.</param>
      <param name="openFileDialogFlags">Pass <c>0</c> for the default behavior, or pass one or more OpenFileDialogOptions constants. Use the bitwise-OR operator to specify multiple flags.</param>
      <param name="defaultExtension">Specifies the extension to append to the pathname if the user specifies no extension. Do not include the period in the extension.</param>
      <param name="win32Flags">Specifies the Microsoft Windows file dialog flags.</param>
      <param name="fileFilter">Specifies the extensions files must have  to appear in the dialog box. Each filter the string contains has two parts. The first part is a descriptive name for the filter and the second part lists the extensions the file can have. Specify multiple extensions using a semi-colon (;) as a delimiter, and end each section with a vertical bar (|). End the string with a final vertical bar (|). The following example illustrates this format:
<c>&quot;Sequence Files (*.seq)|*.seq|Report Files (*.txt;*.htm;*.html)|*.txt;*.htm;*.html||&quot;</c></param>
      <param name="currentFile">Pass a PropertyObjectFile object for a sequence file, workspace file, or project file if you want to include the directory of the file in the list of search directories that are valid for a relative pathname. The search directory &quot;current sequence file&quot; refers to the object passed as this parameter. If you pass a workspace file or project file, TestStand searches the directory of the file before searching the other search directories for the relative pathname.</param>
      <param name="fileFilterIndex">When passed as an input parameter, the parameter specifies the file type to be initially selected in the File Type ring control.
The index corresponding to the selected file type within the list control is returned as an output parameter.</param>
      <param name="dirHistoryList">Pass an array of strings if you want to set the contents of the directory history combo box in the dialog box. If you omit this parameter, TestStand sets the contents of the combo box with a default history list.</param>
      <seealso cref="Engine.SearchDirectories" />
      <seealso cref="Engine.FileDialogDirHistoryList" />
      <seealso cref="&quot;Omitting Optional Parameters&quot;javascript:APILink('/InfoTopics/Optional_Parameters.htm')" />
      <seealso cref="OpenFileDialogOptions" />
      <seealso cref="PropertyObjectFile" />
      <seealso cref="WindowsFileDialogFlags" />
      <seealso cref="WorkspaceObject.ProjectFile" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.DisplayFileDialog(System.String,System.String,System.String,System.String[]@,System.String[]@,System.Int32,System.String,System.Int32,System.String,System.Object,System.Object@,System.Object@)">
      <summary>Launches a dialog box in which the user can select files or directories to open or to save.</summary>
      <remarks>This method launches the TestStand File dialog box. Depending on the options you pass, TestStand selects a single file, multiple files, a single directory, or multiple directories. Additional options specify whether TestStand returns absolute or relative pathnames for the selected files. TestStand can return a relative pathname only when the file is located under one of the TestStand search directories. If the file is not located under any of the TestStand search directories and the user requests that TestStand return a relative pathname, the dialog box prompts the user to add the name of the directory that contains the file to the list of TestStand search directories. You can pass a SequenceFile object, WorkspaceFile object, or a project file object to include its directory among the list of search directories that are valid for a relative pathname.</remarks>
      <returns>Returns <c>True</c> if you click OK in the dialog box. Returns <c>False</c> if you click Cancel.</returns>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.</param>
      <param name="okButtonText">Specifies a string to display on the OK button. Pass an empty string to use the default.</param>
      <param name="initialPath">For a file selection dialog box, specify the path of the file you want the dialog box to display initially. If you specify the path of a directory, the filename control in the dialog box remains empty. For a directory selection dialog box, specify the path of the directory you want the user to browse initially. Pass an empty string to specify the current directory. The path must specify an existing file or directory.</param>
      <param name="selectedPaths">Returns the array of pathnames of the files or directories the user selected. The pathnames can be relative or absolute depending on the dialog box settings.</param>
      <param name="absolutePaths">Returns the array of absolute pathnames of the files or directories the user selected.</param>
      <param name="openFileDialogFlags">Pass <c>0</c> for the default behavior, or pass one or more OpenFileDialogOptions constants. Use the bitwise-OR operator to specify multiple flags.</param>
      <param name="defaultExtension">Specifies the extension to append to the pathname if the user specifies no extension. Do not include the period in the extension.</param>
      <param name="win32Flags">Specifies the Microsoft Windows file dialog flags.</param>
      <param name="fileFilter">Specifies the extensions files must have  to appear in the dialog box. Each filter the string contains has two parts. The first part is a descriptive name for the filter and the second part lists the extensions the file can have. Specify multiple extensions using a semi-colon (;) as a delimiter, and end each section with a vertical bar (|). End the string with a final vertical bar (|). The following example illustrates this format:
<c>&quot;Sequence Files (*.seq)|*.seq|Report Files (*.txt;*.htm;*.html)|*.txt;*.htm;*.html||&quot;</c></param>
      <param name="currentFile">Pass a PropertyObjectFile object for a sequence file, workspace file, or project file if you want to include the directory of the file in the list of search directories that are valid for a relative pathname. The search directory &quot;current sequence file&quot; refers to the object passed as this parameter. If you pass a workspace file or project file, TestStand searches the directory of the file before searching the other search directories for the relative pathname.</param>
      <param name="fileFilterIndex">When passed as an input parameter, the parameter specifies the file type to be initially selected in the File Type ring control.
The index corresponding to the selected file type within the list control is returned as an output parameter.</param>
      <param name="dirHistoryList">Pass an array of strings if you want to set the contents of the directory history combo box in the dialog box. If you omit this parameter, TestStand sets the contents of the combo box with a default history list.</param>
      <seealso cref="Engine.SearchDirectories" />
      <seealso cref="Engine.FileDialogDirHistoryList" />
      <seealso cref="&quot;Omitting Optional Parameters&quot;javascript:APILink('/InfoTopics/Optional_Parameters.htm')" />
      <seealso cref="OpenFileDialogOptions" />
      <seealso cref="PropertyObjectFile" />
      <seealso cref="WindowsFileDialogFlags" />
      <seealso cref="WorkspaceObject.ProjectFile" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.SerializeObjects(System.Object[],System.Int32)">
      <summary>Serializes PropertyObject objects into a string.</summary>
      <remarks>This method converts one or more objects into a string that can be unserialized using the Engine.UnserializeObjects method. Typically, you use the SerializeObjects and <c>Engine.UnserializeObjects</c> methods to put TestStand data on the Microsoft Windows clipboard and to obtain data from it.
If you call this method on an alias object, TestStand generates the stream using the object to which the alias refers. This method does not include alias subproperty objects in the stream. Refer to PropertyObject.IsAliasObject for more information about alias objects.
Use the Engine.UnserializeObjectsAndTypes method instead of <c>Engine.UnserializeObjects</c> if you intend to insert the array of property objects generated from the stream into a property object file. Also add the types the <c>Engine.UnserializeObjectsAndTypes</c> method returns to the file by calling the TypeUsageList.Union method on the object the PropertyObjectFile.TypeUsageList property returns. Pass the typesUsed output value as the unionTypeUsageList parameter to <c>TypeUsageList.Union</c>.
When you unserialize a step or a sequence, call the Step.CreateNewUniqueStepId, Sequence.CreateNewUniqueStepIds, or Engine.CreateNewUniqueStepIds methods to replace the unique step ID with a new unique ID.</remarks>
      <returns>Returns the string that contains the serialized objects.</returns>
      <param name="objects">Pass the array of property objects to serialize.</param>
      <param name="options">Specify one or more SerializationOptions using a bitwise combination. This parameter specifies options for how you want to serialize the data. National Instruments recommends using the <c>SerializationOption_UseBinary</c> option for best performance and memory usage, unless you need to parse or read the data more easily. The Engine.UnserializeObjects and Engine.UnserializeObjectsAndTypes methods always autodetect and unserialize the data appropriately.</param>
      <seealso cref="Engine.CreateNewUniqueStepIds" />
      <seealso cref="Engine.UnserializeObjects" />
      <seealso cref="Engine.UnserializeObjectsAndTypes" />
      <seealso cref="PropertyObject.IsAliasObject" />
      <seealso cref="PropertyObject.Serialize" />
      <seealso cref="PropertyObject.UnserializeEx" />
      <seealso cref="PropertyObjectFile.TypeUsageList" />
      <seealso cref="Sequence.CreateNewUniqueStepIds" />
      <seealso cref="SerializationOptions" />
      <seealso cref="Step.CreateNewUniqueStepId" />
      <seealso cref="TypeUsageList.Union" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.SerializeObjects(System.Object[],System.Int32)">
      <summary>Serializes PropertyObject objects into a string.</summary>
      <remarks>This method converts one or more objects into a string that can be unserialized using the Engine.UnserializeObjects method. Typically, you use the SerializeObjects and <c>Engine.UnserializeObjects</c> methods to put TestStand data on the Microsoft Windows clipboard and to obtain data from it.
If you call this method on an alias object, TestStand generates the stream using the object to which the alias refers. This method does not include alias subproperty objects in the stream. Refer to PropertyObject.IsAliasObject for more information about alias objects.
Use the Engine.UnserializeObjectsAndTypes method instead of <c>Engine.UnserializeObjects</c> if you intend to insert the array of property objects generated from the stream into a property object file. Also add the types the <c>Engine.UnserializeObjectsAndTypes</c> method returns to the file by calling the TypeUsageList.Union method on the object the PropertyObjectFile.TypeUsageList property returns. Pass the typesUsed output value as the unionTypeUsageList parameter to <c>TypeUsageList.Union</c>.
When you unserialize a step or a sequence, call the Step.CreateNewUniqueStepId, Sequence.CreateNewUniqueStepIds, or Engine.CreateNewUniqueStepIds methods to replace the unique step ID with a new unique ID.</remarks>
      <returns>Returns the string that contains the serialized objects.</returns>
      <param name="objects">Pass the array of property objects to serialize.</param>
      <param name="options">Specify one or more SerializationOptions using a bitwise combination. This parameter specifies options for how you want to serialize the data. National Instruments recommends using the <c>SerializationOption_UseBinary</c> option for best performance and memory usage, unless you need to parse or read the data more easily. The Engine.UnserializeObjects and Engine.UnserializeObjectsAndTypes methods always autodetect and unserialize the data appropriately.</param>
      <seealso cref="Engine.CreateNewUniqueStepIds" />
      <seealso cref="Engine.UnserializeObjects" />
      <seealso cref="Engine.UnserializeObjectsAndTypes" />
      <seealso cref="PropertyObject.IsAliasObject" />
      <seealso cref="PropertyObject.Serialize" />
      <seealso cref="PropertyObject.UnserializeEx" />
      <seealso cref="PropertyObjectFile.TypeUsageList" />
      <seealso cref="Sequence.CreateNewUniqueStepIds" />
      <seealso cref="SerializationOptions" />
      <seealso cref="Step.CreateNewUniqueStepId" />
      <seealso cref="TypeUsageList.Union" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.UnserializeObjects(System.String,System.Int32,NationalInstruments.TestStand.Interop.API.TypeConflictHandlerTypes)">
      <summary>Converts a string of serialized objects into an array of PropertyObjects.</summary>
      <remarks>Call this method to convert the return value of the Engine.SerializeObjects method into an array of objects. Typically, you use the <c>Engine.SerializeObjects</c> method and this method to put TestStand data on the Microsoft Windows clipboard and to obtain data from it.
Use the Engine.UnserializeObjectsAndTypes method instead of this method if you intend to insert the array of property objects generated from the stream into a property object file. Also add the types the <c>Engine.UnserializeObjectsAndTypes</c> method returns to the file. You can add the types to the file by calling the TypeUsageList.Union method on the object the PropertyObjectFile.TypeUsageList property returns. Pass the <c>typesUsed</c> output value as the unionTypeUsageList parameter to <c>TypeUsageList.Union</c>.
When you unserialize a step or a sequence, call the Step.CreateNewUniqueStepId, Sequence.CreateNewUniqueStepIds, or Engine.CreateNewUniqueStepIds method to replace the unique step ID with a new unique ID.</remarks>
      <returns>Returns the array of unserialized property objects.</returns>
      <param name="stream">Specifies the serialized objects the Engine.SerializeObjects method creates.</param>
      <param name="reservedParam">Pass <c>0</c>.</param>
      <param name="handlerType">Specifies how to handle type conflicts in the stream.</param>
      <seealso cref="Engine.CreateNewUniqueStepIds" />
      <seealso cref="Engine.SerializeObjects" />
      <seealso cref="Engine.UnserializeObjectsAndTypes" />
      <seealso cref="PropertyObject.Serialize" />
      <seealso cref="PropertyObject.UnserializeEx" />
      <seealso cref="PropertyObjectFile.TypeUsageList" />
      <seealso cref="Sequence.CreateNewUniqueStepIds" />
      <seealso cref="Step.CreateNewUniqueStepId" />
      <seealso cref="TypeConflictHandlerTypes" />
      <seealso cref="TypeUsageList.Union" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.UnserializeObjects(System.String,System.Int32,NationalInstruments.TestStand.Interop.API.TypeConflictHandlerTypes)">
      <summary>Converts a string of serialized objects into an array of PropertyObjects.</summary>
      <remarks>Call this method to convert the return value of the Engine.SerializeObjects method into an array of objects. Typically, you use the <c>Engine.SerializeObjects</c> method and this method to put TestStand data on the Microsoft Windows clipboard and to obtain data from it.
Use the Engine.UnserializeObjectsAndTypes method instead of this method if you intend to insert the array of property objects generated from the stream into a property object file. Also add the types the <c>Engine.UnserializeObjectsAndTypes</c> method returns to the file. You can add the types to the file by calling the TypeUsageList.Union method on the object the PropertyObjectFile.TypeUsageList property returns. Pass the <c>typesUsed</c> output value as the unionTypeUsageList parameter to <c>TypeUsageList.Union</c>.
When you unserialize a step or a sequence, call the Step.CreateNewUniqueStepId, Sequence.CreateNewUniqueStepIds, or Engine.CreateNewUniqueStepIds method to replace the unique step ID with a new unique ID.</remarks>
      <returns>Returns the array of unserialized property objects.</returns>
      <param name="stream">Specifies the serialized objects the Engine.SerializeObjects method creates.</param>
      <param name="reservedParam">Pass <c>0</c>.</param>
      <param name="handlerType">Specifies how to handle type conflicts in the stream.</param>
      <seealso cref="Engine.CreateNewUniqueStepIds" />
      <seealso cref="Engine.SerializeObjects" />
      <seealso cref="Engine.UnserializeObjectsAndTypes" />
      <seealso cref="PropertyObject.Serialize" />
      <seealso cref="PropertyObject.UnserializeEx" />
      <seealso cref="PropertyObjectFile.TypeUsageList" />
      <seealso cref="Sequence.CreateNewUniqueStepIds" />
      <seealso cref="Step.CreateNewUniqueStepId" />
      <seealso cref="TypeConflictHandlerTypes" />
      <seealso cref="TypeUsageList.Union" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.CheckOutFilesWhenEdited">
      <summary><para>Note: This property is obsolete. Use the StationOptions.CheckOutFilesWhenEdited property instead.</para></summary>
      <remarks>Specifies if the sequence editor checks a file out from source code control when you attempt to modify the file in the sequence editor.
The default value is <c>True</c>. When this property is <c>True</c> while a current workspace is specified, attempts to edit a file that is checked in the sequence editor launch a prompt to check the file out from source code control. If this property is <c>False</c>, the sequence editor edits the file without checking the file out.</remarks>
      <seealso cref="Engine.CurrentWorkspaceFile" />
      <seealso cref="StationOptions.CheckOutFilesWhenEdited" />
      <seealso cref="StationOptions.CheckOutOnlySelectedFiles" />
      <seealso cref="StationOptions.PromptWhenAddingFilesToSC" />
      <seealso cref="StationOptions.UseDialogForCheckOut" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.CheckOutFilesWhenEdited">
      <summary><para>Note: This property is obsolete. Use the StationOptions.CheckOutFilesWhenEdited property instead.</para></summary>
      <remarks>Specifies if the sequence editor checks a file out from source code control when you attempt to modify the file in the sequence editor.
The default value is <c>True</c>. When this property is <c>True</c> while a current workspace is specified, attempts to edit a file that is checked in the sequence editor launch a prompt to check the file out from source code control. If this property is <c>False</c>, the sequence editor edits the file without checking the file out.</remarks>
      <seealso cref="Engine.CurrentWorkspaceFile" />
      <seealso cref="StationOptions.CheckOutFilesWhenEdited" />
      <seealso cref="StationOptions.CheckOutOnlySelectedFiles" />
      <seealso cref="StationOptions.PromptWhenAddingFilesToSC" />
      <seealso cref="StationOptions.UseDialogForCheckOut" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.CheckOutOnlySelectedFiles">
      <summary><para>Note: This property is obsolete. Use the StationOptions.CheckOutOnlySelectedFiles property instead.</para></summary>
      <remarks>A workspace file contains a list of project files, each project file contains a lists of sequence files, and a sequence file can contain lists of code modules and other files. When you set this option to <c>True</c>, the sequence editor displays only the selected file, such as a project file, in the Source Code Control Operations dialog box. When this option is <c>False</c>, the sequence editor displays the selected item and all the items it contains in the Source Code Control Operations dialog box.</remarks>
      <seealso cref="&quot;Source Code Control Operations dialog box&quot;javascript:RefLink('/InfoTopics/SCC_Check_Out.htm')" />
      <seealso cref="StationOptions.CheckOutFilesWhenEdited" />
      <seealso cref="StationOptions.CheckOutOnlySelectedFiles" />
      <seealso cref="StationOptions.PromptWhenAddingFilesToSC" />
      <seealso cref="StationOptions.UseDialogForCheckOut" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.CheckOutOnlySelectedFiles">
      <summary><para>Note: This property is obsolete. Use the StationOptions.CheckOutOnlySelectedFiles property instead.</para></summary>
      <remarks>A workspace file contains a list of project files, each project file contains a lists of sequence files, and a sequence file can contain lists of code modules and other files. When you set this option to <c>True</c>, the sequence editor displays only the selected file, such as a project file, in the Source Code Control Operations dialog box. When this option is <c>False</c>, the sequence editor displays the selected item and all the items it contains in the Source Code Control Operations dialog box.</remarks>
      <seealso cref="&quot;Source Code Control Operations dialog box&quot;javascript:RefLink('/InfoTopics/SCC_Check_Out.htm')" />
      <seealso cref="StationOptions.CheckOutFilesWhenEdited" />
      <seealso cref="StationOptions.CheckOutOnlySelectedFiles" />
      <seealso cref="StationOptions.PromptWhenAddingFilesToSC" />
      <seealso cref="StationOptions.UseDialogForCheckOut" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.LastWorkspacePath">
      <summary>Specifies the pathname of the workspace file that was open when the sequence editor last shut down.</summary>
      <remarks>When the sequence editor shuts down, it sets this property to the pathname of the current workspace file. If no workspace file is currently open, the sequence editor sets this property to an empty string. If the StationOptions.ReloadWorkspaceAtStartup property is <c>True</c>, the sequence editor loads the workspace file that the last workspace pathname specifies.</remarks>
      <seealso cref="StationOptions.ReloadWorkspaceAtStartup" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.LastWorkspacePath">
      <summary>Specifies the pathname of the workspace file that was open when the sequence editor last shut down.</summary>
      <remarks>When the sequence editor shuts down, it sets this property to the pathname of the current workspace file. If no workspace file is currently open, the sequence editor sets this property to an empty string. If the StationOptions.ReloadWorkspaceAtStartup property is <c>True</c>, the sequence editor loads the workspace file that the last workspace pathname specifies.</remarks>
      <seealso cref="StationOptions.ReloadWorkspaceAtStartup" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.PromptWhenAddingFilesToSC">
      <summary><para>Note: This property is obsolete. Use the StationOptions.PromptWhenAddingFilesToSC property instead.</para></summary>
      <remarks>Specifies if the sequence editor prompts you to add files to source code control when you add files to a workspace.
When this option is <c>True</c>, the sequence editor launches a dialog box in which you can add files to source code control whenever you add them to a workspace file. When this option is <c>False</c>, the sequence editor does not launch a dialog box.</remarks>
      <seealso cref="StationOptions.CheckOutFilesWhenEdited" />
      <seealso cref="StationOptions.CheckOutOnlySelectedFiles" />
      <seealso cref="StationOptions.PromptWhenAddingFilesToSC" />
      <seealso cref="StationOptions.UseDialogForCheckOut" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.PromptWhenAddingFilesToSC">
      <summary><para>Note: This property is obsolete. Use the StationOptions.PromptWhenAddingFilesToSC property instead.</para></summary>
      <remarks>Specifies if the sequence editor prompts you to add files to source code control when you add files to a workspace.
When this option is <c>True</c>, the sequence editor launches a dialog box in which you can add files to source code control whenever you add them to a workspace file. When this option is <c>False</c>, the sequence editor does not launch a dialog box.</remarks>
      <seealso cref="StationOptions.CheckOutFilesWhenEdited" />
      <seealso cref="StationOptions.CheckOutOnlySelectedFiles" />
      <seealso cref="StationOptions.PromptWhenAddingFilesToSC" />
      <seealso cref="StationOptions.UseDialogForCheckOut" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.ReloadDocsWhenOpeningWorkspace">
      <summary><para>Note: This property is obsolete. Use the StationOptions.ReloadDocsWhenOpeningWorkspace property instead.</para></summary>
      <remarks>Specifies if the sequence editor opens the documents that were open when the workspace was unloaded.
If this property is <c>True</c> and you open a workspace file, the sequence editor opens the documents that were open when the workspace file was last closed.</remarks>
      <seealso cref="StationOptions.ReloadDocsWhenOpeningWorkspace" />
      <seealso cref="StationOptions.ReloadWorkspaceAtStartup" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.ReloadDocsWhenOpeningWorkspace">
      <summary><para>Note: This property is obsolete. Use the StationOptions.ReloadDocsWhenOpeningWorkspace property instead.</para></summary>
      <remarks>Specifies if the sequence editor opens the documents that were open when the workspace was unloaded.
If this property is <c>True</c> and you open a workspace file, the sequence editor opens the documents that were open when the workspace file was last closed.</remarks>
      <seealso cref="StationOptions.ReloadDocsWhenOpeningWorkspace" />
      <seealso cref="StationOptions.ReloadWorkspaceAtStartup" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.ReloadWorkspaceAtStartup">
      <summary><para>Note: This property is obsolete. Use the StationOptions.ReloadWorkspaceAtStartup property instead.</para></summary>
      <remarks>Specifies if the sequence editor opens the last workspace file when it launches.
If this option is <c>True</c> when the sequence editor launches, the sequence editor loads the workspace file the Engine.LastWorkspacePath property specifies.</remarks>
      <seealso cref="Engine.LastWorkspacePath" />
      <seealso cref="StationOptions.ReloadDocsWhenOpeningWorkspace" />
      <seealso cref="StationOptions.ReloadWorkspaceAtStartup" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.ReloadWorkspaceAtStartup">
      <summary><para>Note: This property is obsolete. Use the StationOptions.ReloadWorkspaceAtStartup property instead.</para></summary>
      <remarks>Specifies if the sequence editor opens the last workspace file when it launches.
If this option is <c>True</c> when the sequence editor launches, the sequence editor loads the workspace file the Engine.LastWorkspacePath property specifies.</remarks>
      <seealso cref="Engine.LastWorkspacePath" />
      <seealso cref="StationOptions.ReloadDocsWhenOpeningWorkspace" />
      <seealso cref="StationOptions.ReloadWorkspaceAtStartup" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.UseDialogForCheckOut">
      <summary><para>Note: This property is obsolete. Use the StationOptions.UseDialogForCheckOut property instead.</para></summary>
      <remarks>Specifies if the sequence editor launches a dialog box to check out files from source code control.
When this property is <c>True</c>, the sequence editor always launches a dialog box when you check out files from source code control. When this property is <c>False</c>, the sequence editor checks out the files without launching a dialog box.</remarks>
      <seealso cref="StationOptions.CheckOutFilesWhenEdited" />
      <seealso cref="StationOptions.PromptWhenAddingFilesToSC" />
      <seealso cref="StationOptions.UseDialogForCheckOut" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.UseDialogForCheckOut">
      <summary><para>Note: This property is obsolete. Use the StationOptions.UseDialogForCheckOut property instead.</para></summary>
      <remarks>Specifies if the sequence editor launches a dialog box to check out files from source code control.
When this property is <c>True</c>, the sequence editor always launches a dialog box when you check out files from source code control. When this property is <c>False</c>, the sequence editor checks out the files without launching a dialog box.</remarks>
      <seealso cref="StationOptions.CheckOutFilesWhenEdited" />
      <seealso cref="StationOptions.PromptWhenAddingFilesToSC" />
      <seealso cref="StationOptions.UseDialogForCheckOut" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.DisplayWorkspaceBrowserDialog(System.String,System.Int32)">
      <summary>Launches a dialog box in which you select and edit a workspace file.</summary>
      <remarks>User interfaces use this method to allow users to select a workspace file, load and unload a workspace file, edit the files in the workspace file and project files, and perform SCC operations.</remarks>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.</param>
      <param name="dlgOptions">Specifies any combination of the WorkspaceBrowserDialogOptions constants. Pass <c>WorkspaceBrowserDlgOption_Editable</c> to enable editing of the workspace. Use the bitwise-OR operator to specify more than one option.</param>
      <seealso cref="CommonDialogOptions" />
      <seealso cref="Engine.CurrentWorkspaceFile" />
      <seealso cref="WorkspaceBrowserDialogOptions" />
      <seealso cref="WorkspaceFile" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.DisplayWorkspaceBrowserDialog(System.String,System.Int32)">
      <summary>Launches a dialog box in which you select and edit a workspace file.</summary>
      <remarks>User interfaces use this method to allow users to select a workspace file, load and unload a workspace file, edit the files in the workspace file and project files, and perform SCC operations.</remarks>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.</param>
      <param name="dlgOptions">Specifies any combination of the WorkspaceBrowserDialogOptions constants. Pass <c>WorkspaceBrowserDlgOption_Editable</c> to enable editing of the workspace. Use the bitwise-OR operator to specify more than one option.</param>
      <seealso cref="CommonDialogOptions" />
      <seealso cref="Engine.CurrentWorkspaceFile" />
      <seealso cref="WorkspaceBrowserDialogOptions" />
      <seealso cref="WorkspaceFile" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.GetTypeUsageLocations(System.String)">
      <summary>Returns an array of PropertyObjectFile objects that use the specified type name.</summary>
      <remarks>A PropertyObjectFile object uses a type if it has an instance of the type or if the type is stored in the TypeUsageList for that file.</remarks>
      <returns>An array of PropertyObjectFile objects that use the type that the type name specifies.</returns>
      <param name="typeNameParam">Specifies the name of the type.</param>
      <seealso cref="Engine.GetTypeDefinition" />
      <seealso cref="Engine.GetTypeNames" />
      <seealso cref="PropertyObjectFile.TypeUsageList" />
      <seealso cref="TypeUsageList" />
      <seealso cref="TypeUsageList.GetIsTypeAttachedToFile" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.GetTypeUsageLocations(System.String)">
      <summary>Returns an array of PropertyObjectFile objects that use the specified type name.</summary>
      <remarks>A PropertyObjectFile object uses a type if it has an instance of the type or if the type is stored in the TypeUsageList for that file.</remarks>
      <returns>An array of PropertyObjectFile objects that use the type that the type name specifies.</returns>
      <param name="typeNameParam">Specifies the name of the type.</param>
      <seealso cref="Engine.GetTypeDefinition" />
      <seealso cref="Engine.GetTypeNames" />
      <seealso cref="PropertyObjectFile.TypeUsageList" />
      <seealso cref="TypeUsageList" />
      <seealso cref="TypeUsageList.GetIsTypeAttachedToFile" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.ShowHiddenProperties">
      <summary><para>Note: This property is obsolete. Use the StationOptions.ShowHiddenProperties property instead.</para></summary>
      <remarks>Specifies whether to display in user interfaces properties marked as hidden.
When this property is <c>True</c>, the sequence editor and user interfaces display all subproperties of property objects in dialog boxes and variables views. When this property is <c>False</c>, the sequence editor does not show subproperties marked with the PropFlags_Hidden flag.</remarks>
      <seealso cref="PropertyFlags" />
      <seealso cref="PropertyObject.GetFlags" />
      <seealso cref="StationOptions.ShowHiddenProperties" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.ShowHiddenProperties">
      <summary><para>Note: This property is obsolete. Use the StationOptions.ShowHiddenProperties property instead.</para></summary>
      <remarks>Specifies whether to display in user interfaces properties marked as hidden.
When this property is <c>True</c>, the sequence editor and user interfaces display all subproperties of property objects in dialog boxes and variables views. When this property is <c>False</c>, the sequence editor does not show subproperties marked with the PropFlags_Hidden flag.</remarks>
      <seealso cref="PropertyFlags" />
      <seealso cref="PropertyObject.GetFlags" />
      <seealso cref="StationOptions.ShowHiddenProperties" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.GetTypeDefinition(System.String)">
      <summary>Returns the PropertyObject object for the specified type name.</summary>
      <remarks>The returned PropertyObject object is the type definition for the specified type name.</remarks>
      <returns>The type definition PropertyObject. Returns <c>NULL</c> or <c>0</c> if the type definition does not exist.</returns>
      <param name="typeNameParam">Specifies the name of the type to obtain.</param>
      <seealso cref="Engine.GetTypeNames" />
      <seealso cref="Engine.GetTypeUsageLocations" />
      <seealso cref="PropertyObject" />
      <seealso cref="PropertyObject.GetTypeDefinition" />
      <seealso cref="PropertyObject.IsTypeDefinition" />
      <seealso cref="PropertyObject.TypeCategory" />
      <seealso cref="PropertyObjectFile.TypeUsageList" />
      <seealso cref="TypeUsageList" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.GetTypeDefinition(System.String)">
      <summary>Returns the PropertyObject object for the specified type name.</summary>
      <remarks>The returned PropertyObject object is the type definition for the specified type name.</remarks>
      <returns>The type definition PropertyObject. Returns <c>NULL</c> or <c>0</c> if the type definition does not exist.</returns>
      <param name="typeNameParam">Specifies the name of the type to obtain.</param>
      <seealso cref="Engine.GetTypeNames" />
      <seealso cref="Engine.GetTypeUsageLocations" />
      <seealso cref="PropertyObject" />
      <seealso cref="PropertyObject.GetTypeDefinition" />
      <seealso cref="PropertyObject.IsTypeDefinition" />
      <seealso cref="PropertyObject.TypeCategory" />
      <seealso cref="PropertyObjectFile.TypeUsageList" />
      <seealso cref="TypeUsageList" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.GetTypeNames">
      <summary>Returns an array of all currently loaded type names.</summary>
      <returns>An array of strings that contains the names of all currently loaded types.</returns>
      <seealso cref="Engine.GetTypeDefinition" />
      <seealso cref="Engine.GetTypeUsageLocations" />
      <seealso cref="PropertyObjectFile.TypeUsageList" />
      <seealso cref="TypeUsageList" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.GetTypeNames">
      <summary>Returns an array of all currently loaded type names.</summary>
      <returns>An array of strings that contains the names of all currently loaded types.</returns>
      <seealso cref="Engine.GetTypeDefinition" />
      <seealso cref="Engine.GetTypeUsageLocations" />
      <seealso cref="PropertyObjectFile.TypeUsageList" />
      <seealso cref="TypeUsageList" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.NewDataType(NationalInstruments.TestStand.Interop.API.PropertyValueTypes,System.Boolean,System.String,System.Int32)">
      <summary>Creates and returns a new TestStand data type.</summary>
      <remarks>This method creates a PropertyObject object that is a data type. Once you create a data type, you can use the Engine.NewPropertyObject method to create an instance of the type. You can add the type to a TypeUsageList to associate the type with a particular PropertyObjectFile.
<para>Note: TestStand does not validate data type names you create programmatically for invalid characters, such as spaces, which can result in errors when you use the data type. Use the TypeUsageList.ValidateNewTypeName method to validate type names. TestStand requires data type names to be strings that contain only letters, numbers, and underscores. Type names cannot duplicate type names already in memory.</para></remarks>
      <returns>The newly created data type.</returns>
      <param name="ValueType">Specifies the type of value you want instances of the type to contain.</param>
      <param name="asArray">Pass <c>True</c> if you want the type to be an array.</param>
      <param name="typeNameParam">If you pass PropValType_NamedType for the ValueType, pass the name of the type for this parameter. Otherwise, pass an empty string. If you pass a type name, the type must not already be in memory.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <seealso cref="Engine.NewPropertyObject" />
      <seealso cref="NamedPropertyTypes" />
      <seealso cref="PropertyObject" />
      <seealso cref="PropertyObjectFile" />
      <seealso cref="PropertyOptions" />
      <seealso cref="PropertyValueTypes" />
      <seealso cref="TypeUsageList" />
      <seealso cref="TypeUsageList.ValidateNewTypeName" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.NewDataType(NationalInstruments.TestStand.Interop.API.PropertyValueTypes,System.Boolean,System.String,System.Int32)">
      <summary>Creates and returns a new TestStand data type.</summary>
      <remarks>This method creates a PropertyObject object that is a data type. Once you create a data type, you can use the Engine.NewPropertyObject method to create an instance of the type. You can add the type to a TypeUsageList to associate the type with a particular PropertyObjectFile.
<para>Note: TestStand does not validate data type names you create programmatically for invalid characters, such as spaces, which can result in errors when you use the data type. Use the TypeUsageList.ValidateNewTypeName method to validate type names. TestStand requires data type names to be strings that contain only letters, numbers, and underscores. Type names cannot duplicate type names already in memory.</para></remarks>
      <returns>The newly created data type.</returns>
      <param name="ValueType">Specifies the type of value you want instances of the type to contain.</param>
      <param name="asArray">Pass <c>True</c> if you want the type to be an array.</param>
      <param name="typeNameParam">If you pass PropValType_NamedType for the ValueType, pass the name of the type for this parameter. Otherwise, pass an empty string. If you pass a type name, the type must not already be in memory.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <seealso cref="Engine.NewPropertyObject" />
      <seealso cref="NamedPropertyTypes" />
      <seealso cref="PropertyObject" />
      <seealso cref="PropertyObjectFile" />
      <seealso cref="PropertyOptions" />
      <seealso cref="PropertyValueTypes" />
      <seealso cref="TypeUsageList" />
      <seealso cref="TypeUsageList.ValidateNewTypeName" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.GetInsertStepMenuStructure(NationalInstruments.TestStand.Interop.API.PropertyObjectFile,System.Int32)">
      <summary>Creates a PropertyObject object that specifies the structure of the menu used to insert steps in the sequence editor.</summary>
      <remarks>The sequence editor uses this method to create the submenu that appears when you select Insert Step from the Steps pane context menu. The structure of this menu depends upon the types in the type palettes, the types in the sequence file, the default adapter, and the step type menu configuration. This method constructs a PropertyObject object that contains properties that specify the submenu structure.</remarks>
      <returns>The object that specifies the menu structure.</returns>
      <param name="selectedFile">Specifies the currently selected file. The method includes the step types defined in this file as well as the step types located in the type palette. Pass <c>0</c> or <c>NULL</c> if there is no selected file.</param>
      <param name="hiddenFlags">Pass a set of PropertyFlags that specify which step types are not included in the menu. For example, pass <c>PropFlags_Hidden</c> to exclude the hidden step types.</param>
      <seealso cref="Engine.DisplayStepTypeMenuEditorEx" />
      <seealso cref="Engine.GetEditTimeToolMenuItems" />
      <seealso cref="Engine.GetInsertVariableMenuStructure" />
      <seealso cref="Engine.GetRunTimeToolMenuItems" />
      <seealso cref="MenuItemProperties" />
      <seealso cref="PropertyFlags" />
      <seealso cref="PropertyObject" />
      <seealso cref="PropertyObjectFile" />
      <seealso cref="Step.GetEditSubstepMenuStructure" />
      <seealso cref="StepType.GetSubstep" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.GetInsertStepMenuStructure(NationalInstruments.TestStand.Interop.API.PropertyObjectFile,System.Int32)">
      <summary>Creates a PropertyObject object that specifies the structure of the menu used to insert steps in the sequence editor.</summary>
      <remarks>The sequence editor uses this method to create the submenu that appears when you select Insert Step from the Steps pane context menu. The structure of this menu depends upon the types in the type palettes, the types in the sequence file, the default adapter, and the step type menu configuration. This method constructs a PropertyObject object that contains properties that specify the submenu structure.</remarks>
      <returns>The object that specifies the menu structure.</returns>
      <param name="selectedFile">Specifies the currently selected file. The method includes the step types defined in this file as well as the step types located in the type palette. Pass <c>0</c> or <c>NULL</c> if there is no selected file.</param>
      <param name="hiddenFlags">Pass a set of PropertyFlags that specify which step types are not included in the menu. For example, pass <c>PropFlags_Hidden</c> to exclude the hidden step types.</param>
      <seealso cref="Engine.DisplayStepTypeMenuEditorEx" />
      <seealso cref="Engine.GetEditTimeToolMenuItems" />
      <seealso cref="Engine.GetInsertVariableMenuStructure" />
      <seealso cref="Engine.GetRunTimeToolMenuItems" />
      <seealso cref="MenuItemProperties" />
      <seealso cref="PropertyFlags" />
      <seealso cref="PropertyObject" />
      <seealso cref="PropertyObjectFile" />
      <seealso cref="Step.GetEditSubstepMenuStructure" />
      <seealso cref="StepType.GetSubstep" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.ComputerName">
      <summary>Returns the name of the computer on which the TestStand Engine was created.</summary>
      <seealso cref="Engine.UniqueEngineId" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.ComputerName">
      <summary>Returns the name of the computer on which the TestStand Engine was created.</summary>
      <seealso cref="Engine.UniqueEngineId" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.UniqueEngineId">
      <summary>Returns an identification string that is unique among all instances of the TestStand Engine.</summary>
      <remarks>Use this string to uniquely identify a particular instance of an engine. The returned string is a representation of a UUID or GUID, such as &quot;<c>6B29FC40-CA47-1067-B31D-00DD010662DA</c>.&quot;</remarks>
      <seealso cref="Engine.ComputerName" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.UniqueEngineId">
      <summary>Returns an identification string that is unique among all instances of the TestStand Engine.</summary>
      <remarks>Use this string to uniquely identify a particular instance of an engine. The returned string is a representation of a UUID or GUID, such as &quot;<c>6B29FC40-CA47-1067-B31D-00DD010662DA</c>.&quot;</remarks>
      <seealso cref="Engine.ComputerName" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.GetToolMenuStructure">
      <summary><para>Note: This method is obsolete. Use the Engine.GetEditTimeToolMenuItems and Engine.GetRunTimeToolMenuItems methods instead.</para></summary>
      <remarks>Obtains a PropertyObject object that specifies the structure of the Tools menu. <para>Note: You must call the Engine.ConstructToolMenus method before calling this function.</para>
You can use this method to obtain information about the Tools menu items instead of using the Engine.GetNumToolMenus, Engine.GetNumToolMenuItems, Engine.GetToolMenuItemInfoEx, and Engine.GetToolMenuItemInfoWithIDEx methods.</remarks>
      <returns>The object that specifies the menu structure. See MenuItemProperties for a description of this property object. </returns>
      <seealso cref="Engine.ConstructToolMenus" />
      <seealso cref="Engine.GetEditTimeToolMenuItems" />
      <seealso cref="Engine.GetNumToolMenus" />
      <seealso cref="Engine.GetNumToolMenuItems" />
      <seealso cref="Engine.GetRunTimeToolMenuItems" />
      <seealso cref="Engine.GetToolMenuItemInfoEx" />
      <seealso cref="Engine.GetToolMenuItemInfoWithIDEx" />
      <seealso cref="MenuItemProperties" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.GetToolMenuStructure">
      <summary><para>Note: This method is obsolete. Use the Engine.GetEditTimeToolMenuItems and Engine.GetRunTimeToolMenuItems methods instead.</para></summary>
      <remarks>Obtains a PropertyObject object that specifies the structure of the Tools menu. <para>Note: You must call the Engine.ConstructToolMenus method before calling this function.</para>
You can use this method to obtain information about the Tools menu items instead of using the Engine.GetNumToolMenus, Engine.GetNumToolMenuItems, Engine.GetToolMenuItemInfoEx, and Engine.GetToolMenuItemInfoWithIDEx methods.</remarks>
      <returns>The object that specifies the menu structure. See MenuItemProperties for a description of this property object. </returns>
      <seealso cref="Engine.ConstructToolMenus" />
      <seealso cref="Engine.GetEditTimeToolMenuItems" />
      <seealso cref="Engine.GetNumToolMenus" />
      <seealso cref="Engine.GetNumToolMenuItems" />
      <seealso cref="Engine.GetRunTimeToolMenuItems" />
      <seealso cref="Engine.GetToolMenuItemInfoEx" />
      <seealso cref="Engine.GetToolMenuItemInfoWithIDEx" />
      <seealso cref="MenuItemProperties" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.RequireUserLogin">
      <summary><para>Note: This property is obsolete. Use the StationOptions.RequireUserLogin property instead.</para></summary>
      <remarks>Specifies if the sequence editor or user interfaces require that a user be logged in.
TestStand uses this property only when <c>Engine.EnableUserPrivilegeChecking</c> is <c>True</c>. When this property is <c>True</c>, TestStand disables the user interfaces until a user successfully logs in.
<para>Note: The <c>Engine.EnableUserPrivilegeChecking</c> property is obsolete. Use the StationOptions.EnableUserPrivilegeChecking property instead.</para></remarks>
      <seealso cref="StationOptions.EnableUserPrivilegeChecking" />
      <seealso cref="StationOptions.RequireUserLogin" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.RequireUserLogin">
      <summary><para>Note: This property is obsolete. Use the StationOptions.RequireUserLogin property instead.</para></summary>
      <remarks>Specifies if the sequence editor or user interfaces require that a user be logged in.
TestStand uses this property only when <c>Engine.EnableUserPrivilegeChecking</c> is <c>True</c>. When this property is <c>True</c>, TestStand disables the user interfaces until a user successfully logs in.
<para>Note: The <c>Engine.EnableUserPrivilegeChecking</c> property is obsolete. Use the StationOptions.EnableUserPrivilegeChecking property instead.</para></remarks>
      <seealso cref="StationOptions.EnableUserPrivilegeChecking" />
      <seealso cref="StationOptions.RequireUserLogin" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.FileDialogDirHistoryList">
      <summary>Specifies the list of directories to display in the directory history list in the File dialog box.</summary>
      <remarks>The dialog box the Engine.DisplayFileDialog method launches has a directory history control that lists the directories that the user most recently visited.  Use this property to customize the contents of that control. When the dialog box opens, it initializes the control with the values specified by this property. When the dialog box closes, it updates this property to contain the current contents of the control.</remarks>
      <returns>An array of strings that specify the paths to be inserted in the directory history list control in the File dialog box.</returns>
      <seealso cref="Engine.DisplayFileDialog" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.FileDialogDirHistoryList">
      <summary>Specifies the list of directories to display in the directory history list in the File dialog box.</summary>
      <remarks>The dialog box the Engine.DisplayFileDialog method launches has a directory history control that lists the directories that the user most recently visited.  Use this property to customize the contents of that control. When the dialog box opens, it initializes the control with the values specified by this property. When the dialog box closes, it updates this property to contain the current contents of the control.</remarks>
      <returns>An array of strings that specify the paths to be inserted in the directory history list control in the File dialog box.</returns>
      <seealso cref="Engine.DisplayFileDialog" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.CanCreateStep(System.String,System.String)">
      <summary>Determines whether you can create a new step of the specified type.</summary>
      <remarks>The Engine.NewStep method reports an error if this method returns <c>False</c>.</remarks>
      <param name="adapterKeyNameVal">Specifies the key name of the module Adapter object to use to create the step. Pass an empty string to use the adapter the step type designates or to use the adapter the Engine.DefaultAdapter property specifies if the step has no designated adapter.</param>
      <param name="stepTypeName">Specifies the name of the step type with which to create the step. The step type must already be in memory. Refer to Engine.GetTypeNames for a list of names for the built-in step types and other types.</param>
      <seealso cref="AdapterKeyNames" />
      <seealso cref="Engine.DefaultAdapter" />
      <seealso cref="Engine.GetTypeNames" />
      <seealso cref="Engine.NewStep" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.CanCreateStep(System.String,System.String)">
      <summary>Determines whether you can create a new step of the specified type.</summary>
      <remarks>The Engine.NewStep method reports an error if this method returns <c>False</c>.</remarks>
      <param name="adapterKeyNameVal">Specifies the key name of the module Adapter object to use to create the step. Pass an empty string to use the adapter the step type designates or to use the adapter the Engine.DefaultAdapter property specifies if the step has no designated adapter.</param>
      <param name="stepTypeName">Specifies the name of the step type with which to create the step. The step type must already be in memory. Refer to Engine.GetTypeNames for a list of names for the built-in step types and other types.</param>
      <seealso cref="AdapterKeyNames" />
      <seealso cref="Engine.DefaultAdapter" />
      <seealso cref="Engine.GetTypeNames" />
      <seealso cref="Engine.NewStep" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.ResetTypeInstances(NationalInstruments.TestStand.Interop.API.PropertyObject,System.Int32)">
      <summary>Searches for all instances of the specified type definition in the TestStand Engine and sets the values and flags of each type definition instance to the default value and flags for the type.</summary>
      <remarks>Use this method to apply the value of a type definition property to all instances of the type. Normally, when you change the value of a type definition property, the values in the instances of the type do not change.
<para>Note: Calling this method does not affect instances in unopened files on disk. In addition, this method ignores the subproperties of typeParam unless you pass the <c>ResetTypeInst_RecurseSubProperties</c> constant as an option.</para></remarks>
      <returns>Returns <c>True</c> if this method finds any type instances or returns <c>False</c> if it finds none.</returns>
      <param name="typeParam">Specifies a type definition or a subproperty of a type definition.</param>
      <param name="resetTypeInstancesOptions">Pass one or more ResetTypeInstancesOptions constants to specify different options. Use the bitwise-OR operator to specify more than one option.  If you want to reset the values/flags of all the subproperties in all instances of a type, pass <c>ResetTypeInst_RecurseSubProperties</c> using the bitwise-OR operator with <c>ResetTypeInst_ResetFlags</c> or <c>ResetTypeInst_ResetValues</c>.<para>Note: Avoid using the <c>ResetTypeInst_ResetFlags</c> flag because it might result in unexpected behavior. In most cases, you should not reset certain flags on type instances. For example, the <c>PropFlags_PassByReference</c> flag is set on parameters of Sequence Call steps. Calling the Engine.ResetTypeInstances method on a type can change whether TestStand passes a sequence parameter that is an instance of the type by reference.</para></param>
      <seealso cref="PropertyObject" />
      <seealso cref="PropertyObject.DisplayPropertiesDialog" />
      <seealso cref="ResetTypeInstanceOptions" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.ResetTypeInstances(NationalInstruments.TestStand.Interop.API.PropertyObject,System.Int32)">
      <summary>Searches for all instances of the specified type definition in the TestStand Engine and sets the values and flags of each type definition instance to the default value and flags for the type.</summary>
      <remarks>Use this method to apply the value of a type definition property to all instances of the type. Normally, when you change the value of a type definition property, the values in the instances of the type do not change.
<para>Note: Calling this method does not affect instances in unopened files on disk. In addition, this method ignores the subproperties of typeParam unless you pass the <c>ResetTypeInst_RecurseSubProperties</c> constant as an option.</para></remarks>
      <returns>Returns <c>True</c> if this method finds any type instances or returns <c>False</c> if it finds none.</returns>
      <param name="typeParam">Specifies a type definition or a subproperty of a type definition.</param>
      <param name="resetTypeInstancesOptions">Pass one or more ResetTypeInstancesOptions constants to specify different options. Use the bitwise-OR operator to specify more than one option.  If you want to reset the values/flags of all the subproperties in all instances of a type, pass <c>ResetTypeInst_RecurseSubProperties</c> using the bitwise-OR operator with <c>ResetTypeInst_ResetFlags</c> or <c>ResetTypeInst_ResetValues</c>.<para>Note: Avoid using the <c>ResetTypeInst_ResetFlags</c> flag because it might result in unexpected behavior. In most cases, you should not reset certain flags on type instances. For example, the <c>PropFlags_PassByReference</c> flag is set on parameters of Sequence Call steps. Calling the Engine.ResetTypeInstances method on a type can change whether TestStand passes a sequence parameter that is an instance of the type by reference.</para></param>
      <seealso cref="PropertyObject" />
      <seealso cref="PropertyObject.DisplayPropertiesDialog" />
      <seealso cref="ResetTypeInstanceOptions" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.DisplayStepTypeMenuEditor(System.String,System.Boolean,System.Int32)">
      <summary><para>Note: This method is obsolete. Use the Engine.DisplayStepTypeMenuEditorEx method instead.</para></summary>
      <remarks>Launches a dialog box in which you can edit the order in which step types appear in the Insert Step submenu.</remarks>
      <returns>Returns <c>True</c> if you make modifications and click OK in the dialog box. Returns <c>False</c> if you click Cancel or make no modifications.</returns>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.</param>
      <param name="forSubsteps">Pass <c>True</c> when editing the menu information for substeps.</param>
      <param name="dlgOptions">Specify CommonDlgOption_NoOptions or CommonDlgOption_ModalToAppMainWnd.</param>
      <seealso cref="Engine.DisplayStepTypeMenuEditorEx" />
      <seealso cref="Engine.GetInsertStepMenuStructure" />
      <seealso cref="CommonDialogOptions" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.DisplayStepTypeMenuEditor(System.String,System.Boolean,System.Int32)">
      <summary><para>Note: This method is obsolete. Use the Engine.DisplayStepTypeMenuEditorEx method instead.</para></summary>
      <remarks>Launches a dialog box in which you can edit the order in which step types appear in the Insert Step submenu.</remarks>
      <returns>Returns <c>True</c> if you make modifications and click OK in the dialog box. Returns <c>False</c> if you click Cancel or make no modifications.</returns>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.</param>
      <param name="forSubsteps">Pass <c>True</c> when editing the menu information for substeps.</param>
      <param name="dlgOptions">Specify CommonDlgOption_NoOptions or CommonDlgOption_ModalToAppMainWnd.</param>
      <seealso cref="Engine.DisplayStepTypeMenuEditorEx" />
      <seealso cref="Engine.GetInsertStepMenuStructure" />
      <seealso cref="CommonDialogOptions" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.GetResourceSymbols(System.String)">
      <summary>Returns a list of symbols from the TestStand string resource file for the current language.</summary>
      <remarks>You specify the categories,  which are the sections in the string resource file.
The string resource files are located in the <c>&lt;TestStand&gt;\Components\Language</c> and <c>"&lt;TestStand&#160;Public&gt;\Components\Language</c> directories. You can customize the strings in the resource files in the <c>&lt;TestStand&gt;\Components\Language</c> directory by adding a section and item with the same name to the corresponding file in the <c>&lt;TestStand&#160;Public&gt;\Components\Language</c> directory.</remarks>
      <returns>An array of strings that contains the names of all the symbols under the given category.</returns>
      <param name="section">Specifies the category or section label.</param>
      <seealso cref="Engine.GetResourceString" />
      <seealso cref="Engine.ReloadStringResourceFiles" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.GetResourceSymbols(System.String)">
      <summary>Returns a list of symbols from the TestStand string resource file for the current language.</summary>
      <remarks>You specify the categories,  which are the sections in the string resource file.
The string resource files are located in the <c>&lt;TestStand&gt;\Components\Language</c> and <c>"&lt;TestStand&#160;Public&gt;\Components\Language</c> directories. You can customize the strings in the resource files in the <c>&lt;TestStand&gt;\Components\Language</c> directory by adding a section and item with the same name to the corresponding file in the <c>&lt;TestStand&#160;Public&gt;\Components\Language</c> directory.</remarks>
      <returns>An array of strings that contains the names of all the symbols under the given category.</returns>
      <param name="section">Specifies the category or section label.</param>
      <seealso cref="Engine.GetResourceString" />
      <seealso cref="Engine.ReloadStringResourceFiles" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.CheckExpression(NationalInstruments.TestStand.Interop.API.PropertyObject,System.String,System.Int32,System.String@,System.Int32@,System.Int32@)">
      <summary>Checks the validity of the expression parameter and returns error information.</summary>
      <remarks>This method is similar to the Engine.CheckExprSyntax method, except it checks the validity of variables in the expression.</remarks>
      <returns>Returns <c>True</c> if the expression is correct. Returns <c>False</c> if the expression contains an error. If it returns <c>False</c>, check the errorDescription, startErrPos, and endErrPos parameters for more information.</returns>
      <param name="evaluationContext">Specifies the context in which to evaluate the expression. This method uses this object to determine whether variables in the expression are valid. If you pass a <c>NULL</c> reference, this method checks only the expression syntax.</param>
      <param name="expressionStr">Specifies the expression to check.</param>
      <param name="evaluationOptions">Pass <c>0</c> to specify the default behavior, or pass one or more EvaluationOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <param name="errorDescription">When an error exists, this parameter returns an error message describing the type of error.</param>
      <param name="startErrPos">When an error exists, this parameter returns the index of the location in the string where the error begins.</param>
      <param name="endErrPos">When an error exists, this parameter returns the index of the location in the string of the first character beyond the error.</param>
      <seealso cref="Engine.CheckExprSyntax" />
      <seealso cref="EvaluationOptions" />
      <seealso cref="Expression.ValidateEvaluationType" />
      <seealso cref="PropertyObject" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.CheckExpression(NationalInstruments.TestStand.Interop.API.PropertyObject,System.String,System.Int32,System.String@,System.Int32@,System.Int32@)">
      <summary>Checks the validity of the expression parameter and returns error information.</summary>
      <remarks>This method is similar to the Engine.CheckExprSyntax method, except it checks the validity of variables in the expression.</remarks>
      <returns>Returns <c>True</c> if the expression is correct. Returns <c>False</c> if the expression contains an error. If it returns <c>False</c>, check the errorDescription, startErrPos, and endErrPos parameters for more information.</returns>
      <param name="evaluationContext">Specifies the context in which to evaluate the expression. This method uses this object to determine whether variables in the expression are valid. If you pass a <c>NULL</c> reference, this method checks only the expression syntax.</param>
      <param name="expressionStr">Specifies the expression to check.</param>
      <param name="evaluationOptions">Pass <c>0</c> to specify the default behavior, or pass one or more EvaluationOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <param name="errorDescription">When an error exists, this parameter returns an error message describing the type of error.</param>
      <param name="startErrPos">When an error exists, this parameter returns the index of the location in the string where the error begins.</param>
      <param name="endErrPos">When an error exists, this parameter returns the index of the location in the string of the first character beyond the error.</param>
      <seealso cref="Engine.CheckExprSyntax" />
      <seealso cref="EvaluationOptions" />
      <seealso cref="Expression.ValidateEvaluationType" />
      <seealso cref="PropertyObject" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.DisplayBrowsePropertyObjectDialog(System.String,NationalInstruments.TestStand.Interop.API.PropertyObject,System.String,System.Int32)">
      <summary>Launches a dialog box in which you can see the structure of a PropertyObject object.</summary>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.</param>
      <param name="objectToBrowse">Specifies the object into which to browse.</param>
      <param name="initialLocation">Specifies a lookup string for the subproperty of the object to select initially.</param>
      <param name="dlgOptions">Specify CommonDlgOption_NoOptions or CommonDlgOption_ModalToAppMainWind.</param>
      <seealso cref="CommonDialogOptions" />
      <seealso cref="PropertyObject" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.DisplayBrowsePropertyObjectDialog(System.String,NationalInstruments.TestStand.Interop.API.PropertyObject,System.String,System.Int32)">
      <summary>Launches a dialog box in which you can see the structure of a PropertyObject object.</summary>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.</param>
      <param name="objectToBrowse">Specifies the object into which to browse.</param>
      <param name="initialLocation">Specifies a lookup string for the subproperty of the object to select initially.</param>
      <param name="dlgOptions">Specify CommonDlgOption_NoOptions or CommonDlgOption_ModalToAppMainWind.</param>
      <seealso cref="CommonDialogOptions" />
      <seealso cref="PropertyObject" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.CVIAdapter_ExternalCVIPrj">
      <summary><para>Note: This property is obsolete. Use the CVIAdapter.ExecutionServerProjectPathName property instead.</para></summary>
      <remarks>Changes the project in which LabWindows/CVI Adapter steps are executed when the <c>CVIAdapter.ExecuteStepsInCVI</c> property is <c>True</c>.
The value of this property can be a relative or absolute path. If you specify a relative path, TestStand looks in the search directories for the file.
<para>Note: The <c>CVIAdapter_ExecuteStepsInCVI</c> property is obsolete. Use the CVIAdapter.ExecuteStepsInExternalInstance property instead.</para></remarks>
      <seealso cref="&quot;CVIAdapter.ExecuteStepsInExternalInstance&quot;CVIAdapter_ExecuteStepsInExternalInstance_P.htm" />
      <seealso cref="&quot;CVIAdapter.ExecutionServerProjectPathName&quot;CVIAdapter_ExecutionServerProjectPathName_P.htm" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.CVIAdapter_ExternalCVIPrj">
      <summary><para>Note: This property is obsolete. Use the CVIAdapter.ExecutionServerProjectPathName property instead.</para></summary>
      <remarks>Changes the project in which LabWindows/CVI Adapter steps are executed when the <c>CVIAdapter.ExecuteStepsInCVI</c> property is <c>True</c>.
The value of this property can be a relative or absolute path. If you specify a relative path, TestStand looks in the search directories for the file.
<para>Note: The <c>CVIAdapter_ExecuteStepsInCVI</c> property is obsolete. Use the CVIAdapter.ExecuteStepsInExternalInstance property instead.</para></remarks>
      <seealso cref="&quot;CVIAdapter.ExecuteStepsInExternalInstance&quot;CVIAdapter_ExecuteStepsInExternalInstance_P.htm" />
      <seealso cref="&quot;CVIAdapter.ExecutionServerProjectPathName&quot;CVIAdapter_ExecutionServerProjectPathName_P.htm" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.CVIAdapter_ExecuteStepsInCVI">
      <summary><para>Note: This property is obsolete. Use the CVIAdapter.ExecuteStepsInExternalInstance property instead.</para></summary>
      <remarks>Indicates whether the LabWindows/CVI Adapter executes steps in an external LabWindows/CVI process rather than internally.
While running steps in an external LabWindows/CVI process is slower, you can use this property to debug steps more easily. Changing this setting causes all modules to be unloaded.</remarks>
      <seealso cref="&quot;CVIAdapter.ExecuteStepsInExternalInstance&quot;CVIAdapter_ExecuteStepsInExternalInstance_P.htm" />
      <seealso cref="&quot;CVIAdapter.ExecutionServerProjectPathName&quot;CVIAdapter_ExecutionServerProjectPathName_P.htm" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.CVIAdapter_ExecuteStepsInCVI">
      <summary><para>Note: This property is obsolete. Use the CVIAdapter.ExecuteStepsInExternalInstance property instead.</para></summary>
      <remarks>Indicates whether the LabWindows/CVI Adapter executes steps in an external LabWindows/CVI process rather than internally.
While running steps in an external LabWindows/CVI process is slower, you can use this property to debug steps more easily. Changing this setting causes all modules to be unloaded.</remarks>
      <seealso cref="&quot;CVIAdapter.ExecuteStepsInExternalInstance&quot;CVIAdapter_ExecuteStepsInExternalInstance_P.htm" />
      <seealso cref="&quot;CVIAdapter.ExecutionServerProjectPathName&quot;CVIAdapter_ExecutionServerProjectPathName_P.htm" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.StationID">
      <summary><para>Note: This property is obsolete. Use the StationOptions.StationID property instead.</para></summary>
      <remarks>Specifies a test station identification string for this instance of the TestStand Engine.
<para>Note: This property never returns an empty string. If you set this property to an empty string, the property returns the same value as the Engine.ComputerName property.</para></remarks>
      <seealso cref="Engine.ComputerName" />
      <seealso cref="StationOptions.StationID" />
      <seealso cref=".UniqueEngineId" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.StationID">
      <summary><para>Note: This property is obsolete. Use the StationOptions.StationID property instead.</para></summary>
      <remarks>Specifies a test station identification string for this instance of the TestStand Engine.
<para>Note: This property never returns an empty string. If you set this property to an empty string, the property returns the same value as the Engine.ComputerName property.</para></remarks>
      <seealso cref="Engine.ComputerName" />
      <seealso cref="StationOptions.StationID" />
      <seealso cref=".UniqueEngineId" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.NewEditContext(NationalInstruments.TestStand.Interop.API.PropertyObject,System.Object,System.Object@)">
      <summary>Returns a SequenceContext object that approximates the sequence context TestStand creates when you run a sequence.</summary>
      <remarks>You can pass the object this method returns as a parameter to the Engine.DisplayBrowseExprDialogEx and Engine.DisplayBrowsePropertyObjectDialog methods.
When you pass an array of step references, this method returns a context with a Step property that represents multiple steps, where the subproperties of Step contain only properties common to all steps in the array. Use the context with SequenceContext.GetMultipleValues to determine whether an element of the property, such as the value, comment, format, or flags, represents the shared element value for all the steps in the array. If at least one step has a different value for an element, the property element in the context contains a default value.</remarks>
      <returns>A reference to a SequenceContext object. Release this reference when you are finished using it.</returns>
      <param name="obj">Specifies the object to initialize the sequence context. You can pass a sequence file, sequence, step, variable, or array of object references to steps.  This method sets the sequence context properties that correspond to the object you pass.</param>
      <param name="editArgsParam">Specifies an EditArgs object that indicates which items are currently selected in the user interface.</param>
      <param name="locationString">Returns the lookupString for the object passed in. Use this lookupString to access the object from the sequence context.  </param>
      <seealso cref="Engine.DisplayBrowseExprDialogEx" />
      <seealso cref="Engine.DisplayBrowsePropertyObjectDialog" />
      <seealso cref="EditArgs" />
      <seealso cref="&quot;Omitting Optional Parameters&quot;javascript:APILink('/InfoTopics/Optional_Parameters.htm')" />
      <seealso cref="PropertyObject" />
      <seealso cref="SequenceContext" />
      <seealso cref="SequenceContext.GetMultipleValues" />
      <seealso cref="SequenceFile.NewEditContext" />
      <seealso cref="Step" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.NewEditContext(NationalInstruments.TestStand.Interop.API.PropertyObject,System.Object,System.Object@)">
      <summary>Returns a SequenceContext object that approximates the sequence context TestStand creates when you run a sequence.</summary>
      <remarks>You can pass the object this method returns as a parameter to the Engine.DisplayBrowseExprDialogEx and Engine.DisplayBrowsePropertyObjectDialog methods.
When you pass an array of step references, this method returns a context with a Step property that represents multiple steps, where the subproperties of Step contain only properties common to all steps in the array. Use the context with SequenceContext.GetMultipleValues to determine whether an element of the property, such as the value, comment, format, or flags, represents the shared element value for all the steps in the array. If at least one step has a different value for an element, the property element in the context contains a default value.</remarks>
      <returns>A reference to a SequenceContext object. Release this reference when you are finished using it.</returns>
      <param name="obj">Specifies the object to initialize the sequence context. You can pass a sequence file, sequence, step, variable, or array of object references to steps.  This method sets the sequence context properties that correspond to the object you pass.</param>
      <param name="editArgsParam">Specifies an EditArgs object that indicates which items are currently selected in the user interface.</param>
      <param name="locationString">Returns the lookupString for the object passed in. Use this lookupString to access the object from the sequence context.  </param>
      <seealso cref="Engine.DisplayBrowseExprDialogEx" />
      <seealso cref="Engine.DisplayBrowsePropertyObjectDialog" />
      <seealso cref="EditArgs" />
      <seealso cref="&quot;Omitting Optional Parameters&quot;javascript:APILink('/InfoTopics/Optional_Parameters.htm')" />
      <seealso cref="PropertyObject" />
      <seealso cref="SequenceContext" />
      <seealso cref="SequenceContext.GetMultipleValues" />
      <seealso cref="SequenceFile.NewEditContext" />
      <seealso cref="Step" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.GetImageName(System.Int32)">
      <summary>Returns the name of the image at the specified index. Typically, the name includes a filename and the extension.</summary>
      <returns>The name of the image at the index.</returns>
      <param name="imageIndex">Specifies the image index. The image index must be less than the number of images in the image lists.</param>
      <seealso cref="Engine.AddImage" />
      <seealso cref="Engine.GetImageIndex" />
      <seealso cref="Engine.LargeImageListEx" />
      <seealso cref="Engine.NumImages" />
      <seealso cref="Engine.SmallImageListEx" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.GetImageName(System.Int32)">
      <summary>Returns the name of the image at the specified index. Typically, the name includes a filename and the extension.</summary>
      <returns>The name of the image at the index.</returns>
      <param name="imageIndex">Specifies the image index. The image index must be less than the number of images in the image lists.</param>
      <seealso cref="Engine.AddImage" />
      <seealso cref="Engine.GetImageIndex" />
      <seealso cref="Engine.LargeImageListEx" />
      <seealso cref="Engine.NumImages" />
      <seealso cref="Engine.SmallImageListEx" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.GetImageIndex(System.String)">
      <summary>Returns the index of the image with the specified name, which you can use to access the list of images returned from the Engine.LargeImageListEx and Engine.SmallImageListEx properties.</summary>
      <returns>The index of the image in both of the engine image lists. Returns <c>-1</c> if the image name is not found.</returns>
      <param name="imageName">Specifies the name of the image. Typically, the name includes a filename and the extension.</param>
      <seealso cref="Engine.AddImage" />
      <seealso cref="Engine.GetImageName" />
      <seealso cref="Engine.LargeImageListEx" />
      <seealso cref="Engine.NumImages" />
      <seealso cref="Engine.SmallImageListEx" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.GetImageIndex(System.String)">
      <summary>Returns the index of the image with the specified name, which you can use to access the list of images returned from the Engine.LargeImageListEx and Engine.SmallImageListEx properties.</summary>
      <returns>The index of the image in both of the engine image lists. Returns <c>-1</c> if the image name is not found.</returns>
      <param name="imageName">Specifies the name of the image. Typically, the name includes a filename and the extension.</param>
      <seealso cref="Engine.AddImage" />
      <seealso cref="Engine.GetImageName" />
      <seealso cref="Engine.LargeImageListEx" />
      <seealso cref="Engine.NumImages" />
      <seealso cref="Engine.SmallImageListEx" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.NumImages">
      <summary>Returns the number of images in the large and small image lists.</summary>
      <seealso cref="Engine.LargeImageListEx" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.NumImages">
      <summary>Returns the number of images in the large and small image lists.</summary>
      <seealso cref="Engine.LargeImageListEx" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.SeqFileVersionAutoIncrementOpt">
      <summary><para>Note: This property is obsolete. Use the StationOptions.SeqFileVersionAutoIncrementOpt property instead.</para></summary>
      <remarks>Specifies if sequence file versions are automatically incremented when the file is saved.</remarks>
      <seealso cref="StationOptions.SeqFileVersionAutoIncrementOpt" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.SeqFileVersionAutoIncrementOpt">
      <summary><para>Note: This property is obsolete. Use the StationOptions.SeqFileVersionAutoIncrementOpt property instead.</para></summary>
      <remarks>Specifies if sequence file versions are automatically incremented when the file is saved.</remarks>
      <seealso cref="StationOptions.SeqFileVersionAutoIncrementOpt" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.LoadTypePaletteFiles">
      <summary><para>Note: This method is obsolete. Use the Engine.LoadTypePaletteFilesEx method instead.</para></summary>
      <remarks>Loads the TestStand Engine list of type palette files. Type palette files contain step type and data type definitions. LoadTypePaletteFiles is the method the sequence editor and user interfaces call on the TestStand Engine to load these files when they launch. You can call this method outside of the sequence editor or a user interface if an instance of the TestStand Engine has been created and the type palette files need to be loaded.</remarks>
      <seealso cref="Engine.GetTypePaletteFileList" />
      <seealso cref="Engine.LoadTypePaletteFilesEx" />
      <seealso cref="Engine.SetTypePaletteFileList" />
      <seealso cref="Engine.UnloadTypePaletteFiles" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.LoadTypePaletteFiles">
      <summary><para>Note: This method is obsolete. Use the Engine.LoadTypePaletteFilesEx method instead.</para></summary>
      <remarks>Loads the TestStand Engine list of type palette files. Type palette files contain step type and data type definitions. LoadTypePaletteFiles is the method the sequence editor and user interfaces call on the TestStand Engine to load these files when they launch. You can call this method outside of the sequence editor or a user interface if an instance of the TestStand Engine has been created and the type palette files need to be loaded.</remarks>
      <seealso cref="Engine.GetTypePaletteFileList" />
      <seealso cref="Engine.LoadTypePaletteFilesEx" />
      <seealso cref="Engine.SetTypePaletteFileList" />
      <seealso cref="Engine.UnloadTypePaletteFiles" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.UnloadTypePaletteFiles">
      <summary>Unloads the TestStand Engine list of type palette files.</summary>
      <remarks>Type palette files contain step type and data type definitions. <c>UnloadTypePaletteFiles</c> is the method the sequence editor and user interfaces call on the TestStand Engine to unload these files when they exit. If the Engine.LoadTypePaletteFilesEx method was previously called, call this method to unload the type palette files.</remarks>
      <seealso cref="Engine.GetTypePaletteFileList" />
      <seealso cref="Engine.LoadTypePaletteFilesEx" />
      <seealso cref="Engine.SetTypePaletteFileList" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.UnloadTypePaletteFiles">
      <summary>Unloads the TestStand Engine list of type palette files.</summary>
      <remarks>Type palette files contain step type and data type definitions. <c>UnloadTypePaletteFiles</c> is the method the sequence editor and user interfaces call on the TestStand Engine to unload these files when they exit. If the Engine.LoadTypePaletteFilesEx method was previously called, call this method to unload the type palette files.</remarks>
      <seealso cref="Engine.GetTypePaletteFileList" />
      <seealso cref="Engine.LoadTypePaletteFilesEx" />
      <seealso cref="Engine.SetTypePaletteFileList" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.GetTypePaletteFileList">
      <summary>Returns the list of currently loaded type palette files in the TestStand Engine.</summary>
      <remarks>Type palette files contain step type and data type definitions. The TestStand Engine loads these files when the sequence editor and user interfaces launch.  Call this method to obtain the list of loaded type palettes.</remarks>
      <returns>An array of pointers to the PropertyObjectFile interfaces of the loaded type palette files.</returns>
      <seealso cref="Engine.LoadTypePaletteFilesEx" />
      <seealso cref="Engine.SetTypePaletteFileList" />
      <seealso cref="Engine.UnloadTypePaletteFiles" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.GetTypePaletteFileList">
      <summary>Returns the list of currently loaded type palette files in the TestStand Engine.</summary>
      <remarks>Type palette files contain step type and data type definitions. The TestStand Engine loads these files when the sequence editor and user interfaces launch.  Call this method to obtain the list of loaded type palettes.</remarks>
      <returns>An array of pointers to the PropertyObjectFile interfaces of the loaded type palette files.</returns>
      <seealso cref="Engine.LoadTypePaletteFilesEx" />
      <seealso cref="Engine.SetTypePaletteFileList" />
      <seealso cref="Engine.UnloadTypePaletteFiles" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.SetTypePaletteFileList(System.Object[])">
      <summary>Sets the list of currently loaded type palette files in the TestStand Engine.</summary>
      <remarks>Type palette files contain step type and data type definitions. The TestStand Engine loads these files when the sequence editor and user interfaces launch. Call this method to change the list of loaded type palettes. If the TestStand Engine already has type palette files loaded and they are not in the new list, TestStand unloads the files.</remarks>
      <param name="typePaletteFiles">Specifies an array of pointers to the PropertyObjectFile interfaces of the type palette files. Build the array by calling the Engine.NewPropertyObjectFile and PropertyObjectFile.ReadFile methods for each type palette.</param>
      <seealso cref="Engine.GetTypePaletteFileList" />
      <seealso cref="Engine.LoadTypePaletteFilesEx" />
      <seealso cref="Engine.NewPropertyObjectFile" />
      <seealso cref="Engine.UnloadTypePaletteFiles" />
      <seealso cref="PropertyObjectFile.ReadFile" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.SetTypePaletteFileList(System.Object[])">
      <summary>Sets the list of currently loaded type palette files in the TestStand Engine.</summary>
      <remarks>Type palette files contain step type and data type definitions. The TestStand Engine loads these files when the sequence editor and user interfaces launch. Call this method to change the list of loaded type palettes. If the TestStand Engine already has type palette files loaded and they are not in the new list, TestStand unloads the files.</remarks>
      <param name="typePaletteFiles">Specifies an array of pointers to the PropertyObjectFile interfaces of the type palette files. Build the array by calling the Engine.NewPropertyObjectFile and PropertyObjectFile.ReadFile methods for each type palette.</param>
      <seealso cref="Engine.GetTypePaletteFileList" />
      <seealso cref="Engine.LoadTypePaletteFilesEx" />
      <seealso cref="Engine.NewPropertyObjectFile" />
      <seealso cref="Engine.UnloadTypePaletteFiles" />
      <seealso cref="PropertyObjectFile.ReadFile" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.CopyPropertyObject(NationalInstruments.TestStand.Interop.API.PropertyObject)">
      <summary>Use this function to copy a PropertyObject object you receive from a remote execution to the local computer.</summary>
      <remarks>Some API functions, such as the PropertyObject.SetPropertyObject method, work only with objects created on the local computer.</remarks>
      <returns>New copy of the PropertyObject object created in the process space of the engine on which the method is called.</returns>
      <param name="srcObj">Specifies the property object from an external instance of the TestStand Engine (that is, another process or computer) you want to copy.</param>
      <seealso cref="PropertyObject" />
      <seealso cref="PropertyObject.Clone" />
      <seealso cref="PropertyObject.SetPropertyObject" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.CopyPropertyObject(NationalInstruments.TestStand.Interop.API.PropertyObject)">
      <summary>Use this function to copy a PropertyObject object you receive from a remote execution to the local computer.</summary>
      <remarks>Some API functions, such as the PropertyObject.SetPropertyObject method, work only with objects created on the local computer.</remarks>
      <returns>New copy of the PropertyObject object created in the process space of the engine on which the method is called.</returns>
      <param name="srcObj">Specifies the property object from an external instance of the TestStand Engine (that is, another process or computer) you want to copy.</param>
      <seealso cref="PropertyObject" />
      <seealso cref="PropertyObject.Clone" />
      <seealso cref="PropertyObject.SetPropertyObject" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.TemporaryGlobals">
      <summary>Creates and accesses global variables that you want to exist only for the current run of the TestStand Engine.</summary>
      <remarks>These globals differ from those you access with the Engine.Globals property in that TestStand never writes these globals to disk.</remarks>
      <seealso cref="Engine.Globals" />
      <seealso cref="Execution.RunTimeVariables" />
      <seealso cref="PropertyObject" />
      <seealso cref="Thread.RunTimeVariables" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.TemporaryGlobals">
      <summary>Creates and accesses global variables that you want to exist only for the current run of the TestStand Engine.</summary>
      <remarks>These globals differ from those you access with the Engine.Globals property in that TestStand never writes these globals to disk.</remarks>
      <seealso cref="Engine.Globals" />
      <seealso cref="Execution.RunTimeVariables" />
      <seealso cref="PropertyObject" />
      <seealso cref="Thread.RunTimeVariables" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.GetSyncManager(System.String)">
      <summary>Returns a top-level API for synchronizing with TestStand Synchronization objects.</summary>
      <remarks>The TestStand Synchronization Manager is the API the Synchronization step types use. The name of the Synchronization object passed to this function determines which Synchronization Manager to use&#8212;in process, out of process (used to share Synchronization objects between processes), or remote machine (used to share Synchronization objects across machines). Refer to the NI TestStand Synchronization type library for more information.</remarks>
      <returns>A pointer to the TestStand Synchronization Manager the Synchronization object name describes.</returns>
      <param name="syncObjectName">Specifies the name of the Synchronization object for which the Synchronization Manager is needed. When the Synchronization object begins with an '*' (for example, <c>*syncobjectname</c>) or a computer name such as <c>\\machinename\syncobjectname</c>, a Synchronization Manager object corresponding to the computer in question is returned.
When the Synchronization object name begins with an asterisk or computer name, you can use a <c>32</c> or <c>64</c> prefix to specify using 32- or 64-bit TestStand to host the out-of-process Synchronization object. For example, the name <c>64*syncobj</c> specifies a Synchronization object called <c>*syncobj</c> in the 64-bit TestStand host process, even when used from 32-bit TestStand. Use the prefix to share Synchronization objects between 32-bit TestStand and 64-bit TestStand in the same host process. If you do not use the prefix, 32-bit TestStand hosts out-of-process Synchronization objects in a 32-bit process, and 64-bit TestStand hosts out-of-process Synchronization objects in a 64-bit process.</param>
      <seealso cref="&quot;TestStand Synchronization Manager&quot;javascript:TSSyncServer('/RefTopics/SyncServerObjects.htm')" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.GetSyncManager(System.String)">
      <summary>Returns a top-level API for synchronizing with TestStand Synchronization objects.</summary>
      <remarks>The TestStand Synchronization Manager is the API the Synchronization step types use. The name of the Synchronization object passed to this function determines which Synchronization Manager to use&#8212;in process, out of process (used to share Synchronization objects between processes), or remote machine (used to share Synchronization objects across machines). Refer to the NI TestStand Synchronization type library for more information.</remarks>
      <returns>A pointer to the TestStand Synchronization Manager the Synchronization object name describes.</returns>
      <param name="syncObjectName">Specifies the name of the Synchronization object for which the Synchronization Manager is needed. When the Synchronization object begins with an '*' (for example, <c>*syncobjectname</c>) or a computer name such as <c>\\machinename\syncobjectname</c>, a Synchronization Manager object corresponding to the computer in question is returned.
When the Synchronization object name begins with an asterisk or computer name, you can use a <c>32</c> or <c>64</c> prefix to specify using 32- or 64-bit TestStand to host the out-of-process Synchronization object. For example, the name <c>64*syncobj</c> specifies a Synchronization object called <c>*syncobj</c> in the 64-bit TestStand host process, even when used from 32-bit TestStand. Use the prefix to share Synchronization objects between 32-bit TestStand and 64-bit TestStand in the same host process. If you do not use the prefix, 32-bit TestStand hosts out-of-process Synchronization objects in a 32-bit process, and 64-bit TestStand hosts out-of-process Synchronization objects in a 64-bit process.</param>
      <seealso cref="&quot;TestStand Synchronization Manager&quot;javascript:TSSyncServer('/RefTopics/SyncServerObjects.htm')" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.RTEOption">
      <summary><para>Note: This property is obsolete. Use the StationOptions.RTEOption property instead.</para></summary>
      <remarks>Specifies the default behavior of TestStand when a run-time error occurs in an execution.
<para>Note: This property replaces the more limited <c>BreakOnRTE</c> property and offers a superset of the functionality.</para></remarks>
      <seealso cref="Execution.RTEOptionForThisExecution" />
      <seealso cref="&quot;Run-Time Error dialog box&quot;javascript:RefLink('/InfoTopics/DB_Run_Time_Error.htm')" />
      <seealso cref="StationOptions.RTEOption" />
      <seealso cref="Thread.SetBatchRTEOption" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.RTEOption">
      <summary><para>Note: This property is obsolete. Use the StationOptions.RTEOption property instead.</para></summary>
      <remarks>Specifies the default behavior of TestStand when a run-time error occurs in an execution.
<para>Note: This property replaces the more limited <c>BreakOnRTE</c> property and offers a superset of the functionality.</para></remarks>
      <seealso cref="Execution.RTEOptionForThisExecution" />
      <seealso cref="&quot;Run-Time Error dialog box&quot;javascript:RefLink('/InfoTopics/DB_Run_Time_Error.htm')" />
      <seealso cref="StationOptions.RTEOption" />
      <seealso cref="Thread.SetBatchRTEOption" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.NewHierarchicalExecution(System.Object[],System.Int32,NationalInstruments.TestStand.Interop.API.SequenceFile,System.String,NationalInstruments.TestStand.Interop.API.SequenceFile,System.Boolean,System.Int32,System.Object,System.Object,System.Object)">
      <summary>Creates and returns a new Execution object.</summary>
      <remarks>Use a hierarchical execution to specify a call stack of Sequence Call steps that only execute the setup and Cleanup steps of sequences in the call stack while continuing normal execution in the sequence that the last Sequence Call step specifies.
To specify the call stack to create, pass an array of Sequence Call steps to the sequenceCallSteps parameter. When the hierarchical execution starts, TestStand executes the sequence the sequenceName parameter specifies, just as TestStand does when you call the Engine.NewExecution method. When the execution reaches the sequence that contains the first Sequence Call step the sequenceCallSteps parameter specifies, the execution follows the execution path the array of Sequence Call steps defines. The execution does not execute any of the Main steps in the sequences of the call stack, but the hierarchicalExecutionFlags parameter specifies whether the execution executes the setup and Cleanup steps in the sequences of the call stack. Execution resumes normally in the sequence that the last Sequence Call step in the array calls. Even though the steps in the Main step group of the sequences that contain the Sequence Call steps do not execute, local variables propagate normally according to their propagation settings.</remarks>
      <param name="sequenceCallSteps">Specifies an array of Sequence Call steps. The array represents a call stack to recreate. The execution does not execute any of the main steps in the sequences of the call stack, but the hierarchicalExecutionFlags parameter specifies whether the execution executes the setup and cleanup steps in the sequences of the call stack. Except for the first step, each step in the array is a step that resides in the sequence the previous step in the array calls.</param>
      <param name="hierarchicalExecutionFlags">Pass <c>0</c> for the default behavior or pass one or more HierarchicalExecutionFlags constants. Use the bitwise-OR operator to pass multiple constants.</param>
      <param name="sequenceFileParam">Specifies the SequenceFile object that contains the sequence to execute. If the execution uses a process model, pass the client SequenceFile object.</param>
      <param name="sequenceNameParam">Specifies the name of the sequence or Process Model entry point to execute.</param>
      <param name="processModelParam">Pass the process model SequenceFile object if you want to execute a Process Model entry point. Otherwise, a <c>NULL</c> object reference in LabVIEW, <c>0</c> in LabWindows/CVI, or the <c>Nothing</c> keyword in Visual Basic, pass a <c>NULL</c> dispatch pointer in Microsoft Foundation Classes.</param>
      <param name="breakAtFirstStep">Pass <c>True</c> to suspend execution before executing the first step.</param>
      <param name="executionTypeMaskParam">Pass <c>0</c> for the default behavior or pass one or more ExecutionTypeMask constants. Use the bitwise-OR operator to pass multiple constants.</param>
      <param name="sequenceArgsParam">Specifies a PropertyObject object that contains the arguments to the sequence you want to execute. Each subproperty of the PropertyObject object represents a parameter to the sequence. The subproperties must appear in the same order as the sequence parameters.</param>
      <param name="editArgsParam">Specifies an EditArgs object that indicates which items are currently selected in the user interface. This is required only for Process Model entry points.</param>
      <param name="InteractiveArgsParam">Specifies an InteractiveArgs object that indicates which steps are currently selected in the user interface and contains looping information necessary for an interactive execution. Pass this parameter for interactive executions only.</param>
      <seealso cref="EditArgs" />
      <seealso cref="Engine.NewEditArgs" />
      <seealso cref="Engine.NewExecution" />
      <seealso cref="Engine.NewInteractiveArgs" />
      <seealso cref="Execution" />
      <seealso cref="ExecutionTypeMask" />
      <seealso cref="HierarchicalExecutionFlags" />
      <seealso cref="InteractiveArgs" />
      <seealso cref="&quot;Omitting Optional Parameters&quot;javascript:APILink('/InfoTopics/Optional_Parameters.htm')" />
      <seealso cref="SequenceFile" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.NewHierarchicalExecution(System.Object[],System.Int32,NationalInstruments.TestStand.Interop.API.SequenceFile,System.String,NationalInstruments.TestStand.Interop.API.SequenceFile,System.Boolean,System.Int32,System.Object,System.Object,System.Object)">
      <summary>Creates and returns a new Execution object.</summary>
      <remarks>Use a hierarchical execution to specify a call stack of Sequence Call steps that only execute the setup and Cleanup steps of sequences in the call stack while continuing normal execution in the sequence that the last Sequence Call step specifies.
To specify the call stack to create, pass an array of Sequence Call steps to the sequenceCallSteps parameter. When the hierarchical execution starts, TestStand executes the sequence the sequenceName parameter specifies, just as TestStand does when you call the Engine.NewExecution method. When the execution reaches the sequence that contains the first Sequence Call step the sequenceCallSteps parameter specifies, the execution follows the execution path the array of Sequence Call steps defines. The execution does not execute any of the Main steps in the sequences of the call stack, but the hierarchicalExecutionFlags parameter specifies whether the execution executes the setup and Cleanup steps in the sequences of the call stack. Execution resumes normally in the sequence that the last Sequence Call step in the array calls. Even though the steps in the Main step group of the sequences that contain the Sequence Call steps do not execute, local variables propagate normally according to their propagation settings.</remarks>
      <param name="sequenceCallSteps">Specifies an array of Sequence Call steps. The array represents a call stack to recreate. The execution does not execute any of the main steps in the sequences of the call stack, but the hierarchicalExecutionFlags parameter specifies whether the execution executes the setup and cleanup steps in the sequences of the call stack. Except for the first step, each step in the array is a step that resides in the sequence the previous step in the array calls.</param>
      <param name="hierarchicalExecutionFlags">Pass <c>0</c> for the default behavior or pass one or more HierarchicalExecutionFlags constants. Use the bitwise-OR operator to pass multiple constants.</param>
      <param name="sequenceFileParam">Specifies the SequenceFile object that contains the sequence to execute. If the execution uses a process model, pass the client SequenceFile object.</param>
      <param name="sequenceNameParam">Specifies the name of the sequence or Process Model entry point to execute.</param>
      <param name="processModelParam">Pass the process model SequenceFile object if you want to execute a Process Model entry point. Otherwise, a <c>NULL</c> object reference in LabVIEW, <c>0</c> in LabWindows/CVI, or the <c>Nothing</c> keyword in Visual Basic, pass a <c>NULL</c> dispatch pointer in Microsoft Foundation Classes.</param>
      <param name="breakAtFirstStep">Pass <c>True</c> to suspend execution before executing the first step.</param>
      <param name="executionTypeMaskParam">Pass <c>0</c> for the default behavior or pass one or more ExecutionTypeMask constants. Use the bitwise-OR operator to pass multiple constants.</param>
      <param name="sequenceArgsParam">Specifies a PropertyObject object that contains the arguments to the sequence you want to execute. Each subproperty of the PropertyObject object represents a parameter to the sequence. The subproperties must appear in the same order as the sequence parameters.</param>
      <param name="editArgsParam">Specifies an EditArgs object that indicates which items are currently selected in the user interface. This is required only for Process Model entry points.</param>
      <param name="InteractiveArgsParam">Specifies an InteractiveArgs object that indicates which steps are currently selected in the user interface and contains looping information necessary for an interactive execution. Pass this parameter for interactive executions only.</param>
      <seealso cref="EditArgs" />
      <seealso cref="Engine.NewEditArgs" />
      <seealso cref="Engine.NewExecution" />
      <seealso cref="Engine.NewInteractiveArgs" />
      <seealso cref="Execution" />
      <seealso cref="ExecutionTypeMask" />
      <seealso cref="HierarchicalExecutionFlags" />
      <seealso cref="InteractiveArgs" />
      <seealso cref="&quot;Omitting Optional Parameters&quot;javascript:APILink('/InfoTopics/Optional_Parameters.htm')" />
      <seealso cref="SequenceFile" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.ProfilerInputOutputCaptureMaximumTextLength">
      <summary>Specifies the maximum text size per row of the Module Inputs and Outputs column on the Operations table. </summary>
      <remarks>This property is the programmatic interface to the Limit Module Input/Output Text Length numeric control on the Configure Data Collection dialog box. A value of <c>-1</c> indicates no limit.</remarks>
      <seealso cref="&quot;Configure Data Collection Dialog Box&quot;javascript:RefLink('/InfoTopics/Resource_Usage_Profiler_Configure_Data_Collection_DialogBox.html')" />
      <seealso cref="&quot;Operations Table&quot;javascript:RefLink('/InfoTopics/Resource_Usage_Profiler_Operations_Table.htm')" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.ProfilerInputOutputCaptureMaximumTextLength">
      <summary>Specifies the maximum text size per row of the Module Inputs and Outputs column on the Operations table. </summary>
      <remarks>This property is the programmatic interface to the Limit Module Input/Output Text Length numeric control on the Configure Data Collection dialog box. A value of <c>-1</c> indicates no limit.</remarks>
      <seealso cref="&quot;Configure Data Collection Dialog Box&quot;javascript:RefLink('/InfoTopics/Resource_Usage_Profiler_Configure_Data_Collection_DialogBox.html')" />
      <seealso cref="&quot;Operations Table&quot;javascript:RefLink('/InfoTopics/Resource_Usage_Profiler_Operations_Table.htm')" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.SecondsSince1970UniversalCoordinatedTime">
      <summary>Returns the time in seconds since midnight (00:00:00), January 1, 1970, coordinated universal time (UTC). UTC is also known as Greenwich mean time.

</summary>
      <seealso cref="Engine.SecondsSinceStart" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.SecondsSince1970UniversalCoordinatedTime">
      <summary>Returns the time in seconds since midnight (00:00:00), January 1, 1970, coordinated universal time (UTC). UTC is also known as Greenwich mean time.

</summary>
      <seealso cref="Engine.SecondsSinceStart" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.DisplayEditNumericFormatDialog(System.String,System.String@,System.Int32,System.Double)">
      <summary><para>Note: This method is obsolete. Use the PropertyObject.DisplayEditNumericFormatDialog method instead.</para>
</summary>
      <remarks>Launches a dialog box in which you can edit a numeric format string used to display numbers. </remarks>
      <returns>Returns <c>True</c> if you click OK in the dialog box. Returns <c>False</c> if you click Cancel.</returns>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.</param>
      <param name="numericFormat">The numeric format string to edit. Enable <c>EditNumFormat_AllowDefaultFormat</c> if you want to pass an empty string.</param>
      <param name="dlgOptions">Specifies any combination of the EditNumericFormatOptions constants.</param>
      <param name="sampleNumber">Specifies a number to format initially in the dialog box. </param>
      <seealso cref="EditNumericFormatOptions" />
      <seealso cref="PropertyObject.DisplayEditNumericFormatDialog" />
      <seealso cref="PropertyObject.GetFormattedValue" />
      <seealso cref="PropertyObject.NumericFormat" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.DisplayEditNumericFormatDialog(System.String,System.String@,System.Int32,System.Double)">
      <summary><para>Note: This method is obsolete. Use the PropertyObject.DisplayEditNumericFormatDialog method instead.</para>
</summary>
      <remarks>Launches a dialog box in which you can edit a numeric format string used to display numbers. </remarks>
      <returns>Returns <c>True</c> if you click OK in the dialog box. Returns <c>False</c> if you click Cancel.</returns>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.</param>
      <param name="numericFormat">The numeric format string to edit. Enable <c>EditNumFormat_AllowDefaultFormat</c> if you want to pass an empty string.</param>
      <param name="dlgOptions">Specifies any combination of the EditNumericFormatOptions constants.</param>
      <param name="sampleNumber">Specifies a number to format initially in the dialog box. </param>
      <seealso cref="EditNumericFormatOptions" />
      <seealso cref="PropertyObject.DisplayEditNumericFormatDialog" />
      <seealso cref="PropertyObject.GetFormattedValue" />
      <seealso cref="PropertyObject.NumericFormat" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.GetInsertVariableMenuStructure(NationalInstruments.TestStand.Interop.API.PropertyObjectFile,System.Int32)">
      <summary>Creates a PropertyObject object that specifies the structure of the menu used to insert named data type variables in the sequence editor.</summary>
      <remarks>The sequence editor uses this method to create the Types submenu that appears when you select Insert Local, Insert Global, or Insert Parameter from the context menu. Refer to MenuItemProperties for a description of this property object.</remarks>
      <returns>The object that specifies the menu structure.</returns>
      <param name="selectedFile">Specifies the currently selected file. The method includes the step types defined in this file as well as the step types located in the type palette. Pass <c>0</c> or <c>NULL</c> if there is no selected file.</param>
      <param name="hiddenFlags">Pass a set of PropertyFlags that specify which step types are not included in the menu. For example, pass <c>PropFlags_Hidden</c> to exclude the hidden step types.</param>
      <seealso cref="Engine.GetEditTimeToolMenuItems" />
      <seealso cref="Engine.GetInsertStepMenuStructure" />
      <seealso cref="Engine.GetRunTimeToolMenuItems" />
      <seealso cref="MenuItemProperties" />
      <seealso cref="PropertyFlags" />
      <seealso cref="PropertyObject" />
      <seealso cref="PropertyObjectFile" />
      <seealso cref="Step.GetEditSubstepMenuStructure" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.GetInsertVariableMenuStructure(NationalInstruments.TestStand.Interop.API.PropertyObjectFile,System.Int32)">
      <summary>Creates a PropertyObject object that specifies the structure of the menu used to insert named data type variables in the sequence editor.</summary>
      <remarks>The sequence editor uses this method to create the Types submenu that appears when you select Insert Local, Insert Global, or Insert Parameter from the context menu. Refer to MenuItemProperties for a description of this property object.</remarks>
      <returns>The object that specifies the menu structure.</returns>
      <param name="selectedFile">Specifies the currently selected file. The method includes the step types defined in this file as well as the step types located in the type palette. Pass <c>0</c> or <c>NULL</c> if there is no selected file.</param>
      <param name="hiddenFlags">Pass a set of PropertyFlags that specify which step types are not included in the menu. For example, pass <c>PropFlags_Hidden</c> to exclude the hidden step types.</param>
      <seealso cref="Engine.GetEditTimeToolMenuItems" />
      <seealso cref="Engine.GetInsertStepMenuStructure" />
      <seealso cref="Engine.GetRunTimeToolMenuItems" />
      <seealso cref="MenuItemProperties" />
      <seealso cref="PropertyFlags" />
      <seealso cref="PropertyObject" />
      <seealso cref="PropertyObjectFile" />
      <seealso cref="Step.GetEditSubstepMenuStructure" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.StationModelSequenceFilePath">
      <summary><para>Note: This property is obsolete. Use the StationOptions.StationModelSequenceFilePath property instead.</para></summary>
      <remarks>Specifies the pathname of the station model sequence file.
<para>Note: This property is a relative pathname. TestStand uses the Engine.FindFileEx method to determine the absolute pathname of the station model sequence file.</para></remarks>
      <seealso cref="Engine.FindFileEx" />
      <seealso cref="StationOptions.StationModelSequenceFilePath" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.StationModelSequenceFilePath">
      <summary><para>Note: This property is obsolete. Use the StationOptions.StationModelSequenceFilePath property instead.</para></summary>
      <remarks>Specifies the pathname of the station model sequence file.
<para>Note: This property is a relative pathname. TestStand uses the Engine.FindFileEx method to determine the absolute pathname of the station model sequence file.</para></remarks>
      <seealso cref="Engine.FindFileEx" />
      <seealso cref="StationOptions.StationModelSequenceFilePath" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.IsCurrentSequenceFileVersion(System.String)">
      <summary>Determines whether the TestStand Engine that saved the specified sequence file is the current version, an older version, or a newer version.</summary>
      <remarks>The method returns one of the following values:
<para><para>&#160;&#160;&#160;&#160;* <c>-1</c> if an older version of the TestStand Engine created the sequence file.</para><para>&#160;&#160;&#160;&#160;* <c>0</c> if the currently active version of the TestStand Engine created the sequence file.</para><para>&#160;&#160;&#160;&#160;* <c>1</c> if a newer version of the TestStand Engine created the sequence file.</para></para>
You can use this method in a sequence editor application that prompts the user before overwriting a sequence file saved in an older format.</remarks>
      <param name="FilePath">Specifies the absolute pathname of the file.</param>
      <seealso cref="Engine.MajorVersion" />
      <seealso cref="Engine.MinorVersion" />
      <seealso cref="Engine.RevisionVersion" />
      <seealso cref="Engine.VersionString" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.IsCurrentSequenceFileVersion(System.String)">
      <summary>Determines whether the TestStand Engine that saved the specified sequence file is the current version, an older version, or a newer version.</summary>
      <remarks>The method returns one of the following values:
<para><para>&#160;&#160;&#160;&#160;* <c>-1</c> if an older version of the TestStand Engine created the sequence file.</para><para>&#160;&#160;&#160;&#160;* <c>0</c> if the currently active version of the TestStand Engine created the sequence file.</para><para>&#160;&#160;&#160;&#160;* <c>1</c> if a newer version of the TestStand Engine created the sequence file.</para></para>
You can use this method in a sequence editor application that prompts the user before overwriting a sequence file saved in an older format.</remarks>
      <param name="FilePath">Specifies the absolute pathname of the file.</param>
      <seealso cref="Engine.MajorVersion" />
      <seealso cref="Engine.MinorVersion" />
      <seealso cref="Engine.RevisionVersion" />
      <seealso cref="Engine.VersionString" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.NotifyStartOfModalDialogEx(NationalInstruments.TestStand.Interop.API.SequenceContext,System.Boolean@)">
      <summary>Notifies TestStand that you are about to launch a modal dialog box.
<para>Note: If you call the <c>Engine.NotifyStartOfModalDialogEx</c> method, you must also call the Engine.NotifyEndOfModalDialog method when the dialog box closes or subsequent calls to the <c>Engine.NotifyStartOfModalDialogEx</c> method will block, potentially hanging TestStand.</para> </summary>
      <remarks>This method returns a modalID, which you pass to the <c>Engine.NotifyEndOfModalDialog</c> method when the dialog box is closed. TestStand uses this notification to determine when to disable the main window of the application and to enforce the modality of the dialog box.
(Platform: LabVIEW modal dialog box)
Call <c>Start Modal Dialog.vi</c> and <c>End Modal Dialog.vi</c> in <c>TestStand.llb</c> instead of the <c>Engine.NotifyStartOfModalDialogEx</c> and <c>Engine.NotifyEndOfModalDialog</c> methods.
(Platform: LabWindows/CVI modal dialog box)
Call <c>TS_EndModalDialog</c> or <c>TS_StartModalDialogEx</c> in <c>&lt;TestStand&gt;\API\CVI\tsutil.fp</c> instead of the <c>Engine.NotifyStartOfModalDialogEx</c> and <c>Engine.NotifyEndOfModalDialog</c> methods.
<para>Note: Do not call this method when launching a dialog box that the TestStand API implements.</para>
<para>Note: This method differs from the <c>Engine.NotifyStartOfModalDialog</c> method in that if multiple threads call into this method at the same time, only the first thread proceeds. The rest block until the first thread calls the  Engine.NotifyEndOfModalDialog method, at which point the next thread proceeds. Thus, TestStand launches modal dialog boxes one at a time using this method. To use this method, you must launch the dialog box within the step of an execution and you must pass the sequence context of the step to this method.<br/><br/>In certain environments, dialog boxes might take a parameter that is a parent window handle. For this situation, call this method before creating the dialog box, treat the return value as a window handle, and pass the return value as the handle for the parent window. For environments such as Microsoft Visual Basic, in which setting the parent window handle of dialog boxes is difficult, use the Engine.RegisterModalWindow method instead.</para></remarks>
      <returns>Returns the modalID to pass to the Engine.NotifyEndOfModalDialog method when the dialog box no longer appears onscreen.</returns>
      <param name="sequenceContextParam">Specifies the sequence context of the step launching the modal dialog box. You can also pass a <c>NULL</c> reference but doing so loses the added functionality of this method.</param>
      <param name="shouldAbort">Returns <c>True</c> when the user terminates or aborts the corresponding execution for the sequence context parameter you passed while you were blocked inside this method call. The step skips launching the dialog box and returns as soon as possible. You can call the Engine.NotifyEndOfModalDialog method in this case, though it is not necessary. If you are using the CVI <c>TS_StartModalDialogEx</c> function, always call the corresponding <c>TS_EndModalDialog</c> function. Similarly, if you are using <c>Start Modal Dialog.vi</c> in LabVIEW, always call <c>End Modal Dialog.vi</c>.</param>
      <seealso cref="Engine.NotifyEndOfModalDialog" />
      <seealso cref="Engine.NotifyStartOfModalDialogEx" />
      <seealso cref="Engine.RegisterModalWindow" />
      <seealso cref="Engine.UnregisterModalWindow" />
      <seealso cref="SequenceContext" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.NotifyStartOfModalDialogEx(NationalInstruments.TestStand.Interop.API.SequenceContext,System.Boolean@)">
      <summary>Notifies TestStand that you are about to launch a modal dialog box.
<para>Note: If you call the <c>Engine.NotifyStartOfModalDialogEx</c> method, you must also call the Engine.NotifyEndOfModalDialog method when the dialog box closes or subsequent calls to the <c>Engine.NotifyStartOfModalDialogEx</c> method will block, potentially hanging TestStand.</para> </summary>
      <remarks>This method returns a modalID, which you pass to the <c>Engine.NotifyEndOfModalDialog</c> method when the dialog box is closed. TestStand uses this notification to determine when to disable the main window of the application and to enforce the modality of the dialog box.
(Platform: LabVIEW modal dialog box)
Call <c>Start Modal Dialog.vi</c> and <c>End Modal Dialog.vi</c> in <c>TestStand.llb</c> instead of the <c>Engine.NotifyStartOfModalDialogEx</c> and <c>Engine.NotifyEndOfModalDialog</c> methods.
(Platform: LabWindows/CVI modal dialog box)
Call <c>TS_EndModalDialog</c> or <c>TS_StartModalDialogEx</c> in <c>&lt;TestStand&gt;\API\CVI\tsutil.fp</c> instead of the <c>Engine.NotifyStartOfModalDialogEx</c> and <c>Engine.NotifyEndOfModalDialog</c> methods.
<para>Note: Do not call this method when launching a dialog box that the TestStand API implements.</para>
<para>Note: This method differs from the <c>Engine.NotifyStartOfModalDialog</c> method in that if multiple threads call into this method at the same time, only the first thread proceeds. The rest block until the first thread calls the  Engine.NotifyEndOfModalDialog method, at which point the next thread proceeds. Thus, TestStand launches modal dialog boxes one at a time using this method. To use this method, you must launch the dialog box within the step of an execution and you must pass the sequence context of the step to this method.<br/><br/>In certain environments, dialog boxes might take a parameter that is a parent window handle. For this situation, call this method before creating the dialog box, treat the return value as a window handle, and pass the return value as the handle for the parent window. For environments such as Microsoft Visual Basic, in which setting the parent window handle of dialog boxes is difficult, use the Engine.RegisterModalWindow method instead.</para></remarks>
      <returns>Returns the modalID to pass to the Engine.NotifyEndOfModalDialog method when the dialog box no longer appears onscreen.</returns>
      <param name="sequenceContextParam">Specifies the sequence context of the step launching the modal dialog box. You can also pass a <c>NULL</c> reference but doing so loses the added functionality of this method.</param>
      <param name="shouldAbort">Returns <c>True</c> when the user terminates or aborts the corresponding execution for the sequence context parameter you passed while you were blocked inside this method call. The step skips launching the dialog box and returns as soon as possible. You can call the Engine.NotifyEndOfModalDialog method in this case, though it is not necessary. If you are using the CVI <c>TS_StartModalDialogEx</c> function, always call the corresponding <c>TS_EndModalDialog</c> function. Similarly, if you are using <c>Start Modal Dialog.vi</c> in LabVIEW, always call <c>End Modal Dialog.vi</c>.</param>
      <seealso cref="Engine.NotifyEndOfModalDialog" />
      <seealso cref="Engine.NotifyStartOfModalDialogEx" />
      <seealso cref="Engine.RegisterModalWindow" />
      <seealso cref="Engine.UnregisterModalWindow" />
      <seealso cref="SequenceContext" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.UserFilePath">
      <summary><para>Note: This property is obsolete. Use the StationOptions.UserFilePath property instead.</para></summary>
      <remarks>Specifies the location of the current user manager file.
Changes to this property do not take effect until you restart the TestStand Engine.</remarks>
      <seealso cref="Engine.CurrentUserHasPrivilege" />
      <seealso cref="StationOptions.AutoLoginSystemUser" />
      <seealso cref="StationOptions.EnableUserPrivilegeChecking" />
      <seealso cref="StationOptions.RequireUserLogin" />
      <seealso cref="StationOptions.UserFilePath" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.UserFilePath">
      <summary><para>Note: This property is obsolete. Use the StationOptions.UserFilePath property instead.</para></summary>
      <remarks>Specifies the location of the current user manager file.
Changes to this property do not take effect until you restart the TestStand Engine.</remarks>
      <seealso cref="Engine.CurrentUserHasPrivilege" />
      <seealso cref="StationOptions.AutoLoginSystemUser" />
      <seealso cref="StationOptions.EnableUserPrivilegeChecking" />
      <seealso cref="StationOptions.RequireUserLogin" />
      <seealso cref="StationOptions.UserFilePath" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.DisplayHelpTopic(System.Int32,System.String,System.String,System.String,System.String,System.String)">
      <summary>Opens to a topic in a HTML Help file using a help ID.</summary>
      <remarks>Uses the assigned help ID to open the compiled help file (<c>.chm</c>) to a particular topic. If any of the following parameters are specified&#8212;tableOfContentsFile, indexFile, or homeFile&#8212;then all three are used to build the HTML Help window. If none of these parameters are specified, the information stored in the help file is used to build the HTML Help window.
To ensure proper navigation within the opened help file, National Instruments recommends that all three parameters&#8212;tableOfContentsFile, indexFile, and homeFile&#8212;be specified together.
To specify that a file is within a CHM, use the following syntax: 
<para><code>CHMFileName.chm::\\FileName.xxx</code></para></remarks>
      <returns>Returns the window handle of the created help window.</returns>
      <param name="tagID">Specifies the help ID of the help topic within the compiled help file to open. The help file author associates help IDs with topic files.
Pass <c>0</c> to open the help file to the default topic.</param>
      <param name="helpFile">Specifies the name of the HTML help file to open. Include the absolute path of the help file and the extension. If you do not specify a help file, TestStand uses the NI TestStand Help.</param>
      <param name="tableOfContentsFile">Specifies the name of the table of contents file to use with the help file. Include the absolute path of the table of contents file along with the extension.</param>
      <param name="indexFile">Specifies the name of the index file to use with the help file. Include the absolute path of the index file along with the extension.</param>
      <param name="homeFile">Specifies the name of the default topic to display for the help file. Include the absolute path of the default topic along with the extension.</param>
      <param name="windowCaption">Specifies the help window caption to display. This parameter is ignored unless a table of contents file, an index file, or a default topic file is specified. If none of these files are specified, the help window caption is the caption the author of the help file specifies. If you specify a contents file or an index file but do not specify this parameter, the window caption defaults to <c>NI TestStand Help</c>.</param>
      <seealso cref="Engine.DisplayHelpFile" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.DisplayHelpTopic(System.Int32,System.String,System.String,System.String,System.String,System.String)">
      <summary>Opens to a topic in a HTML Help file using a help ID.</summary>
      <remarks>Uses the assigned help ID to open the compiled help file (<c>.chm</c>) to a particular topic. If any of the following parameters are specified&#8212;tableOfContentsFile, indexFile, or homeFile&#8212;then all three are used to build the HTML Help window. If none of these parameters are specified, the information stored in the help file is used to build the HTML Help window.
To ensure proper navigation within the opened help file, National Instruments recommends that all three parameters&#8212;tableOfContentsFile, indexFile, and homeFile&#8212;be specified together.
To specify that a file is within a CHM, use the following syntax: 
<para><code>CHMFileName.chm::\\FileName.xxx</code></para></remarks>
      <returns>Returns the window handle of the created help window.</returns>
      <param name="tagID">Specifies the help ID of the help topic within the compiled help file to open. The help file author associates help IDs with topic files.
Pass <c>0</c> to open the help file to the default topic.</param>
      <param name="helpFile">Specifies the name of the HTML help file to open. Include the absolute path of the help file and the extension. If you do not specify a help file, TestStand uses the NI TestStand Help.</param>
      <param name="tableOfContentsFile">Specifies the name of the table of contents file to use with the help file. Include the absolute path of the table of contents file along with the extension.</param>
      <param name="indexFile">Specifies the name of the index file to use with the help file. Include the absolute path of the index file along with the extension.</param>
      <param name="homeFile">Specifies the name of the default topic to display for the help file. Include the absolute path of the default topic along with the extension.</param>
      <param name="windowCaption">Specifies the help window caption to display. This parameter is ignored unless a table of contents file, an index file, or a default topic file is specified. If none of these files are specified, the help window caption is the caption the author of the help file specifies. If you specify a contents file or an index file but do not specify this parameter, the window caption defaults to <c>NI TestStand Help</c>.</param>
      <seealso cref="Engine.DisplayHelpFile" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.DisplayBreakpointDialog(System.String,NationalInstruments.TestStand.Interop.API.SequenceContext,NationalInstruments.TestStand.Interop.API.Execution,NationalInstruments.TestStand.Interop.API.Step,NationalInstruments.TestStand.Interop.API.StepGroups,System.Int32)">
      <summary>Launches the Breakpoint Settings dialog box, in which you edit the breakpoint settings of a step or the End marker after the last step in a step group.</summary>
      <remarks>Breakpoint settings for a particular execution apply only to that execution. Editing a breakpoint for a step in a sequence file overrides and breakpoint setting on the corresponding step in a running execution.</remarks>
      <returns>Returns <c>True</c> if you click OK. Otherwise, returns <c>False</c>.</returns>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.</param>
      <param name="sequenceContextParam">Specifies the sequence context the dialog box uses to evaluate expressions specified for a conditional breakpoint. You can use the Engine.NewEditContext method to obtain an edit-time sequence context for the step or sequence file you are editing.</param>
      <param name="executionParam">If you want to set the breakpoint state for a particular execution only, specify a reference to an Execution object. Breakpoints set for a particular execution only apply to that execution and are lost when the Execution object is destroyed, or when you set the breakpoint state for the step by calling this method without passing an execution.</param>
      <param name="selectedStep">Specifies a reference to a Step object to specify which breakpoint to configure. Pass <c>NULL</c> to configure a breakpoint on the End marker after the last step in a step group. If you pass <c>NULL</c>, you must specify a value for the whichSteps parameter.</param>
      <param name="stepGroupParam">When the selectedStep parameter is <c>NULL</c>, whichSteps specifies a particular step group that specifies the End marker.</param>
      <param name="dlgOptions">Specifies any combination of the CommonDialogOptions constants. </param>
      <seealso cref="&quot;Breakpoint Settings dialog box&quot;javascript:RefLink('/InfoTopics/DB_Break_Settings.htm')" />
      <seealso cref="CommonDialogOptions" />
      <seealso cref="Engine.NewEditContext" />
      <seealso cref="Execution" />
      <seealso cref="SequenceContext" />
      <seealso cref="Step" />
      <seealso cref="StepGroups" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.DisplayBreakpointDialog(System.String,NationalInstruments.TestStand.Interop.API.SequenceContext,NationalInstruments.TestStand.Interop.API.Execution,NationalInstruments.TestStand.Interop.API.Step,NationalInstruments.TestStand.Interop.API.StepGroups,System.Int32)">
      <summary>Launches the Breakpoint Settings dialog box, in which you edit the breakpoint settings of a step or the End marker after the last step in a step group.</summary>
      <remarks>Breakpoint settings for a particular execution apply only to that execution. Editing a breakpoint for a step in a sequence file overrides and breakpoint setting on the corresponding step in a running execution.</remarks>
      <returns>Returns <c>True</c> if you click OK. Otherwise, returns <c>False</c>.</returns>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.</param>
      <param name="sequenceContextParam">Specifies the sequence context the dialog box uses to evaluate expressions specified for a conditional breakpoint. You can use the Engine.NewEditContext method to obtain an edit-time sequence context for the step or sequence file you are editing.</param>
      <param name="executionParam">If you want to set the breakpoint state for a particular execution only, specify a reference to an Execution object. Breakpoints set for a particular execution only apply to that execution and are lost when the Execution object is destroyed, or when you set the breakpoint state for the step by calling this method without passing an execution.</param>
      <param name="selectedStep">Specifies a reference to a Step object to specify which breakpoint to configure. Pass <c>NULL</c> to configure a breakpoint on the End marker after the last step in a step group. If you pass <c>NULL</c>, you must specify a value for the whichSteps parameter.</param>
      <param name="stepGroupParam">When the selectedStep parameter is <c>NULL</c>, whichSteps specifies a particular step group that specifies the End marker.</param>
      <param name="dlgOptions">Specifies any combination of the CommonDialogOptions constants. </param>
      <seealso cref="&quot;Breakpoint Settings dialog box&quot;javascript:RefLink('/InfoTopics/DB_Break_Settings.htm')" />
      <seealso cref="CommonDialogOptions" />
      <seealso cref="Engine.NewEditContext" />
      <seealso cref="Execution" />
      <seealso cref="SequenceContext" />
      <seealso cref="Step" />
      <seealso cref="StepGroups" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.SearchFiles(System.String,System.Int32,System.Int32,System.Int32,System.String[],System.String[],System.String[],System.Object[],System.String[])">
      <summary>Begin a new find in files search.</summary>
      <remarks>Returns a SearchResults object that is a handle to the asynchronous search already in progress. To wait for the search to complete, call the SearchResults.IsComplete method.</remarks>
      <returns>A SearchResults object.</returns>
      <param name="searchString">Pass the string or regular expression for which to search. To use regular expressions, you must specify SearchOptions_RegExpr for the searchOptions parameter.</param>
      <param name="searchOptions">Pass one or more SearchOptions constants. Use the bitwise-OR operator to specify multiple search options.</param>
      <param name="filterOptions">Pass one or more SearchFilterOptions constants. Use the bitwise-OR operator to specify multiple search filter options.</param>
      <param name="elementsToSearch">Pass one or more SearchElements constants. Use the bitwise-OR operator to specify multiple elements to search.</param>
      <param name="limitToAdapters">Pass an array of AdapterKeyNames constants to indicate the steps of which adapters to search. Pass an empty array or <c>NULL</c> to search steps that use any adapter.</param>
      <param name="limitToNamedProps">Pass an array of property names under which to limit the search. Pass an empty array or <c>NULL</c> to search all properties. If you specify names of properties to which to limit the search, TestStand searches only those properties with the names you specify and all their subproperties.</param>
      <param name="limitToPropsOfNamedTypes">Pass an array of type names to which to limit the search. Pass an empty array or <c>NULL</c> to search instances of all types. Use this parameter to limit the search instances of all types. Use this parameter to limit the search to instances of the types you specify.</param>
      <param name="openFilesToSearch">Pass an array of PropertyObjectFile references to specify already open files in which to search. You can pass an empty array or <c>NULL</c> for this parameter.</param>
      <param name="directoriesAndFilePaths">Pass an array of directories and/or file paths to indicate which files to load and search. All paths must be absolute paths. If you specify a directory, TestStand searches all sequence files under the directory and any of the subdirectories. You can pass an empty array or <c>NULL</c> for this parameter.</param>
      <seealso cref="AdapterKeyNames" />
      <seealso cref="PropertyObject.Search" />
      <seealso cref="SearchElements" />
      <seealso cref="SearchFilterOptions" />
      <seealso cref="SearchMatch" />
      <seealso cref="SearchOptions" />
      <seealso cref="SearchResults" />
      <seealso cref="SearchResults.IsComplete" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.SearchFiles(System.String,System.Int32,System.Int32,System.Int32,System.String[],System.String[],System.String[],System.Object[],System.String[])">
      <summary>Begin a new find in files search.</summary>
      <remarks>Returns a SearchResults object that is a handle to the asynchronous search already in progress. To wait for the search to complete, call the SearchResults.IsComplete method.</remarks>
      <returns>A SearchResults object.</returns>
      <param name="searchString">Pass the string or regular expression for which to search. To use regular expressions, you must specify SearchOptions_RegExpr for the searchOptions parameter.</param>
      <param name="searchOptions">Pass one or more SearchOptions constants. Use the bitwise-OR operator to specify multiple search options.</param>
      <param name="filterOptions">Pass one or more SearchFilterOptions constants. Use the bitwise-OR operator to specify multiple search filter options.</param>
      <param name="elementsToSearch">Pass one or more SearchElements constants. Use the bitwise-OR operator to specify multiple elements to search.</param>
      <param name="limitToAdapters">Pass an array of AdapterKeyNames constants to indicate the steps of which adapters to search. Pass an empty array or <c>NULL</c> to search steps that use any adapter.</param>
      <param name="limitToNamedProps">Pass an array of property names under which to limit the search. Pass an empty array or <c>NULL</c> to search all properties. If you specify names of properties to which to limit the search, TestStand searches only those properties with the names you specify and all their subproperties.</param>
      <param name="limitToPropsOfNamedTypes">Pass an array of type names to which to limit the search. Pass an empty array or <c>NULL</c> to search instances of all types. Use this parameter to limit the search instances of all types. Use this parameter to limit the search to instances of the types you specify.</param>
      <param name="openFilesToSearch">Pass an array of PropertyObjectFile references to specify already open files in which to search. You can pass an empty array or <c>NULL</c> for this parameter.</param>
      <param name="directoriesAndFilePaths">Pass an array of directories and/or file paths to indicate which files to load and search. All paths must be absolute paths. If you specify a directory, TestStand searches all sequence files under the directory and any of the subdirectories. You can pass an empty array or <c>NULL</c> for this parameter.</param>
      <seealso cref="AdapterKeyNames" />
      <seealso cref="PropertyObject.Search" />
      <seealso cref="SearchElements" />
      <seealso cref="SearchFilterOptions" />
      <seealso cref="SearchMatch" />
      <seealso cref="SearchOptions" />
      <seealso cref="SearchResults" />
      <seealso cref="SearchResults.IsComplete" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.SetLocationForNextDialog(System.String,System.Int32,System.Int32,System.Int32)">
      <summary>Sets the location of the control in a dialog box that edits the property you specify. When you launch the dialog box again, the control associated with the location is selected and highlighted. The following methods launch dialog boxes that support this feature: PropertyObject.DisplayAttributesDialog, PropertyObject.DisplayPropertiesDialog, Step.SpecifyModule, StepType.SpecifyModule, Engine.DisplayEditUserDialog, Engine.DisplayStepPropDialog, Engine.DisplaySequencePropDialog, Engine.DisplaySeqFilePropDialog, Engine.DisplayPreconditionDialog.</summary>
      <param name="locationLookupString">Specifies the subproperty of the object that specifies the corresponding control that is highlighted in the dialog box the next time it is launched.</param>
      <param name="elementAtLocation">Pass one of the following SearchElements constants to indicate which part of the property you want to highlight in the dialog box while editing: <c>SearchElement_Name</c>, <c>SearchElement_Comment</c>, <c>SearchElement_StringValue</c>, <c>SearchElement_NumericValue</c>, or <c>SearchElement_BooleanValue</c>. For example, to highlight a portion of a local variable comment, pass an empty string for the locationLookupString parameter and <c>SearchElement_Comment</c> for this parameter, then call <c>PropertyObject.DisplayPropertiesDialog</c> on the variable property. </param>
      <param name="selectionStart">If the control the locationLookupString and elementAtLocation parameters indicate is an Edit control, you can use this parameter to select a particular section of the text within the control when TestStand launches the dialog box. Pass the index of the character within the string where you want the selection to start.</param>
      <param name="selectionLength">If the control the locationLookupString and elementAtLocation parameters specify is an Edit control, you can use this parameter to select a particular section of the text within the control when TestStand launches the dialog box. Starting from the selStartIndex character, pass the numbers of characters you want the dialog box to select in the Edit control.</param>
      <seealso cref="Engine.DisplayEditUserDialog" />
      <seealso cref="Engine.DisplayPreconditionDialog" />
      <seealso cref="Engine.DisplaySeqFilePropDialog" />
      <seealso cref="Engine.DisplaySequencePropDialog" />
      <seealso cref="Engine.DisplayStepPropDialog" />
      <seealso cref="Engine.GetLocationForNextDialog" />
      <seealso cref="PropertyObject.DisplayAttributesDialog" />
      <seealso cref="PropertyObject.DisplayPropertiesDialog" />
      <seealso cref="SearchElements" />
      <seealso cref="Step.SpecifyModule" />
      <seealso cref="StepType.SpecifyModule" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.SetLocationForNextDialog(System.String,System.Int32,System.Int32,System.Int32)">
      <summary>Sets the location of the control in a dialog box that edits the property you specify. When you launch the dialog box again, the control associated with the location is selected and highlighted. The following methods launch dialog boxes that support this feature: PropertyObject.DisplayAttributesDialog, PropertyObject.DisplayPropertiesDialog, Step.SpecifyModule, StepType.SpecifyModule, Engine.DisplayEditUserDialog, Engine.DisplayStepPropDialog, Engine.DisplaySequencePropDialog, Engine.DisplaySeqFilePropDialog, Engine.DisplayPreconditionDialog.</summary>
      <param name="locationLookupString">Specifies the subproperty of the object that specifies the corresponding control that is highlighted in the dialog box the next time it is launched.</param>
      <param name="elementAtLocation">Pass one of the following SearchElements constants to indicate which part of the property you want to highlight in the dialog box while editing: <c>SearchElement_Name</c>, <c>SearchElement_Comment</c>, <c>SearchElement_StringValue</c>, <c>SearchElement_NumericValue</c>, or <c>SearchElement_BooleanValue</c>. For example, to highlight a portion of a local variable comment, pass an empty string for the locationLookupString parameter and <c>SearchElement_Comment</c> for this parameter, then call <c>PropertyObject.DisplayPropertiesDialog</c> on the variable property. </param>
      <param name="selectionStart">If the control the locationLookupString and elementAtLocation parameters indicate is an Edit control, you can use this parameter to select a particular section of the text within the control when TestStand launches the dialog box. Pass the index of the character within the string where you want the selection to start.</param>
      <param name="selectionLength">If the control the locationLookupString and elementAtLocation parameters specify is an Edit control, you can use this parameter to select a particular section of the text within the control when TestStand launches the dialog box. Starting from the selStartIndex character, pass the numbers of characters you want the dialog box to select in the Edit control.</param>
      <seealso cref="Engine.DisplayEditUserDialog" />
      <seealso cref="Engine.DisplayPreconditionDialog" />
      <seealso cref="Engine.DisplaySeqFilePropDialog" />
      <seealso cref="Engine.DisplaySequencePropDialog" />
      <seealso cref="Engine.DisplayStepPropDialog" />
      <seealso cref="Engine.GetLocationForNextDialog" />
      <seealso cref="PropertyObject.DisplayAttributesDialog" />
      <seealso cref="PropertyObject.DisplayPropertiesDialog" />
      <seealso cref="SearchElements" />
      <seealso cref="Step.SpecifyModule" />
      <seealso cref="StepType.SpecifyModule" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.DisplayHelpFile(System.String,System.String,System.String,System.String,System.String,System.String)">
      <summary>Opens to a topic in a HTML Help file using the topic filename, such as <c>Engine.htm</c>.</summary>
      <remarks>Opens the HTML Help window to a given topic within the compiled help file (<c>.chm</c>) using the filename of the help topic. If any of the following parameters are specified&#8212;tableOfContentsFile, indexFile, or homeFile&#8212;all three are used to build the HTML Help window. If none of these parameters are specified, the information stored in the help file is used to build the HTML Help window.
To ensure proper navigation within the opened help file, National Instruments recommends that all three parameters&#8212;tableOfContentsFile, indexFile, and homeFile&#8212;be specified together.
To specify that a file is within a CHM, use the following syntax: 
<para><code>CHMFileName.chm::\\FileName.xxx</code></para></remarks>
      <returns>Returns the window handle of the created help window.</returns>
      <param name="htmlFile">Specifies the name of the HTML help topic within the help file to which the help window is opened. Include the file extension (<c>.htm</c>, <c>.html</c>) of the page. Specify the entire path of the page within the help file.
Pass <c>&quot;&quot;</c> to open the help file to the default topic.</param>
      <param name="helpFile">Specifies the name of the HTML help file to open. Include the absolute path of the help file and the extension. If you do not specify a help file, TestStand uses the NI TestStand Help.</param>
      <param name="tableOfContentsFile">Specifies the name of the table of contents file to use with the help file. Include the absolute path of the table of contents file along with the extension.</param>
      <param name="indexFile">Specifies the name of the index file to use with the help file. Include the absolute path of the index file along with the extension.</param>
      <param name="homeFile">Specifies the name of the default topic to display for the help file. Include the absolute path of the default topic along with the extension.</param>
      <param name="windowCaption">Specifies the help window caption to display. This parameter is ignored unless a table of contents file, an index file, or a default topic file is specified. If none of these files are specified, the help window caption is the caption the author of the help file specifies. If you specify a contents file or an index file but do not specify this parameter, the window caption defaults to <c>NI TestStand Help</c>.</param>
      <seealso cref="Engine.DisplayHelpTopic" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.DisplayHelpFile(System.String,System.String,System.String,System.String,System.String,System.String)">
      <summary>Opens to a topic in a HTML Help file using the topic filename, such as <c>Engine.htm</c>.</summary>
      <remarks>Opens the HTML Help window to a given topic within the compiled help file (<c>.chm</c>) using the filename of the help topic. If any of the following parameters are specified&#8212;tableOfContentsFile, indexFile, or homeFile&#8212;all three are used to build the HTML Help window. If none of these parameters are specified, the information stored in the help file is used to build the HTML Help window.
To ensure proper navigation within the opened help file, National Instruments recommends that all three parameters&#8212;tableOfContentsFile, indexFile, and homeFile&#8212;be specified together.
To specify that a file is within a CHM, use the following syntax: 
<para><code>CHMFileName.chm::\\FileName.xxx</code></para></remarks>
      <returns>Returns the window handle of the created help window.</returns>
      <param name="htmlFile">Specifies the name of the HTML help topic within the help file to which the help window is opened. Include the file extension (<c>.htm</c>, <c>.html</c>) of the page. Specify the entire path of the page within the help file.
Pass <c>&quot;&quot;</c> to open the help file to the default topic.</param>
      <param name="helpFile">Specifies the name of the HTML help file to open. Include the absolute path of the help file and the extension. If you do not specify a help file, TestStand uses the NI TestStand Help.</param>
      <param name="tableOfContentsFile">Specifies the name of the table of contents file to use with the help file. Include the absolute path of the table of contents file along with the extension.</param>
      <param name="indexFile">Specifies the name of the index file to use with the help file. Include the absolute path of the index file along with the extension.</param>
      <param name="homeFile">Specifies the name of the default topic to display for the help file. Include the absolute path of the default topic along with the extension.</param>
      <param name="windowCaption">Specifies the help window caption to display. This parameter is ignored unless a table of contents file, an index file, or a default topic file is specified. If none of these files are specified, the help window caption is the caption the author of the help file specifies. If you specify a contents file or an index file but do not specify this parameter, the window caption defaults to <c>NI TestStand Help</c>.</param>
      <seealso cref="Engine.DisplayHelpTopic" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.DisplayEditBreakAndWatchDialog(System.String,System.Int32,System.Object@)">
      <summary>Launches the Edit Breakpoints/Watch Expressions dialog box, in which you can edit the breakpoints and watch expressions defined for the current workspace.</summary>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.</param>
      <param name="dlgOptions">Specifies any combination of the EditBreakAndWatchOptions constants. </param>
      <param name="selectedItemParam">If the user clicked the Goto button, this parameter returns information about the last selected item on the Breakpoints tab of the Edit Breakpoints/Watch Expressions dialog box. Pass a SelectedBreakpointItem object to access the last selected item.</param>
      <seealso cref="&quot;Breakpoints tab&quot;javascript:RefLink('/InfoTopics/DB_Break_Watch_Break_Tab.htm')" />
      <seealso cref=".DisplayBreakpointDialog" />
      <seealso cref="&quot;Edit Breakpoints/Watch Expressions dialog box&quot;javascript:RefLink('/InfoTopics/DB_Break_Watch.htm')" />
      <seealso cref="EditBreakAndWatchOptions" />
      <seealso cref="&quot;Omitting Optional Parameters&quot;javascript:APILink('/InfoTopics/Optional_Parameters.htm')" />
      <seealso cref="SelectedBreakpointItem" />
      <seealso cref="WatchExpression.DisplayConfigurationDialog" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.DisplayEditBreakAndWatchDialog(System.String,System.Int32,System.Object@)">
      <summary>Launches the Edit Breakpoints/Watch Expressions dialog box, in which you can edit the breakpoints and watch expressions defined for the current workspace.</summary>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.</param>
      <param name="dlgOptions">Specifies any combination of the EditBreakAndWatchOptions constants. </param>
      <param name="selectedItemParam">If the user clicked the Goto button, this parameter returns information about the last selected item on the Breakpoints tab of the Edit Breakpoints/Watch Expressions dialog box. Pass a SelectedBreakpointItem object to access the last selected item.</param>
      <seealso cref="&quot;Breakpoints tab&quot;javascript:RefLink('/InfoTopics/DB_Break_Watch_Break_Tab.htm')" />
      <seealso cref=".DisplayBreakpointDialog" />
      <seealso cref="&quot;Edit Breakpoints/Watch Expressions dialog box&quot;javascript:RefLink('/InfoTopics/DB_Break_Watch.htm')" />
      <seealso cref="EditBreakAndWatchOptions" />
      <seealso cref="&quot;Omitting Optional Parameters&quot;javascript:APILink('/InfoTopics/Optional_Parameters.htm')" />
      <seealso cref="SelectedBreakpointItem" />
      <seealso cref="WatchExpression.DisplayConfigurationDialog" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.DisplayExpressionEditOptionsDialog(System.String,System.Int32)">
      <summary>Launches the Expression Editing Options dialog box, in which you can edit the options for displaying expressions.</summary>
      <returns>Returns <c>True</c> if you click OK in the dialog box. Returns <c>False</c> if you click Cancel.</returns>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.</param>
      <param name="dlgOptions">Specify <c>CommonDlgOption_NoOptions</c> or <c>CommonDlgOption_ModalToAppMainWnd</c>. By default, the dialog box is modal to the last active window of the calling thread, or if there is none, to the last active window from the Engine.AppMainHwnd property. Pass  <c>CommonDlgOption_ModalToAppMainWnd</c> if you want the dialog box to be modal with respect to the window handle of the AppMainHwnd property. Typically, you do not need to set this option.</param>
      <seealso cref="CommonDialogOptions" />
      <seealso cref="Engine.AppMainHwnd" />
      <seealso cref="&quot;Expression Editing Options dialog box&quot;javascript:RefLink('/InfoTopics/DB_Exp_Edit_Options.htm')" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.DisplayExpressionEditOptionsDialog(System.String,System.Int32)">
      <summary>Launches the Expression Editing Options dialog box, in which you can edit the options for displaying expressions.</summary>
      <returns>Returns <c>True</c> if you click OK in the dialog box. Returns <c>False</c> if you click Cancel.</returns>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.</param>
      <param name="dlgOptions">Specify <c>CommonDlgOption_NoOptions</c> or <c>CommonDlgOption_ModalToAppMainWnd</c>. By default, the dialog box is modal to the last active window of the calling thread, or if there is none, to the last active window from the Engine.AppMainHwnd property. Pass  <c>CommonDlgOption_ModalToAppMainWnd</c> if you want the dialog box to be modal with respect to the window handle of the AppMainHwnd property. Typically, you do not need to set this option.</param>
      <seealso cref="CommonDialogOptions" />
      <seealso cref="Engine.AppMainHwnd" />
      <seealso cref="&quot;Expression Editing Options dialog box&quot;javascript:RefLink('/InfoTopics/DB_Exp_Edit_Options.htm')" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.SearchDirectories">
      <summary>Returns a reference to the SearchDirectories object. This object is a collection that contains a list of the current search directories.</summary>
      <remarks>You must obtain the search directory collection before adding or modifying a search directory.</remarks>
      <seealso cref="Engine.BinDirectory" />
      <seealso cref="Engine.ConfigDirectory" />
      <seealso cref="Engine.TestStandDirectory" />
      <seealso cref="SearchDirectories" />
      <seealso cref="SearchDirectory" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.SearchDirectories">
      <summary>Returns a reference to the SearchDirectories object. This object is a collection that contains a list of the current search directories.</summary>
      <remarks>You must obtain the search directory collection before adding or modifying a search directory.</remarks>
      <seealso cref="Engine.BinDirectory" />
      <seealso cref="Engine.ConfigDirectory" />
      <seealso cref="Engine.TestStandDirectory" />
      <seealso cref="SearchDirectories" />
      <seealso cref="SearchDirectory" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.LoadTypePaletteFilesEx(NationalInstruments.TestStand.Interop.API.TypeConflictHandlerTypes,System.Int32)">
      <summary>Loads the list of type palette files found in the TestStand Engine.</summary>
      <remarks>Type palette files contain step type and data type definitions. LoadTypePaletteFilesEx is the method the sequence editor and user interfaces call on the TestStand Engine to load these files when they start up. You can call this method outside of the sequence editor or a user interface if an instance of the TestStand Engine has been created and the type palette files need to be loaded.
<para>Note: National Instruments recommends that you call this method when you create the TestStand Engine to ensure that the application loads the correct versions of step types and data types. If you do not load the type palettes and load a sequence file with other versions of NI types, the sequence file might not execute correctly.</para></remarks>
      <param name="handlerType">Specifies how to handle type conflicts.</param>
      <param name="options">This parameter is reserved.</param>
      <seealso cref="&quot;Creating the TestStand Engine&quot;../InfoTopics/App_Creating_the_TestStand_Engine.html" />
      <seealso cref="Engine.GetTypePaletteFileList" />
      <seealso cref="Engine.SetTypePaletteFileList" />
      <seealso cref="Engine.UnloadTypePaletteFiles" />
      <seealso cref="TypeConflictHandlerTypes" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.LoadTypePaletteFilesEx(NationalInstruments.TestStand.Interop.API.TypeConflictHandlerTypes,System.Int32)">
      <summary>Loads the list of type palette files found in the TestStand Engine.</summary>
      <remarks>Type palette files contain step type and data type definitions. LoadTypePaletteFilesEx is the method the sequence editor and user interfaces call on the TestStand Engine to load these files when they start up. You can call this method outside of the sequence editor or a user interface if an instance of the TestStand Engine has been created and the type palette files need to be loaded.
<para>Note: National Instruments recommends that you call this method when you create the TestStand Engine to ensure that the application loads the correct versions of step types and data types. If you do not load the type palettes and load a sequence file with other versions of NI types, the sequence file might not execute correctly.</para></remarks>
      <param name="handlerType">Specifies how to handle type conflicts.</param>
      <param name="options">This parameter is reserved.</param>
      <seealso cref="&quot;Creating the TestStand Engine&quot;../InfoTopics/App_Creating_the_TestStand_Engine.html" />
      <seealso cref="Engine.GetTypePaletteFileList" />
      <seealso cref="Engine.SetTypePaletteFileList" />
      <seealso cref="Engine.UnloadTypePaletteFiles" />
      <seealso cref="TypeConflictHandlerTypes" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.NewExpression">
      <summary>Creates and returns an Expression object.</summary>
      <seealso cref="Expression" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.NewExpression">
      <summary>Creates and returns an Expression object.</summary>
      <seealso cref="Expression" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.StationOptions">
      <summary>Returns a reference to the StationOptions object.</summary>
      <remarks>Use the StationOptions object to set preferences for the TestStand station. Station option settings affect all sequence editor and user interface sessions you run on the computer.</remarks>
      <seealso cref="StationOptions" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.StationOptions">
      <summary>Returns a reference to the StationOptions object.</summary>
      <remarks>Use the StationOptions object to set preferences for the TestStand station. Station option settings affect all sequence editor and user interface sessions you run on the computer.</remarks>
      <seealso cref="StationOptions" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.DisplayStepTypeMenuEditorEx(System.String,NationalInstruments.TestStand.Interop.API.PropertyObjectFile,System.Boolean,System.Int32)">
      <summary>Launches a dialog box in which you can edit the order in which step types appear in the Insert Step submenu.</summary>
      <returns>Returns <c>True</c> if you make modifications and click OK in the dialog box. Returns <c>False</c> if you click Cancel or make no modifications.</returns>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.</param>
      <param name="selectedFile">Specifies the PropertyObjectFile that represents the type palette file to edit.</param>
      <param name="forSubsteps">Pass <c>True</c> when editing the menu information for substeps.</param>
      <param name="dlgOptions">Specify CommonDlgOption_NoOptions or CommonDlgOption_ModalToAppMainWnd.</param>
      <seealso cref="CommonDialogOptions" />
      <seealso cref="PropertyObjectFile" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.DisplayStepTypeMenuEditorEx(System.String,NationalInstruments.TestStand.Interop.API.PropertyObjectFile,System.Boolean,System.Int32)">
      <summary>Launches a dialog box in which you can edit the order in which step types appear in the Insert Step submenu.</summary>
      <returns>Returns <c>True</c> if you make modifications and click OK in the dialog box. Returns <c>False</c> if you click Cancel or make no modifications.</returns>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.</param>
      <param name="selectedFile">Specifies the PropertyObjectFile that represents the type palette file to edit.</param>
      <param name="forSubsteps">Pass <c>True</c> when editing the menu information for substeps.</param>
      <param name="dlgOptions">Specify CommonDlgOption_NoOptions or CommonDlgOption_ModalToAppMainWnd.</param>
      <seealso cref="CommonDialogOptions" />
      <seealso cref="PropertyObjectFile" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.GetInternalOption(NationalInstruments.TestStand.Interop.API.InternalOptions)">
      <summary>Returns the value for the internal option the option parameter specifies.</summary>
      <returns>The value of the internal option the option parameter specifies.</returns>
      <param name="option">Specifies the internal option the method returns.</param>
      <seealso cref="Engine.SetInternalOption" />
      <seealso cref="InternalOptions" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.GetInternalOption(NationalInstruments.TestStand.Interop.API.InternalOptions)">
      <summary>Returns the value for the internal option the option parameter specifies.</summary>
      <returns>The value of the internal option the option parameter specifies.</returns>
      <param name="option">Specifies the internal option the method returns.</param>
      <seealso cref="Engine.SetInternalOption" />
      <seealso cref="InternalOptions" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.SetInternalOption(NationalInstruments.TestStand.Interop.API.InternalOptions,System.Object)">
      <summary>Specifies the value for the internal option the option parameter specifies.</summary>
      <remarks>TestStand does not persist internal options between instances of the engine.</remarks>
      <param name="option">Specifies the internal option the method sets.</param>
      <param name="newValue">Specifies the value of the internal option the option parameter specifies.</param>
      <seealso cref="Engine.GetInternalOption" />
      <seealso cref="InternalOptions" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.SetInternalOption(NationalInstruments.TestStand.Interop.API.InternalOptions,System.Object)">
      <summary>Specifies the value for the internal option the option parameter specifies.</summary>
      <remarks>TestStand does not persist internal options between instances of the engine.</remarks>
      <param name="option">Specifies the internal option the method sets.</param>
      <param name="newValue">Specifies the value of the internal option the option parameter specifies.</param>
      <seealso cref="Engine.GetInternalOption" />
      <seealso cref="InternalOptions" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.GetWatchExpressions(NationalInstruments.TestStand.Interop.API.SequenceFile,NationalInstruments.TestStand.Interop.API.SequenceContext,System.Int32)">
      <summary>Returns a list of references to WatchExpression objects in the watch expression list that the engine maintains. The method returns only objects that match the scope and filter settings specified by the parameters this method contains.</summary>
      <remarks>A watch expression is global if it is not associated with a client sequence file.
The WatchExpression.ClientSequenceFile, WatchExpression.ExecutionScope, WatchExpression.SequenceFileScope, and WatchExpression.SequenceScope properties specify the scope of a WatchExpression object.
Use the clientSequenceFileParam and the scopingSeqContext parameters of this method to filter the watch expression list. Pass <c>NULL</c> for both of these parameters to return the entire watch expression list. If you pass values for these parameters, TestStand uses the filterOptions parameter to identify which watch expression properties to compare to the parameter values you pass.</remarks>
      <returns>Returns an empty list if no watch expressions in the list are valid for the specified scope.</returns>
      <param name="clientSequenceFileParam">Specifies a reference to a client sequence file used to identify and limit the watch expressions to return. The method does not return a watch expression if the WatchExpression.ClientSequenceFile property does not match the name of the file this parameter specifies. Pass <c>NULL</c> to instruct the method to not filter watch expressions based on the client sequence file. Pass <c>WatchExpressionFilter_IncludeGlobals</c> in the filterOptions parameter to instruct the method to include watch expressions that specify an empty string for the <c>WatchExpression.ClientSequenceFile</c> property. </param>
      <param name="scopingSeqContext">Specifies a reference to a sequence context used to identify and limit the watch expressions to return. The method requires a sequence context when you pass <c>WatchExpressionFilter_FilterByExecution</c>, <c>WatchExpressionFilter_FilterBySequence</c>, or <c>WatchExpressionFilter_FilterBySequenceFile</c> to the filterOptions parameter. The method does not return a watch expression if you pass a filter option and the corresponding scope property for the watch expression does not match the given sequence context. The method ignores the filter option for a watch expression if the corresponding scope property does not specify a value. Pass <c>NULL</c> if you do not want the method to exclude watch expressions based on the scoping filter options.</param>
      <param name="filterOptions">Specifies the criteria for filtering the watch expression list. Pass a combination of the WatchExpressionFilterOptions constants. A watch expression must meet all the filter criteria to be included in the returned list.</param>
      <seealso cref="SequenceContext" />
      <seealso cref="SequenceFile" />
      <seealso cref="WatchExpression.ClientSequenceFile" />
      <seealso cref="WatchExpression.ExecutionScope" />
      <seealso cref="WatchExpression.SequenceFileScope" />
      <seealso cref="WatchExpression.SequenceScope" />
      <seealso cref="WatchExpressionFilterOptions" />
      <seealso cref="WatchExpressions" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.GetWatchExpressions(NationalInstruments.TestStand.Interop.API.SequenceFile,NationalInstruments.TestStand.Interop.API.SequenceContext,System.Int32)">
      <summary>Returns a list of references to WatchExpression objects in the watch expression list that the engine maintains. The method returns only objects that match the scope and filter settings specified by the parameters this method contains.</summary>
      <remarks>A watch expression is global if it is not associated with a client sequence file.
The WatchExpression.ClientSequenceFile, WatchExpression.ExecutionScope, WatchExpression.SequenceFileScope, and WatchExpression.SequenceScope properties specify the scope of a WatchExpression object.
Use the clientSequenceFileParam and the scopingSeqContext parameters of this method to filter the watch expression list. Pass <c>NULL</c> for both of these parameters to return the entire watch expression list. If you pass values for these parameters, TestStand uses the filterOptions parameter to identify which watch expression properties to compare to the parameter values you pass.</remarks>
      <returns>Returns an empty list if no watch expressions in the list are valid for the specified scope.</returns>
      <param name="clientSequenceFileParam">Specifies a reference to a client sequence file used to identify and limit the watch expressions to return. The method does not return a watch expression if the WatchExpression.ClientSequenceFile property does not match the name of the file this parameter specifies. Pass <c>NULL</c> to instruct the method to not filter watch expressions based on the client sequence file. Pass <c>WatchExpressionFilter_IncludeGlobals</c> in the filterOptions parameter to instruct the method to include watch expressions that specify an empty string for the <c>WatchExpression.ClientSequenceFile</c> property. </param>
      <param name="scopingSeqContext">Specifies a reference to a sequence context used to identify and limit the watch expressions to return. The method requires a sequence context when you pass <c>WatchExpressionFilter_FilterByExecution</c>, <c>WatchExpressionFilter_FilterBySequence</c>, or <c>WatchExpressionFilter_FilterBySequenceFile</c> to the filterOptions parameter. The method does not return a watch expression if you pass a filter option and the corresponding scope property for the watch expression does not match the given sequence context. The method ignores the filter option for a watch expression if the corresponding scope property does not specify a value. Pass <c>NULL</c> if you do not want the method to exclude watch expressions based on the scoping filter options.</param>
      <param name="filterOptions">Specifies the criteria for filtering the watch expression list. Pass a combination of the WatchExpressionFilterOptions constants. A watch expression must meet all the filter criteria to be included in the returned list.</param>
      <seealso cref="SequenceContext" />
      <seealso cref="SequenceFile" />
      <seealso cref="WatchExpression.ClientSequenceFile" />
      <seealso cref="WatchExpression.ExecutionScope" />
      <seealso cref="WatchExpression.SequenceFileScope" />
      <seealso cref="WatchExpression.SequenceScope" />
      <seealso cref="WatchExpressionFilterOptions" />
      <seealso cref="WatchExpressions" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.Images">
      <summary>Returns a reference to an <c>Images</c> object, which is a collection that contains a list of images. The collection specifies the images that TestStand loads from the <c>&lt;TestStand&gt;\Components\Icons</c> and <c>&lt;TestStand&#160;Public&gt;\Components\Icons</c> directories, as well as images you add using the Engine.AddImage method. Use the Images.FindImage method to find an image using an image name.</summary>
      <remarks>You must obtain the <c>Images</c> collection before accessing an image. Use the <c>Images</c> collection as an alternative to the Engine.LargeImageListEx and Engine.SmallImageListEx properties.</remarks>
      <seealso cref="Engine.AddImage" />
      <seealso cref="Engine.LargeImageListEx" />
      <seealso cref="Engine.SmallImageListEx" />
      <seealso cref="Images" />
      <seealso cref="Images.FindImage" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.Images">
      <summary>Returns a reference to an <c>Images</c> object, which is a collection that contains a list of images. The collection specifies the images that TestStand loads from the <c>&lt;TestStand&gt;\Components\Icons</c> and <c>&lt;TestStand&#160;Public&gt;\Components\Icons</c> directories, as well as images you add using the Engine.AddImage method. Use the Images.FindImage method to find an image using an image name.</summary>
      <remarks>You must obtain the <c>Images</c> collection before accessing an image. Use the <c>Images</c> collection as an alternative to the Engine.LargeImageListEx and Engine.SmallImageListEx properties.</remarks>
      <seealso cref="Engine.AddImage" />
      <seealso cref="Engine.LargeImageListEx" />
      <seealso cref="Engine.SmallImageListEx" />
      <seealso cref="Images" />
      <seealso cref="Images.FindImage" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.GetEditTimeToolMenuItems(System.Int32)">
      <summary>Returns a reference to a EditTimeMenuItems object.</summary>
      <remarks>TestStand maintains a collection of tools menu items. Use this collection to customize the tools menu items the sequence editor and user interface display. Each menu item in the collection specifies the menu item type and expressions which determine menu item text, hidden state, and enabled state. A menu item can specify a collection of submenu items.
You can use the Engine.GetRunTimeToolMenuItems method to obtain a reference to a run-time instance of the Tools menu. TestStand evaluates edit-time menu item expressions to determine the value of run-time properties. The run-time properties specify the menu item text and whether a menu item is enabled. TestStand excludes any menu items with hidden expressions that evaluate to <c>False</c> from the run-time copy of the Tools menu. The run-time copy of the Tools menu also contains expanded submenus for menu items using the <c>ToolMenuType_SequenceFile</c> type, where each submenu item is a menu item using the <c>ToolMenuType_Sequence</c> type.</remarks>
      <param name="reserved">Pass <c>0</c> for this parameter.</param>
      <seealso cref="EditTimeMenuItem" />
      <seealso cref="Engine.GetRunTimeToolMenuItems" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.GetEditTimeToolMenuItems(System.Int32)">
      <summary>Returns a reference to a EditTimeMenuItems object.</summary>
      <remarks>TestStand maintains a collection of tools menu items. Use this collection to customize the tools menu items the sequence editor and user interface display. Each menu item in the collection specifies the menu item type and expressions which determine menu item text, hidden state, and enabled state. A menu item can specify a collection of submenu items.
You can use the Engine.GetRunTimeToolMenuItems method to obtain a reference to a run-time instance of the Tools menu. TestStand evaluates edit-time menu item expressions to determine the value of run-time properties. The run-time properties specify the menu item text and whether a menu item is enabled. TestStand excludes any menu items with hidden expressions that evaluate to <c>False</c> from the run-time copy of the Tools menu. The run-time copy of the Tools menu also contains expanded submenus for menu items using the <c>ToolMenuType_SequenceFile</c> type, where each submenu item is a menu item using the <c>ToolMenuType_Sequence</c> type.</remarks>
      <param name="reserved">Pass <c>0</c> for this parameter.</param>
      <seealso cref="EditTimeMenuItem" />
      <seealso cref="Engine.GetRunTimeToolMenuItems" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.GetRunTimeToolMenuItems(System.Object,System.Int32)">
      <summary>Returns a reference to a RunTimeMenuItems object. Use this method to determine the run-time text and dimmed state of menu items defined in the collection the Engine.GetEditTimeToolMenuItems method returns.</summary>
      <remarks>TestStand maintains a collection of Tools menu items. You can obtain a reference to the collection using the <c>Engine.GetEditTimeToolMenuItems</c> method. You can also customize the contents of the Tools menu.
TestStand uses the menu items in the edit-time collection to generate a run-time version of the menu items. TestStand evaluates edit-time menu item expressions to determine the value of run-time properties, such as menu item text and whether menu items are enabled. TestStand excludes any edit-time menu items with hidden expressions that evaluate to <c>False</c> from the run-time collection. The run-time collection also contains expanded submenus for menu items using the <c>ToolMenuType_SequenceFile</c> type.</remarks>
      <param name="editArgsParam">Specifies the currently selected items in the user interface. The menu item expressions can use this information to determine item text, hidden state, and enabled state.</param>
      <param name="reserved">Pass <c>0</c> for this parameter.</param>
      <seealso cref="Engine.GetEditTimeToolMenuItems" />
      <seealso cref="&quot;Omitting Optional Parameters&quot;javascript:APILink('/InfoTopics/Optional_Parameters.htm')" />
      <seealso cref="RunTimeMenuItems" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.GetRunTimeToolMenuItems(System.Object,System.Int32)">
      <summary>Returns a reference to a RunTimeMenuItems object. Use this method to determine the run-time text and dimmed state of menu items defined in the collection the Engine.GetEditTimeToolMenuItems method returns.</summary>
      <remarks>TestStand maintains a collection of Tools menu items. You can obtain a reference to the collection using the <c>Engine.GetEditTimeToolMenuItems</c> method. You can also customize the contents of the Tools menu.
TestStand uses the menu items in the edit-time collection to generate a run-time version of the menu items. TestStand evaluates edit-time menu item expressions to determine the value of run-time properties, such as menu item text and whether menu items are enabled. TestStand excludes any edit-time menu items with hidden expressions that evaluate to <c>False</c> from the run-time collection. The run-time collection also contains expanded submenus for menu items using the <c>ToolMenuType_SequenceFile</c> type.</remarks>
      <param name="editArgsParam">Specifies the currently selected items in the user interface. The menu item expressions can use this information to determine item text, hidden state, and enabled state.</param>
      <param name="reserved">Pass <c>0</c> for this parameter.</param>
      <seealso cref="Engine.GetEditTimeToolMenuItems" />
      <seealso cref="&quot;Omitting Optional Parameters&quot;javascript:APILink('/InfoTopics/Optional_Parameters.htm')" />
      <seealso cref="RunTimeMenuItems" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.WatchExpressionsEnabled">
      <summary>Specifies if the TestStand Engine evaluates watch expressions after each step executes in an execution. Applications that support watch expressions, such as the sequence editor, set this property to <c>True</c>. This property is not persisted and defaults to <c>False</c> for each instance of the engine.</summary>
      <returns>The default return value is <c>False</c>. Applications that support watch expressions, such as the sequence editor, set this property to <c>True</c>.</returns>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.WatchExpressionsEnabled">
      <summary>Specifies if the TestStand Engine evaluates watch expressions after each step executes in an execution. Applications that support watch expressions, such as the sequence editor, set this property to <c>True</c>. This property is not persisted and defaults to <c>False</c> for each instance of the engine.</summary>
      <returns>The default return value is <c>False</c>. Applications that support watch expressions, such as the sequence editor, set this property to <c>True</c>.</returns>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.WriteToolMenuToDisk(System.Int32)">
      <summary>Updates the Tools menu configuration file, <c>&lt;TestStand&#160;Application&#160;Data&gt;\Cfg\ToolMenu.ini</c>, with the latest changes.</summary>
      <remarks>If you make changes to the contents of the current Tools menu using the TestStand API, those changes are not saved automatically to the Tools menu configuration file. Call this method to save those changes to disk. Otherwise, the configuration file is automatically saved when the engine shuts down.</remarks>
      <param name="reserved">Pass <c>0</c> for this parameter.</param>
      <seealso cref=".GetEditTimeToolMenuItems" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.WriteToolMenuToDisk(System.Int32)">
      <summary>Updates the Tools menu configuration file, <c>&lt;TestStand&#160;Application&#160;Data&gt;\Cfg\ToolMenu.ini</c>, with the latest changes.</summary>
      <remarks>If you make changes to the contents of the current Tools menu using the TestStand API, those changes are not saved automatically to the Tools menu configuration file. Call this method to save those changes to disk. Otherwise, the configuration file is automatically saved when the engine shuts down.</remarks>
      <param name="reserved">Pass <c>0</c> for this parameter.</param>
      <seealso cref=".GetEditTimeToolMenuItems" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.LicenseType">
      <summary>Returns the type of the license the TestStand Engine is using.</summary>
      <remarks>If multiple license types are activated on the same computer, the TestStand Engine prioritizes the minimum required license over others. If all four TestStand license types are activated on a computer, the following licenses are prioritized:
<para><para>&#160;&#160;&#160;&#160;* TestStand Sequence Editor&#8211;Debug Deployment Environment</para><para>&#160;&#160;&#160;&#160;* TestStand Editor UI&#8211;Custom Sequence Editor</para><para>&#160;&#160;&#160;&#160;* TestStand Operator UI&#8211;Base Deployment Engine</para></para></remarks>
      <seealso cref="&quot;Activating Your Software with the NI License Manager&quot;javascript:TSHelpLink('/NITopics/nilm.html')" />
      <seealso cref="&quot;TestStand Licensing Options&quot;javascript:TSHelpLink('/InfoTopics/Licensing_Options.html')" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.LicenseType">
      <summary>Returns the type of the license the TestStand Engine is using.</summary>
      <remarks>If multiple license types are activated on the same computer, the TestStand Engine prioritizes the minimum required license over others. If all four TestStand license types are activated on a computer, the following licenses are prioritized:
<para><para>&#160;&#160;&#160;&#160;* TestStand Sequence Editor&#8211;Debug Deployment Environment</para><para>&#160;&#160;&#160;&#160;* TestStand Editor UI&#8211;Custom Sequence Editor</para><para>&#160;&#160;&#160;&#160;* TestStand Operator UI&#8211;Base Deployment Engine</para></para></remarks>
      <seealso cref="&quot;Activating Your Software with the NI License Manager&quot;javascript:TSHelpLink('/NITopics/nilm.html')" />
      <seealso cref="&quot;TestStand Licensing Options&quot;javascript:TSHelpLink('/InfoTopics/Licensing_Options.html')" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.PersistBreakpoints">
      <summary>Specifies whether the engine associates the list of breakpoints with the current workspace and automatically saves and reloads breakpoint lists when the current workspace changes. This property defaults to <c>False</c> for each instance of the engine. Applications that support breakpoint persistence, such as the sequence editor, should set this property to <c>True</c>. TestStand reads into memory the persisted breakpoint list when you change the option to <c>True</c>.</summary>
      <remarks>When the engine unloads a workspace and this setting is <c>True</c>, the engine saves the current breakpoint list in an options file with the same name as the workspace and in the same directory as the workspace file. The engine also saves the current breakpoint list when you save the current workspace or any sequence file in the workspace or when you close any sequence file.
When the engine loads a new workspace and this setting is <c>True</c>, the engine automatically loads the breakpoint list previously saved in the options file. Otherwise, the engine keeps the current breakpoint list.
If no current workspace is loaded, the engine persists the breakpoint list to a default options file. 
TestStand persists only breakpoints that apply to sequence files. TestStand does not persist breakpoints associated with executions.</remarks>
      <returns>The default return value is <c>False</c>. For applications that support breakpoint persistence, such as the sequence editor, set this property to <c>True</c>.</returns>
      <seealso cref="Engine.PersistWatchExpressions" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.PersistBreakpoints">
      <summary>Specifies whether the engine associates the list of breakpoints with the current workspace and automatically saves and reloads breakpoint lists when the current workspace changes. This property defaults to <c>False</c> for each instance of the engine. Applications that support breakpoint persistence, such as the sequence editor, should set this property to <c>True</c>. TestStand reads into memory the persisted breakpoint list when you change the option to <c>True</c>.</summary>
      <remarks>When the engine unloads a workspace and this setting is <c>True</c>, the engine saves the current breakpoint list in an options file with the same name as the workspace and in the same directory as the workspace file. The engine also saves the current breakpoint list when you save the current workspace or any sequence file in the workspace or when you close any sequence file.
When the engine loads a new workspace and this setting is <c>True</c>, the engine automatically loads the breakpoint list previously saved in the options file. Otherwise, the engine keeps the current breakpoint list.
If no current workspace is loaded, the engine persists the breakpoint list to a default options file. 
TestStand persists only breakpoints that apply to sequence files. TestStand does not persist breakpoints associated with executions.</remarks>
      <returns>The default return value is <c>False</c>. For applications that support breakpoint persistence, such as the sequence editor, set this property to <c>True</c>.</returns>
      <seealso cref="Engine.PersistWatchExpressions" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.PersistWatchExpressions">
      <summary>Specifies whether the engine associates the list of watch expressions with the current workspace, and automatically saves and reloads the watch expression list when the current workspace changes. This property defaults to <c>False</c> for each instance of the engine. For applications that support watch expression persistence, such as the sequence editor, set this property to <c>True</c>. TestStand reads into memory the persisted watch expression when you change the option to <c>True</c>.</summary>
      <remarks>When the engine unloads a workspace and this setting is <c>True</c>, the engine saves the current watch expression list in an options file with the same name as the workspace and in the same directory as the workspace file. The engine also saves the current watch expression list when you save the current workspace or any sequence file in the workspace or when you close any sequence file.
When the engine loads a new workspace and this setting is <c>True</c>, the engine automatically loads the watch expression list previously saved in the options file. Otherwise, the engine keeps the current watch expression list.
If no current workspace is loaded, the engine persists the watch expression list to a default options file. 
TestStand persists only watch expressions that are not associated with a particular execution, such as when WatchExpression.ExecutionScope is <c>NULL</c>.</remarks>
      <returns>The default return value is <c>False</c>. For applications that support watch expression persistence, such as the sequence editor, set this property to <c>True</c>.</returns>
      <seealso cref="Engine.PersistBreakpoints" />
      <seealso cref="WatchExpression.ExecutionScope" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.PersistWatchExpressions">
      <summary>Specifies whether the engine associates the list of watch expressions with the current workspace, and automatically saves and reloads the watch expression list when the current workspace changes. This property defaults to <c>False</c> for each instance of the engine. For applications that support watch expression persistence, such as the sequence editor, set this property to <c>True</c>. TestStand reads into memory the persisted watch expression when you change the option to <c>True</c>.</summary>
      <remarks>When the engine unloads a workspace and this setting is <c>True</c>, the engine saves the current watch expression list in an options file with the same name as the workspace and in the same directory as the workspace file. The engine also saves the current watch expression list when you save the current workspace or any sequence file in the workspace or when you close any sequence file.
When the engine loads a new workspace and this setting is <c>True</c>, the engine automatically loads the watch expression list previously saved in the options file. Otherwise, the engine keeps the current watch expression list.
If no current workspace is loaded, the engine persists the watch expression list to a default options file. 
TestStand persists only watch expressions that are not associated with a particular execution, such as when WatchExpression.ExecutionScope is <c>NULL</c>.</remarks>
      <returns>The default return value is <c>False</c>. For applications that support watch expression persistence, such as the sequence editor, set this property to <c>True</c>.</returns>
      <seealso cref="Engine.PersistBreakpoints" />
      <seealso cref="WatchExpression.ExecutionScope" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.GetLicenseDescription(System.Int32)">
      <summary>Returns the current license description.</summary>
      <param name="reserved">Pass <c>0</c> for this parameter.</param>
      <seealso cref="&quot;Activating Your Software with the NI License Manager&quot;javascript:TSHelpLink('/NITopics/nilm.html')" />
      <seealso cref="Engine.GetProductRegistrationInfo" />
      <seealso cref="&quot;TestStand Licensing Options&quot;javascript:TSHelpLink('/InfoTopics/Licensing_Options.html')" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.GetLicenseDescription(System.Int32)">
      <summary>Returns the current license description.</summary>
      <param name="reserved">Pass <c>0</c> for this parameter.</param>
      <seealso cref="&quot;Activating Your Software with the NI License Manager&quot;javascript:TSHelpLink('/NITopics/nilm.html')" />
      <seealso cref="Engine.GetProductRegistrationInfo" />
      <seealso cref="&quot;TestStand Licensing Options&quot;javascript:TSHelpLink('/InfoTopics/Licensing_Options.html')" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.GetLocationForNextDialog(System.String@,System.Int32@,System.Int32@,System.Int32@,System.Boolean)">
      <summary>This method is typically used by a dialog box to obtain the information needed to select and highlight the control associated with the location the Engine.SetLocationForNextDialog method previously specified.</summary>
      <param name="locationLookupString">Returns a lookup string that indicates the subproperty of the object that contains the corresponding control you want to highlight in the dialog box.</param>
      <param name="elementAtLocation">Returns one of the following SearchElements constants to indicate which part of the property to highlight in the dialog box: SearchElement_Name, SearchElement_Comment, SearchElement_StringValue, SearchElement_NumericValue, or SearchElement_BooleanValue.</param>
      <param name="selectionStart">If the control the locationLookupString and elementAtLocation parameters indicate is an Edit control, use this parameter to determine a particular section of the text within the control for the dialog box to select. Returns the index of the character within the string for the start of the selection.</param>
      <param name="selectionLength">If the control the locationLookupString and elementAtLocation parameters indicate is an Edit control, use this parameter to determine a particular section of the text within the control for the dialog box to select. Returns the number of characters, starting from the selStartIndex character, for the dialog box to select in the Edit control.</param>
      <param name="clearLoc">Typically, calling this method clears the internal data in the engine for the location of the dialog box so the next time this method is called, no location information is returned. To override this behavior, pass <c>False</c> for this parameter.</param>
      <seealso cref="Engine.SetLocationForNextDialog" />
      <seealso cref="SearchElements" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.GetLocationForNextDialog(System.String@,System.Int32@,System.Int32@,System.Int32@,System.Boolean)">
      <summary>This method is typically used by a dialog box to obtain the information needed to select and highlight the control associated with the location the Engine.SetLocationForNextDialog method previously specified.</summary>
      <param name="locationLookupString">Returns a lookup string that indicates the subproperty of the object that contains the corresponding control you want to highlight in the dialog box.</param>
      <param name="elementAtLocation">Returns one of the following SearchElements constants to indicate which part of the property to highlight in the dialog box: SearchElement_Name, SearchElement_Comment, SearchElement_StringValue, SearchElement_NumericValue, or SearchElement_BooleanValue.</param>
      <param name="selectionStart">If the control the locationLookupString and elementAtLocation parameters indicate is an Edit control, use this parameter to determine a particular section of the text within the control for the dialog box to select. Returns the index of the character within the string for the start of the selection.</param>
      <param name="selectionLength">If the control the locationLookupString and elementAtLocation parameters indicate is an Edit control, use this parameter to determine a particular section of the text within the control for the dialog box to select. Returns the number of characters, starting from the selStartIndex character, for the dialog box to select in the Edit control.</param>
      <param name="clearLoc">Typically, calling this method clears the internal data in the engine for the location of the dialog box so the next time this method is called, no location information is returned. To override this behavior, pass <c>False</c> for this parameter.</param>
      <seealso cref="Engine.SetLocationForNextDialog" />
      <seealso cref="SearchElements" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.SetConfigDirectory(System.String,System.Boolean)">
      <summary>Specifies the pathname of the TestStand configuration directory.</summary>
      <remarks>Changes to the TestStand configuration directory do not take effect until you have shut down the TestStand Engine.
The configuration directory contains engine and sequence editor option files, the users file, the globals file, and the tools menu file.</remarks>
      <param name="Path">Specifies the new pathname where TestStand stores configuration files. You can pass an empty string to instruct TestStand to use the <c>&lt;TestStand&#160;Application&#160;Data&gt;\Cfg</c> directory.</param>
      <param name="CopyFilesOnEngineShutdown">Specifies whether TestStand copies all files located in the current TestStand configuration directory to the new location upon shutdown.</param>
      <seealso cref="Engine.BinDirectory" />
      <seealso cref="Engine.ConfigDirectory" />
      <seealso cref="Engine.SearchDirectories" />
      <seealso cref="Engine.TestStandDirectory" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.SetConfigDirectory(System.String,System.Boolean)">
      <summary>Specifies the pathname of the TestStand configuration directory.</summary>
      <remarks>Changes to the TestStand configuration directory do not take effect until you have shut down the TestStand Engine.
The configuration directory contains engine and sequence editor option files, the users file, the globals file, and the tools menu file.</remarks>
      <param name="Path">Specifies the new pathname where TestStand stores configuration files. You can pass an empty string to instruct TestStand to use the <c>&lt;TestStand&#160;Application&#160;Data&gt;\Cfg</c> directory.</param>
      <param name="CopyFilesOnEngineShutdown">Specifies whether TestStand copies all files located in the current TestStand configuration directory to the new location upon shutdown.</param>
      <seealso cref="Engine.BinDirectory" />
      <seealso cref="Engine.ConfigDirectory" />
      <seealso cref="Engine.SearchDirectories" />
      <seealso cref="Engine.TestStandDirectory" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.DisplayLockUnlockDialog(System.String,System.String,NationalInstruments.TestStand.Interop.API.PropertyObject,System.Int32,System.Object@)">
      <summary>Launches a dialog box in which you can lock or unlock a PropertyObjectFile, or prompt for a password to perform a lock or unlock operation.</summary>
      <returns>Returns <c>True</c> if you click OK in the dialog box. Returns <c>False</c> if you click Cancel.</returns>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box. </param>
      <param name="dlgMsg">Specifies the message in the dialog box. Pass an empty string to use the default message for the dialog box. </param>
      <param name="propObject">Specifies an object to lock or unlock. The object lock state determines whether the dialog box performs a lock or unlock operation by calling the PropertyObjectFile.Lock and PropertyObjectFile.Unlock methods respectively.
When you pass <c>NULL</c>, the dialog box does not operate on any object. The options parameter specifies whether the dialog box performs a lock or unlock operation. If you pass <c>NULL</c> and perform an unlock operation, you must specify the required password using the passwordString parameter. </param>
      <param name="options">Specifies any combination of the LockUnlockDialogOptions constants.</param>
      <param name="passwordString">Specifies the password the dialog box expects when you specify LockUnlockDialogOption_Unlock in the options parameter, and returns the entered password from the dialog box when you specify LockUnlockDialogOption_Lock in the options parameter.</param>
      <seealso cref="Engine.AppMainHwnd" />
      <seealso cref="LockUnlockDialogOptions" />
      <seealso cref="&quot;Omitting Optional Parameters&quot;javascript:APILink('/InfoTopics/Optional_Parameters.htm')" />
      <seealso cref="PropertyObject" />
      <seealso cref="PropertyObjectFile.Lock" />
      <seealso cref="PropertyObjectFile.Unlock" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.DisplayLockUnlockDialog(System.String,System.String,NationalInstruments.TestStand.Interop.API.PropertyObject,System.Int32,System.Object@)">
      <summary>Launches a dialog box in which you can lock or unlock a PropertyObjectFile, or prompt for a password to perform a lock or unlock operation.</summary>
      <returns>Returns <c>True</c> if you click OK in the dialog box. Returns <c>False</c> if you click Cancel.</returns>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box. </param>
      <param name="dlgMsg">Specifies the message in the dialog box. Pass an empty string to use the default message for the dialog box. </param>
      <param name="propObject">Specifies an object to lock or unlock. The object lock state determines whether the dialog box performs a lock or unlock operation by calling the PropertyObjectFile.Lock and PropertyObjectFile.Unlock methods respectively.
When you pass <c>NULL</c>, the dialog box does not operate on any object. The options parameter specifies whether the dialog box performs a lock or unlock operation. If you pass <c>NULL</c> and perform an unlock operation, you must specify the required password using the passwordString parameter. </param>
      <param name="options">Specifies any combination of the LockUnlockDialogOptions constants.</param>
      <param name="passwordString">Specifies the password the dialog box expects when you specify LockUnlockDialogOption_Unlock in the options parameter, and returns the entered password from the dialog box when you specify LockUnlockDialogOption_Lock in the options parameter.</param>
      <seealso cref="Engine.AppMainHwnd" />
      <seealso cref="LockUnlockDialogOptions" />
      <seealso cref="&quot;Omitting Optional Parameters&quot;javascript:APILink('/InfoTopics/Optional_Parameters.htm')" />
      <seealso cref="PropertyObject" />
      <seealso cref="PropertyObjectFile.Lock" />
      <seealso cref="PropertyObjectFile.Unlock" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.GetUserGroup(System.String)">
      <summary>Obtains the User" object that represents a specific user group.
</summary>
      <remarks>Returns <c>NULL</c> if the user group does not exist.
The user group specifies the list of user names that are members of the group and the shared privileges granted to the members. Use the User.Members property to edit the list of user names.</remarks>
      <param name="userGroupName">Specifies the name of the user group to return.</param>
      <seealso cref="Engine.DisplayEditUserDialog" />
      <seealso cref="Engine.GetUser" />
      <seealso cref="Engine.UsersFile" />
      <seealso cref="User" />
      <seealso cref="User.Members" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.GetUserGroup(System.String)">
      <summary>Obtains the User" object that represents a specific user group.
</summary>
      <remarks>Returns <c>NULL</c> if the user group does not exist.
The user group specifies the list of user names that are members of the group and the shared privileges granted to the members. Use the User.Members property to edit the list of user names.</remarks>
      <param name="userGroupName">Specifies the name of the user group to return.</param>
      <seealso cref="Engine.DisplayEditUserDialog" />
      <seealso cref="Engine.GetUser" />
      <seealso cref="Engine.UsersFile" />
      <seealso cref="User" />
      <seealso cref="User.Members" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.PersistConfigFile">
      <summary>Specifies whether the engine automatically saves its configuration files:  <c>StarupCfg.ini</c>, <c>GeneralEngine.cfg</c>, <c>Adapters.cfg</c>, <c>SearchDirectories.cfg</c>, <c>TypePalettes.cfg</c>, and <c>Custom.cfg</c>. This property defaults to <c>True</c>True for each instance of the engine. Applications can set this property to <c>False</c> to prevent changes to configuration information from affecting future instances of the engine.</summary>
      <returns>The default return value is <c>True</c>.</returns>
      <seealso cref="Engine.ConfigFile" />
      <seealso cref="Engine.PersistBreakpoints" />
      <seealso cref="Engine.PersistWatchExpressions" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.PersistConfigFile">
      <summary>Specifies whether the engine automatically saves its configuration files:  <c>StarupCfg.ini</c>, <c>GeneralEngine.cfg</c>, <c>Adapters.cfg</c>, <c>SearchDirectories.cfg</c>, <c>TypePalettes.cfg</c>, and <c>Custom.cfg</c>. This property defaults to <c>True</c>True for each instance of the engine. Applications can set this property to <c>False</c> to prevent changes to configuration information from affecting future instances of the engine.</summary>
      <returns>The default return value is <c>True</c>.</returns>
      <seealso cref="Engine.ConfigFile" />
      <seealso cref="Engine.PersistBreakpoints" />
      <seealso cref="Engine.PersistWatchExpressions" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.NewLocations">
      <summary>Creates and returns a new Locations object.</summary>
      <seealso cref="Locations" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.NewLocations">
      <summary>Creates and returns a new Locations object.</summary>
      <seealso cref="Locations" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.GetOutputMessages">
      <summary><para>Note: This method is obsolete. Use the OutputMessages.CopyMessagesToCollection method instead.</para>
Returns a reference to the OutputMessages object TestStand maintains. This object is a collection that contains a list of the most recent output messages the OutputMessage.Post method or OutputMessage expression function posts.</summary>
      <remarks>In TestStand 4.0 and 4.0.1, an application could access this collection in response to the <c>UIMsg_OutputMessages</c> event to obtain new output messages. The application was expected to clear the collection in the handler for this event. If the application did not handle the event or did not clear the collection, the collection could grow without bounds. In TestStand 4.1 or later this method is deprecated, and this collection clears automatically if the application fails to clear it in response to the <c>UIMsg_OutputMessages</c> event. In addition, TestStand adds a warning output message to the collection to notify users about automatically discarded output messages and that the application incorrectly accessed GetOutputMessages without clearing the collection. Although existing applications can handle the <c>UIMsg_OutputMessages</c> event by calling GetOutputMessages and clearing the collection, ensure that new application code obtains the OutputMessages collection that contains the most recent output messages from the ActiveXData member of the user interface message for the <c>UIMsg_OutputMessages</c> event.</remarks>
      <seealso cref="Engine.OutputMessagesEnabled" />
      <seealso cref="&quot;Expression Functions&quot;javascript:TSFundLink('/InfoTopics/Operators_Function_Expr.htm')" />
      <seealso cref="OutputMessage.Post" />
      <seealso cref="OutputMessages" />
      <seealso cref="OutputMessages.CopyMessagesToCollection" />
      <seealso cref="UIMessageCodes" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.GetOutputMessages">
      <summary><para>Note: This method is obsolete. Use the OutputMessages.CopyMessagesToCollection method instead.</para>
Returns a reference to the OutputMessages object TestStand maintains. This object is a collection that contains a list of the most recent output messages the OutputMessage.Post method or OutputMessage expression function posts.</summary>
      <remarks>In TestStand 4.0 and 4.0.1, an application could access this collection in response to the <c>UIMsg_OutputMessages</c> event to obtain new output messages. The application was expected to clear the collection in the handler for this event. If the application did not handle the event or did not clear the collection, the collection could grow without bounds. In TestStand 4.1 or later this method is deprecated, and this collection clears automatically if the application fails to clear it in response to the <c>UIMsg_OutputMessages</c> event. In addition, TestStand adds a warning output message to the collection to notify users about automatically discarded output messages and that the application incorrectly accessed GetOutputMessages without clearing the collection. Although existing applications can handle the <c>UIMsg_OutputMessages</c> event by calling GetOutputMessages and clearing the collection, ensure that new application code obtains the OutputMessages collection that contains the most recent output messages from the ActiveXData member of the user interface message for the <c>UIMsg_OutputMessages</c> event.</remarks>
      <seealso cref="Engine.OutputMessagesEnabled" />
      <seealso cref="&quot;Expression Functions&quot;javascript:TSFundLink('/InfoTopics/Operators_Function_Expr.htm')" />
      <seealso cref="OutputMessage.Post" />
      <seealso cref="OutputMessages" />
      <seealso cref="OutputMessages.CopyMessagesToCollection" />
      <seealso cref="UIMessageCodes" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.NewOutputMessage(System.String,System.String,NationalInstruments.TestStand.Interop.API.OutputMessageSeverityTypes,NationalInstruments.TestStand.Interop.API.SequenceContext)">
      <summary>Creates and returns a new OutputMessage object.</summary>
      <remarks>When creating a new object, TestStand initializes the OutputMessage.TimeStamp property to the current time, sets the OutputMessage.TextColor property to black, and sets the OutputMessage.IconName property based on the severity.
You must call the OutputMessage.Post method to copy the message to the collection the Engine.GetOutputMessages method returns.</remarks>
      <param name="messageText">Specifies the message text.</param>
      <param name="categoryText">Specifies the category of the message. Applications typically use the category to filter or sort messages. If you do not specify a category, the output message is considered uncategorized. You can specify any value for this parameter.</param>
      <param name="severity">Specifies the severity of the output message.</param>
      <param name="sequenceContext">Specifies the sequence context of the current execution, if available. TestStand extracts information from the sequence context to construct the OutputMessage.FileLocations and OutputMessage.ExecutionLocations properties for the new object.</param>
      <seealso cref="Engine.GetOutputMessages" />
      <seealso cref="Engine.NewOutputMessages" />
      <seealso cref="&#xD;&#xA;&quot;Output Messages (Example)&quot;javascript:TSExamplesLink('/InfoTopics/Output_Messages_Examples.htm')" />
      <seealso cref="OutputMessage" />
      <seealso cref="OutputMessage.ExecutionLocations" />
      <seealso cref="OutputMessage.FileLocations" />
      <seealso cref="OutputMessage.IconName" />
      <seealso cref="OutputMessage.Post" />
      <seealso cref="OutputMessage.TextColor" />
      <seealso cref="OutputMessage.TimeStamp" />
      <seealso cref="OutputMessageSeverityTypes" />
      <seealso cref="SequenceContext" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.NewOutputMessage(System.String,System.String,NationalInstruments.TestStand.Interop.API.OutputMessageSeverityTypes,NationalInstruments.TestStand.Interop.API.SequenceContext)">
      <summary>Creates and returns a new OutputMessage object.</summary>
      <remarks>When creating a new object, TestStand initializes the OutputMessage.TimeStamp property to the current time, sets the OutputMessage.TextColor property to black, and sets the OutputMessage.IconName property based on the severity.
You must call the OutputMessage.Post method to copy the message to the collection the Engine.GetOutputMessages method returns.</remarks>
      <param name="messageText">Specifies the message text.</param>
      <param name="categoryText">Specifies the category of the message. Applications typically use the category to filter or sort messages. If you do not specify a category, the output message is considered uncategorized. You can specify any value for this parameter.</param>
      <param name="severity">Specifies the severity of the output message.</param>
      <param name="sequenceContext">Specifies the sequence context of the current execution, if available. TestStand extracts information from the sequence context to construct the OutputMessage.FileLocations and OutputMessage.ExecutionLocations properties for the new object.</param>
      <seealso cref="Engine.GetOutputMessages" />
      <seealso cref="Engine.NewOutputMessages" />
      <seealso cref="&#xD;&#xA;&quot;Output Messages (Example)&quot;javascript:TSExamplesLink('/InfoTopics/Output_Messages_Examples.htm')" />
      <seealso cref="OutputMessage" />
      <seealso cref="OutputMessage.ExecutionLocations" />
      <seealso cref="OutputMessage.FileLocations" />
      <seealso cref="OutputMessage.IconName" />
      <seealso cref="OutputMessage.Post" />
      <seealso cref="OutputMessage.TextColor" />
      <seealso cref="OutputMessage.TimeStamp" />
      <seealso cref="OutputMessageSeverityTypes" />
      <seealso cref="SequenceContext" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.OutputMessagesEnabled">
      <summary>Specifies whether TestStand sends <c>UIMsg_OutputMessages</c> messages to the user interface. The default value is <c>True</c>.</summary>
      <remarks>Independent of this property, TestStand always sends output messages to a debugger if you enable the <c>DebugOptions_SendOutputMessagesToDebugger</c> option of the StationOptions.DebugOptions property.</remarks>
      <seealso cref="DebugOptions" />
      <seealso cref="Engine.GetOutputMessages" />
      <seealso cref="OutputMessage.Post" />
      <seealso cref="StationOptions.DebugOptions" />
      <seealso cref="UIMessageCodes" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.OutputMessagesEnabled">
      <summary>Specifies whether TestStand sends <c>UIMsg_OutputMessages</c> messages to the user interface. The default value is <c>True</c>.</summary>
      <remarks>Independent of this property, TestStand always sends output messages to a debugger if you enable the <c>DebugOptions_SendOutputMessagesToDebugger</c> option of the StationOptions.DebugOptions property.</remarks>
      <seealso cref="DebugOptions" />
      <seealso cref="Engine.GetOutputMessages" />
      <seealso cref="OutputMessage.Post" />
      <seealso cref="StationOptions.DebugOptions" />
      <seealso cref="UIMessageCodes" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.NewOutputMessages">
      <summary>Returns a reference to a new OutputMessages object. This collection is initially empty.</summary>
      <remarks>An application typically creates a new OutputMessages object to collect the output messages the application must process or display. The application receives output messages by handling the <c>UIMsg_OutputMessages</c> event and copying the output messages from the collection stored in the UIMessage.ActiveXData property into a private collection.</remarks>
      <seealso cref="OutputMessages" />
      <seealso cref="UIMessage.ActiveXData" />
      <seealso cref="UIMessageCodes" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.NewOutputMessages">
      <summary>Returns a reference to a new OutputMessages object. This collection is initially empty.</summary>
      <remarks>An application typically creates a new OutputMessages object to collect the output messages the application must process or display. The application receives output messages by handling the <c>UIMsg_OutputMessages</c> event and copying the output messages from the collection stored in the UIMessage.ActiveXData property into a private collection.</remarks>
      <seealso cref="OutputMessages" />
      <seealso cref="UIMessage.ActiveXData" />
      <seealso cref="UIMessageCodes" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.NewUndoStack">
      <summary>Creates and returns a new UndoStack object.</summary>
      <remarks>You must call the UndoStack.Clear method on the UndoStack before you release the last reference to it.</remarks>
      <seealso cref="UndoStack" />
      <seealso cref="UndoStack.Clear" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.NewUndoStack">
      <summary>Creates and returns a new UndoStack object.</summary>
      <remarks>You must call the UndoStack.Clear method on the UndoStack before you release the last reference to it.</remarks>
      <seealso cref="UndoStack" />
      <seealso cref="UndoStack.Clear" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.ParseLookupString(System.String,System.Int32)">
      <summary>Converts a lookup string into a String Array of the property names in the lookup string.</summary>
      <param name="lookupString">Specifies the lookup string to parse.</param>
      <param name="options">Specify any combination of ParseLookupStringOptions.</param>
      <seealso cref="ParseLookupStringOptions" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.ParseLookupString(System.String,System.Int32)">
      <summary>Converts a lookup string into a String Array of the property names in the lookup string.</summary>
      <param name="lookupString">Specifies the lookup string to parse.</param>
      <param name="options">Specify any combination of ParseLookupStringOptions.</param>
      <seealso cref="ParseLookupStringOptions" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.DisplayPreconditionBuilderDialog(System.String,System.String@,NationalInstruments.TestStand.Interop.API.Sequence,System.Int32,NationalInstruments.TestStand.Interop.API.SequenceContext)">
      <summary>Launches the Preconditions dialog box, in which you construct the precondition expression of a step.</summary>
      <returns>Returns <c>True</c> if you click OK in the dialog box. Returns <c>False</c> if you click Cancel.</returns>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.</param>
      <param name="preconditionExpr">Specifies the initial precondition expression string for the dialog box. You can pass an empty string for this parameter. This string must be a localized expression.</param>
      <param name="sequence">Specifies the sequence the dialog box displays for building the precondition expression.</param>
      <param name="dlgOptions">Specify <c>CommonDlgOption_NoOptions</c> or <c>CommonDlgOption_ModalToAppMainWind</c>. By default, the dialog box is modal to the last active window of the calling thread, or if there is none, to the last active window from AppMainHwnd. Pass <c>CommonDlgOption_ModalToAppMainWind</c> if you want the dialog box to be modal with respect to the window handle of the AppMainHwnd property. Typically, you do not need to set this option.</param>
      <param name="sequenceContext">Specifies the context to use for browsing expressions. </param>
      <seealso cref="&quot;Preconditions dialog box&quot;javascript:RefLink('/InfoTopics/DB_Preconditions.htm')" />
      <seealso cref="Sequence" />
      <seealso cref="SequenceContext" />
      <seealso cref="Step.Precondition" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.DisplayPreconditionBuilderDialog(System.String,System.String@,NationalInstruments.TestStand.Interop.API.Sequence,System.Int32,NationalInstruments.TestStand.Interop.API.SequenceContext)">
      <summary>Launches the Preconditions dialog box, in which you construct the precondition expression of a step.</summary>
      <returns>Returns <c>True</c> if you click OK in the dialog box. Returns <c>False</c> if you click Cancel.</returns>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.</param>
      <param name="preconditionExpr">Specifies the initial precondition expression string for the dialog box. You can pass an empty string for this parameter. This string must be a localized expression.</param>
      <param name="sequence">Specifies the sequence the dialog box displays for building the precondition expression.</param>
      <param name="dlgOptions">Specify <c>CommonDlgOption_NoOptions</c> or <c>CommonDlgOption_ModalToAppMainWind</c>. By default, the dialog box is modal to the last active window of the calling thread, or if there is none, to the last active window from AppMainHwnd. Pass <c>CommonDlgOption_ModalToAppMainWind</c> if you want the dialog box to be modal with respect to the window handle of the AppMainHwnd property. Typically, you do not need to set this option.</param>
      <param name="sequenceContext">Specifies the context to use for browsing expressions. </param>
      <seealso cref="&quot;Preconditions dialog box&quot;javascript:RefLink('/InfoTopics/DB_Preconditions.htm')" />
      <seealso cref="Sequence" />
      <seealso cref="SequenceContext" />
      <seealso cref="Step.Precondition" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.DisplayConfigureTypePalettesDialog(System.String,System.Int32)">
      <summary>Launches a dialog box in which you can edit the order of the type palettes and add or remove type palettes for the engine to load.</summary>
      <returns>Returns <c>True</c> if you click OK in the dialog box. Returns <c>False</c> if you click Cancel. 
<para>Note: Even if this method returns <c>False</c>, modifications made to sequence files and type palettes might have been saved because some operations in the dialog box prompt you to save a type palette. Saving a type palette prompts you to increment a version number, which is an edit of the file for all files that reference the type.</para></returns>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.</param>
      <param name="dlgOptions">Specify CommonDlgOption_NoOptions or CommonDlgOption_ModalToAppMainWind. By default, the dialog box is modal to the last active window of the calling thread, or if there is none, to the last active window from the Engine.AppMainHwnd property. Pass <c>CommonDlgOption_ModalToAppMainWind</c> if you want a modal dialog box with respect to the window handle of the AppMainHwnd property. Typically, you do not need to set this option.</param>
      <seealso cref="CommonDialogOptions" />
      <seealso cref="Engine.AppMainHwnd" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.DisplayConfigureTypePalettesDialog(System.String,System.Int32)">
      <summary>Launches a dialog box in which you can edit the order of the type palettes and add or remove type palettes for the engine to load.</summary>
      <returns>Returns <c>True</c> if you click OK in the dialog box. Returns <c>False</c> if you click Cancel. 
<para>Note: Even if this method returns <c>False</c>, modifications made to sequence files and type palettes might have been saved because some operations in the dialog box prompt you to save a type palette. Saving a type palette prompts you to increment a version number, which is an edit of the file for all files that reference the type.</para></returns>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.</param>
      <param name="dlgOptions">Specify CommonDlgOption_NoOptions or CommonDlgOption_ModalToAppMainWind. By default, the dialog box is modal to the last active window of the calling thread, or if there is none, to the last active window from the Engine.AppMainHwnd property. Pass <c>CommonDlgOption_ModalToAppMainWind</c> if you want a modal dialog box with respect to the window handle of the AppMainHwnd property. Typically, you do not need to set this option.</param>
      <seealso cref="CommonDialogOptions" />
      <seealso cref="Engine.AppMainHwnd" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.NewEvaluationTypes(System.Int32)">
      <summary>Creates and returns a new EvaluationTypes object.</summary>
      <param name="initialPropertyValueTypes">Specifies the value for the EvaluationTypes.PropertyValueTypeFlags property on the object this method returns.</param>
      <seealso cref="EvaluationTypes" />
      <seealso cref="EvaluationTypes.PropertyValueTypeFlags" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.NewEvaluationTypes(System.Int32)">
      <summary>Creates and returns a new EvaluationTypes object.</summary>
      <param name="initialPropertyValueTypes">Specifies the value for the EvaluationTypes.PropertyValueTypeFlags property on the object this method returns.</param>
      <seealso cref="EvaluationTypes" />
      <seealso cref="EvaluationTypes.PropertyValueTypeFlags" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.DisplayEditNumericFormatDialogEx(System.String,System.String@,System.Boolean@,System.Int32,System.Double)">
      <summary><para>Note: This method is obsolete. Use the PropertyObject.DisplayEditNumericFormatDialog method instead.</para> </summary>
      <remarks>Launches a dialog box in which you can edit a numeric format string used to display numbers.</remarks>
      <returns>Returns <c>True</c> if you click OK in the dialog box. Returns <c>False</c> if you click Cancel.</returns>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.</param>
      <param name="numericFormat">The numeric format string to edit. Enable <c>EditNumFormat_AllowDefaultFormat</c> if you want to pass an empty string.</param>
      <param name="validFormat">Returns <c>True</c> if the returned format is valid, otherwise returns <c>False</c>.</param>
      <param name="dlgOptions">Specifies any combination of the EditNumericFormatOptions constants.</param>
      <param name="sampleNumber">Specifies a number to format initially in the dialog box.</param>
      <seealso cref="EditNumericFormatOptions" />
      <seealso cref="PropertyObject.DisplayEditNumericFormatDialog" />
      <seealso cref="PropertyObject.GetFormattedValue" />
      <seealso cref="PropertyObject.NumericFormat" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.DisplayEditNumericFormatDialogEx(System.String,System.String@,System.Boolean@,System.Int32,System.Double)">
      <summary><para>Note: This method is obsolete. Use the PropertyObject.DisplayEditNumericFormatDialog method instead.</para> </summary>
      <remarks>Launches a dialog box in which you can edit a numeric format string used to display numbers.</remarks>
      <returns>Returns <c>True</c> if you click OK in the dialog box. Returns <c>False</c> if you click Cancel.</returns>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.</param>
      <param name="numericFormat">The numeric format string to edit. Enable <c>EditNumFormat_AllowDefaultFormat</c> if you want to pass an empty string.</param>
      <param name="validFormat">Returns <c>True</c> if the returned format is valid, otherwise returns <c>False</c>.</param>
      <param name="dlgOptions">Specifies any combination of the EditNumericFormatOptions constants.</param>
      <param name="sampleNumber">Specifies a number to format initially in the dialog box.</param>
      <seealso cref="EditNumericFormatOptions" />
      <seealso cref="PropertyObject.DisplayEditNumericFormatDialog" />
      <seealso cref="PropertyObject.GetFormattedValue" />
      <seealso cref="PropertyObject.NumericFormat" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.NewUndoItemCreator(NationalInstruments.TestStand.Interop.API.EditKinds,NationalInstruments.TestStand.Interop.API.PropertyObjectFile,System.String)">
      <summary>Creates and returns a new UndoItemCreator object.</summary>
      <param name="kindParam">Specifies the kind of edit for which the UndoItemCreator creates an undo item.</param>
      <param name="editedFileParam">Specifies the file you are editing.</param>
      <param name="editDescription">Specifies a string to use as the UndoDescription and RedoDescription of the undo item the UndoItemCreator creates. If you pass an empty string, the UndoItemCreator uses a default description.</param>
      <seealso cref="EditKinds" />
      <seealso cref="PropertyObjectFile" />
      <seealso cref="UndoItemCreator" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.NewUndoItemCreator(NationalInstruments.TestStand.Interop.API.EditKinds,NationalInstruments.TestStand.Interop.API.PropertyObjectFile,System.String)">
      <summary>Creates and returns a new UndoItemCreator object.</summary>
      <param name="kindParam">Specifies the kind of edit for which the UndoItemCreator creates an undo item.</param>
      <param name="editedFileParam">Specifies the file you are editing.</param>
      <param name="editDescription">Specifies a string to use as the UndoDescription and RedoDescription of the undo item the UndoItemCreator creates. If you pass an empty string, the UndoItemCreator uses a default description.</param>
      <seealso cref="EditKinds" />
      <seealso cref="PropertyObjectFile" />
      <seealso cref="UndoItemCreator" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.GetFileInformation(System.String)">
      <summary>Creates and returns a reference to a new FileInformation object you use to retrieve information about a specified file, such as file version, file format version and whether it is a Sequence File or a custom format file.</summary>
      <remarks>TestStand does not access the file you specify when it calls this method. TestStand accesses the file when you call the properties and methods on the FileInformation object. Thus, TestStand returns a new FileInformation object when the file does not exist at the specified path. Calling methods or properties on a FileInformation object might throw an exception if the file cannot be located. To verify that the file exists on disk and is accessible at the given path, use the FileInformation.FileExists property.</remarks>
      <returns>Returns a new FileInformation object.</returns>
      <param name="path">Specifies the absolute pathname of the file.</param>
      <seealso cref="FileInformation" />
      <seealso cref="FileInformation.FileExists" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.GetFileInformation(System.String)">
      <summary>Creates and returns a reference to a new FileInformation object you use to retrieve information about a specified file, such as file version, file format version and whether it is a Sequence File or a custom format file.</summary>
      <remarks>TestStand does not access the file you specify when it calls this method. TestStand accesses the file when you call the properties and methods on the FileInformation object. Thus, TestStand returns a new FileInformation object when the file does not exist at the specified path. Calling methods or properties on a FileInformation object might throw an exception if the file cannot be located. To verify that the file exists on disk and is accessible at the given path, use the FileInformation.FileExists property.</remarks>
      <returns>Returns a new FileInformation object.</returns>
      <param name="path">Specifies the absolute pathname of the file.</param>
      <seealso cref="FileInformation" />
      <seealso cref="FileInformation.FileExists" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.DiffSequenceFiles(NationalInstruments.TestStand.Interop.API.SequenceFile,NationalInstruments.TestStand.Interop.API.SequenceFile,System.Int32)">
      <summary></summary>
      <param name="sequenceFile1Param">Specifies</param>
      <param name="sequenceFile2Param">Specifies</param>
      <param name="options">Specifies</param>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.DiffSequenceFiles(NationalInstruments.TestStand.Interop.API.SequenceFile,NationalInstruments.TestStand.Interop.API.SequenceFile,System.Int32)">
      <summary></summary>
      <param name="sequenceFile1Param">Specifies</param>
      <param name="sequenceFile2Param">Specifies</param>
      <param name="options">Specifies</param>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.GetTemplatesFile(System.Int32)">
      <summary>Returns the PropertyObjectFile that contains templates for variables, steps, and sequences you can insert while editing. </summary>
      <returns>The file that contains the editing templates.</returns>
      <param name="options">Specifies any combination of GetTemplatesFileOptions.</param>
      <seealso cref="GetTemplatesFileOptions" />
      <seealso cref="PropertyObjectFile" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.GetTemplatesFile(System.Int32)">
      <summary>Returns the PropertyObjectFile that contains templates for variables, steps, and sequences you can insert while editing. </summary>
      <returns>The file that contains the editing templates.</returns>
      <param name="options">Specifies any combination of GetTemplatesFileOptions.</param>
      <seealso cref="GetTemplatesFileOptions" />
      <seealso cref="PropertyObjectFile" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.AcquireLicense(NationalInstruments.TestStand.Interop.API.ApplicationLicenses,System.Int32)">
      <summary>Instructs TestStand to acquire a type of license for the application. When the license is no longer required, call the Engine.ReleaseLicense method using the handle this method returns. An application requires a type of license until you release all license handles for the license type.</summary>
      <remarks>If TestStand cannot acquire the license and you do not pass AcquireLicenseOption_SuppressStartupDialog to the options parameter, TestStand launches a dialog box that prompts you to evaluate, activate, or purchase TestStand. This method returns an error if TestStand cannot acquire the required license.
The Application Manager control automatically calls this method when you call the ApplicationMgr.Start method. When using an Application Manager control to start the engine, set the ApplicationMgr.IsEditor property before calling <c>ApplicationMgr.Start</c>.</remarks>
      <returns>A handle to the acquired license.</returns>
      <param name="license">Specifies the type of license to acquire.</param>
      <param name="options">Specifies one or more AcquireLicenseOptions options.</param>
      <seealso cref="&quot;Activating Your Software with the NI License Manager&quot;javascript:TSHelpLink('/NITopics/nilm.html')" />
      <seealso cref="AcquireLicenseOptions" />
      <seealso cref="ApplicationLicenses" />
      <seealso cref="&quot;ApplicationMgr.IsEditor&quot;javascript:UILink('/RefTopics/ApplicationMgr_IsEditor_P.htm')" />
      <seealso cref="&quot;ApplicationMgr.Start&quot;javascript:UILink('/RefTopics/ApplicationMgr_Start_M.htm')" />
      <seealso cref="Engine.ReleaseLicense" />
      <seealso cref="&quot;TestStand Licensing Options&quot;javascript:TSHelpLink('/InfoTopics/Licensing_Options.html')" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.AcquireLicense(NationalInstruments.TestStand.Interop.API.ApplicationLicenses,System.Int32)">
      <summary>Instructs TestStand to acquire a type of license for the application. When the license is no longer required, call the Engine.ReleaseLicense method using the handle this method returns. An application requires a type of license until you release all license handles for the license type.</summary>
      <remarks>If TestStand cannot acquire the license and you do not pass AcquireLicenseOption_SuppressStartupDialog to the options parameter, TestStand launches a dialog box that prompts you to evaluate, activate, or purchase TestStand. This method returns an error if TestStand cannot acquire the required license.
The Application Manager control automatically calls this method when you call the ApplicationMgr.Start method. When using an Application Manager control to start the engine, set the ApplicationMgr.IsEditor property before calling <c>ApplicationMgr.Start</c>.</remarks>
      <returns>A handle to the acquired license.</returns>
      <param name="license">Specifies the type of license to acquire.</param>
      <param name="options">Specifies one or more AcquireLicenseOptions options.</param>
      <seealso cref="&quot;Activating Your Software with the NI License Manager&quot;javascript:TSHelpLink('/NITopics/nilm.html')" />
      <seealso cref="AcquireLicenseOptions" />
      <seealso cref="ApplicationLicenses" />
      <seealso cref="&quot;ApplicationMgr.IsEditor&quot;javascript:UILink('/RefTopics/ApplicationMgr_IsEditor_P.htm')" />
      <seealso cref="&quot;ApplicationMgr.Start&quot;javascript:UILink('/RefTopics/ApplicationMgr_Start_M.htm')" />
      <seealso cref="Engine.ReleaseLicense" />
      <seealso cref="&quot;TestStand Licensing Options&quot;javascript:TSHelpLink('/InfoTopics/Licensing_Options.html')" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.ReleaseLicense(System.Int32,System.Int32)">
      <summary>Informs TestStand that a previously acquired license is no longer needed. An application requires a type of license until you release all license handles for the license type.</summary>
      <param name="licenseHandle">Specifies the license handle to release. Pass a handle the Engine.AcquireLicense method returned.</param>
      <param name="reserved">Reserved for future use.</param>
      <seealso cref="Engine.AcquireLicense" />
      <seealso cref="&quot;TestStand Licensing Options&quot;javascript:TSHelpLink('/InfoTopics/Licensing_Options.html')" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.ReleaseLicense(System.Int32,System.Int32)">
      <summary>Informs TestStand that a previously acquired license is no longer needed. An application requires a type of license until you release all license handles for the license type.</summary>
      <param name="licenseHandle">Specifies the license handle to release. Pass a handle the Engine.AcquireLicense method returned.</param>
      <param name="reserved">Reserved for future use.</param>
      <seealso cref="Engine.AcquireLicense" />
      <seealso cref="&quot;TestStand Licensing Options&quot;javascript:TSHelpLink('/InfoTopics/Licensing_Options.html')" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.ApplicationLicense">
      <summary>Returns the type of license the application is using. Use the Engine.AcquireLicense method to instruct TestStand to acquire a type of license for the application, and use the Engine.ReleaseLicense method to inform TestStand when an acquired license is no longer needed.</summary>
      <seealso cref="Engine.AcquireLicense" />
      <seealso cref="Engine.ReleaseLicense" />
      <seealso cref="&quot;TestStand Licensing Options&quot;javascript:TSHelpLink('/InfoTopics/Licensing_Options.html')" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.ApplicationLicense">
      <summary>Returns the type of license the application is using. Use the Engine.AcquireLicense method to instruct TestStand to acquire a type of license for the application, and use the Engine.ReleaseLicense method to inform TestStand when an acquired license is no longer needed.</summary>
      <seealso cref="Engine.AcquireLicense" />
      <seealso cref="Engine.ReleaseLicense" />
      <seealso cref="&quot;TestStand Licensing Options&quot;javascript:TSHelpLink('/InfoTopics/Licensing_Options.html')" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.UndoLimit">
      <summary>Specifies the maximum number of undo items an UndoStack can contain. The default value is <c>-1</c>, which means no limit exists to the number of undo items an UndoStack can contain.</summary>
      <remarks>Setting this property does not remove undo items from UndoStacks. When you push an undo item onto an UndoStack, the UndoStack removes the oldest undo items from the UndoStack so that the number of items on the UndoStack does not exceed the UndoLimit.
The Engine initializes this property to <c>-1</c>. The Engine does not persist the value of this property.</remarks>
      <seealso cref="UndoStack" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.UndoLimit">
      <summary>Specifies the maximum number of undo items an UndoStack can contain. The default value is <c>-1</c>, which means no limit exists to the number of undo items an UndoStack can contain.</summary>
      <remarks>Setting this property does not remove undo items from UndoStacks. When you push an undo item onto an UndoStack, the UndoStack removes the oldest undo items from the UndoStack so that the number of items on the UndoStack does not exceed the UndoLimit.
The Engine initializes this property to <c>-1</c>. The Engine does not persist the value of this property.</remarks>
      <seealso cref="UndoStack" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.ExpandPathMacros(System.String@)">
      <summary>Expands all supported macros in the path string.</summary>
      <remarks>32-bit TestStand replaces the <c>$(Platform)</c> path macro with <c>win32</c>, and 64-bit TestStand replaces the macro with <c>x64</c>.  For example, 32-bit TestStand replaces <c>C:\bin\$(Platform)\module.dll</c> with <c>C:\bin\win32\module.dll</c>, and 64-bit TestStand replaces the same macro with <c>C:\bin\x64\module.dll</c>. TestStand does not change paths that do not contain macros.
Using a second <c>$</c> character escapes the macro to form a literal part of a path. For example, TestStand expands <c>C:\bin\$$(Platform)\module.dll</c> to <c>C:\bin\$(Platform)\module.dll</c>. This method returns <c>False</c> if TestStand escapes but does not expand a macro.</remarks>
      <returns>Returns <c>True</c> if at least one macro was found and expanded. Returns <c>False</c> if no macros were expanded.</returns>
      <param name="pathString">The path string in which to expand path macros. If TestStand expands the macros, it modifies this string.</param>
      <seealso cref="Engine.FindFileEx" />
      <seealso cref="Engine.FindPath" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.ExpandPathMacros(System.String@)">
      <summary>Expands all supported macros in the path string.</summary>
      <remarks>32-bit TestStand replaces the <c>$(Platform)</c> path macro with <c>win32</c>, and 64-bit TestStand replaces the macro with <c>x64</c>.  For example, 32-bit TestStand replaces <c>C:\bin\$(Platform)\module.dll</c> with <c>C:\bin\win32\module.dll</c>, and 64-bit TestStand replaces the same macro with <c>C:\bin\x64\module.dll</c>. TestStand does not change paths that do not contain macros.
Using a second <c>$</c> character escapes the macro to form a literal part of a path. For example, TestStand expands <c>C:\bin\$$(Platform)\module.dll</c> to <c>C:\bin\$(Platform)\module.dll</c>. This method returns <c>False</c> if TestStand escapes but does not expand a macro.</remarks>
      <returns>Returns <c>True</c> if at least one macro was found and expanded. Returns <c>False</c> if no macros were expanded.</returns>
      <param name="pathString">The path string in which to expand path macros. If TestStand expands the macros, it modifies this string.</param>
      <seealso cref="Engine.FindFileEx" />
      <seealso cref="Engine.FindPath" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.Is64Bit">
      <summary>Indicates whether this instance of the TestStand Engine is 64-bit.</summary>
      <returns>Returns <c>True</c> if this instance of the TestStand Engine is 64-bit.</returns>
      <seealso cref="Engine.ExpandPathMacros" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.Is64Bit">
      <summary>Indicates whether this instance of the TestStand Engine is 64-bit.</summary>
      <returns>Returns <c>True</c> if this instance of the TestStand Engine is 64-bit.</returns>
      <seealso cref="Engine.ExpandPathMacros" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.LargeImageListEx">
      <summary>Returns the Microsoft Windows handle for the TestStand list of large images.</summary>
      <remarks>The TestStand Engine maintains lists of images for all the icons from the <c>&lt;TestStand&gt;\Components\Icons</c> and <c>&lt;TestStand&#160;Public&gt;\Components\Icons</c> directories and images you add using the Engine.AddImage method. TestStand separates the images according to size and places each image in the list of large images or in the list of small images.
This method returns a Windows handle, HIMAGELIST, for the list of large images. The type of the variant matches the architecture of the TestStand Engine, for example, <c>VT_UI4</c> for 32-bit TestStand and <c>VT_UI8</c> for 64-bit TestStand. You can use the image list functions in the Microsoft Windows Platform Software Development Kit to access the images in the list. Use this property as an alternative to using the Images collection.
<para>Note: You can access this image list only from the process that created it, which is the process that created the engine.</para></remarks>
      <seealso cref="Engine.AddImage" />
      <seealso cref="Engine.GetImageIndex" />
      <seealso cref="Engine.GetImageName" />
      <seealso cref="Engine.NumImages" />
      <seealso cref="Engine.SmallImageListEx" />
      <seealso cref="Images" />
      <seealso cref="Step.LargeIconIndex" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.LargeImageListEx">
      <summary>Returns the Microsoft Windows handle for the TestStand list of large images.</summary>
      <remarks>The TestStand Engine maintains lists of images for all the icons from the <c>&lt;TestStand&gt;\Components\Icons</c> and <c>&lt;TestStand&#160;Public&gt;\Components\Icons</c> directories and images you add using the Engine.AddImage method. TestStand separates the images according to size and places each image in the list of large images or in the list of small images.
This method returns a Windows handle, HIMAGELIST, for the list of large images. The type of the variant matches the architecture of the TestStand Engine, for example, <c>VT_UI4</c> for 32-bit TestStand and <c>VT_UI8</c> for 64-bit TestStand. You can use the image list functions in the Microsoft Windows Platform Software Development Kit to access the images in the list. Use this property as an alternative to using the Images collection.
<para>Note: You can access this image list only from the process that created it, which is the process that created the engine.</para></remarks>
      <seealso cref="Engine.AddImage" />
      <seealso cref="Engine.GetImageIndex" />
      <seealso cref="Engine.GetImageName" />
      <seealso cref="Engine.NumImages" />
      <seealso cref="Engine.SmallImageListEx" />
      <seealso cref="Images" />
      <seealso cref="Step.LargeIconIndex" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.RegisterUIMessageCallbackEx(System.Object)">
      <summary>Registers a C function as the user interface message event callback.
<para>Note: National Instruments recommends using the Application Manager control with the ApplicationMgr.AfterUIMessageEvent and ApplicationMgr.UIMessageEvent events as needed. Refer to the example user interface applications TestStand provides, located in the <c>&lt;TestStand&gt;\UserInterfaces</c> directory.</para></summary>
      <remarks>You can use a C function as the Event callback, instead of using ActiveX events or polling. Ensure the Engine.UIMessagePollingEnabled property is <c>False</c> or TestStand does not call the callback.
The callback function must use the following C function prototype:
<c>void __cdecl UIMessageCallback(struct IDispatch *UIMessageDisp);</c>
The UIMessageDisp parameter is the IDispatch pointer to a UIMessage object. Because this pointer is passed to the callback as a parameter, do not release it when you finish using it.
<para>Note: Use this method only inside of the sequence editor or user interface.</para></remarks>
      <param name="callbackFuncAddr">Specifies the address of the callback function. The type of the variant must match the pointer size for the current platform, for example <c>VT_UI4</c> for 32-bit TestStand and <c>VT_UI8</c> for 64-bit TestStand.</param>
      <seealso cref="Engine.GetUIMessage" />
      <seealso cref="Engine.UIMessageEvent" />
      <seealso cref="Engine.UIMessagePollingEnabled" />
      <seealso cref="StationOptions.UIMessageDelay" />
      <seealso cref="StationOptions.UIMessageMinDelay" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.RegisterUIMessageCallbackEx(System.Object)">
      <summary>Registers a C function as the user interface message event callback.
<para>Note: National Instruments recommends using the Application Manager control with the ApplicationMgr.AfterUIMessageEvent and ApplicationMgr.UIMessageEvent events as needed. Refer to the example user interface applications TestStand provides, located in the <c>&lt;TestStand&gt;\UserInterfaces</c> directory.</para></summary>
      <remarks>You can use a C function as the Event callback, instead of using ActiveX events or polling. Ensure the Engine.UIMessagePollingEnabled property is <c>False</c> or TestStand does not call the callback.
The callback function must use the following C function prototype:
<c>void __cdecl UIMessageCallback(struct IDispatch *UIMessageDisp);</c>
The UIMessageDisp parameter is the IDispatch pointer to a UIMessage object. Because this pointer is passed to the callback as a parameter, do not release it when you finish using it.
<para>Note: Use this method only inside of the sequence editor or user interface.</para></remarks>
      <param name="callbackFuncAddr">Specifies the address of the callback function. The type of the variant must match the pointer size for the current platform, for example <c>VT_UI4</c> for 32-bit TestStand and <c>VT_UI8</c> for 64-bit TestStand.</param>
      <seealso cref="Engine.GetUIMessage" />
      <seealso cref="Engine.UIMessageEvent" />
      <seealso cref="Engine.UIMessagePollingEnabled" />
      <seealso cref="StationOptions.UIMessageDelay" />
      <seealso cref="StationOptions.UIMessageMinDelay" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.SmallImageListEx">
      <summary>Returns the Microsoft Windows handle for the TestStand list of small images.</summary>
      <remarks>The TestStand Engine maintains lists of images for all the icons from the <c>&lt;TestStand&gt;\Components\Icons</c> and <c>"&lt;TestStand&#160;Public&gt;\Components\Icons</c> directories and images you add using the Engine.AddImage method. TestStand separates the images according to size and places each image in the list of large images or in the list of small images.
This method returns a Windows handle, HIMAGELIST, for the list of small images. The type of the variant matches the architecture of the TestStand Engine, for example, <c>VT_UI4</c> for 32-bit TestStand and <c>VT_UI8</c> for 64-bit TestStand. You can use the image list functions in the Microsoft Windows Platform Software Development Kit to access the images in the list. Use this property as an alternative to using the Images collection.
<para>Note: You can access this image list only from the process that created it, which is the process that created the engine.</para></remarks>
      <seealso cref="Engine.AddImage" />
      <seealso cref="Engine.GetImageIndex" />
      <seealso cref="Engine.GetImageName" />
      <seealso cref="Engine.LargeImageListEx" />
      <seealso cref="Engine.NumImages" />
      <seealso cref="Images" />
      <seealso cref="Step.SmallIconIndex" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.SmallImageListEx">
      <summary>Returns the Microsoft Windows handle for the TestStand list of small images.</summary>
      <remarks>The TestStand Engine maintains lists of images for all the icons from the <c>&lt;TestStand&gt;\Components\Icons</c> and <c>"&lt;TestStand&#160;Public&gt;\Components\Icons</c> directories and images you add using the Engine.AddImage method. TestStand separates the images according to size and places each image in the list of large images or in the list of small images.
This method returns a Windows handle, HIMAGELIST, for the list of small images. The type of the variant matches the architecture of the TestStand Engine, for example, <c>VT_UI4</c> for 32-bit TestStand and <c>VT_UI8</c> for 64-bit TestStand. You can use the image list functions in the Microsoft Windows Platform Software Development Kit to access the images in the list. Use this property as an alternative to using the Images collection.
<para>Note: You can access this image list only from the process that created it, which is the process that created the engine.</para></remarks>
      <seealso cref="Engine.AddImage" />
      <seealso cref="Engine.GetImageIndex" />
      <seealso cref="Engine.GetImageName" />
      <seealso cref="Engine.LargeImageListEx" />
      <seealso cref="Engine.NumImages" />
      <seealso cref="Images" />
      <seealso cref="Step.SmallIconIndex" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.HasAddonLicense(System.String)">
      <summary>Provides a way for addon products to check the licensing status of a specified feature.</summary>
      <remarks>TestStand acquires licenses for associated addon products when you call the Engine.AcquireLicense method.</remarks>
      <returns>Returns <c>True</c> if TestStand was able to successfully check out the specified addon license.</returns>
      <param name="addonFeatureName">Specifies the name of the feature to check the status of.</param>
      <seealso cref="Engine.AcquireLicense" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.HasAddonLicense(System.String)">
      <summary>Provides a way for addon products to check the licensing status of a specified feature.</summary>
      <remarks>TestStand acquires licenses for associated addon products when you call the Engine.AcquireLicense method.</remarks>
      <returns>Returns <c>True</c> if TestStand was able to successfully check out the specified addon license.</returns>
      <param name="addonFeatureName">Specifies the name of the feature to check the status of.</param>
      <seealso cref="Engine.AcquireLicense" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.NewPropertyObjectType(NationalInstruments.TestStand.Interop.API.PropertyValueTypes,System.String,NationalInstruments.TestStand.Interop.API.PropertyObjectType,System.Boolean)">
      <summary>Creates and returns a new PropertyObjectType object.</summary>
      <remarks>You can use this method to create an object to assign to the AdditionalResult.Type property.</remarks>
      <param name="ValueType">Specifies the value of the PropertyObjectType.ValueType property of the object this method creates. If you pass <c>PropValType_NamedType</c>, this method uses the type you specify with the TypeName parameter to determine the values of the properties of the <c>PropertyObjectType</c> object this method creates.</param>
      <param name="TypeName">Specifies the value of the PropertyObjectType.TypeName property of the object this method creates. If you pass <c>PropValType_NamedType</c> for the ValueType parameter, pass the name of a currently loaded type. Otherwise, pass an empty string. If you specify a type name, this method uses the type you specify to determine the values of the properties of the <c>PropertyObjectType</c> object this method creates instead of the other parameters you pass to this method.</param>
      <param name="ElementType">Specifies the value of the PropertyObjectType.ElementType property of the object this method creates. Pass a  <c>PropertyObjectType</c> object if you pass <c>PropValType_Array</c> for the ValueType parameter. Otherwise, pass <c>NULL</c>. Typically, you make another call to this method to create an object to pass for this parameter.</param>
      <param name="IsObject">Specifies the value of the PropertyObjectType.IsObject property of the object this method creates. Pass <c>False</c> for this parameter only to create an object for the type of an element of an array of numbers, Boolean values, strings, or references.</param>
      <seealso cref="PropertyObjectType" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.NewPropertyObjectType(NationalInstruments.TestStand.Interop.API.PropertyValueTypes,System.String,NationalInstruments.TestStand.Interop.API.PropertyObjectType,System.Boolean)">
      <summary>Creates and returns a new PropertyObjectType object.</summary>
      <remarks>You can use this method to create an object to assign to the AdditionalResult.Type property.</remarks>
      <param name="ValueType">Specifies the value of the PropertyObjectType.ValueType property of the object this method creates. If you pass <c>PropValType_NamedType</c>, this method uses the type you specify with the TypeName parameter to determine the values of the properties of the <c>PropertyObjectType</c> object this method creates.</param>
      <param name="TypeName">Specifies the value of the PropertyObjectType.TypeName property of the object this method creates. If you pass <c>PropValType_NamedType</c> for the ValueType parameter, pass the name of a currently loaded type. Otherwise, pass an empty string. If you specify a type name, this method uses the type you specify to determine the values of the properties of the <c>PropertyObjectType</c> object this method creates instead of the other parameters you pass to this method.</param>
      <param name="ElementType">Specifies the value of the PropertyObjectType.ElementType property of the object this method creates. Pass a  <c>PropertyObjectType</c> object if you pass <c>PropValType_Array</c> for the ValueType parameter. Otherwise, pass <c>NULL</c>. Typically, you make another call to this method to create an object to pass for this parameter.</param>
      <param name="IsObject">Specifies the value of the PropertyObjectType.IsObject property of the object this method creates. Pass <c>False</c> for this parameter only to create an object for the type of an element of an array of numbers, Boolean values, strings, or references.</param>
      <seealso cref="PropertyObjectType" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.NewResultLogger">
      <summary>Creates and returns a new ResultLogger object.</summary>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.NewResultLogger">
      <summary>Creates and returns a new ResultLogger object.</summary>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.NewResultLog">
      <summary>Creates and returns a new ResultLog object.</summary>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.NewResultLog">
      <summary>Creates and returns a new ResultLog object.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.DotNetGarbageCollectionInterval">
      <summary>Specifies the interval, in milliseconds, at which TestStand forces .NET garbage collection. Set this property to a value less than or equal to <c>0</c> to disable automatic garbage collection by the TestStand Engine. By default, in applications that use the TestStand ApplicationMgr control, this value is set to <c>3000</c> (3-second interval). In applications that do not use the ApplicationMgr control, this property is set to <c>-1</c>. Forcing garbage collection at regular intervals reduces memory usage and improves performance by ensuring that TestStand objects that have previously been referenced in .NET code are promptly freed or marked for reuse.</summary>
      <remarks>If you use the default interval setting and notice constant CPU usage for the garbage collection the garbage collection timer performs, the following issues are the most likely causes:<para><para>&#160;&#160;&#160;&#160;* A significant number of managed objects (on the order of tens of millions or more)&#8211;If you have too many managed objects, increase the garbage collection interval.</para><para>&#160;&#160;&#160;&#160;* Leaking managed objects&#8211;Managed objects can leak as a result of unexpected unreleased references, such as references incurred when you add an event handler with an instance method. Use .NET leak detection tools to identify unreleased references.</para></para>
<para>Note: The garbage collection this property handles applies only to the version of the .NET Common Language Runtime (CLR) the TestStand Engine uses directly. If you are using a different version of the .NET CLR for a user interface, implement a timer for garbage collection in which you call the .NET Framework    <c>GC.Collect</c> method to collect objects from that version of the .NET CLR.</para></remarks>
      <seealso cref="Engine.DoDotNetGarbageCollection" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.DotNetGarbageCollectionInterval">
      <summary>Specifies the interval, in milliseconds, at which TestStand forces .NET garbage collection. Set this property to a value less than or equal to <c>0</c> to disable automatic garbage collection by the TestStand Engine. By default, in applications that use the TestStand ApplicationMgr control, this value is set to <c>3000</c> (3-second interval). In applications that do not use the ApplicationMgr control, this property is set to <c>-1</c>. Forcing garbage collection at regular intervals reduces memory usage and improves performance by ensuring that TestStand objects that have previously been referenced in .NET code are promptly freed or marked for reuse.</summary>
      <remarks>If you use the default interval setting and notice constant CPU usage for the garbage collection the garbage collection timer performs, the following issues are the most likely causes:<para><para>&#160;&#160;&#160;&#160;* A significant number of managed objects (on the order of tens of millions or more)&#8211;If you have too many managed objects, increase the garbage collection interval.</para><para>&#160;&#160;&#160;&#160;* Leaking managed objects&#8211;Managed objects can leak as a result of unexpected unreleased references, such as references incurred when you add an event handler with an instance method. Use .NET leak detection tools to identify unreleased references.</para></para>
<para>Note: The garbage collection this property handles applies only to the version of the .NET Common Language Runtime (CLR) the TestStand Engine uses directly. If you are using a different version of the .NET CLR for a user interface, implement a timer for garbage collection in which you call the .NET Framework    <c>GC.Collect</c> method to collect objects from that version of the .NET CLR.</para></remarks>
      <seealso cref="Engine.DoDotNetGarbageCollection" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.DoDotNetGarbageCollection(System.Int32)">
      <summary>Forces .NET garbage collection and waits for pending finalizers to ensure that all unreferenced COM objects that have ever been referenced in .NET in the TestStand process are synchronously freed.
For example, if you are handling events from any of the TestStand User Interface (UI) controls in a .NET user interface, .NET references all the parameters to all the events for the TestStand UI Control. The lifetimes of these parameters are extended until garbage collection occurs. When you use .NET to handle any event on an ActiveX control, such as a TestStand UI Control, the .NET Framework handles all events for that control even if you do not handle the events directly in code. 
In addition, if sequences pass TestStand interface objects as parameters to .NET code modules, .NET references those parameters, which extends the lifetimes of those parameters until garbage collection occurs.</summary>
      <remarks>You typically do not need to call this method because TestStand automatically calls this method at various critical points, such as when an execution completes or when a sequence file or execution closes.
<para>Note: The garbage collection this method performs applies only to the version of the .NET CLR the TestStand Engine uses directly. To ensure objects from another .NET CLR version are destroyed, such as when you implement a user interface in a different version of the .NET CLR, call the <c>System.GC.Collect</c> and <c>System.GC.WaitForPendingFinalizers</c> .NET Framework methods in that version of the .NET CLR.</para></remarks>
      <param name="reserved">Reserved for future use. You must always pass <c>0</c> for this parameter.</param>
      <seealso cref="Engine.DotNetCLRVersion" />
      <seealso cref="Engine.DotNetGarbageCollectionInterval" />
      <seealso cref="&quot;Managing Versions of .NET to Use with TestStand&quot;javascript:RefLink('/InfoTopics/NET_CLR.htm')" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.DoDotNetGarbageCollection(System.Int32)">
      <summary>Forces .NET garbage collection and waits for pending finalizers to ensure that all unreferenced COM objects that have ever been referenced in .NET in the TestStand process are synchronously freed.
For example, if you are handling events from any of the TestStand User Interface (UI) controls in a .NET user interface, .NET references all the parameters to all the events for the TestStand UI Control. The lifetimes of these parameters are extended until garbage collection occurs. When you use .NET to handle any event on an ActiveX control, such as a TestStand UI Control, the .NET Framework handles all events for that control even if you do not handle the events directly in code. 
In addition, if sequences pass TestStand interface objects as parameters to .NET code modules, .NET references those parameters, which extends the lifetimes of those parameters until garbage collection occurs.</summary>
      <remarks>You typically do not need to call this method because TestStand automatically calls this method at various critical points, such as when an execution completes or when a sequence file or execution closes.
<para>Note: The garbage collection this method performs applies only to the version of the .NET CLR the TestStand Engine uses directly. To ensure objects from another .NET CLR version are destroyed, such as when you implement a user interface in a different version of the .NET CLR, call the <c>System.GC.Collect</c> and <c>System.GC.WaitForPendingFinalizers</c> .NET Framework methods in that version of the .NET CLR.</para></remarks>
      <param name="reserved">Reserved for future use. You must always pass <c>0</c> for this parameter.</param>
      <seealso cref="Engine.DotNetCLRVersion" />
      <seealso cref="Engine.DotNetGarbageCollectionInterval" />
      <seealso cref="&quot;Managing Versions of .NET to Use with TestStand&quot;javascript:RefLink('/InfoTopics/NET_CLR.htm')" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.SecondsAtStartIn1970UniversalCoordinatedTime">
      <summary>Returns the time in seconds at which the engine started since midnight (00:00:00), January 1, 1970, coordinated universal time (UTC). UTC is also known as Greenwich mean time.</summary>
      <remarks>Some time values in TestStand, such as the <c>TS.StartTime</c> property of a step result, are in terms of seconds since the engine started. You can add the value of the <c>Engine.SecondsAtStartIn1970UniversalCoordinatedTime</c> property to these times to convert to a universal time base.</remarks>
      <seealso cref="Engine.SecondsSince1970UniversalCoordinatedTime" />
      <seealso cref="Engine.SecondsSinceStart" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.SecondsAtStartIn1970UniversalCoordinatedTime">
      <summary>Returns the time in seconds at which the engine started since midnight (00:00:00), January 1, 1970, coordinated universal time (UTC). UTC is also known as Greenwich mean time.</summary>
      <remarks>Some time values in TestStand, such as the <c>TS.StartTime</c> property of a step result, are in terms of seconds since the engine started. You can add the value of the <c>Engine.SecondsAtStartIn1970UniversalCoordinatedTime</c> property to these times to convert to a universal time base.</remarks>
      <seealso cref="Engine.SecondsSince1970UniversalCoordinatedTime" />
      <seealso cref="Engine.SecondsSinceStart" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.DisplayPasswordProtectTypeDefinitionsDialog(System.Object[],System.Object[],System.Int32)">
      <summary>Displays the Password Protect Type Definitions dialog box, in which you can edit the password protection settings of the types you specify. </summary>
      <remarks><para>Note: TestStand supports password-protecting type definitions to deter unauthorized users from editing the types in the sequence editor. However, any TestStand user can continue to programmatically edit a locked type by using the TestStand PropertyObject API. National Instruments does not recommend password-protecting types as the only way of protecting intellectual property.</para></remarks>
      <returns>Returns <c>True</c> if the user clicked OK in the dialog box and <c>False</c> if the user clicked Cancel. When this method returns <c>True</c>, use the modifiedTypeDefinitions parameter to determine which types, if any, were modified.</returns>
      <param name="typeDefinitions">Specifies an array of type definitions for which you want to edit the password protection information.</param>
      <param name="modifiedTypeDefinitions">Returns the subset of types you passed to the typeDefinitions parameter the user modified in the dialog box. The dialog box might modify only a subset of the types because some of the types might already use the settings the user specified. </param>
      <param name="dlgOptions">Specifies the CommonDialogOptions option you want to use. Use the bitwise-OR operator to specify more than one option.</param>
      <seealso cref="CommonDialogOptions" />
      <seealso cref="Engine.DisplayUnlockTypeDefinitionsDialog" />
      <seealso cref="&quot;Password Protect Type Definitions dialog box&quot;javascript:RefLink('/InfoTopics/DB_Pass_Protect_Type_Defs.htm')" />
      <seealso cref="PropertyObject.GetTypeDefinitionProtection" />
      <seealso cref="PropertyObject.LockTypeDefinition" />
      <seealso cref="PropertyObject.SetTypeDefinitionProtection" />
      <seealso cref="PropertyObject.TypeDefinitionLocked" />
      <seealso cref="PropertyObject.UnlockTypeDefinition" />
      <seealso cref="ProtectedObjectOptions" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.DisplayPasswordProtectTypeDefinitionsDialog(System.Object[],System.Object[],System.Int32)">
      <summary>Displays the Password Protect Type Definitions dialog box, in which you can edit the password protection settings of the types you specify. </summary>
      <remarks><para>Note: TestStand supports password-protecting type definitions to deter unauthorized users from editing the types in the sequence editor. However, any TestStand user can continue to programmatically edit a locked type by using the TestStand PropertyObject API. National Instruments does not recommend password-protecting types as the only way of protecting intellectual property.</para></remarks>
      <returns>Returns <c>True</c> if the user clicked OK in the dialog box and <c>False</c> if the user clicked Cancel. When this method returns <c>True</c>, use the modifiedTypeDefinitions parameter to determine which types, if any, were modified.</returns>
      <param name="typeDefinitions">Specifies an array of type definitions for which you want to edit the password protection information.</param>
      <param name="modifiedTypeDefinitions">Returns the subset of types you passed to the typeDefinitions parameter the user modified in the dialog box. The dialog box might modify only a subset of the types because some of the types might already use the settings the user specified. </param>
      <param name="dlgOptions">Specifies the CommonDialogOptions option you want to use. Use the bitwise-OR operator to specify more than one option.</param>
      <seealso cref="CommonDialogOptions" />
      <seealso cref="Engine.DisplayUnlockTypeDefinitionsDialog" />
      <seealso cref="&quot;Password Protect Type Definitions dialog box&quot;javascript:RefLink('/InfoTopics/DB_Pass_Protect_Type_Defs.htm')" />
      <seealso cref="PropertyObject.GetTypeDefinitionProtection" />
      <seealso cref="PropertyObject.LockTypeDefinition" />
      <seealso cref="PropertyObject.SetTypeDefinitionProtection" />
      <seealso cref="PropertyObject.TypeDefinitionLocked" />
      <seealso cref="PropertyObject.UnlockTypeDefinition" />
      <seealso cref="ProtectedObjectOptions" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.DisplayUnlockTypeDefinitionsDialog(System.Object[],System.Boolean@,System.Int32)">
      <summary>Displays the Unlock Type Definitions dialog box, in which you can unlock the specified types. </summary>
      <remarks><para>Note: TestStand supports password-protecting type definitions to deter unauthorized users from editing the types in the sequence editor. However, any TestStand user can continue to programmatically edit a locked type by using the TestStand PropertyObject API. National Instruments does not recommend password-protecting types as the only way of protecting intellectual property.</para></remarks>
      <returns>Returns <c>True</c> if any types were unlocked in the Unlock Type Definitions dialog box, even if not all types were successfully unlocked or if the user clicked OK and no types needed to be unlocked because all the types were already unlocked or were not password-protected.</returns>
      <param name="typeDefinitions">Specifies an array of type definitions you want to unlock.</param>
      <param name="allTypesUnlocked">Returns <c>True</c> if all the types you passed to the typeDefinitions parameter were successfully unlocked, already unlocked, or not password-protected.</param>
      <param name="dlgOptions">Specifies any combination of the LockUnlockDialogOptions constants. </param>
      <seealso cref="CommonDialogOptions" />
      <seealso cref="Engine.DisplayPasswordProtectTypeDefinitionsDialog" />
      <seealso cref="&quot;Password Protect Type Definitions dialog box&quot;javascript:RefLink('/InfoTopics/DB_Pass_Protect_Type_Defs.htm')" />
      <seealso cref="PropertyObject.GetTypeDefinitionProtection" />
      <seealso cref="PropertyObject.LockTypeDefinition" />
      <seealso cref="PropertyObject.SetTypeDefinitionProtection" />
      <seealso cref="PropertyObject.TypeDefinitionLocked" />
      <seealso cref="PropertyObject.UnlockTypeDefinition" />
      <seealso cref="ProtectedObjectOptions" />
      <seealso cref="&quot;Unlock Type Definitions dialog box&quot;javascript:RefLink('/InfoTopics/DB_Unlock_Type_Defs_DB.htm')" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.DisplayUnlockTypeDefinitionsDialog(System.Object[],System.Boolean@,System.Int32)">
      <summary>Displays the Unlock Type Definitions dialog box, in which you can unlock the specified types. </summary>
      <remarks><para>Note: TestStand supports password-protecting type definitions to deter unauthorized users from editing the types in the sequence editor. However, any TestStand user can continue to programmatically edit a locked type by using the TestStand PropertyObject API. National Instruments does not recommend password-protecting types as the only way of protecting intellectual property.</para></remarks>
      <returns>Returns <c>True</c> if any types were unlocked in the Unlock Type Definitions dialog box, even if not all types were successfully unlocked or if the user clicked OK and no types needed to be unlocked because all the types were already unlocked or were not password-protected.</returns>
      <param name="typeDefinitions">Specifies an array of type definitions you want to unlock.</param>
      <param name="allTypesUnlocked">Returns <c>True</c> if all the types you passed to the typeDefinitions parameter were successfully unlocked, already unlocked, or not password-protected.</param>
      <param name="dlgOptions">Specifies any combination of the LockUnlockDialogOptions constants. </param>
      <seealso cref="CommonDialogOptions" />
      <seealso cref="Engine.DisplayPasswordProtectTypeDefinitionsDialog" />
      <seealso cref="&quot;Password Protect Type Definitions dialog box&quot;javascript:RefLink('/InfoTopics/DB_Pass_Protect_Type_Defs.htm')" />
      <seealso cref="PropertyObject.GetTypeDefinitionProtection" />
      <seealso cref="PropertyObject.LockTypeDefinition" />
      <seealso cref="PropertyObject.SetTypeDefinitionProtection" />
      <seealso cref="PropertyObject.TypeDefinitionLocked" />
      <seealso cref="PropertyObject.UnlockTypeDefinition" />
      <seealso cref="ProtectedObjectOptions" />
      <seealso cref="&quot;Unlock Type Definitions dialog box&quot;javascript:RefLink('/InfoTopics/DB_Unlock_Type_Defs_DB.htm')" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.DotNetCLRVersion">
      <summary>Returns the .NET Common Language Runtime version the TestStand Engine and the .NET Adapter use.</summary>
      <seealso cref="&quot;.NET Adapter&quot;javascript:RefLink('/InfoTopics/NET.htm')" />
      <seealso cref="Engine.DoDotNetGarbageCollection" />
      <seealso cref="Engine.DotNetGarbageCollectionInterval" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.DotNetCLRVersion">
      <summary>Returns the .NET Common Language Runtime version the TestStand Engine and the .NET Adapter use.</summary>
      <seealso cref="&quot;.NET Adapter&quot;javascript:RefLink('/InfoTopics/NET.htm')" />
      <seealso cref="Engine.DoDotNetGarbageCollection" />
      <seealso cref="Engine.DotNetGarbageCollectionInterval" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.ReadPropertyObjectFile(System.String,System.Boolean@,NationalInstruments.TestStand.Interop.API.TypeConflictHandlerTypes,System.Int32)">
      <summary>Creates a new PropertyObjectFile object, determines the file type, and reads the object as that file type.</summary>
      <remarks>Use this method to examine the internal structure, data, and types contained in a <c>PropertyObjectFile</c>, even if the file type is unknown. Calling this method produces the same result as calling the FileInformation.PropertyObjectFileType property, the 
Engine.NewPropertyObjectFile method, and the PropertyObjectFile.ReadFile method.
You cannot read a users file, a configuration file, or a station globals file using this method. This method returns an error if the file is not a <c>PropertyObjectFile</c>. Use FileInformation.IsPropertyObjectFile property to determine if the file is a <c>PropertyObjectFile</c>.
<para>Note: Use the Engine.GetSequenceFileEx method if you intend to open and run a sequence file. Unlike the <c>Engine.GetSequenceFileEx</c> method, this method does not load the sequence file into the internal cache of the engine, which might result in unexpected behavior.</para></remarks>
      <returns>The newly created <c>PropertyObjectFile</c> object.</returns>
      <param name="path">Specifies the pathname of the file.</param>
      <param name="userCancelled">Returns <c>True</c> if the file has type conflicts and the user cancelled the operation.</param>
      <param name="handlerType">Specifies how to handle type conflicts.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior or pass one or more ReadPropertyObjectFileOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <seealso cref="Engine.GetSequenceFileEx" />
      <seealso cref="Engine.NewPropertyObjectFile" />
      <seealso cref="Engine.OpenWorkspaceFile" />
      <seealso cref="FileInformation.IsPropertyObjectFile" />
      <seealso cref="FileInformation.PropertyObjectFileType" />
      <seealso cref="PropertyObjectFile" />
      <seealso cref="PropertyObjectFile.ReadFile" />
      <seealso cref="ReadPropertyObjectFileOptions" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.ReadPropertyObjectFile(System.String,System.Boolean@,NationalInstruments.TestStand.Interop.API.TypeConflictHandlerTypes,System.Int32)">
      <summary>Creates a new PropertyObjectFile object, determines the file type, and reads the object as that file type.</summary>
      <remarks>Use this method to examine the internal structure, data, and types contained in a <c>PropertyObjectFile</c>, even if the file type is unknown. Calling this method produces the same result as calling the FileInformation.PropertyObjectFileType property, the 
Engine.NewPropertyObjectFile method, and the PropertyObjectFile.ReadFile method.
You cannot read a users file, a configuration file, or a station globals file using this method. This method returns an error if the file is not a <c>PropertyObjectFile</c>. Use FileInformation.IsPropertyObjectFile property to determine if the file is a <c>PropertyObjectFile</c>.
<para>Note: Use the Engine.GetSequenceFileEx method if you intend to open and run a sequence file. Unlike the <c>Engine.GetSequenceFileEx</c> method, this method does not load the sequence file into the internal cache of the engine, which might result in unexpected behavior.</para></remarks>
      <returns>The newly created <c>PropertyObjectFile</c> object.</returns>
      <param name="path">Specifies the pathname of the file.</param>
      <param name="userCancelled">Returns <c>True</c> if the file has type conflicts and the user cancelled the operation.</param>
      <param name="handlerType">Specifies how to handle type conflicts.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior or pass one or more ReadPropertyObjectFileOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <seealso cref="Engine.GetSequenceFileEx" />
      <seealso cref="Engine.NewPropertyObjectFile" />
      <seealso cref="Engine.OpenWorkspaceFile" />
      <seealso cref="FileInformation.IsPropertyObjectFile" />
      <seealso cref="FileInformation.PropertyObjectFileType" />
      <seealso cref="PropertyObjectFile" />
      <seealso cref="PropertyObjectFile.ReadFile" />
      <seealso cref="ReadPropertyObjectFileOptions" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.GetTypes(System.Int32)">
      <summary>Returns a TypeUsageList that contains all the types currently in memory.</summary>
      <param name="reserved">Reserved for future use.</param>
      <seealso cref="TypeUsageList" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.GetTypes(System.Int32)">
      <summary>Returns a TypeUsageList that contains all the types currently in memory.</summary>
      <param name="reserved">Reserved for future use.</param>
      <seealso cref="TypeUsageList" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.ClearFilePasswordCache">
      <summary>Use this method to remove all the passwords the Remember Password option in the Unlock File dialog box and the Unlock Type Definitions dialog box specifies to store in the file password cache.</summary>
      <seealso cref="&quot;Unlock File dialog box&quot;javascript:RefLink('/InfoTopics/DB_LockUnlock_File.htm')" />
      <seealso cref="&quot;Unlock Type Definitions dialog box&quot;javascript:RefLink('/InfoTopics/DB_Unlock_Type_Defs_DB.htm')" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.ClearFilePasswordCache">
      <summary>Use this method to remove all the passwords the Remember Password option in the Unlock File dialog box and the Unlock Type Definitions dialog box specifies to store in the file password cache.</summary>
      <seealso cref="&quot;Unlock File dialog box&quot;javascript:RefLink('/InfoTopics/DB_LockUnlock_File.htm')" />
      <seealso cref="&quot;Unlock Type Definitions dialog box&quot;javascript:RefLink('/InfoTopics/DB_Unlock_Type_Defs_DB.htm')" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.BuildVersion">
      <summary>Returns the build version number for the current version of TestStand.</summary>
      <remarks>The full version number format is <c>MajorVersion.MinorVersion.RevisionVersion.BuildVersion</c>.</remarks>
      <seealso cref="Engine.MajorVersion" />
      <seealso cref="Engine.MinorVersion" />
      <seealso cref="Engine.PatchVersion" />
      <seealso cref="Engine.RevisionVersion" />
      <seealso cref="Engine.VersionString" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.BuildVersion">
      <summary>Returns the build version number for the current version of TestStand.</summary>
      <remarks>The full version number format is <c>MajorVersion.MinorVersion.RevisionVersion.BuildVersion</c>.</remarks>
      <seealso cref="Engine.MajorVersion" />
      <seealso cref="Engine.MinorVersion" />
      <seealso cref="Engine.PatchVersion" />
      <seealso cref="Engine.RevisionVersion" />
      <seealso cref="Engine.VersionString" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.ProfilingEnabled">
      <summary>This property indicates whether profiling is enabled. Profiling is enabled when a call to Engine.BeginProfiling has not been balanced by a call to Engine.EndProfiling. If profiling is not enabled, calls to Engine.LogProfilerAction do nothing.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.ProfilingEnabled">
      <summary>This property indicates whether profiling is enabled. Profiling is enabled when a call to Engine.BeginProfiling has not been balanced by a call to Engine.EndProfiling. If profiling is not enabled, calls to Engine.LogProfilerAction do nothing.</summary>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.BeginProfiling">
      <summary>Enables profiling. Profiling remains enabled until every call to BeginProfiling is balanced by a call to Engine.EndProfiling.</summary>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.BeginProfiling">
      <summary>Enables profiling. Profiling remains enabled until every call to BeginProfiling is balanced by a call to Engine.EndProfiling.</summary>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.EndProfiling">
      <summary>Balances one call to Engine.BeginProfiling. If all calls to BeginProfiling are balanced, profiling is disabled.</summary>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.EndProfiling">
      <summary>Balances one call to Engine.BeginProfiling. If all calls to BeginProfiling are balanced, profiling is disabled.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.ProfilerOptions">
      <summary>Specifies options that determine the types of data that profiling collects.  </summary>
      <remarks>Refer to ProfilerOptions. for a list of options. You can limit the types of data that profiling collects in order to reduce profiling overhead.</remarks>
      <seealso cref="ProfilerOptions" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.ProfilerOptions">
      <summary>Specifies options that determine the types of data that profiling collects.  </summary>
      <remarks>Refer to ProfilerOptions. for a list of options. You can limit the types of data that profiling collects in order to reduce profiling overhead.</remarks>
      <seealso cref="ProfilerOptions" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.SetModuleProfiling(System.String,System.Boolean)">
      <summary>Specifies whether the profiler collects timing information about code modules the specified adapter loads and executes.</summary>
      <param name="adapterKeyName">Specifies which adapter for which to enable or disable profiler data collection. Pass an empty string to enable or disable profiling for all adapters.</param>
      <param name="enabled">Specifies whether to enable or disable profiler data collection.</param>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.SetModuleProfiling(System.String,System.Boolean)">
      <summary>Specifies whether the profiler collects timing information about code modules the specified adapter loads and executes.</summary>
      <param name="adapterKeyName">Specifies which adapter for which to enable or disable profiler data collection. Pass an empty string to enable or disable profiling for all adapters.</param>
      <param name="enabled">Specifies whether to enable or disable profiler data collection.</param>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.GetModuleProfiling(System.String)">
      <summary>Indicates whether the profiler collects timing information for code modules the specified adapter loads and executes.</summary>
      <returns>Returns whether the profiler collects timing information for code modules that the specified adapter loads and executes.</returns>
      <param name="adapterKeyName">Specifies the adapter.</param>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.GetModuleProfiling(System.String)">
      <summary>Indicates whether the profiler collects timing information for code modules the specified adapter loads and executes.</summary>
      <returns>Returns whether the profiler collects timing information for code modules that the specified adapter loads and executes.</returns>
      <param name="adapterKeyName">Specifies the adapter.</param>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.LogProfilerAction(System.String,System.String,NationalInstruments.TestStand.Interop.API.SequenceContext,System.String,System.String,System.String,NationalInstruments.TestStand.Interop.API.ProfilerStates,System.String,System.Double,System.Boolean,System.Object@)">
      <summary>Logs the beginning, end, or a change in the state of an operation so that the information can be collected and displayed by a profiler. The method performs no action if Engine.ProfilingEnabled is not true.</summary>
      <remarks>This method creates an OutputMessage that stores the profiler information. The built-in properties of the OutputMessage store some information, such as the source location of the event being logged and the time that it occurred. This methods adds custom sub-properties to the OutputMessage to store the remaining information. The ProfilerOutputMessageSubProperties constants define the names of these sub-properties.</remarks>
      <returns>Returns the OutputMessage this method creates that stores the profiler information.  If you pass True to postMessage, you do not need to operate on the returned OutputMessage. The OutputMessage.Category property has a value of Engine.ProfilerOutputMessageCategoryName to indicate that it contains profiler information and should not be displayed in an output messages window.
A TestStand profiler window functions by collecting OutputMessages that have this category name and inspecting their contents.</returns>
      <param name="profilerMechanism">Pass a ProfilerMechanisms constant, or a string that indicates the mechanism the profiler event is recording.</param>
      <param name="adapterKeyName">Pass an adapter key name, if applicable. If this value is not null or an empty string, the method stores it as a sub-property of the OutputMessage with a name defined by ProfilerOutputMessageSubProperty_AdapterKeyName.</param>
      <param name="sequenceContextParam">Pass the current SequenceContext, if applicable. Otherwise pass null or Nothing. This method uses the sequence context to determine location and test socket information for the source of profiler event.</param>
      <param name="threadId">Pass the UniqueThreadId property of the current TestStand thread as a string. If the current thread is not a TestStand execution thread, pass the decimal formatted result of the Win32 GetCurrentThreadId function as a string with the following string appended: <c>&quot;|&quot;</c></param>
      <param name="threadDisplayName">Pass the DisplayName property of the current TestStand thread. If the current thread is not a TestStand execution thread, pass the result of Engine.GetResourceString(&quot;PROFILER&quot;, &quot;NON_EXECUTION_THREAD&quot;).</param>
      <param name="name">Pass the name of the item that generated the profiler event. This method stores the name as a sub-property of the OutputMessage with a name defined by ProfilerOutputMessageSubProperty_Name.</param>
      <param name="synchronizationState">Pass an element of the ProfilerStates enumeration that describes the transition that the profiler event records. This method stores the <c>profilerState</c> as a numeric sub-property of the <c>OutputMessage</c> with a name defined by <c>ProfilerOutputMessageSubProperty_State</c>.</param>
      <param name="operation">Pass a string that describes the operation that the profiler event is recording a transition for. If applicable, pass an element of the ProfilerOperations module. This method stores the operation as a sub-property of the OutputMessage with a name defined by ProfilerOutputMessageSubProperty_Operation.</param>
      <param name="timeout">If you pass the value of ProfilerState_Blocked to profilerState, this method stores the value you pass to timeout as a numeric sub-property of the OutputMessage with a name defined by ProfilerOutputMessageSubProperty_TimeoutPeriod.</param>
      <param name="postMessage">Specifies whether this method calls the Post method on the OutputMessage it creates. If you pass false, you must later call the Post method on the OutputMessage the method returns. Pass false if you need to add additional data to the OutputMessage before posting it.</param>
      <param name="reserved">Pass Null or Nothing to this reserved parameter.</param>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.LogProfilerAction(System.String,System.String,NationalInstruments.TestStand.Interop.API.SequenceContext,System.String,System.String,System.String,NationalInstruments.TestStand.Interop.API.ProfilerStates,System.String,System.Double,System.Boolean,System.Object@)">
      <summary>Logs the beginning, end, or a change in the state of an operation so that the information can be collected and displayed by a profiler. The method performs no action if Engine.ProfilingEnabled is not true.</summary>
      <remarks>This method creates an OutputMessage that stores the profiler information. The built-in properties of the OutputMessage store some information, such as the source location of the event being logged and the time that it occurred. This methods adds custom sub-properties to the OutputMessage to store the remaining information. The ProfilerOutputMessageSubProperties constants define the names of these sub-properties.</remarks>
      <returns>Returns the OutputMessage this method creates that stores the profiler information.  If you pass True to postMessage, you do not need to operate on the returned OutputMessage. The OutputMessage.Category property has a value of Engine.ProfilerOutputMessageCategoryName to indicate that it contains profiler information and should not be displayed in an output messages window.
A TestStand profiler window functions by collecting OutputMessages that have this category name and inspecting their contents.</returns>
      <param name="profilerMechanism">Pass a ProfilerMechanisms constant, or a string that indicates the mechanism the profiler event is recording.</param>
      <param name="adapterKeyName">Pass an adapter key name, if applicable. If this value is not null or an empty string, the method stores it as a sub-property of the OutputMessage with a name defined by ProfilerOutputMessageSubProperty_AdapterKeyName.</param>
      <param name="sequenceContextParam">Pass the current SequenceContext, if applicable. Otherwise pass null or Nothing. This method uses the sequence context to determine location and test socket information for the source of profiler event.</param>
      <param name="threadId">Pass the UniqueThreadId property of the current TestStand thread as a string. If the current thread is not a TestStand execution thread, pass the decimal formatted result of the Win32 GetCurrentThreadId function as a string with the following string appended: <c>&quot;|&quot;</c></param>
      <param name="threadDisplayName">Pass the DisplayName property of the current TestStand thread. If the current thread is not a TestStand execution thread, pass the result of Engine.GetResourceString(&quot;PROFILER&quot;, &quot;NON_EXECUTION_THREAD&quot;).</param>
      <param name="name">Pass the name of the item that generated the profiler event. This method stores the name as a sub-property of the OutputMessage with a name defined by ProfilerOutputMessageSubProperty_Name.</param>
      <param name="synchronizationState">Pass an element of the ProfilerStates enumeration that describes the transition that the profiler event records. This method stores the <c>profilerState</c> as a numeric sub-property of the <c>OutputMessage</c> with a name defined by <c>ProfilerOutputMessageSubProperty_State</c>.</param>
      <param name="operation">Pass a string that describes the operation that the profiler event is recording a transition for. If applicable, pass an element of the ProfilerOperations module. This method stores the operation as a sub-property of the OutputMessage with a name defined by ProfilerOutputMessageSubProperty_Operation.</param>
      <param name="timeout">If you pass the value of ProfilerState_Blocked to profilerState, this method stores the value you pass to timeout as a numeric sub-property of the OutputMessage with a name defined by ProfilerOutputMessageSubProperty_TimeoutPeriod.</param>
      <param name="postMessage">Specifies whether this method calls the Post method on the OutputMessage it creates. If you pass false, you must later call the Post method on the OutputMessage the method returns. Pass false if you need to add additional data to the OutputMessage before posting it.</param>
      <param name="reserved">Pass Null or Nothing to this reserved parameter.</param>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.ProfilerOutputMessageCategoryName">
      <summary>Indicates the category name the TestStand engine assigns to the OutputMessages the Engine.LogProfilerAction method creates.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.ProfilerOutputMessageCategoryName">
      <summary>Indicates the category name the TestStand engine assigns to the OutputMessages the Engine.LogProfilerAction method creates.</summary>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.GetEngineConfigFile(NationalInstruments.TestStand.Interop.API.PropertyObjectFileTypes)">
      <summary>Returns the PropertyObjectFile that contains settings, such as station options or search directories.</summary>
      <remarks>Engine.GetEngineConfigFile provides direct access to TestStand Engine configuration files.  Use this API with caution, particularly when changing settings. It is possible to put the configuration into an invalid state using this API. In most cases, there is a more appropriate, higher-level API that should be preferred. For example, prefer Engine.StationOptions when working with station options, or Engine.SearchDirectories when working with search directories.</remarks>
      <param name="configFileType">Specifies the engine configuration file to return. Supported options are FileType_GeneralEngineConfigFile, FileType_SearchDirectoriesConfigFile, FileType_AdaptersConfigFile, FileType_TypePalettesConfigFile, FileType_CustomConfigFile, FileType_UsersFile, and FileType_StationGlobalsFile. Passing any other value results in a run time error.</param>
      <seealso cref="PropertyObjectFileContentTypes" />
      <seealso cref="Engine.StationOptions" />
      <seealso cref="Engine.SearchDirectories" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.GetEngineConfigFile(NationalInstruments.TestStand.Interop.API.PropertyObjectFileTypes)">
      <summary>Returns the PropertyObjectFile that contains settings, such as station options or search directories.</summary>
      <remarks>Engine.GetEngineConfigFile provides direct access to TestStand Engine configuration files.  Use this API with caution, particularly when changing settings. It is possible to put the configuration into an invalid state using this API. In most cases, there is a more appropriate, higher-level API that should be preferred. For example, prefer Engine.StationOptions when working with station options, or Engine.SearchDirectories when working with search directories.</remarks>
      <param name="configFileType">Specifies the engine configuration file to return. Supported options are FileType_GeneralEngineConfigFile, FileType_SearchDirectoriesConfigFile, FileType_AdaptersConfigFile, FileType_TypePalettesConfigFile, FileType_CustomConfigFile, FileType_UsersFile, and FileType_StationGlobalsFile. Passing any other value results in a run time error.</param>
      <seealso cref="PropertyObjectFileContentTypes" />
      <seealso cref="Engine.StationOptions" />
      <seealso cref="Engine.SearchDirectories" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.GetEnvironmentPath">
      <summary>Get the path of the environment configuration (.tsenv) file that defines the environment in which the engine is running. If the engine is running in the global environment, an empty string is returned.</summary>
      <returns>The path of the environment configuration (.tsenv) file that defines the environment in which the engine is running. If the engine is running in the global environment, an empty string is returned.</returns>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.GetEnvironmentPath">
      <summary>Get the path of the environment configuration (.tsenv) file that defines the environment in which the engine is running. If the engine is running in the global environment, an empty string is returned.</summary>
      <returns>The path of the environment configuration (.tsenv) file that defines the environment in which the engine is running. If the engine is running in the global environment, an empty string is returned.</returns>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.DisplayEnvironmentConfigurationDialog(System.Int32,System.String@)">
      <summary></summary>
      <param name="dlgOptions"></param>
      <param name="path"></param>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.DisplayEnvironmentConfigurationDialog(System.Int32,System.String@)">
      <summary></summary>
      <param name="dlgOptions"></param>
      <param name="path"></param>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.FindFileEx(System.String,System.String@,NationalInstruments.TestStand.Interop.API.SearchDirectoryTypes@,System.Int32@,System.Boolean@,NationalInstruments.TestStand.Interop.API.FindFilePromptOptions,NationalInstruments.TestStand.Interop.API.FindFileSearchListOptions,System.Boolean,System.Object,System.Object)">
      <summary>Searches for a file in the TestStand search directories using a simple filename or relative pathname.</summary>
      <returns>Returns <c>True</c> if the file is found.</returns>
      <param name="fileToFind">Specifies a string that contains the simple filename or relative pathname of the file to search for. TestStand expands macros in the path as specified by the <c>Engine.ExpandPathMacros</c> method before searching.</param>
      <param name="absolutePath">Returns the absolute pathname of the file if the file is found.</param>
      <param name="srchDirType">Returns the <c>SearchDirectoryType</c> in which the specified <c>fileToFind</c> was found. This can be any of the types located in <c>SearchDirectoryTypes</c>.</param>
      <param name="searchDirectoryIndex">Returns the index of the TestStand search directory used to find the <c>fileToFind</c> specified. The list of search directories can be obtained by using the TestStand API <c>SearchDirectories</c>. You can retrieve any search directory from there using this <c>searchDirectoryIndex</c>.</param>
      <param name="userCancelled">Returns <c>True</c> if the method prompts the user and the user cancels the find operation.</param>
      <param name="promptOption">Specifies whether to prompt the user if the file is not initially found.</param>
      <param name="srchListOption">Specifies file search options.</param>
      <param name="isCommand">If this flag is <c>True</c> and <c>fileToFind</c> has no file extension, then the <c>FindFile</c> method searches for files with the same basename that end in the common command extensions: <c>.exe</c>, <c>.com</c>, and <c>.bat</c>.</param>
      <param name="searchContext">Contains the directory of the sequence file, which may also be searched for relative paths. This argument may be empty.</param>
      <param name="reserved">Reserved for future use.</param>
      <seealso cref="Engine.ExpandPathMacros" />
      <seealso cref="SearchDirectoryTypes" />
      <seealso cref="Engine.FindFile" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.FindFileEx(System.String,System.String@,NationalInstruments.TestStand.Interop.API.SearchDirectoryTypes@,System.Int32@,System.Boolean@,NationalInstruments.TestStand.Interop.API.FindFilePromptOptions,NationalInstruments.TestStand.Interop.API.FindFileSearchListOptions,System.Boolean,System.Object,System.Object)">
      <summary>Searches for a file in the TestStand search directories using a simple filename or relative pathname.</summary>
      <returns>Returns <c>True</c> if the file is found.</returns>
      <param name="fileToFind">Specifies a string that contains the simple filename or relative pathname of the file to search for. TestStand expands macros in the path as specified by the <c>Engine.ExpandPathMacros</c> method before searching.</param>
      <param name="absolutePath">Returns the absolute pathname of the file if the file is found.</param>
      <param name="srchDirType">Returns the <c>SearchDirectoryType</c> in which the specified <c>fileToFind</c> was found. This can be any of the types located in <c>SearchDirectoryTypes</c>.</param>
      <param name="searchDirectoryIndex">Returns the index of the TestStand search directory used to find the <c>fileToFind</c> specified. The list of search directories can be obtained by using the TestStand API <c>SearchDirectories</c>. You can retrieve any search directory from there using this <c>searchDirectoryIndex</c>.</param>
      <param name="userCancelled">Returns <c>True</c> if the method prompts the user and the user cancels the find operation.</param>
      <param name="promptOption">Specifies whether to prompt the user if the file is not initially found.</param>
      <param name="srchListOption">Specifies file search options.</param>
      <param name="isCommand">If this flag is <c>True</c> and <c>fileToFind</c> has no file extension, then the <c>FindFile</c> method searches for files with the same basename that end in the common command extensions: <c>.exe</c>, <c>.com</c>, and <c>.bat</c>.</param>
      <param name="searchContext">Contains the directory of the sequence file, which may also be searched for relative paths. This argument may be empty.</param>
      <param name="reserved">Reserved for future use.</param>
      <seealso cref="Engine.ExpandPathMacros" />
      <seealso cref="SearchDirectoryTypes" />
      <seealso cref="Engine.FindFile" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.GetRelativePathFromAbsolutePath(System.String,System.Object,System.String@,System.String@)">
      <summary>Searches for a file in the TestStand search directories using an absolute path and returns the relative path with respect to the search directory.</summary>
      <returns>Returns True if the file is found.</returns>
      <param name="absolutePath">An absolute or relative path for the file to find.</param>
      <param name="searchContext">Contains the directory of the sequence file, which may also be searched for relative paths.</param>
      <param name="relativePath">Returns the relative path if the file exists on disk and a relative path is found. Otherwise, returns the absolute path.</param>
      <param name="searchDirectoryPath">Returns the related search directory if the relative path is found.</param>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.GetRelativePathFromAbsolutePath(System.String,System.Object,System.String@,System.String@)">
      <summary>Searches for a file in the TestStand search directories using an absolute path and returns the relative path with respect to the search directory.</summary>
      <returns>Returns True if the file is found.</returns>
      <param name="absolutePath">An absolute or relative path for the file to find.</param>
      <param name="searchContext">Contains the directory of the sequence file, which may also be searched for relative paths.</param>
      <param name="relativePath">Returns the relative path if the file exists on disk and a relative path is found. Otherwise, returns the absolute path.</param>
      <param name="searchDirectoryPath">Returns the related search directory if the relative path is found.</param>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.NewCsvFileInputRecordStream(System.String)">
      <summary>Create a new <c>CsvFileInputRecordStream</c> for the specified file.</summary>
      <remarks>When the returned <c>CsvFileInputRecordStream</c> is no longer needed, it should be closed by calling <c>CsvFileInputRecordStream.Close</c>.  If it is not closed already, the stream closes automatically when the last reference to it is removed.</remarks>
      <param name="absolutePath">Specifies the absolute path to the CSV file.</param>
      <seealso cref="CsvFileInputRecordStream" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.NewCsvFileInputRecordStream(System.String)">
      <summary>Create a new <c>CsvFileInputRecordStream</c> for the specified file.</summary>
      <remarks>When the returned <c>CsvFileInputRecordStream</c> is no longer needed, it should be closed by calling <c>CsvFileInputRecordStream.Close</c>.  If it is not closed already, the stream closes automatically when the last reference to it is removed.</remarks>
      <param name="absolutePath">Specifies the absolute path to the CSV file.</param>
      <seealso cref="CsvFileInputRecordStream" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.NewCsvFileOutputRecordStream(System.String,System.Int32)">
      <summary>Create a new <c>CsvFileOutputRecordStream</c> for the specified file.</summary>
      <remarks>When the returned <c>CsvFileOutputRecordStream</c> is no longer needed, it should be closed by calling OutputRecordStream.Close.  If it is not closed already, the stream closes automatically when the last reference to it is removed.</remarks>
      <param name="absolutePath">Specifies the absolute path to the CSV file.</param>
      <param name="openMode">Specifies how to open the CSV file. Supported options include:<para><c>FileOpenMode_NoOptions</c> - Create the file if it does not exist.  Fail with a run-time error if the file exists.
<c>FileOpenMode_Truncate</c> - If the file exists, overwrite it deleting the previous contents.  Create a new file if it does not exist.
<c>FileOpenMode_Append</c> - If the file exists, append to the end of it, preserving the existing contents.  Create a new file if it does not exist.
<c>FileOpenMode_Uniquify</c> - Create a new file if it does not exist.  If a file with the specified path exists, attempt to make the file name unique by appending "_" (underscore) plus a numeric suffix to the file name.  For example, if <c>AlreadyExists.csv</c> already exists, <c>AlreadyExists_2.csv</c> is tried, then <c>AlreadyExists_3.csv</c>, etc. until a unique name has been found.  If a unique name is not found after 10000 attempts, the method fails and throws a runtime error.</para></param>
      <seealso cref="CsvFileOutputRecordStream" />
      <seealso cref="OutputRecordStream.Close" />
      <seealso cref="FileOpenModes" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.NewCsvFileOutputRecordStream(System.String,System.Int32)">
      <summary>Create a new <c>CsvFileOutputRecordStream</c> for the specified file.</summary>
      <remarks>When the returned <c>CsvFileOutputRecordStream</c> is no longer needed, it should be closed by calling OutputRecordStream.Close.  If it is not closed already, the stream closes automatically when the last reference to it is removed.</remarks>
      <param name="absolutePath">Specifies the absolute path to the CSV file.</param>
      <param name="openMode">Specifies how to open the CSV file. Supported options include:<para><c>FileOpenMode_NoOptions</c> - Create the file if it does not exist.  Fail with a run-time error if the file exists.
<c>FileOpenMode_Truncate</c> - If the file exists, overwrite it deleting the previous contents.  Create a new file if it does not exist.
<c>FileOpenMode_Append</c> - If the file exists, append to the end of it, preserving the existing contents.  Create a new file if it does not exist.
<c>FileOpenMode_Uniquify</c> - Create a new file if it does not exist.  If a file with the specified path exists, attempt to make the file name unique by appending "_" (underscore) plus a numeric suffix to the file name.  For example, if <c>AlreadyExists.csv</c> already exists, <c>AlreadyExists_2.csv</c> is tried, then <c>AlreadyExists_3.csv</c>, etc. until a unique name has been found.  If a unique name is not found after 10000 attempts, the method fails and throws a runtime error.</para></param>
      <seealso cref="CsvFileOutputRecordStream" />
      <seealso cref="OutputRecordStream.Close" />
      <seealso cref="FileOpenModes" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.RegisterSequenceToExecuteOnCrash(System.String,System.String,System.Int32,System.Object)">
      <summary>Registers the sequence to execute on TestStand application crash.</summary>
      <remarks>The sequence is executed in an external application on TestStand application crash. Default parameter values are used when calling the registered sequence. If run time error option is set to <c>Show dialog</c>, the setting is ignored (no dialogs are shown from external application) and cleanup will be executed.</remarks>
      <returns>Returns the registration id for <c>Engine.UnregisterSequenceToExecuteOnCrash</c>.</returns>
      <param name="seqFilePath">Specifies the pathname of the sequence file. If the pathname is relative, this method tries to find it using <c>Engine.FindFileEx</c> method.</param>
      <param name="seqName">Specifies the name of the sequence to execute on TestStand application crash.</param>
      <param name="options">Specifies whether to load the sequence file in the external application after TestStand application crash or when sequence is registered. Pass <c>0</c> to specify the default behavior, or pass one or more CrashCallbackOptions. Use the bitwise-OR operator to specify multiple options. 
</param>
      <param name="reserved">This parameter is reserved.</param>
      <seealso cref="Engine.FindFileEx" />
      <seealso cref="CrashCallbackOptions" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.RegisterSequenceToExecuteOnCrash(System.String,System.String,System.Int32,System.Object)">
      <summary>Registers the sequence to execute on TestStand application crash.</summary>
      <remarks>The sequence is executed in an external application on TestStand application crash. Default parameter values are used when calling the registered sequence. If run time error option is set to <c>Show dialog</c>, the setting is ignored (no dialogs are shown from external application) and cleanup will be executed.</remarks>
      <returns>Returns the registration id for <c>Engine.UnregisterSequenceToExecuteOnCrash</c>.</returns>
      <param name="seqFilePath">Specifies the pathname of the sequence file. If the pathname is relative, this method tries to find it using <c>Engine.FindFileEx</c> method.</param>
      <param name="seqName">Specifies the name of the sequence to execute on TestStand application crash.</param>
      <param name="options">Specifies whether to load the sequence file in the external application after TestStand application crash or when sequence is registered. Pass <c>0</c> to specify the default behavior, or pass one or more CrashCallbackOptions. Use the bitwise-OR operator to specify multiple options. 
</param>
      <param name="reserved">This parameter is reserved.</param>
      <seealso cref="Engine.FindFileEx" />
      <seealso cref="CrashCallbackOptions" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.UnregisterSequenceToExecuteOnCrash(System.Int32)">
      <summary>Unregisters the sequence to execute on TestStand application crash.</summary>
      <param name="registrationId">Pass the registrationId you receive as the return value from <c>Engine.RegisterSequenceToExecuteOnCrash</c> method.</param>
      <seealso cref="CrashCallbackOptions" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.UnregisterSequenceToExecuteOnCrash(System.Int32)">
      <summary>Unregisters the sequence to execute on TestStand application crash.</summary>
      <param name="registrationId">Pass the registrationId you receive as the return value from <c>Engine.RegisterSequenceToExecuteOnCrash</c> method.</param>
      <seealso cref="CrashCallbackOptions" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.DisplayIOConfigurationOptionsDialog">
      <summary>Launches a dialog box for configuring IO Configuration options.</summary>
      <returns>Returns <c>True</c> if you click OK in the dialog box. Returns <c>False</c> if you click Cancel.</returns>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.DisplayIOConfigurationOptionsDialog">
      <summary>Launches a dialog box for configuring IO Configuration options.</summary>
      <returns>Returns <c>True</c> if you click OK in the dialog box. Returns <c>False</c> if you click Cancel.</returns>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IEngine.PatchVersion">
      <summary>Returns the patch version number for the current version of TestStand.</summary>
      <remarks>The version number is separate from the MajorVersion.MinorVersion.RevisionVersion format, such as 1.0.2. Instead, it appears as the 'f' number in patch releases, such as TestStand 2020 f1.
<para>Note: <c>Engine.PatchVersion</c> does not correspond to <c>Engine.RevisionVersion</c>. Prior to TestStand 2016, the revision version sometimes indicated the service pack level. Starting with TestStand 2016, all service packs are reflected in <c>Engine.MinorVersion</c> and <c>Engine.RevisionVersion</c> is always <c>0</c>.</para></remarks>
      <seealso cref="Engine.BuildVersion" />
      <seealso cref="Engine.MajorVersion" />
      <seealso cref="Engine.MinorVersion" />
      <seealso cref="Engine.RevisionVersion" />
      <seealso cref="Engine.VersionString" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EngineClass.PatchVersion">
      <summary>Returns the patch version number for the current version of TestStand.</summary>
      <remarks>The version number is separate from the MajorVersion.MinorVersion.RevisionVersion format, such as 1.0.2. Instead, it appears as the 'f' number in patch releases, such as TestStand 2020 f1.
<para>Note: <c>Engine.PatchVersion</c> does not correspond to <c>Engine.RevisionVersion</c>. Prior to TestStand 2016, the revision version sometimes indicated the service pack level. Starting with TestStand 2016, all service packs are reflected in <c>Engine.MinorVersion</c> and <c>Engine.RevisionVersion</c> is always <c>0</c>.</para></remarks>
      <seealso cref="Engine.BuildVersion" />
      <seealso cref="Engine.MajorVersion" />
      <seealso cref="Engine.MinorVersion" />
      <seealso cref="Engine.RevisionVersion" />
      <seealso cref="Engine.VersionString" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IEngine.DisplayErrorDialog(System.String,System.String,System.Int32,System.Int32)">
      <summary>Launches a dialog box to display an error message. </summary>
      <remarks>Depending on the error message, the dialog might divide the message into expandable subsections. If the message includes location information, the dialog can offer the user the option to navigate to the location.</remarks>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.</param>
      <param name="errorMessage">Specifies the error message text to display in the dialog box.</param>
      <param name="errorCode">Specifies the error code to display in the dialog box. If the error code is a TestStand error code and the <c>errorMessage</c> does not already contain the description of the error code, the dialog also displays the error code description.</param>
      <param name="dlgOptions">Specifies <c>CommonDlgOption_NoOptions</c> or <c>CommonDlgOption_DisableGotoLocation</c>.</param>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EngineClass.DisplayErrorDialog(System.String,System.String,System.Int32,System.Int32)">
      <summary>Launches a dialog box to display an error message. </summary>
      <remarks>Depending on the error message, the dialog might divide the message into expandable subsections. If the message includes location information, the dialog can offer the user the option to navigate to the location.</remarks>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.</param>
      <param name="errorMessage">Specifies the error message text to display in the dialog box.</param>
      <param name="errorCode">Specifies the error code to display in the dialog box. If the error code is a TestStand error code and the <c>errorMessage</c> does not already contain the description of the error code, the dialog also displays the error code description.</param>
      <param name="dlgOptions">Specifies <c>CommonDlgOption_NoOptions</c> or <c>CommonDlgOption_DisableGotoLocation</c>.</param>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.PropertyObject">
      <summary>Use the PropertyObject class to manipulate and access the values of variables and custom step properties. You can also use the PropertyObject to add, copy, or delete subproperties of variables and custom step properties.
You can create new objects of this class using the Engine.NewPropertyObject method. You can obtain existing objects of this class as return values from numerous functions. You can obtain the underlying PropertyObject for objects of every class except the <c>Engine</c> class by using the <c>AsPropertyObject</c> method of the respective class.</summary>
      <seealso cref="Engine.NewPropertyObject" />
      <seealso cref="Expression" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.PropertyObject.Type">
      <summary>Returns an object that provides type information about the PropertyObject.</summary>
      <seealso cref="PropertyObjectType" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.PropertyObject.IsModifiedType">
      <summary>Returns or specifies the PropTypeFlags_IsModifiedType flag on the current PropertyObject.</summary>
      <remarks>Calling the PropertyObject.SetTypeFlags method to change the PropertyObjTypeFlags of a PropertyObject always sets the <c>PropTypeFlags_IsModifiedType</c> flag, so you cannot clear the <c>PropTypeFlags_IsModifiedType</c> flag with the <c>SetTypeFlags</c> method. Use this property instead to clear the <c>PropTypeFlags_IsModifiedType</c> flag.
This property is valid only for PropertyObject objects that are type definitions. Use the PropertyObject.IsTypeDefinition property to determine whether a PropertyObject is a type definition.</remarks>
      <seealso cref="&quot;Lookup Strings&quot;../InfoTopics/API_lookupString.html" />
      <seealso cref="PropertyObject" />
      <seealso cref="PropertyObject.DisplayFlagsDialog" />
      <seealso cref="PropertyObject.GetTypeFlags" />
      <seealso cref="PropertyObject.IsTypeDefinition" />
      <seealso cref="PropertyObject.SetInstanceDefaultFlags" />
      <seealso cref="PropertyObject.SetInstanceOverrideFlags" />
      <seealso cref="PropertyObject.SetTypeFlags" />
      <seealso cref="PropertyObjTypeFlags" />
      <seealso cref="PropertyOptions" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.GetValNumber(System.String,System.Int32)">
      <summary>Returns the double-precision, 64-bit floating-point value of the property the lookupString parameter specifies.</summary>
      <remarks>TestStand stores numeric values as double-precision, 64-bit floating-point values, signed 64-bit integer values, or unsigned 64-bit integer values.</remarks>
      <returns>Numeric value of the property.</returns>
      <param name="lookupString">Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <seealso cref="&quot;Lookup Strings&quot;../InfoTopics/API_lookupString.html" />
      <seealso cref="PropertyObject.GetValNumberByOffset" />
      <seealso cref="PropertyObject.SetValNumber" />
      <seealso cref="PropertyOptions" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.SetValNumber(System.String,System.Int32,System.Double)">
      <summary>Sets the double-precision, 64-bit floating-point value of the property the lookupString parameter specifies.</summary>
      <remarks>TestStand stores numeric values as double-precision, 64-bit floating-point values, signed 64-bit integer values, or unsigned 64-bit integer values.</remarks>
      <param name="lookupString">Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <param name="newValue">Specifies the new value for the property.</param>
      <seealso cref="&quot;Lookup Strings&quot;../InfoTopics/API_lookupString.html" />
      <seealso cref="PropertyObject.GetValNumber" />
      <seealso cref="PropertyObject.SetValNumberByOffset" />
      <seealso cref="PropertyOptions" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.GetValBoolean(System.String,System.Int32)">
      <summary>Returns the Boolean value of the property the lookupString parameter specifies.</summary>
      <returns>Boolean value of the property.</returns>
      <param name="lookupString">Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <seealso cref="&quot;Lookup Strings&quot;../InfoTopics/API_lookupString.html" />
      <seealso cref="PropertyObject.GetValBooleanByOffset" />
      <seealso cref="PropertyObject.SetValBoolean" />
      <seealso cref="PropertyOptions" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.SetValBoolean(System.String,System.Int32,System.Boolean)">
      <summary>Sets the Boolean value of the property the lookupString parameter specifies.</summary>
      <param name="lookupString">Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <param name="newValue">Specifies the new value for the property.</param>
      <seealso cref="&quot;Lookup Strings&quot;../InfoTopics/API_lookupString.html" />
      <seealso cref="PropertyObject.GetValBoolean" />
      <seealso cref="PropertyObject.SetValBooleanByOffset" />
      <seealso cref="PropertyOptions" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.GetValString(System.String,System.Int32)">
      <summary>Returns the string value of the property the lookupString parameter specifies.</summary>
      <remarks>For numeric properties, calling this method with the PropOption_CoerceFromNumber option does not localize the resulting string.  Use the PropertyObject.GetFormattedValue method to obtain a localized string for a number.</remarks>
      <returns>String value of the property.</returns>
      <param name="lookupString">Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <seealso cref="&quot;Lookup Strings&quot;../InfoTopics/API_lookupString.html" />
      <seealso cref="PropertyObject.GetFormattedValue" />
      <seealso cref="PropertyObject.GetValStringByOffset" />
      <seealso cref="PropertyObject.SetValString" />
      <seealso cref="PropertyOptions" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.SetValString(System.String,System.Int32,System.String)">
      <summary>Sets the string value of the property the lookupString parameter specifies.</summary>
      <param name="lookupString">Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <param name="newValue">Specifies the new value for the property.</param>
      <seealso cref="&quot;Lookup Strings&quot;../InfoTopics/API_lookupString.html" />
      <seealso cref="PropertyObject.GetValString" />
      <seealso cref="PropertyObject.SetValStringByOffset" />
      <seealso cref="PropertyOptions" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.GetPropertyObject(System.String,System.Int32)">
      <summary>Returns the PropertyObject value of the property the lookupString parameter specifies.</summary>
      <returns>PropertyObject value of the property.</returns>
      <param name="lookupString">Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <seealso cref="&quot;Lookup Strings&quot;../InfoTopics/API_lookupString.html" />
      <seealso cref="PropertyObject" />
      <seealso cref="PropertyObject.GetPropertyObjectByOffset" />
      <seealso cref="PropertyObject.SetPropertyObject" />
      <seealso cref="PropertyOptions" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.SetPropertyObject(System.String,System.Int32,NationalInstruments.TestStand.Interop.API.PropertyObject)">
      <summary>Sets the subproperty the lookupString parameter specifies to the PropertyObject object you pass.</summary>
      <remarks>Do not call this method if another object already contains the object the newValue parameter specifies. For example, if the object you want to specify for the newValue parameter is already a subproperty or an array element of another object, it cannot also be the subproperty of a different object. You can work around this issue by using the PropOption_NotOwning option when you call this method to instead create an alias to the object, by using the PropertyObject.Clone method to make a copy of the object and use the copy instead, or by removing the object from its current parent or array before assigning a new parent.</remarks>
      <param name="lookupString">Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <param name="newValue">Specifies the new value for the property.</param>
      <seealso cref="Engine.NewPropertyObject" />
      <seealso cref="&quot;Lookup Strings&quot;../InfoTopics/API_lookupString.html" />
      <seealso cref="PropertyObject" />
      <seealso cref="PropertyObject.Clone" />
      <seealso cref="PropertyObject.GetPropertyObject" />
      <seealso cref="PropertyObject.SetPropertyObjectByOffset" />
      <seealso cref="PropertyOptions" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.GetValVariant(System.String,System.Int32)">
      <summary>Returns the value of the property the lookupString parameter specifies in a variant.</summary>
      <remarks>You can use this method to obtain the value of an entire array at once. When you obtain an array property using this method, TestStand resizes and redefines the dimensions the destination array to match the array you obtain. Refer to the example in this topic for more information about how to use this method.</remarks>
      <returns>Variant that contains the value of the property. If the property is an empty array, this method returns a variant that contains an array with the bounds set to indicate that it contains no elements, such as <c>[0..-1]</c>.</returns>
      <param name="lookupString">Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <seealso cref="&quot;Lookup Strings&quot;../InfoTopics/API_lookupString.html" />
      <seealso cref="PropertyObject.GetValInteger64" />
      <seealso cref="PropertyObject.GetValUnsignedInteger64" />
      <seealso cref="PropertyObject.GetValVariantByOffset" />
      <seealso cref="PropertyObject.SetValVariant" />
      <seealso cref="PropertyOptions" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.SetValVariant(System.String,System.Int32,System.Object)">
      <summary>Sets the value of the property the lookupString parameter specifies with a variant.</summary>
      <remarks>You can use this method to set the value of an entire array at once. When you set an array property using this method, TestStand resizes and redefines the dimensions of the destination array to match the array you pass in. Refer to the example in this topic for more information about how to use this method.</remarks>
      <param name="lookupString">Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <param name="newValue">Specifies the new value for the property.</param>
      <seealso cref="&quot;Lookup Strings&quot;../InfoTopics/API_lookupString.html" />
      <seealso cref="PropertyObject.GetValVariant" />
      <seealso cref="PropertyObject.SetValInteger64" />
      <seealso cref="PropertyObject.SetValUnsignedInteger64" />
      <seealso cref="PropertyObject.SetValVariantByOffset" />
      <seealso cref="PropertyOptions" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.GetFlags(System.String,System.Int32)">
      <summary>Returns the flags setting of the property the lookupString parameter specifies. Use the PropertyObject.SetFlags method to change the flags setting of a property.</summary>
      <returns>Current flags of the property.</returns>
      <param name="lookupString">Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <seealso cref="&quot;Lookup Strings&quot;../InfoTopics/API_lookupString.html" />
      <seealso cref="PropertyFlags" />
      <seealso cref="PropertyObject.DisplayFlagsDialog" />
      <seealso cref="PropertyObject.GetTypeFlags" />
      <seealso cref="PropertyObject.SetFlags" />
      <seealso cref="PropertyOptions" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.SetFlags(System.String,System.Int32,System.Int32)">
      <summary>Sets the flags setting of the property the lookupString parameter specifies. Use the PropertyObject.GetFlags method to retrieve the flags setting of a property.</summary>
      <param name="lookupString">Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <param name="Flags">Specifies the new flags for the property.</param>
      <seealso cref="&quot;Lookup Strings&quot;../InfoTopics/API_lookupString.html" />
      <seealso cref="PropertyFlags" />
      <seealso cref="PropertyObject.DisplayFlagsDialog" />
      <seealso cref="PropertyObject.GetFlags" />
      <seealso cref="PropertyObject.GetTypeFlags" />
      <seealso cref="PropertyOptions" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.GetType(System.String,System.Int32,System.Boolean@,System.Boolean@,System.String@)">
      <summary><para>Note: This method is obsolete. Use the PropertyObject.Type property instead.</para></summary>
      <remarks>Returns the type of value and other information about the property the lookupString parameter specifies.</remarks>
      <returns>Type of value the property stores.
<para>Note: If the property is an instance of a named type, this method does not return the  <c>PropValType_NamedType</c> constant and instead returns one of the other property value type constants to indicate the value type of the root property. Use the typeName parameter or the PropertyObject.GetTypeDefinition method to determine whether a property is an instance of a named type. This method returns the <c>PropValType_Container</c> constant for arrays. To distinguish between an array and a container, use the IsArray parameter or use the PropertyObjectType.ValueType property, which specifies the <c>PropValType_Array</c> constant for arrays. For arrays, use the PropertyObjectType.ElementType property to obtain the type of the array elements. Alternatively, for arrays of non-containers, you can use the PropertyObject.GetDimensions method to obtain the type of the array elements. For arrays of containers or named types, you can call the PropertyObject.GetType method on the PropertyObject that the PropertyObject.ArrayElementPrototype property returns to obtain the type of array elements.</para></returns>
      <param name="lookupString">Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <param name="IsObject">Returns <c>True</c> if the lookupString specifies a PropertyObject.</param>
      <param name="IsArray">Returns <c>True</c> if the lookupString specifies an array.</param>
      <param name="typeNameParam">Returns the type name if the lookupString parameter specifies an object that is an instance of a named type. Otherwise, returns an empty string.</param>
      <seealso cref="Engine.NewPropertyObject" />
      <seealso cref="&quot;Lookup Strings&quot;../InfoTopics/API_lookupString.html" />
      <seealso cref="NamedPropertyTypes" />
      <seealso cref="PropertyObject.ArrayElementPrototype" />
      <seealso cref="PropertyObject.GetDimensions" />
      <seealso cref="PropertyObject.GetType" />
      <seealso cref="PropertyObject.GetTypeDefinition" />
      <seealso cref="PropertyObject.NewSubProperty" />
      <seealso cref="PropertyObject.Type" />
      <seealso cref="PropertyObjectType.ElementType" />
      <seealso cref="PropertyObjectType.ValueType" />
      <seealso cref="PropertyOptions" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.GetTypeDefinition(System.String,System.Int32)">
      <summary>Returns the object that is the type definition for the property the lookupString parameter specifies.</summary>
      <remarks>Use the PropertyObject.TypeCategory property to determine the type category to which a root type definition belongs.</remarks>
      <returns>Type definition, in the form of a PropertyObject, for the property the lookupString parameter specifies. Release the PropertyObject when you no longer need it.</returns>
      <param name="lookupString">Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <seealso cref="&quot;Adding and Releasing References&quot;../InfoTopics/Adding_and_Releasing_References.html" />
      <seealso cref="&quot;Lookup Strings&quot;../InfoTopics/API_lookupString.html" />
      <seealso cref="PropertyObject" />
      <seealso cref="PropertyObject.TypeCategory" />
      <seealso cref="PropertyOptions" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.GetDimensions(System.String,System.Int32,System.String@,System.String@,System.Int32@,NationalInstruments.TestStand.Interop.API.PropertyValueTypes@)">
      <summary><para>Note: This method is obsolete. Use the PropertyObjectType.ArrayDimensions property instead.</para></summary>
      <remarks>Returns the upper bounds, lower bounds, total number of elements, and element type for the array the lookupString parameter specifies.</remarks>
      <param name="lookupString">Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <param name="lowerBounds">Returns an array index string describing the lowest valid index for each dimension. For example, a two-dimensional array with a lower bound of 0 for the first dimension and 2 for the second would have the lower bound string &quot;[0][2]&quot;.</param>
      <param name="upperBounds">Returns an array index string describing the highest valid index for each dimension. For example, a two-dimensional array with an upper bound of 2 for the first dimension and 4 for the second would have the upper bound string &quot;[2][4]&quot;.</param>
      <param name="numElements">Returns the total number of elements stored in the array.</param>
      <param name="ElementType">Returns the type of elements stored in the array.</param>
      <seealso cref="&quot;Lookup Strings&quot;../InfoTopics/API_lookupString.html" />
      <seealso cref="PropertyObjectType.ArrayDimensions" />
      <seealso cref="PropertyOptions" />
      <seealso cref="PropertyValueTypes" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.SetDimensions(System.String,System.Int32,System.String,System.String)">
      <summary><para>Note: This method is obsolete. Use the PropertyObjectType.ArrayDimensions property instead.</para></summary>
      <remarks>Sets the upper and lower bounds for the array the lookupString parameter specifies.
Use the PropertyObject.SetNumElements method to set the size of a one-dimensional array.
To insert a new array element in a one-dimensional array at the specified offset, use the <c>Set_ByOffset</c> methods of the PropertyObject class and specify the <c>PropOption_InsertElement</c> flag.
To delete specific elements from a one-dimensional array, use the PropertyObject.DeleteElements method.</remarks>
      <param name="lookupString">Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <param name="lowerBounds">Specifies an array index string describing the lowest valid index for each dimension. For example, a two-dimensional array with a lower bound of 0 for the first dimension and 2 for the second has the lower bound string &quot;[0][2]&quot;.</param>
      <param name="upperBounds">Specifies an array index string describing the highest valid index for each dimension. For example, a two-dimensional array with an upper bound of 2 for the first dimension and 4 for the second would have the upper bound string &quot;[2][4]&quot;.</param>
      <seealso cref="&quot;Lookup Strings&quot;../InfoTopics/API_lookupString.html" />
      <seealso cref="PropertyObject.DeleteElements" />
      <seealso cref="PropertyObject.SetNumElements" />
      <seealso cref="PropertyObjectType.ArrayDimensions" />
      <seealso cref="PropertyOptions" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.GetArrayIndex(System.String,System.Int32,System.Int32)">
      <summary>Returns the index of the array element the arrayOffset parameter specifies.</summary>
      <returns>An array index string. Array index strings are a list of numbers enclosed in brackets that index each dimension of the array. For example, the following is an array index for a two-dimensional array: <c>[0][1]</c>.</returns>
      <param name="lookupString">Specifies an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <param name="arrayOffset">Specifies a zero-based number representing the offset of an array element in the one-dimensional physical storage of the array. The offset is in terms of the number of elements.</param>
      <seealso cref="&quot;Lookup Strings&quot;../InfoTopics/API_lookupString.html" />
      <seealso cref="PropertyObject.GetArrayOffset" />
      <seealso cref="PropertyObject.GetNumElements" />
      <seealso cref="PropertyObject.Type" />
      <seealso cref="PropertyOptions" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.GetArrayOffset(System.String,System.Int32,System.String)">
      <summary>Returns the zero-based offset of the array element the arrayIndex parameter specifies.</summary>
      <returns>A zero-based number that represents the offset of an array element in the one-dimensional physical storage of the array.</returns>
      <param name="lookupString">Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <param name="arrayIndex">Specifies an array index string. Array index strings are a list of numbers, enclosed in brackets, that index each dimension of the array. For example, the following is an array index for a two-dimensional array: [0][1]. In addition, this method also supports indexing arrays of objects by name. For example, the following arrayIndex returns the offset of the first object in an object array with the name objectname: [&quot;objectname&quot;].</param>
      <seealso cref="&quot;Lookup Strings&quot;../InfoTopics/API_lookupString.html" />
      <seealso cref="PropertyObject.GetArrayIndex" />
      <seealso cref="PropertyObject.GetNumElements" />
      <seealso cref="PropertyOptions" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.NewSubProperty(System.String,NationalInstruments.TestStand.Interop.API.PropertyValueTypes,System.Boolean,System.String,System.Int32)">
      <summary>Creates a new subproperty with the name the lookupString parameter specifies.</summary>
      <remarks><para>Note: TestStand does not validate property names you create programmatically for invalid characters, such as spaces, which can result in errors when you use expressions. Use the PropertyObject.ValidateNewSubPropertyName  method to validate property names. TestStand expressions require PropertyObject names to be strings that contain only letters, numbers, and underscores. PropertyObject names cannot contain spaces, start with a number, or be empty. Additionally, the PropertyObject name cannot be &quot;<c>Value</c>&quot;, and you cannot have duplicate subproperty names. For example, <c>MyVariableName_2000</c> is a valid PropertyObject name. Names of elements in a PropertyObject array can contain any character. Both sequence names and step names are examples of such named array elements. However, sequence names cannot be empty or contain control characters. You cannot have duplicate sequence names. The name <c>NI</c>  is reserved at the root level for attributes.</para>
<para>Note: TestStand does not support adding a new subproperty to an instance of a type unless you add the subproperty below a container you have marked as unstructured in the type definition by using the PropFlags_UnstructuredProperty flag. TestStand does not report any errors and creates the property, but does not save the property. When resolving type conflicts and updating type instances, TestStand automatically removes the property.</para></remarks>
      <param name="lookupString">Pass the lookup string for the new subproperty to create. If you pass a lookup string with multiple levels (such as &quot;x.y.z&quot;), this method creates all the necessary intermediate container objects. Refer to lookup string for more information about the strings you can use.</param>
      <param name="ValueType">Specifies the type of value you want the new subproperty to store.</param>
      <param name="asArray">Pass <c>True</c> to make the new subproperty an array with elements that are of the type you specify in the ValueType parameter.</param>
      <param name="typeNameParam">Pass the name of an existing type if you want to create the new subproperty as an instance of a named type. Otherwise, pass an empty string. If you pass a type name, you must pass <c>PropValType_NamedType</c> for the ValueType parameter.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.  You do not need to pass the InsertIfMissing option to create the new subproperty.  Pass DoNothingIfExists if you want the method to not report an error if the subproperty already exists.</param>
      <seealso cref="Engine.NewPropertyObject" />
      <seealso cref="&quot;LookupString&quot;../InfoTopics/API_lookupString.html" />
      <seealso cref="&quot;Managing Type Revisions&quot;javascript:TSFundLink('/InfoTopics/Types_Revision.html')" />
      <seealso cref="NamedPropertyTypes" />
      <seealso cref="PropertyFlags" />
      <seealso cref="PropertyObject.InsertSubProperty" />
      <seealso cref="PropertyObject.SetPropertyObject" />
      <seealso cref="PropertyObject.ValidateNewSubPropertyName" />
      <seealso cref="PropertyOptions" />
      <seealso cref="PropertyValueTypes" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.DeleteSubProperty(System.String,System.Int32)">
      <summary>Deletes the subproperty with the name the lookupString parameter specifies.</summary>
      <remarks>Use the <c>PropOption_DeleteIfExists</c> option to prevent TestStand from returning errors if the specified property does not exist prior to calling this function.

To delete a specific element from a one-dimensional array, use the PropertyObject.DeleteElements method of the <c>PropertyObject</c> class.

To insert a new array element in a one-dimensional array at the specified offset, use the <c>Set_ByOffset</c> methods of the <c>PropertyObject</c> class and specify the <c>PropOption_InsertElement</c> flag.
<para>Note: TestStand does not support adding a new subproperty to an instance of a type unless you add the subproperty below a container you have marked as unstructured in the type definition by using the PropFlags_UnstructuredProperty flag. TestStand does not report any errors and creates the property, but does not save the property. When resolving type conflicts and updating type instances, TestStand automatically removes the property.</para></remarks>
      <param name="lookupString">Specifies the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <seealso cref="&quot;Lookup Strings&quot;../InfoTopics/API_lookupString.html" />
      <seealso cref="&quot;Managing Type Revisions&quot;javascript:TSFundLink('/InfoTopics/Types_Revision.html')" />
      <seealso cref="PropertyFlags" />
      <seealso cref="PropertyObject.DeleteElements" />
      <seealso cref="PropertyObject.Exists" />
      <seealso cref="PropertyObject.InsertSubproperty" />
      <seealso cref="PropertyOptions" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.GetNumSubProperties(System.String)">
      <summary>Returns the number of subproperties directly within the property the lookupString parameter specifies.</summary>
      <returns>Number of subproperties within the property specified by lookupString.</returns>
      <param name="lookupString">Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.</param>
      <seealso cref="&quot;Lookup Strings&quot;../InfoTopics/API_lookupString.html" />
      <seealso cref="PropertyObject.GetNthSubPropertyName" />
      <seealso cref="PropertyObject.GetSubPropertyIndex" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.GetNthSubPropertyName(System.String,System.Int32,System.Int32)">
      <summary>Returns the name of a subproperty within the property the lookupString parameter specifies.</summary>
      <returns>Name of the subproperty the index specifies.</returns>
      <param name="lookupString">Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.</param>
      <param name="index">Specifies the zero-based index of the subproperty.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <seealso cref="&quot;Lookup Strings&quot;../InfoTopics/API_lookupString.html" />
      <seealso cref="PropertyObject.GetNumSubProperties" />
      <seealso cref="PropertyObject.GetSubPropertyIndex" />
      <seealso cref="PropertyObject.SetNthSubPropertyName" />
      <seealso cref="PropertyOptions" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.SetNthSubPropertyName(System.String,System.Int32,System.Int32,System.String)">
      <summary>Sets the name of a subproperty within the property the lookupString parameter specifies. You identify the property using a zero-based index.</summary>
      <param name="lookupString">Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.</param>
      <param name="index">Specifies the zero-based index of the subproperty to name.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <param name="newValue">Specifies the new name for the subproperty.</param>
      <seealso cref="&quot;Lookup Strings&quot;../InfoTopics/API_lookupString.html" />
      <seealso cref="PropertyObject.GetNthSubPropertyName" />
      <seealso cref="PropertyObject.GetNumSubProperties" />
      <seealso cref="PropertyObject.GetSubPropertyIndex" />
      <seealso cref="PropertyOptions" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.Exists(System.String,System.Int32)">
      <summary>Returns <c>True</c> if the property the lookupString parameter specifies exists.</summary>
      <returns>Returns <c>True</c> if the property exists.</returns>
      <param name="lookupString">Specifies the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <seealso cref="&quot;Lookup Strings&quot;../InfoTopics/API_lookupString.html" />
      <seealso cref="PropertyOptions" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.Clone(System.String,System.Int32)">
      <summary>Creates a copy of the property the lookupString parameter specifies.</summary>
      <remarks>This method does not always make an identical copy unless you use the bitwise-OR operator to specify the PropOption_DoNotShareProperties and PropOption_CopyAllFlags options.
You can create an alias object by using the PropOption_NotOwning option with the PropertyObject.SetPropertyObject or PropertyObject.SetPropertyObjectByOffset methods.
When you clone a step or a sequence, call the Step.CreateNewUniqueStepId or Sequence.CreateNewUniqueStepIds methods to replace the unique step ID with a new unique ID.</remarks>
      <returns>Copy of the property. Release the copy when you finish using it.</returns>
      <param name="lookupString">Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <seealso cref="&quot;Lookup Strings&quot;../InfoTopics/API_lookupString.html" />
      <seealso cref="PropertyObject" />
      <seealso cref="PropertyObject.SetPropertyObject" />
      <seealso cref="PropertyObject.SetPropertyObjectByOffset" />
      <seealso cref="PropertyOptions" />
      <seealso cref="Sequence.CreateNewUniqueStepIds" />
      <seealso cref="Step.CreateNewUniqueStepId" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.Evaluate(System.String)">
      <summary><para>Note: This method is obsolete. Use the PropertyObject.EvaluateEx method instead.</para></summary>
      <remarks>Evaluates an expression and returns the result.</remarks>
      <returns>The result of the expression, in the form of a PropertyObject. The PropertyObject can contain a value of any type, depending on the expression.</returns>
      <param name="exprString">Specifies a standard TestStand expression.</param>
      <seealso cref="&quot;Adding and Releasing References&quot;../InfoTopics/Adding_and_Releasing_References.html" />
      <seealso cref="PropertyObject" />
      <seealso cref="PropertyObject.EvaluateEx" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.Write(System.String,System.String,System.Int32)">
      <summary>Writes the contents of an object to the file the pathString parameter specifies and associates the name the objectName parameter specifies with the object in the file.</summary>
      <remarks>If you call this method on an alias object, TestStand generates the stream using the object to which the alias refers. This method does not include alias subproperty objects in the stream.
<para>Note: Setting and obtaining values of <c>PropertyObjects</c> objects, the subproperties of <c>PropertyObject</c> objects, and the parent properties of <c>PropertyObject</c> objects is thread-safe and returns consistent values as long as no structural changes to the parent-child relationship of the property objects occur. Making structural changes to a <c>PropertyObject</c> data structure while another thread accesses or modifies the object is not safe and can lead to unexpected behavior and crashes. If you need to share a <c>PropertyObject</c> data structure between threads and need to be able to modify the structure while you share the object, you must use a TestStand Lock step or step setting, an critical section, or other synchronization primitives to ensure that no other threads access the <c>PropertyObject</c> while another thread modifies the structure of the object.</para></remarks>
      <param name="pathString">Specifies the pathname of the file to which to write the object data.</param>
      <param name="objectName">Specifies the name to associate with the object.</param>
      <param name="RWoptions">Pass <c>0</c> to specify the default behavior or pass one or more ReadWriteOptions constants. Use the bitwise-OR operator to specify multiple read/write options.
If you have already written an object with the specified name to the file, pass the <c>RWOption_EraseExistingObject</c> constant for this parameter. Otherwise, the values stored in the file do not update to the values of the object you are writing if the object you are writing has default values for some of its properties. Additionally, unless you use the <c>RWOption_EraseExistingObject</c> or <c>RWOption_EraseAll</c> constants, the method leaves properties from previously written versions of the object in the file even if the properties do not exist in the current version of the object being written.</param>
      <seealso cref="PropertyObject.GetXML" />
      <seealso cref="PropertyObject.IsAliasObject" />
      <seealso cref="PropertyObject.ReadEx" />
      <seealso cref="PropertyObject.Serialize" />
      <seealso cref="ReadWriteOptions" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.Read(System.String,System.String,System.Int32)">
      <summary><para>Note: This method is obsolete. Use the PropertyObject.ReadEx method instead.</para></summary>
      <remarks>Reads the contents of an object from a file and stores them in the PropertyObject. Use the objectName parameter to specify the file with the pathString parameter and the object in the file.</remarks>
      <param name="pathString">Specifies the pathname of the file from which to read the object data.</param>
      <param name="objectName">Specifies the name with which the object is stored in the file.</param>
      <param name="RWoptions">Pass <c>0</c> to specify the default behavior, or pass one or more ReadWriteOptions constants. Use the bitwise-OR operator to specify multiple read/write options.</param>
      <seealso cref="PropertyObject.ReadEx" />
      <seealso cref="PropertyObject.UnserializeEx" />
      <seealso cref="PropertyObject.Write" />
      <seealso cref="ReadWriteOptions" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.Serialize(System.String@,System.String,System.Int32)">
      <summary>Adds the contents of the object to a stream of string data.</summary>
      <remarks>If you call this method on an alias object, TestStand generates the stream using the object to which the alias refers. This method does not include alias subproperty objects in the stream.</remarks>
      <param name="stream">Specifies an existing string or an empty string. The method returns a new string that contains the contents of the string passed for this parameter and the contents of the object.</param>
      <param name="objectName">Specifies the name with which to store the object in the stream.</param>
      <param name="RWoptions">Pass <c>0</c> to specify the default behavior, or pass one or more ReadWriteOptions constants. Use the bitwise-OR operator to specify multiple read/write options.</param>
      <seealso cref="Engine.SerializeObjects" />
      <seealso cref="PropertyObject.GetXML" />
      <seealso cref="PropertyObject.IsAliasObject" />
      <seealso cref="PropertyObject.UnserializeEx" />
      <seealso cref="PropertyObject.Write" />
      <seealso cref="ReadWriteOptions" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.Unserialize(System.String,System.String,System.Int32)">
      <summary><para>Note: This method is obsolete. Use the PropertyObject.UnserializeEx method instead.</para></summary>
      <remarks>Reads the contents of an object from a stream of string data and stores the contents in the PropertyObject to which the method applies.
You cannot unserialize a stream that contains a container type into a property object that is a value type, or vice versa. This method does not return an error, but instead sets the PropertyObject on which this method operates to the default value.
If you attempt to unserialize a stream that contains a value type into a property object of a different value type, TestStand attempts to coerce the value. If the coercion is unsuccessful, TestStand sets the PropertyObject on which this method operates to the default value.
TestStand does not assign the name or flags associated with the top-level PropertyObject in the stream to the PropertyObject on which this method operates.</remarks>
      <param name="stream">Specifies an existing stream of data that stores the object.</param>
      <param name="objectName">Specifies the name with which the object is stored in the stream.</param>
      <param name="RWoptions">Pass <c>0</c> to specify the default behavior, or pass one or more ReadWriteOptions constants. Use the bitwise-OR operator to specify multiple read write options.</param>
      <seealso cref="Engine.UnserializeObjects" />
      <seealso cref="PropertyObject.Serialize" />
      <seealso cref="PropertyObject.UnserializeEx" />
      <seealso cref="ReadWriteOptions" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.PropertyObject.Name">
      <summary>Specifies the name of the PropertyObject.</summary>
      <remarks>TestStand expressions require PropertyObject names to be strings that contain only letters, numbers, and underscores. PropertyObject names cannot contain spaces, start with a number, or be empty. Additionally, the PropertyObject name cannot be &quot;<c>Value</c>&quot;, and you cannot have duplicate subproperty names. For example, <c>MyVariableName_2000</c> is a valid PropertyObject name. Names of elements in a PropertyObject array can contain any character. Both sequence names and step names are examples of such named array elements. However, sequence names cannot be empty or contain control characters. You cannot have duplicate sequence names. The name <c>NI</c> is reserved at the root level for attribute names. 
<para>Note: TestStand does not generate an error if you specify an invalid name for a PropertyObject.</para>
<para>Note: TestStand does not validate type or variable names you create programmatically for invalid characters, such as spaces, which can result in errors when you use expressions. Use the PropertyObject.ValidateNewName, PropertyObject.ValidateNewSubPropertyName, PropertyObject.ValidateNewElementName, or TypeUsageList.ValidateNewTypeName methods to validate property names.</para></remarks>
      <seealso cref="PropertyObject.GetDisplayNames" />
      <seealso cref="PropertyObject.ValidateNewElementName" />
      <seealso cref="PropertyObject.ValidateNewName" />
      <seealso cref="PropertyObject.ValidateNewSubPropertyName" />
      <seealso cref="Sequence.Name" />
      <seealso cref="Step.Name" />
      <seealso cref="StepType.Name" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
      <seealso cref="TypeUsageList.ValidateNewTypeName" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.PropertyObject.Comment">
      <summary>Specifies the comment string associated with the property object.</summary>
      <seealso cref="PropertyObjectFile.Comment" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.GetValIDispatch(System.String,System.Int32)">
      <summary>Returns the value of the ActiveX Automation Reference property the lookupString parameter specifies. The object is returned as an IDispatch pointer.</summary>
      <remarks> This method returns a <c>NULL</c> reference, if that is what the property contains.
<para>Note: This method and the PropertyObject.GetValInterface method apply to the PropValType_Reference value type. The <c>PropertyObject.GetValInterface</c> and <c>PropertyObject.SetValInterface</c> methods are meant for advanced users who want to store arbitrary interfaces in TestStand reference properties.</para></remarks>
      <returns>IDispatch pointer value of the property.</returns>
      <param name="lookupString">Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <seealso cref="&quot;Lookup Strings&quot;../InfoTopics/API_lookupString.html" />
      <seealso cref="PropertyObject.GetValIDispatchByOffset" />
      <seealso cref="PropertyObject.GetValInterface" />
      <seealso cref="PropertyObject.SetValIDispatch" />
      <seealso cref="PropertyOptions" />
      <seealso cref="PropertyValueTypes" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.GetValInterface(System.String,System.Int32)">
      <summary>Returns the value of the ActiveX Automation Reference property the lookupString parameter specifies. The object is returned as an IUnknown pointer.</summary>
      <remarks>This method returns a <c>NULL</c> reference, if that is what the property contains.
This method and the PropertyObject.GetValIDispatch method apply to the PropValType_Reference value type. The <c>PropertyObject.GetValInterface</c> and <c>PropertyObject.SetValInterface</c> methods are meant for advanced users who want to store arbitrary interfaces in TestStand reference properties.</remarks>
      <returns>IUnknown pointer value of the property.</returns>
      <param name="lookupString">Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <seealso cref="&quot;Lookup Strings&quot;../InfoTopics/API_lookupString.html" />
      <seealso cref="PropertyObject.GetValIDispatch" />
      <seealso cref="PropertyObject.GetValInterfaceByOffset" />
      <seealso cref="PropertyObject.SetValInterface" />
      <seealso cref="PropertyOptions" />
      <seealso cref="PropertyValueTypes" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.SetValIDispatch(System.String,System.Int32,System.Object)">
      <summary>Sets the value of the ActiveX Automation Reference property the lookupString parameter specifies. You must specify the value as an IDispatch pointer.</summary>
      <remarks>The reference property maintains a reference to the object you specify. If the property already contains a reference, it releases that reference before storing the new one. If you specify a <c>NULL</c> reference, the property releases any existing reference it holds.
<para>Note: This method and the PropertyObject.SetValInterface method apply to the PropValType_Reference value type. The <c>PropertyObject.GetValInterface</c> and <c>PropertyObject.SetValInterface</c> methods are intended for advanced users who want to store arbitrary interfaces in TestStand reference properties.</para></remarks>
      <param name="lookupString">Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <param name="newValue">Specifies the new value for the property.</param>
      <seealso cref="&quot;Lookup Strings&quot;../InfoTopics/API_lookupString.html" />
      <seealso cref="PropertyObject.GetValIDispatch" />
      <seealso cref="PropertyObject.SetValIDispatchByOffset" />
      <seealso cref="PropertyObject.SetValInterface" />
      <seealso cref="PropertyOptions" />
      <seealso cref="PropertyValueTypes" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.SetValInterface(System.String,System.Int32,System.Object)">
      <summary>Sets the value of the ActiveX Automation Reference property the lookupString parameter specifies. You must specify the value as an IUnknown pointer.</summary>
      <remarks>The reference property maintains a reference to the object you specify. If the property already contains a reference, it releases that reference before storing the new one. If you specify a <c>NULL</c> reference the property releases any existing reference it holds.
<para>Note: This method and the PropertyObject.SetValIDispatch method apply to the PropValType_Reference value type. The <c>PropertyObject.GetValInterface</c> and <c>PropertyObject.SetValInterface</c> methods are intended for use by advanced users who want to store arbitrary interfaces in TestStand reference properties.</para></remarks>
      <param name="lookupString">Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <param name="newValue">Specifies the new value for the property.</param>
      <seealso cref="&quot;Lookup Strings&quot;../InfoTopics/API_lookupString.html" />
      <seealso cref="PropertyObject.GetValInterface" />
      <seealso cref="PropertyObject.SetValIDispatch" />
      <seealso cref="PropertyObject.SetValInterfaceByOffset" />
      <seealso cref="PropertyOptions" />
      <seealso cref="PropertyValueTypes" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.PropertyObject.TypeLastModified">
      <summary>Returns the full version of the TestStand Engine as a string that last modified the type.</summary>
      <remarks>This property is valid only for root type definitions.</remarks>
      <seealso cref="Engine.VersionString" />
      <seealso cref="PropertyObject.IsRootTypeDefinition" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.GetDisplayNames(System.String,System.Int32,System.String@,System.String@)">
      <summary>Obtains the display name, if any, of the name and value of the property the lookupString parameter specifies.</summary>
      <returns>Returns the display name for the value of the property. If there is no display name, a string representation of the actual value is returned.</returns>
      <param name="lookupString">Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.</param>
      <param name="options">Reserved for future use. Pass <c>0</c>.</param>
      <param name="propDisplayName">Returns the display name of the property. If there is no display name, the name of the property is returned.</param>
      <param name="valueDisplayName">Returns the display name for the value of the property. If there is no display name, a string representation of the actual value is returned.</param>
      <seealso cref="&quot;Lookup Strings&quot;../InfoTopics/API_lookupString.html" />
      <seealso cref="PropertyObject.GetFormattedValue" />
      <seealso cref="PropertyObject.Name" />
      <seealso cref="PropertyObject.GetValueDisplayName" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.EvaluateEx(System.String,System.Int32)">
      <summary>Evaluates an expression and returns the result.</summary>
      <remarks>TestStand evaluates the expression within the context of the object on which you call this method. This means the expression can reference the subproperties of the object as variables.</remarks>
      <returns>The result of the expression, in the form of a PropertyObject. The PropertyObject can contain a value of any type depending on the expression. If the expression is empty and you pass the  <c>EvalOption_AllowEmptyExpression</c> constant, this method returns a <c>NULL</c> dispatch pointer or object reference.</returns>
      <param name="exprString">Specifies a standard TestStand expression.</param>
      <param name="evaluationOptions">Pass <c>0</c> to specify the default behavior, or pass one or more EvaluationOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <seealso cref="&quot;Adding and Releasing References&quot;../InfoTopics/Adding_and_Releasing_References.html" />
      <seealso cref="Engine.CheckExpression" />
      <seealso cref="Engine.CheckExprSyntax" />
      <seealso cref="EvaluationOptions" />
      <seealso cref="PropertyObject" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.ValidateNewName(System.String,System.Boolean,System.Boolean@)">
      <summary>Determines if the specified new name is valid for the PropertyObject.</summary>
      <remarks>Call this method before setting the PropertyObject.Name property to determine whether the new name is valid.</remarks>
      <returns>Returns an explanation of why the name is not valid.</returns>
      <param name="newName">Specifies the new name to validate.</param>
      <param name="allowDuplicates">PropertyObjects can have identical names when they are elements in an array of PropertyObjects. If the object is not an array element, pass <c>False</c> to this parameter.</param>
      <param name="isValid">Returns <c>True</c> if the new name is valid.</param>
      <seealso cref="PropertyObject.Name" />
      <seealso cref="PropertyObject.ValidateNewSubPropertyName" />
      <seealso cref="PropertyObject.ValidateNewElementName" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
      <seealso cref="TypeUsageList.ValidateNewTypeName" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.DisplayPropertiesDialog(System.String,NationalInstruments.TestStand.Interop.API.PropertyObjectFile,System.Int32)">
      <summary>Launches a dialog box in which you can view and change properties of the object.</summary>
      <remarks>This method launches a different dialog box according to the type of object. For example, calling this method on a Step object launches the Step Properties dialog box using the Engine.DisplayStepPropDialog method.</remarks>
      <returns>Returns one or more of the PropertyDialogOutputs status flags. Use the bitwise-AND operator to check for specific values.</returns>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box. The string can contain '%1' to be replaced with object name and '%2' to be replaced with object type name.</param>
      <param name="file">Specifies the property object file to which the object belongs. Use the SequenceFile.AsPropertyObjectFile method to obtain a property object file from a sequence file.</param>
      <param name="dlgOptions">Specifies any combination of the PropertyDialogOptions constants.</param>
      <seealso cref="Engine.DisplaySeqFilePropDialog" />
      <seealso cref="Engine.DisplaySequencePropDialog" />
      <seealso cref="Engine.DisplayStepPropDialog" />
      <seealso cref="PropertyDialogOptions" />
      <seealso cref="PropertyDialogOutputs" />
      <seealso cref="PropertyObjectFile" />
      <seealso cref="SequenceFile.AsPropertyObjectFile" />
      <seealso cref="&quot;Step Properties dialog box&quot;javascript:RefLink('/InfoTopics/DB_Step_Prop.htm')" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.GetSubPropertyIndex(System.String,System.Int32,System.String)">
      <summary>Returns the index of the subproperty the propName parameter specifies.</summary>
      <returns>The subproperty index is zero-based.</returns>
      <param name="lookupString">Pass the name of a property within the PropertyObject that contains a subproperty. Refer to Lookup Strings for more information.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <param name="propName">Specifies the name of the subproperty to obtain the index for.</param>
      <seealso cref="&quot;Lookup Strings&quot;../InfoTopics/API_lookupString.html" />
      <seealso cref="PropertyObject.GetNthSubPropertyName" />
      <seealso cref="PropertyObject.GetNumSubProperties" />
      <seealso cref="PropertyObject.SetSubPropertyIndex" />
      <seealso cref="PropertyOptions" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.SetSubPropertyIndex(System.String,System.Int32,System.String,System.Int32)">
      <summary>Sets the index of the subproperty the propName parameter specifies.</summary>
      <remarks>Use this method to change the order of subproperties.</remarks>
      <param name="lookupString">Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <param name="propName">Specifies the name of the subproperty for which to set the index.</param>
      <param name="index">Specifies the new index for the subproperty. The value must be greater than or equal to 0 and less than the number of subproperties.</param>
      <seealso cref="&quot;Lookup Strings&quot;../InfoTopics/API_lookupString.html" />
      <seealso cref="PropertyObject.GetNumSubProperties" />
      <seealso cref="PropertyObject.GetSubPropertyIndex" />
      <seealso cref="PropertyOptions" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.PropertyObject.IsRootTypeDefinition">
      <summary>Returns a value that indicates whether the object is a root type definition.</summary>
      <remarks>A root type definition is an object created with the Engine.NewDataType or Engine.NewStepType methods. Subproperties of root type definitions are also type definitions, but they are not root type definitions. Root type definitions normally belong to a TypeUsageList.</remarks>
      <seealso cref="Engine.NewDataType" />
      <seealso cref="Engine.NewStepType" />
      <seealso cref="PropertyObject.GetTypeDefinition" />
      <seealso cref="PropertyObject.IsTypeDefinition" />
      <seealso cref="PropertyObject.TypeCategory" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
      <seealso cref="TypeUsageList" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.InsertSubProperty(System.String,System.Int32,System.Int32,NationalInstruments.TestStand.Interop.API.PropertyObject)">
      <summary>Inserts an existing property object as a subproperty of another property object.</summary>
      <remarks>To insert a new array element in one-dimensional arrays at the specified offset, use the <c>Set_ByOffset</c> methods of the PropertyObject class and specify the <c>PropOption_InsertElement</c> flag. Use the PropertyObjectType.ArrayDimensions property to change the size of multi-dimensional array objects.
<para>Note: TestStand does not validate property names you create programmatically for invalid characters, such as spaces, which can result in errors when you use expressions. Use the PropertyObject.ValidateNewSubPropertyName  method to validate property names. TestStand expressions require PropertyObject names to be strings that contain only letters, numbers, and underscores. PropertyObject names cannot contain spaces, start with a number, or be empty. Additionally, the PropertyObject name cannot be &quot;<c>Value</c>&quot;, and you cannot have duplicate subproperty names. For example, <c>MyVariableName_2000</c> is a valid PropertyObject name. Names of elements in a PropertyObject array can contain any character. Both sequence names and step names are examples of such named array elements. However, sequence names cannot be empty or contain control characters. You cannot have duplicate sequence names. The name <c>NI</c>  is reserved at the root level for attributes.</para></remarks>
      <param name="lookupString">Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <param name="index">Specifies the index at which to insert the subproperty. This value must be greater than or equal to 0 and less than or equal to the number of subproperties.</param>
      <param name="subProperty">Specifies the object to insert as a subproperty. This object must not be a subproperty of another object. Use the PropertyObject.Parent property to determine whether an object is already a subproperty.</param>
      <seealso cref="Engine.NewPropertyObject" />
      <seealso cref="&quot;Lookup Strings&quot;../InfoTopics/API_lookupString.html" />
      <seealso cref="PropertyObject" />
      <seealso cref="PropertyObject.DeleteSubProperty" />
      <seealso cref="PropertyObject.NewSubProperty" />
      <seealso cref="PropertyObject.Parent" />
      <seealso cref="PropertyObject.ValidateNewSubPropertyName" />
      <seealso cref="PropertyObjectType.ArrayDimensions" />
      <seealso cref="PropertyOptions" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.GetNumElements">
      <summary>Returns the number of elements in the array object.</summary>
      <remarks>This method is valid only for array objects. Use the PropertyObjectType.ArrayDimensions property to obtain the number of elements in each dimension of a multi-dimensional array.</remarks>
      <seealso cref="PropertyObject.SetNumElements" />
      <seealso cref="PropertyObjectType.ArrayDimensions" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.SetNumElements(System.Int32,System.Int32)">
      <summary>Sets the number of elements of a single dimensional array.</summary>
      <remarks>This method is valid only for single dimensional arrays. The elements in the array retain their values. Use the PropertyObjectType.ArrayDimensions property to set the number of elements in each dimension of a multi-dimensional array.</remarks>
      <param name="numElements">Specifies the new number of elements for the array.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <seealso cref="PropertyObject.GetNumElements" />
      <seealso cref="PropertyObjectType.ArrayDimensions" />
      <seealso cref="PropertyOptions" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.DeleteElements(System.Int32,System.Int32,System.Int32)">
      <summary>Deletes one or more elements of an array object. </summary>
      <remarks>This method is valid only for one-dimensional array objects. Use the PropertyObjectType.ArrayDimensions property to change the size of multi-dimensional array objects.

To insert a new array element in a one-dimensional array at the specified offset, use the <c>Set_ByOffset</c> methods of the PropertyObject class and specify the <c>PropOption_InsertElement</c> flag.</remarks>
      <param name="arrayOffset">Specifies the array offset of the first element to delete.</param>
      <param name="numElements">Specifies the number of elements to delete.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <seealso cref="PropertyObject.GetNumElements" />
      <seealso cref="PropertyObject.Type" />
      <seealso cref="PropertyObjectType.ArrayDimensions" />
      <seealso cref="PropertyOptions" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.GetValNumberByOffset(System.Int32,System.Int32)">
      <summary>Returns the double-precision, 64-bit floating-point value of the array element the arrayOffset parameter specifies.</summary>
      <remarks>This method is valid only for array objects and is intended for use with arrays of double-precision, floating-point numbers. Use the PropertyObject.GetValInteger64ByOffset method with arrays of 64-bit integers, and use the PropertyObject.GetValUnsignedInteger64ByOffset method with arrays of unsigned 64-bit integers. If the array is of a type other than double-precision, floating-point, you can use this method with the corresponding PropOption_Coerce constant.</remarks>
      <returns>Double-precision, 64-bit floating-point value of the array element.</returns>
      <param name="arrayOffset">Specifies a zero-based number representing the offset of an array element in the one-dimensional physical storage of the array. The offset is in terms of the number of elements.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <seealso cref="&quot;Lookup Strings&quot;../InfoTopics/API_lookupString.html" />
      <seealso cref="PropertyObject.GetValNumber" />
      <seealso cref="PropertyObject.GetValInteger64ByOffset" />
      <seealso cref="PropertyObject.GetValUnsignedInteger64ByOffset" />
      <seealso cref="PropertyObject.SetValNumberByOffset" />
      <seealso cref="PropertyOptions" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.SetValNumberByOffset(System.Int32,System.Int32,System.Double)">
      <summary>Sets the double-precision, 64-bit floating-point value of the array element the arrayOffset parameter specifies.</summary>
      <remarks>This method is valid only for array objects and is intended for use with arrays of double-precision, floating-point numbers. Use the PropertyObject.SetValInteger64ByOffset method with arrays of 64-bit integers, and use the PropertyObject.SetValUnsignedInteger64ByOffset method with arrays of unsigned 64-bit integers. If the array is of a type other than double-precision, floating-point, you can use this method with the corresponding PropOption_Coerce constant.</remarks>
      <param name="arrayOffset">Specifies a zero-based number representing the offset of an array element in the one-dimensional physical storage of the array. The offset is in terms of the number of elements.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <param name="newValue">Specifies the new value for the array element.</param>
      <seealso cref="PropertyObject.GetValNumberByOffset" />
      <seealso cref="PropertyObject.SetValInteger64ByOffset" />
      <seealso cref="PropertyObject.SetValNumber" />
      <seealso cref="PropertyObject.SetValUnsignedInteger64ByOffset" />
      <seealso cref="PropertyOptions" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.GetValBooleanByOffset(System.Int32,System.Int32)">
      <summary>Returns the Boolean value of the array element the arrayOffset parameter specifies.</summary>
      <remarks>This method is valid only for array objects.</remarks>
      <param name="arrayOffset">Specifies a zero-based number that represents the offset of an array element in the one-dimensional physical storage of the array. The offset is in terms of the number of elements.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <seealso cref="PropertyObject.GetValBoolean" />
      <seealso cref="PropertyObject.SetValBooleanByOffset" />
      <seealso cref="PropertyOptions" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.SetValBooleanByOffset(System.Int32,System.Int32,System.Boolean)">
      <summary>Sets the Boolean value of the array element the arrayOffset parameter specifies.</summary>
      <remarks>This method is valid only for array objects.</remarks>
      <param name="arrayOffset">Specifies a zero-based number representing the offset of an array element in the one-dimensional physical storage of the array. The offset is in terms of the number of elements.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <param name="newValue">Specifies the new value for the array element.</param>
      <seealso cref="PropertyObject.GetValBooleanByOffset" />
      <seealso cref="PropertyObject.SetValBoolean" />
      <seealso cref="PropertyOptions" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.GetValStringByOffset(System.Int32,System.Int32)">
      <summary>Returns the string value of the array element the arrayOffset parameter specifies.</summary>
      <remarks>This method is valid only for array objects. 
For numeric properties, calling this method with the PropOption_CoerceFromNumber option does not localize the resulting string.  Use the PropertyObject.GetFormattedValue method to obtain a localized string for a number.</remarks>
      <returns>String value of the array element.</returns>
      <param name="arrayOffset">Specifies a zero-based number representing the offset of an array element in the one-dimensional physical storage of the array. The offset is in terms of the number of elements.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior, or one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <seealso cref="PropertyObject.GetFormattedValue" />
      <seealso cref="PropertyObject.GetValString" />
      <seealso cref="PropertyObject.SetValStringByOffset" />
      <seealso cref="PropertyOptions" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.SetValStringByOffset(System.Int32,System.Int32,System.String)">
      <summary>Sets the string value of the array element the arrayOffset parameter specifies.</summary>
      <remarks>This method is valid only for array objects.</remarks>
      <param name="arrayOffset">Specifies a zero-based number representing the offset of an array element in the one-dimensional physical storage of the array. The offset is in terms of the number of elements.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <param name="newValue">Specifies the new value for the array element.</param>
      <seealso cref="PropertyObject.GetValStringByOffset" />
      <seealso cref="PropertyObject.SetValString" />
      <seealso cref="PropertyOptions" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.GetPropertyObjectByOffset(System.Int32,System.Int32)">
      <summary>Returns the PropertyObject the arrayOffset parameter specifies.</summary>
      <remarks>This method is valid only for array objects. For arrays that do not contain objects, such as arrays of numbers, Booleans, strings, or ActiveX references, this method returns a property object that is an alias to the specified array element.</remarks>
      <returns>PropertyObject value of the array element.</returns>
      <param name="arrayOffset">Specifies a zero-based number representing the offset of an array element in the one-dimensional physical storage of the array. The offset is in terms of the number of elements.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <seealso cref="PropertyObject" />
      <seealso cref="PropertyObject.GetNumElements" />
      <seealso cref="PropertyObject.GetPropertyObject" />
      <seealso cref="PropertyObject.IsAliasObject" />
      <seealso cref="PropertyOptions" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.SetPropertyObjectByOffset(System.Int32,System.Int32,NationalInstruments.TestStand.Interop.API.PropertyObject)">
      <summary>Sets the array element the arrayOffset parameter specifies to the PropertyObject object you pass.</summary>
      <remarks>This method is valid only for array objects. For arrays that do not contain objects, such as arrays of numbers, Booleans, strings, or ActiveX references, this method expects a property object of the same type as the array element.
Do not call this method if another object already contains the object the newValue parameter specifies. For example, if the object you want to specify for the newValue parameter is already a subproperty or an array element of another object, it cannot also be the subproperty of a different object. You can work around this issue by using the PropOption_NotOwning option when you call this method to instead create an alias to the object, by using the PropertyObject.Clone method to make a copy of the object and use the copy instead, or by removing the object from its current parent or array before assigning a new parent.</remarks>
      <param name="arrayOffset">Specifies a zero-based number representing the offset of an array element in the one-dimensional physical storage of the array. The offset is in terms of the number of elements.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <param name="newValue">Specifies the new value for the array element.</param>
      <seealso cref="Engine.NewPropertyObject" />
      <seealso cref="PropertyObject" />
      <seealso cref="PropertyObject.Clone" />
      <seealso cref="PropertyObject.GetPropertyObjectByOffset" />
      <seealso cref="PropertyObject.SetPropertyObject" />
      <seealso cref="PropertyOptions" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.GetValVariantByOffset(System.Int32,System.Int32)">
      <summary>Returns the value of the array element the arrayOffset parameter specifies in a variant. </summary>
      <remarks>This method is valid only for array objects.</remarks>
      <returns>Variant that contains the value of the array element. If the element is an empty array, this method returns a variant that contains an array with the bounds set to indicate that it contains no elements, such as  <c>[0..-1]</c>.</returns>
      <param name="arrayOffset">Specifies a zero-based number representing the offset of an array element in the one-dimensional physical storage of the array. The offset is in terms of the number of elements.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <seealso cref="PropertyObject.GetValVariant" />
      <seealso cref="PropertyObject.SetValVariantByOffset" />
      <seealso cref="PropertyOptions" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.SetValVariantByOffset(System.Int32,System.Int32,System.Object)">
      <summary>Sets the value of the array element the arrayOffset parameter specifies with a variant. </summary>
      <remarks>This method is valid only for array objects. You can use this method to set the entire value of an element that is an array.</remarks>
      <param name="arrayOffset">Specifies a zero-based number representing the offset of an array element in the one-dimensional physical storage of the array. The offset is in terms of the number of elements.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <param name="newValue">Specifies the new value for the array element.</param>
      <seealso cref="PropertyObject.GetValVariantByOffset" />
      <seealso cref="PropertyObject.SetValVariant" />
      <seealso cref="PropertyOptions" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.GetValIDispatchByOffset(System.Int32,System.Int32)">
      <summary>Returns the value of the ActiveX Automation Reference array element the arrayOffset parameter specifies. The object is returned as an IDispatch pointer.</summary>
      <remarks>This method is valid only for array objects. This method returns a <c>NULL</c> reference, if that is what the array element contains.
This method and the PropertyObject.GetValIDispatch method apply to the PropValType_Reference value type. The <c>PropertyObject.GetValInterface</c> and <c>PropertyObject.SetValInterface</c> methods are meant for advanced users who want to store arbitrary interfaces in TestStand reference properties.</remarks>
      <returns>IDispatch pointer value of the array element.</returns>
      <param name="arrayOffset">Specifies a zero-based number representing the offset of an array element in the one-dimensional physical storage of the array. The offset is in terms of the number of elements.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <seealso cref="PropertyObject.GetValIDispatch" />
      <seealso cref="PropertyObject.GetValInterfaceByOffset" />
      <seealso cref="PropertyObject.SetValIDispatchByOffset" />
      <seealso cref="PropertyOptions" />
      <seealso cref="PropertyValueTypes" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.SetValIDispatchByOffset(System.Int32,System.Int32,System.Object)">
      <summary>Sets the value of the ActiveX Automation Reference array element the arrayOffset parameter specifies. </summary>
      <remarks>This method is valid only for array objects. You must specify the value as an IDispatch pointer.
The reference property maintains a reference to the object you specify. If the property already contains a reference, it releases that reference before storing the new one. If you specify a <c>NULL</c> reference, the property releases any existing reference it holds.
This method and the PropertyObject.SetValInterfaceByOffset apply to the PropValType_Reference value type. The <c>PropertyObject.GetValInterface</c> and <c>PropertyObject.SetValInterface</c> methods are intended for use by advanced users who want to store arbitrary interfaces in TestStand reference properties.</remarks>
      <param name="arrayOffset">Specifies a zero-based number representing the offset of an array element in the one-dimensional physical storage of the array. The offset is in terms of the number of elements.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <param name="newValue">Specifies the new value for the array element.</param>
      <seealso cref="PropertyObject.GetValIDispatchByOffset" />
      <seealso cref="PropertyObject.SetValIDispatch" />
      <seealso cref="PropertyObject.SetValInterfaceByOffset" />
      <seealso cref="PropertyOptions" />
      <seealso cref="PropertyValueTypes" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.GetValInterfaceByOffset(System.Int32,System.Int32)">
      <summary>Returns the value of the ActiveX Automation Reference array element the arrayOffset parameter specifies. The object is returned as an IUnknown pointer.</summary>
      <remarks>This method is valid only for array objects. This method returns a <c>NULL</c> reference, if that is what the property contains.
This method and the PropertyObject.GetValIDispatch method apply to the PropValType_Reference value type. The <c>PropertyObject.GetValInterface</c> and <c>PropertyObject.SetValInterface</c> methods are meant for advanced users who want to store arbitrary interfaces in TestStand reference properties.</remarks>
      <returns>IUnknown pointer value of the array element.</returns>
      <param name="arrayOffset">Specifies a zero-based number representing the offset of an array element in the one-dimensional physical storage of the array. The offset is in terms of the number of elements.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <seealso cref="PropertyObject.GetValIDispatchByOffset" />
      <seealso cref="PropertyObject.GetValInterface" />
      <seealso cref="PropertyObject.SetValInterface" />
      <seealso cref="PropertyObject.SetValInterfaceByOffset" />
      <seealso cref="PropertyOptions" />
      <seealso cref="PropertyValueTypes" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.SetValInterfaceByOffset(System.Int32,System.Int32,System.Object)">
      <summary>Sets the value of the ActiveX Automation Reference array element the arrayOffset parameter specifies.</summary>
      <remarks>This method is valid only for array objects. You must specify the value as an IUnknown pointer.
The reference property maintains a reference to the object you specify. If the property already contains a reference, it releases that reference before storing the new one. If you specify a <c>NULL</c> reference, the property releases any existing reference it holds.
This method and the PropertyObject.SetValIDispatchByOffset method apply to the PropValType_Reference value type. The <c>PropertyObject.GetValInterface</c> and <c>PropertyObject.SetValInterface</c> methods are intended for use by advanced users who want to store arbitrary interfaces in TestStand reference properties.</remarks>
      <param name="arrayOffset">Specifies a zero-based number representing the offset of an array element in the one-dimensional physical storage of the array. The offset is in terms of the number of elements.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <param name="newValue">Specifies the new value for the array element.</param>
      <seealso cref="PropertyObject.GetValInterfaceByOffset" />
      <seealso cref="PropertyObject.SetValIDispatchByOffset" />
      <seealso cref="PropertyObject.SetValInterface" />
      <seealso cref="PropertyOptions" />
      <seealso cref="PropertyValueTypes" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.GetStructureChangeCount(System.String,System.Int32)">
      <summary>Returns the object structure change count of the property the lookupString parameter specifies.</summary>
      <remarks>The structure change count is the number of changes made to the structure of this object. Structural changes include insertion and removal of properties as well as name changes. Changes to values of subproperties are not included in this count.
The sequence editor uses this property to determine whether it needs to refresh the display of the object.</remarks>
      <returns>Number of structural changes to the object.</returns>
      <param name="lookupString">Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <seealso cref="&quot;Lookup Strings&quot;../InfoTopics/API_lookupString.html" />
      <seealso cref="PropertyObjectFile.ChangeCount" />
      <seealso cref="PropertyOptions" />
      <seealso cref="SequenceFile.ChangeCount" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.GetInstanceDefaultFlags(System.String,System.Int32)">
      <summary>Returns the default flags for instances of the type the lookupString parameter specifies.</summary>
      <remarks>This method is valid only for type definitions.
The type instance default flags are the initial flags instances of the type have when they are created. If the corresponding instance override flag is set, the value for that flag as defined in the instance default flag will always be the value in the instance of the type and cannot be changed in that instance.</remarks>
      <returns>Default flags of the type.</returns>
      <param name="lookupString">Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <seealso cref="&quot;Lookup Strings&quot;../InfoTopics/API_lookupString.html" />
      <seealso cref="PropertyFlags" />
      <seealso cref="PropertyObject.DisplayFlagsDialog" />
      <seealso cref="PropertyObject.GetFlags" />
      <seealso cref="PropertyObject.GetInstanceOverrideFlags" />
      <seealso cref="PropertyObject.IsTypeDefinition" />
      <seealso cref="PropertyObject.SetInstanceDefaultFlags" />
      <seealso cref="PropertyOptions" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.SetInstanceDefaultFlags(System.String,System.Int32,System.Int32)">
      <summary>Sets the default flags for instances of the type the lookupString parameter specifies.</summary>
      <remarks>This method is valid only for type definitions. The type instance default flags are the initial flags instances of the type have when they are created. If the corresponding instance override flag is set, the value for that flag as defined in the instance default flag will always be the value in the instance of the type and cannot be changed in that instance. </remarks>
      <param name="lookupString">Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <param name="Flags">Specifies the default flags of the type.</param>
      <seealso cref="&quot;Lookup Strings&quot;../InfoTopics/API_lookupString.html" />
      <seealso cref="PropertyFlags" />
      <seealso cref="PropertyObject.DisplayFlagsDialog" />
      <seealso cref="PropertyObject.GetInstanceDefaultFlags" />
      <seealso cref="PropertyObject.IsModifiedType" />
      <seealso cref="PropertyObject.SetFlags" />
      <seealso cref="PropertyObject.SetInstanceOverrideFlags" />
      <seealso cref="PropertyOptions" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.PropertyObject.IsTypeDefinition">
      <summary>Returns a value that indicates whether the object is a type definition.</summary>
      <remarks>A type definition is an object that is either a root type definition or is a subproperty of a root type definition.</remarks>
      <seealso cref="PropertyObject.GetTypeDefinition" />
      <seealso cref="PropertyObject.IsModifiedType" />
      <seealso cref="PropertyObject.IsRootTypeDefinition" />
      <seealso cref="PropertyObject.TypeCategory" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.ContainsTypeInstance(System.String,System.Int32,System.String)">
      <summary>Determines whether the object the lookupString parameter specifies contains an instance of the specified root type.</summary>
      <returns>Returns <c>True</c> if the property object or any of the subproperties are instances of the specified root type.</returns>
      <param name="lookupString">Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <param name="typeNameParam">Specifies the name of the root type.</param>
      <seealso cref="&quot;Lookup Strings&quot;../InfoTopics/API_lookupString.html" />
      <seealso cref="PropertyOptions" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.PropertyObject.TypeCategory">
      <summary>Returns the type category to which the type definition belongs.</summary>
      <remarks>This property is valid only for root type definitions. Add a root type definition to a type category by calling the TypeUsageList.InsertType method.</remarks>
      <seealso cref="PropertyObject.IsRootTypeDefinition" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
      <seealso cref="TypeUsageList.InsertType" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.IsAliasObject(System.String,System.Int32)">
      <summary>Returns a value that indicates whether the subproperty the lookupString parameter specifies is an alias to another object.</summary>
      <remarks>An alias object is a property object that references another object or array element.
Create an alias object by using the PropOption_NotOwning option with the PropertyObject.SetPropertyObject or PropertyObject.SetPropertyObjectByOffset methods.
You can also create an alias object by calling the PropertyObject.GetPropertyObject or PropertyObject.GetPropertyObjectByOffset methods on arrays that do not contain objects (such as arrays of numbers, Booleans, strings or ActiveX references), in which case the resulting alias object refers to the specified array element. With the exception of the PropertyObject.Parent property, calling a method or referencing a property on an alias object is equivalent to calling the same method or property on the referenced object or array element unless you pass the PropOption_ReferToAlias option, in which case the method affects the alias object itself. To obtain the referenced object, use the GetPropertyObject method and pass an empty string for the lookupString parameter.
TestStand uses alias objects to make objects appear to have multiple owners. For example, the SequenceContext object contains an alias to the current step. The Step object cannot be a subproperty of the sequence context because it belongs to the sequence instead. By having an alias object that refers to the step, the sequence context appears to contain the step itself.</remarks>
      <returns>Returns <c>True</c> if the property is an alias.</returns>
      <param name="lookupString">Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <seealso cref="&quot;Lookup Strings&quot;../InfoTopics/API_lookupString.html" />
      <seealso cref="PropertyObject.GetPropertyObject" />
      <seealso cref="PropertyObject.GetPropertyObjectByOffset" />
      <seealso cref="PropertyObject.Parent" />
      <seealso cref="PropertyObject.SetPropertyObject" />
      <seealso cref="PropertyObject.SetPropertyObjectByOffset" />
      <seealso cref="PropertyOptions" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.GetLocation(NationalInstruments.TestStand.Interop.API.PropertyObject)">
      <summary>Returns a lookup string for the property when the topObject parameter specifies a parent of the property. If the topObject parameter does not specify the parent of the property, this method returns the lookup string to the most parent object of the property.</summary>
      <remarks>Call this method to obtain a lookup string you can use with the object the topObject parameter specifies when topObject is a parent of the property. 
Do not use this method to determine the lookup string for a property under a SequenceContext object because the context uses alias objects to reference many properties and the context is not a parent of the property. For example, the expression <c>&quot;StationGlobals.MyBool.GetLocation(ThisContext)&quot;</c> returns <c>&quot;Data.MyBool&quot;</c>, where the <c>&quot;Data&quot;</c> property is the most parent object in the station global variables file.</remarks>
      <returns>Returns the lookup string.</returns>
      <param name="topObject">Specifies the object that contains this object.</param>
      <seealso cref="PropertyObject" />
      <seealso cref="SequenceContext" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.DisplayFlagsDialog(System.String,System.Int32)">
      <summary>Launches a dialog box in which you can view and change the object flags.</summary>
      <returns>Returns one or more of the PropertyDialogOutputs status flags. Use the bitwise-AND operator to check for specific values.</returns>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.</param>
      <param name="dlgOptions">Specifies any combination of the PropertyDialogOptions constants.</param>
      <seealso cref="PropertyDialogOptions" />
      <seealso cref="PropertyDialogOutputs" />
      <seealso cref="PropertyObject.IsModifiedType" />
      <seealso cref="PropertyObject.SetFlags" />
      <seealso cref="PropertyObject.SetInstanceDefaultFlags" />
      <seealso cref="PropertyObject.SetInstanceOverrideFlags" />
      <seealso cref="PropertyObject.SetTypeFlags" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.DisplayArrayBoundsDialog(System.String,System.Int32)">
      <summary>Launches a dialog box in which you can view and change the bounds of an array object.</summary>
      <remarks>This method is valid only on array objects. Use this method when you create a new array object. 
Use the PropertyObject.DisplayPropertiesDialog method to modify the array bounds and other PropertyObject properties.</remarks>
      <returns>Returns <c>True</c> if you make modifications and click OK in the dialog box. Returns <c>False</c> if you click Cancel or make no modifications.</returns>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.</param>
      <param name="dlgOptions">Specifies any combination of the ArrayBoundsDialogOptions constants.</param>
      <seealso cref="ArrayBoundsDialogOptions" />
      <seealso cref="PropertyObject.DisplayPropertiesDialog" />
      <seealso cref="PropertyObject.SetNumElements" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.PropertyObject.Parent">
      <summary>Returns the parent or owning property object.</summary>
      <remarks>If this object is an alias object, you can obtain the parent of the object the alias references by first obtaining the referenced object by passing an empty string for the lookupString parameter of the PropertyObject.GetPropertyObject method, then access the parent property.</remarks>
      <returns>The object that owns this object. Returns <c>NULL</c> if none. </returns>
      <seealso cref="PropertyObject.GetPropertyObject" />
      <seealso cref="PropertyObject.IsAliasObject" />
      <seealso cref="PropertyObject" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.PropertyObject.CanAddSubProperty">
      <summary>Returns a value that indicates whether you can add subproperties to this object.</summary>
      <remarks>When this property is <c>False</c>, the PropertyObject.InsertSubProperty, PropertyObject.NewSubProperty, and PropertyObject.SetPropertyObject methods report errors.</remarks>
      <seealso cref="PropertyObject.InsertSubProperty" />
      <seealso cref="PropertyObject.NewSubProperty" />
      <seealso cref="PropertyObject.SetPropertyObject" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.GetTypeDisplayString(System.String,System.Int32)">
      <summary><para>Note: This method is obsolete. Use the PropertyObjectType.DisplayString property instead.</para></summary>
      <remarks>Returns a string that describes the type of the object.</remarks>
      <param name="lookupString">Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <seealso cref="&quot;Lookup Strings&quot;../InfoTopics/API_lookupString.html" />
      <seealso cref="PropertyObject.GetDisplayNames" />
      <seealso cref="PropertyObject.Name" />
      <seealso cref="PropertyObjectType.DisplayString" />
      <seealso cref="PropertyOptions" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.IsEqualTo(NationalInstruments.TestStand.Interop.API.PropertyObject,System.Int32)">
      <summary>Compares this object to another PropertyObject.</summary>
      <remarks>With no options, this method returns <c>True</c> if both objects have the same number of subproperties with the same case-insensitive names, value types, representation, values, flags, and attributes. If both objects are type definitions, the struct/cluster passing settings, type flags, instance default flags, instance override flags, type versions, type definition lock settings, and type attributes must also be the same. 
If a subproperty enables the PropFlags_ExcludeFromComparison flag, TestStand ignores the subproperty for purposes of this comparison. 
If you specify the PropOption_RequireIdenticalStructure option, additional settings for the properties must be the same. If you specify the <c>PropOption_CaseInsensitive</c> option, the method ignores case differences when comparing string values. </remarks>
      <param name="objectToCompare">Specifies the object to compare to this object.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
You typically use the PropOption_CaseInsensitive, PropOption_DoNotRecurse, and PropOption_RequireIdenticalStructure options with this method.</param>
      <seealso cref="PropertyFlags" />
      <seealso cref="PropertyObject" />
      <seealso cref="PropertyOptions" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.ReadEx(System.String,System.String,System.Int32,NationalInstruments.TestStand.Interop.API.TypeConflictHandlerTypes)">
      <summary>Reads the contents of an object from a file and stores them in the PropertyObject. You specify the file with the pathString parameter and specify the object in the file with the objectName parameter.</summary>
      <param name="pathString">Specifies the pathname of the file from which to read the object data.</param>
      <param name="objectName">Specifies the name with which the object is stored in the file.</param>
      <param name="RWoptions">Pass <c>0</c> to specify the default behavior, or pass one or more ReadWriteOptions constants. Use the bitwise-OR operator to specify multiple read/write options.</param>
      <param name="handlerType">Specifies how to handle type conflicts in the file.</param>
      <seealso cref="PropertyObject.UnserializeEx" />
      <seealso cref="PropertyObject.Write" />
      <seealso cref="ReadWriteOptions" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
      <seealso cref="TypeConflictHandlerTypes" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.UnserializeEx(System.String,System.String,System.Int32,NationalInstruments.TestStand.Interop.API.TypeConflictHandlerTypes)">
      <summary>Reads the contents of an object from a stream of string data and stores the contents in the PropertyObject to which the method applies.</summary>
      <remarks>You cannot unserialize a stream that contains a container type into a property object that is a value type or vise versa. This method does not return an error but instead sets the PropertyObject on which this method operates to the default value.
If you attempt to unserialize a stream that contains a value type into a property object of a different value type, TestStand attempts to coerce the value. If the coercion is unsuccessful, TestStand sets the PropertyObject on which this method operates to the default value.
TestStand does not assign the name or flags associated with the top-level PropertyObject in the stream to the PropertyObject on which this method operates.</remarks>
      <param name="stream">Specifies an existing stream of data that stores the object.</param>
      <param name="objectName">Specifies the name with which the object is stored in the stream.</param>
      <param name="RWoptions">Pass <c>0</c> to specify the default behavior, or pass one or more ReadWriteOptions constants. Use the bitwise-OR operator to specify multiple read/write options.</param>
      <param name="handlerType">Specifies how to handle type conflicts in the stream.</param>
      <seealso cref="Engine.UnserializeObjects" />
      <seealso cref="PropertyObject.ReadEx" />
      <seealso cref="PropertyObject.Serialize" />
      <seealso cref="ReadWriteOptions" />
      <seealso cref="TypeConflictHandlerTypes" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.PropertyObject.TypeVersion">
      <summary>Specifies the version of the PropertyObject object if it is a root type definition.</summary>
      <remarks>If the object is not a root type definition, the property reports an error.  Call the PropertyObject.IsRootTypeDefinition property to check if this property would return an error. The version string is in a format similar to that of DLLs and executables: <c>&quot;M[.m[.r[.b]]],&quot;</c> where M=major version, m=minor version, r=revision, and b=build number. All but the major version can be omitted.  Example version strings are &quot;1.0.2.200&quot; and &quot;2.1.&quot;  If you want to set the type version, you must pass a string that follows this format.</remarks>
      <seealso cref="PropertyObject.IsRootTypeDefinition" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.GetTypeFlags(System.String,System.Int32)">
      <summary>Returns the type flags setting of the property the lookupString parameter specifies.</summary>
      <remarks>Call this method only for PropertyObject objects that are type definitions.</remarks>
      <returns>Current type flags of the property.</returns>
      <param name="lookupString">Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <seealso cref="&quot;Lookup Strings&quot;../InfoTopics/API_lookupString.html" />
      <seealso cref="PropertyObject.DisplayFlagsDialog" />
      <seealso cref="PropertyObject.GetFlags" />
      <seealso cref="PropertyObject.GetInstanceDefaultFlags" />
      <seealso cref="PropertyObject.GetInstanceOverrideFlags" />
      <seealso cref="PropertyObject.IsModifiedType" />
      <seealso cref="PropertyObject.IsTypeDefinition" />
      <seealso cref="PropertyObject.SetTypeFlags" />
      <seealso cref="PropertyObjTypeFlags" />
      <seealso cref="PropertyOptions" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.SetTypeFlags(System.String,System.Int32,System.Int32)">
      <summary>Sets the type flags setting of the property the lookupString parameter specifies.</summary>
      <remarks>Call this method only for PropertyObject objects that are type definitions. Use the PropertyObject.IsTypeDefinition property to determine whether the object is a type definition.
<para>Note: You cannot clear the PropTypeFlags_IsModifiedType flag with this method because setting the type flags automatically sets the <c>PropTypeFlags_IsModifiedType</c> flag. Instead, use the PropertyObject.IsModifiedType property to set or clear the <c>PropTypeFlags_IsModifiedType</c> flag.</para></remarks>
      <param name="lookupString">Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <param name="Flags">Specifies the new type flags for the property.</param>
      <seealso cref="&quot;Lookup Strings&quot;../InfoTopics/API_lookupString.html" />
      <seealso cref="PropertyObject.DisplayFlagsDialog" />
      <seealso cref="PropertyObject.GetTypeFlags" />
      <seealso cref="PropertyObject.IsModifiedType" />
      <seealso cref="PropertyObject.IsTypeDefinition" />
      <seealso cref="PropertyObject.SetInstanceDefaultFlags" />
      <seealso cref="PropertyObject.SetInstanceOverrideFlags" />
      <seealso cref="PropertyObjTypeFlags" />
      <seealso cref="PropertyOptions" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.PropertyObject.NumericFormat">
      <summary>Specifies a numeric format string TestStand uses to format a numeric value or values in a numeric array when you call the PropertyObject.GetFormattedValue method.</summary>
      <remarks>The syntax of the numeric format string is identical to the format string that the C <c>printf</c> function accepts, with the following exceptions:
<para><para>&#160;&#160;&#160;&#160;* Place a <c>$</c> character after the <c>%</c> character in the format string to remove trailing zeros after the decimal point.</para><para>&#160;&#160;&#160;&#160;* Use a format code of <c>%b</c> to format a number in binary.</para><para>&#160;&#160;&#160;&#160;* Specify an empty string to set the format to the default numeric format.</para></para></remarks>
      <seealso cref="PropertyObject.GetDisplayNames" />
      <seealso cref="PropertyObject.GetFormattedValue" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.GetInstanceOverrideFlags(System.String,System.Int32)">
      <summary>Returns the flags for which the type determines the value in the instances of the type. Specify the type or a property of the type in the lookupString parameter.</summary>
      <remarks>This method is valid only for type definitions. 
If an instance override flag is set, the value for that flag as defined in the instance default flag will always be the value in the instance of the type and cannot be changed in that instance. </remarks>
      <returns>Instance override flags of the type.</returns>
      <param name="lookupString">Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <seealso cref="PropertyFlags" />
      <seealso cref="PropertyObject.DisplayFlagsDialog" />
      <seealso cref="PropertyObject.GetFlags" />
      <seealso cref="PropertyObject.GetInstanceDefaultFlags" />
      <seealso cref="PropertyObject.GetTypeFlags" />
      <seealso cref="PropertyObject.IsTypeDefinition" />
      <seealso cref="PropertyObject.SetInstanceOverrideFlags" />
      <seealso cref="PropertyObject.Type" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.SetInstanceOverrideFlags(System.String,System.Int32,System.Int32)">
      <summary>Sets the flags for which the type determines the value in the instances of the type. Specify the type or a property of the type in the lookupString.</summary>
      <remarks>This method is valid only for type definitions. If you set an instance override flag, the value for that flag as defined in the instance default flag will always be the value in the instance of the type and cannot be changed in that instance.</remarks>
      <param name="lookupString">Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <param name="Flags">Specifies the default flags of the type.</param>
      <seealso cref="&quot;Lookup Strings&quot;../InfoTopics/API_lookupString.html" />
      <seealso cref="PropertyFlags" />
      <seealso cref="PropertyObject.DisplayFlagsDialog" />
      <seealso cref="PropertyObject.GetInstanceOverrideFlags" />
      <seealso cref="PropertyObject.IsModifiedType" />
      <seealso cref="PropertyObject.SetFlags" />
      <seealso cref="PropertyObject.SetInstanceDefaultFlags" />
      <seealso cref="PropertyObject.SetTypeFlags" />
      <seealso cref="PropertyOptions" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.PropertyObject.ArrayElementPrototype">
      <summary>Specifies the prototype for elements of the array.</summary>
      <remarks>This property is valid only for arrays of containers or arrays of named types. Call the PropertyObject.Type property to determine whether the object is an array of containers or named types. The array element prototype is a template from which new elements are copied when the size of the array increases.  The array element prototype represents the expected structure of elements of the array.</remarks>
      <seealso cref="PropertyObject" />
      <seealso cref="PropertyObject.GetArrayIndex" />
      <seealso cref="PropertyObject.GetArrayOffset" />
      <seealso cref="PropertyObject.GetNumElements" />
      <seealso cref="PropertyObject.Type" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.ValidateNewSubPropertyName(System.String,System.Boolean,System.Boolean@)">
      <summary>Determines if the specified name is valid for a new subproperty of the PropertyObject.</summary>
      <remarks>Call this method before adding a new subproperty to determine whether the name of the new subproperty is valid.</remarks>
      <returns>Returns an explanation of why the name is not valid.</returns>
      <param name="newName">Specifies the new name to validate.</param>
      <param name="allowDuplicates">Typically, you pass <c>False</c> to this parameter because subproperties cannot have identical names.</param>
      <param name="isValid">Returns <c>True</c> if the new name is valid.</param>
      <seealso cref="PropertyObject.Name" />
      <seealso cref="PropertyObject.ValidateNewName" />
      <seealso cref="PropertyObject.ValidateNewElementName" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
      <seealso cref="TypeUsageList.ValidateNewTypeName" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.ValidateNewElementName(System.String,System.Boolean,System.Boolean@)">
      <summary>Determines if the specified name is valid for a new element of the PropertyObject.</summary>
      <remarks>This method is valid only for arrays of containers or arrays of named types. Call this method before adding a new element to determine whether the name of the new element is valid.</remarks>
      <returns>Returns an explanation of why the name is not valid.</returns>
      <param name="newName">Specifies the new name to validate.</param>
      <param name="allowDuplicates">In addition to validating the name, also checks if the name is already in use. Typically, you pass <c>True</c> to this parameter because array elements are allowed to have duplicate names.</param>
      <param name="isValid">Returns <c>True</c> if the new name is valid.</param>
      <seealso cref="PropertyObject.Name" />
      <seealso cref="PropertyObject.ValidateNewName" />
      <seealso cref="PropertyObject.ValidateNewSubPropertyName" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
      <seealso cref="TypeUsageList.ValidateNewTypeName" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.GetFormattedValue(System.String,System.Int32,System.String,System.Boolean,System.String)">
      <summary>Returns a formatted string that describes the value of the object.</summary>
      <remarks>Use this string to display the value of an object.  For string, number, and Boolean Array objects, the method returns a string composed of the concatenated values of the array elements. For Container objects, this method returns the string &quot;...&quot;. For empty Reference objects, the method returns the string <c>Nothing</c>.
Place a <c>$</c> character after the <c>%</c> character in the format string to remove trailing zeros after the decimal point.
Use a <c>&quot;%s&quot;</c> style format specifier to format any value as a string with a specified width and alignment.  For example, calling this method on the string value <c>&quot;Right justified&quot;</c> with a format string of <c>&quot;%20s&quot;</c> returns:
<c>&quot; &#160;&#160;Right justified&quot;</c>
Use a format code of <c>%b</c> to format a number in binary.</remarks>
      <returns>Formatted string value of the property</returns>
      <param name="lookupString">Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.</param>
      <param name="options">Specifies how the method determines which character is the localized decimal point, which it uses to localize the display value. Pass one of the following options: PropOption_DecimalPoint_UseComma, PropOption_DecimalPoint_UsePeriod, PropOption_DecimalPoint_UsePreference, or PropOption_DecimalPoint_UseSystemSetting. Use the bitwise-OR operator to specify multiple options.</param>
      <param name="formatString">Specifies a C (printf) style format string to control the conversion. When you pass an empty string, this method uses the following default TestStand format strings based on the numeric representation of the numeric property objects:
<para><para>&#160;&#160;&#160;&#160;* <c>&#37;.13g</c> for double-precision, 64-bit floating-point values</para><para>&#160;&#160;&#160;&#160;* <c>&#37;d</c> for signed 64-bit integer values</para><para>&#160;&#160;&#160;&#160;* <c>&#37;u</c> for unsigned 64-bit integer values</para></para></param>
      <param name="useValueFormatIfDefined">Specifies whether the function uses the inherent format of the first argument, if the argument value has a non-default numeric display format. If you pass <c>True</c> and the value argument has a non-default format, the function uses the value format instead of the format you pass to parameter three.</param>
      <param name="separator">Specifies a string that separates each element in the concatenated string of array elements the function returns.</param>
      <seealso cref="DecimalPointLocalizationOptions" />
      <seealso cref="Engine.LocalizeExpression" />
      <seealso cref="&quot;Lookup Strings&quot;../InfoTopics/API_lookupString.html" />
      <seealso cref="PropertyObject.GetDisplayNames" />
      <seealso cref="PropertyObject.Type" />
      <seealso cref="PropertyOptions" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.GetXML(System.Int32,System.Int32,System.String,System.String)">
      <summary>Generates the corresponding XML for a PropertyObject.</summary>
      <remarks>You can use the PropertyObject.SetXML method to recreate an object using the XML this method generates.
You can use the generated XML for exchanging data between TestStand and other applications.
If you call this method on an alias object, TestStand generates the XML stream using the object to which the alias refers. By default, this method includes alias subproperty objects in the XML stream, unless you specify the XMLOptions_ExcludeAliasObjects option.
Refer to the World Wide Web Consortium-compliant XML schema file, <c>PropertyObject.xsd</c>, located in the <c>&lt;TestStand&gt;\Components\Models\TestStandModels</c> directory, for more information about the output of the GetXML method and the required format for the input stream to SetXML.
The <c>&lt;TestStand&gt;\Components\Models\TestStandModels\PropertyObject.xsd</c> file defines the XSD schema definition for the GetXML and SetXML methods. The <c>&lt;TestStand&gt;\Components\Models\TestStandModels\Report.xsd</c> file defines the XSD schema definition for XML reports.</remarks>
      <param name="GenerationOptions">Use this parameter to control the XML generation. You can use any combination of the flags found in XMLOptions.</param>
      <param name="InitialIndentation">Specifies the number of tab characters in front of each line of generated XML source.</param>
      <param name="DefaultName">Specifies a default name when you call this method on an object that has no name.
Pass an empty string if you want to use the name of the PropertyObject on which this method was called. This applies only to the root PropertyObject and not subproperties.</param>
      <param name="FormatString">Use this parameter to control the format of numeric values in the resulting XML. When you pass an empty string, this method uses the following default TestStand format strings based on the numeric representation of the numeric property objects:
<para><para>&#160;&#160;&#160;&#160;* <c>&#37;.17g</c> for double-precision, 64-bit floating-point values</para><para>&#160;&#160;&#160;&#160;* <c>&#37;d</c> for signed 64-bit integer values</para><para>&#160;&#160;&#160;&#160;* <c>&#37;u</c> for unsigned 64-bit integer values</para></para>
<para>Note: TestStand ignores format strings of the <c>&#37;g</c> type when the representation is signed 64-bit integer or unsigned 64-bit integer.</para>
If you use the XMLOption_UseValueFormatIfDefined flag to format numeric values, the XML instead uses the numeric format of the number, if specified.</param>
      <seealso cref="PropertyObject.IsAliasObject" />
      <seealso cref="PropertyObject.Serialize" />
      <seealso cref="PropertyObject.SetXML" />
      <seealso cref="PropertyObject.UnserializeEx" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
      <seealso cref="XMLOptions" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.Search(System.String,System.String,System.Int32,System.Int32,System.Int32,System.String[],System.String[],System.String[],System.String[])">
      <summary>Searches a property object and subproperties.</summary>
      <remarks>Returns a SearchResults object that is a handle to the asynchronous search already in progress. To wait for the search to complete, call the SearchResults.IsComplete method.</remarks>
      <returns>A SearchResult object.</returns>
      <param name="lookupString">Specifies a lookup string that indicates the location of the subproperty of the PropertyObject on which to begin the search. If a match is found, the location of the match in the SearchMatch object is relative to the original PropertyObject, not the subproperty. You can pass an empty string for this parameter to begin the search at the root-level of the PropertyObject.</param>
      <param name="searchString">Specifies the string or regular expression for which to search. To use regular expressions, you must pass the option <c>SearchOptions_RegExpr</c> for the searchOptions parameter of this method.</param>
      <param name="searchOptions">Specifies one or more SearchOptions constants. Use the bitwise-OR operator to specify multiple search options. The search option <c>SearchOptions_IncludeSubsequenceFiles</c> does not apply to this method.</param>
      <param name="filterOptions">Specifies one or more SearchFilterOptions constants. Use the bitwise-OR operator to specify multiple search filter options. Only the following filter options apply to this method: <c>SearchFilterOptions_CustomStepProps</c>, <c>SearchFilterOptions_BuiltinStepProps</c>, and <c>SearchFilterOptions_ModuleStepProps</c>.</param>
      <param name="elementsToSearch">Specifies one or more SearchElements constants. Use the bitwise-OR operator to specify multiple elements to search.</param>
      <param name="limitToAdapters">Specifies an array of AdapterKeyNames constants to indicate the steps of which adapters to search. Pass an empty array or <c>NULL</c> to search steps that use any adapter.</param>
      <param name="limitToNamedProps">Specifies an array of property names under which to limit the search. Pass an empty array or <c>NULL</c> to search all properties. If you specify names of properties to which to limit the search, TestStand searches only those properties with the names you specify and all their subproperties.</param>
      <param name="limitToPropsOfNamedTypes">Specifies an array of type names to which to limit the search. Pass an empty array or <c>NULL</c> to search instances of all types. Use this parameter to limit the search instances of all types. Use this parameter to limit the search to instances of the types you specify.</param>
      <param name="subpropLookupStringsToExclude">Specifies an array of lookup strings that indicate which subproperties to exclude from the search. Pass an empty array or <c>NULL</c> if you do not want to exclude any properties. You can pass a lookup string with the wildcard character (<c>*</c>) in place of any property name to indicate that all properties match that part of the lookup string. You can also use the wildcard character to match any element of an array by specifying the wildcard character (<c>*</c>) for the array element index. For example, if the property object you search is an array of steps, you can specify the lookup string <c>&quot;[*].Result&quot;</c> to exclude the <c>Result</c> property of all steps in the array.
<para>Note: When you exclude a subproperty, you also exclude all the subproperties the subproperty contains.</para></param>
      <seealso cref="AdapterKeyNames" />
      <seealso cref="Engine.SearchFiles" />
      <seealso cref="SearchElements" />
      <seealso cref="SearchFilterOptions" />
      <seealso cref="SearchMatch" />
      <seealso cref="SearchOptions" />
      <seealso cref="SearchResults" />
      <seealso cref="SearchResults.IsComplete" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.PropertyObject.TypeMinimumTestStandVersion">
      <summary>Specifies the earliest version of TestStand that can use a type.</summary>
      <remarks>When you load a file that contains the type in a version of TestStand that is older than the value of this property, TestStand uses the currently loaded version of the type, if one exists. Otherwise, the file fails to load.
<para>Note: This property is valid only for root type definitions.</para></remarks>
      <seealso cref="PropertyObject.IsRootTypeDefinition" />
      <seealso cref="PropertyObject.TypeLastModified" />
      <seealso cref="PropertyObject.TypeVersion" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.SetXML(System.String,System.Int32,NationalInstruments.TestStand.Interop.API.TypeConflictHandlerTypes)">
      <summary>Reads the contents of a stream of XML string data and stores the contents in the PropertyObject to which the method applies.</summary>
      <remarks>You can use the PropertyObject.GetXML method to generate the corresponding XML this method requires.
You cannot unserialize a stream that contains a container type into a property object that is a value type, or vice versa. This method does not return an error. Instead, it sets the PropertyObject on which this method operates to the default value.
If you attempt to unserialize a stream that contains a value type into a property object of a different value type, TestStand attempts to coerce the value. If the coercion is unsuccessful, TestStand only resets the PropertyObject on which this method operates to the default value.
TestStand does not assign the name and some flags associated with the top-level PropertyObject in the stream to the PropertyObject on which this method operates.
Refer to the World Wide Web Consortium-compliant XML schema file, <c>PropertyObject.xsd</c>, located in the <c>&lt;TestStand&gt;\Components\Models\TestStandModels</c> directory, for more information about the output of the <c>PropertyObject.GetXML</c> method and the required format for the input stream to this method.
The <c>&lt;TestStand&gt;\Components\Models\TestStandModels\Report.xsd</c> file defines the XSD schema definition for XML reports.</remarks>
      <param name="xmlStream">Specifies an XML stream.</param>
      <param name="reserved1">Pass <c>0</c>.</param>
      <param name="reserved2">This parameter is reserved for when the PropertyObject.GetXML method supports storing type information in an XML stream. This parameter specifies how to handle type conflicts in the stream.</param>
      <seealso cref="PropertyObject.GetXML" />
      <seealso cref="PropertyObject.Serialize" />
      <seealso cref="PropertyObject.UnserializeEx" />
      <seealso cref="TypeConflictHandlerTypes" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.GetValBinary(System.String,System.Int32)">
      <summary>Returns the binary data stored in the string value of the property the lookupString parameter specifies. The PropertyObject.SetValBinary method must have set the string value.</summary>
      <remarks>This method unencodes and decompresses the binary data the string stores. You can use this method to retrieve arbitrary binary data from TestStand string variables or properties.</remarks>
      <returns>Returns an array of bytes that contains the binary data the string property stores.</returns>
      <param name="lookupString">Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <seealso cref="&quot;Lookup Strings&quot;../InfoTopics/API_lookupString.html" />
      <seealso cref="PropertyObject.SetValBinary" />
      <seealso cref="PropertyOptions" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.SetValBinary(System.String,System.Int32,System.Byte[])">
      <summary>Sets the string value of the property the lookupString parameter specifies to contain a string representation of the binary data you pass to the newValue parameter. This method compresses the binary data and then encodes the compressed data into the string using only printable ASCII characters. </summary>
      <remarks>Ordinarily, you cannot store binary data in a string because strings cannot contain zero bytes and strings must not contain invalid multibyte character set (MBCS) sequences. However, by encoding binary data using only printable non-MBCS-lead-byte characters, this method enables you to store arbitrary binary data in TestStand string variables or properties. </remarks>
      <param name="lookupString">Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <param name="newValue">Specifies the array of bytes to store in the string property.</param>
      <seealso cref="&quot;Lookup Strings&quot;../InfoTopics/API_lookupString.html" />
      <seealso cref="PropertyObject.GetValBinary" />
      <seealso cref="PropertyOptions" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.GetNthSubProperty(System.String,System.Int32,System.Int32)">
      <summary>Returns the PropertyObject value of the property at the index specified.</summary>
      <remarks>The order of subproperties in a property object can vary. National Instruments recommends using this method only when iterating on all the subproperties of the property object, or if you use the PropertyObject.GetNthSubPropertyName method or the PropertyObject.Name property to determine whether the subproperty has the name you expect.</remarks>
      <param name="lookupString">Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.</param>
      <param name="index">Specifies the zero-based index of the subproperty.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <seealso cref="&quot;Lookup Strings&quot;../InfoTopics/API_lookupString.html" />
      <seealso cref="PropertyObject" />
      <seealso cref="PropertyObject.GetNthSubPropertyName" />
      <seealso cref="PropertyObject.GetPropertyObject" />
      <seealso cref="PropertyObject.GetPropertyObjectByOffset" />
      <seealso cref="PropertyObject.Name" />
      <seealso cref="PropertyObject.SetPropertyObject" />
      <seealso cref="PropertyOptions" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.DeleteNthSubProperty(System.String,System.Int32,System.Int32)">
      <summary>Deletes the subproperty at the specified index.</summary>
      <remarks>Use the <c>PropOption_DeleteIfExists</c> option to prevent TestStand from returning errors if the specified property does not exist prior to calling this function. To delete a specific element from a one-dimensional array, use the PropertyObject.DeleteElements method.
<para>Note: TestStand does not support adding a new subproperty to an instance of a type unless you add the subproperty below a container you have marked as unstructured in the type definition by using the PropFlags_UnstructuredProperty flag. TestStand does not report any errors and creates the property, but does not save the property. When resolving type conflicts and updating type instances, TestStand automatically removes the property.</para></remarks>
      <param name="lookupString">Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.</param>
      <param name="index">Specifies the zero-based index of the subproperty. Pass <c>-1</c> to delete all subproperties. If you pass <c>-1</c>, subproperties that cannot be deleted do not generate an error.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <seealso cref="&quot;Lookup Strings&quot;../InfoTopics/API_lookupString.html" />
      <seealso cref="&quot;Managing Type Revisions&quot;javascript:TSFundLink('/InfoTopics/Types_Revision.html')" />
      <seealso cref="PropertyFlags" />
      <seealso cref="PropertyObject.DeleteElements" />
      <seealso cref="PropertyObject.DeleteSubProperty" />
      <seealso cref="PropertyObject.Exists" />
      <seealso cref="PropertyObject.InsertSubproperty" />
      <seealso cref="PropertyOptions" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.GetSubProperties(System.String,System.Int32)">
      <summary>Returns references to all the subproperties of the property you specify in one atomic, thread-safe operation.</summary>
      <remarks><div class="DM_approved">Use this method to obtain references to all the subproperties of a PropertyObject in one thread while another thread might add, remove, or rename the subproperties. If you use the PropertyObject.GetNumSubproperties and PropertyObject.GetNthSubProperty methods while another thread adds or removes the subproperties, TestStand might return an unexpected error because the number of subproperties might have changed. The <c>PropertyObject.GetSubProperties</c> method avoids this issue by atomically obtaining all the references to all the subproperties in one call.</div></remarks>
      <param name="lookupString">Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <seealso cref="&quot;Lookup Strings&quot;../InfoTopics/API_lookupString.html" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.PropertyObject.Attributes">
      <summary>Returns a container for storing data associated with the <c>PropertyObject</c>.</summary>
      <remarks>Use container subproperties under the <c>Attributes</c> property to serve as attribute namespaces. National Instruments recommends that you create a uniquely named container or hierarchy of containers under which you store attribute variables, such as <c>CompanyName.AttributeCategory.Attribute</c>, to avoid name conflicts.
The name <c>NI</c> is reserved at the root level for National Instruments.
National Instruments recommends that you access this property only if the PropertyObject.HasAttributes property is <c>True</c>.
<para>Note: The attributes for a sequence file are located on the <c>SequenceFile.Data</c> object instead of on the <c>SequenceFile</c> object directly.</para></remarks>
      <seealso cref="PropertyObject" />
      <seealso cref="PropertyObject.DisplayAttributesDialog" />
      <seealso cref="PropertyObject.HasAttributes" />
      <seealso cref="PropertyObject.HasTypeAttributes" />
      <seealso cref="PropertyObject.TypeAttributes" />
      <seealso cref="SequenceFile" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.PropertyObject.HasAttributes">
      <summary>Returns <c>True</c> if the PropertyObject.Attributes property contains subproperties.</summary>
      <remarks>Using this property is more efficient than determining whether the <c>PropertyObject.Attributes</c> property contains subproperties. National Instruments recommends that you access the <c>PropertyObject.Attributes</c> property only if the <c>HasAttributes</c> property is <c>True</c>.</remarks>
      <seealso cref="PropertyObject.Attributes" />
      <seealso cref="PropertyObject.HasTypeAttributes" />
      <seealso cref="PropertyObject.TypeAttributes" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.DisplayAttributesDialog(System.String,System.Int32,NationalInstruments.TestStand.Interop.API.PropertyObjectFile)">
      <summary>Launches the Attributes dialog box, in which you can create and edit attributes of a PropertyObject.</summary>
      <returns>Returns <c>True</c> if you make modifications and click OK in the dialog box. Returns <c>False</c> if you click Cancel or make no modifications.</returns>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.</param>
      <param name="dlgOptions">Specifies any combination of the CommonDialogOptions constants.</param>
      <param name="file">Specifies the file to which the object belongs.</param>
      <seealso cref="&quot;Attributes dialog box&quot;javascript:RefLink('/InfoTopics/DB_Edit_Param_Attributes.htm')" />
      <seealso cref="CommonDialogOptions" />
      <seealso cref="PropertyObject.Attributes" />
      <seealso cref="PropertyObjectFile" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.CreateReportSection(System.Int32,System.Int32,System.String,System.String,System.String)">
      <summary>Generates the corresponding serialization for a PropertyObject based on the format specified and returns the serialized data as a ReportSection object.</summary>
      <remarks>Refer to the World Wide Web Consortium-compliant XML schema file, <c>PropertyObject.xsd</c>, located in the <c>&#60;TestStand&#62;\Components\Models\TestStandModels</c> directory, for more information about the XML serialization of this method.</remarks>
      <param name="GenerationOptions">Use this parameter to control the XML generation. You can use any combination of the flags in the XMLOptions constants.</param>
      <param name="InitialIndentation">Specifies the number of tab characters in front of each line of generated XML source.</param>
      <param name="DefaultName">Specifies a default name when you call this method on a nameless object.
Pass an empty string if you want to use the name of the PropertyObject on which this method was called. This applies only to the root PropertyObject and not subproperties.</param>
      <param name="FormatString">Use this parameter to control the format of numeric values in the resulting XML. When you pass an empty string, this method uses the following default TestStand format strings based on the numeric representation of the numeric property objects:
<para><para>&#160;&#160;&#160;&#160;* <c>&#37;.17g</c> for double-precision, 64-bit floating-point values</para><para>&#160;&#160;&#160;&#160;* <c>&#37;d</c> for signed 64-bit integer values</para><para>&#160;&#160;&#160;&#160;* <c>&#37;u</c> for unsigned 64-bit integer values</para></para>
<para>Note: TestStand ignores format strings of the <c>&#37;g</c> type when the representation is signed 64-bit integer or unsigned 64-bit integer.</para></param>
      <param name="Format">Specifies the format of the generated serialization. This method supports values of <c>XML</c>, <c>XML-OTF</c>, or an empty string, which is the default value. Values are not case-sensitive.
When you specify the <c>XML</c> value or an empty string, this method returns a <c>ReportSection</c> object that contains an XML representation of the <c>PropertyObject</c> object. Call the ReportSection.GetAllText method to retrieve the XML content, which might be spread across the <c>ReportSection</c> Header, Body, Footer, and ReportSubsections properties.
National Instruments recommends that you do not use the <c>XML-OTF</c> option unless you are modifying National Instruments code that depends on it or you are implementing a custom on-the-fly XML report generator.  Although the <c>ReportSection</c> objects the <c>XML-OTF</c> option returns contain equivalent data as the <c>ReportSection</c> objects the <c>XML</c> option returns, the <c>XML-OTF</c> option output differs from the standard <c>XML</c> in the following ways:
<para><para>&#160;&#160;&#160;&#160;* The <c>XML-OTF</c> output never contains any data in the <c>ReportSection.Body</c> property.</para><para>&#160;&#160;&#160;&#160;* Except as explained below, the <c>XML-OTF</c> output writes data to the <c>ReportSection.Header</c> property.</para><para>&#160;&#160;&#160;&#160;* The <c>XML-OTF</c> output inserts data for each <c>TS.SequenceCall</c> and <c>TS.PostAction</c> subproperty of the <c>PropertyObject</c> into its own <c>ReportSection</c> object that the <c>ReportSection.ReportSubsections</c> property contains. Each subsection includes the following data:@ul(@bullet(The <c>Header</c> property contains the first line of XML content.)@bullet(The <c>Footer</c> property contains all remaining XML content.)@bullet(Additional <c>TS.SequenceCall</c> and <c>TS.PostAction</c> properties within the subsection receive no special processing and are included in the <c>Footer</c> property just like any other TestStand property.))</para><para>&#160;&#160;&#160;&#160;* After the <c>XML-OTF</c> output processes a <c>TS.SequenceCall</c> or <c>TS.PostAction</c> property, the <c>XML-OTF</c> output inserts all remaining data of other types in the <c>Footer</c> property of the returned <c>ReportSection</c> object. The <c>XML-OTF</c> output inserts additional <c>TS.SequenceCall</c> and <c>TS.PostAction</c> properties in new subsections, as described above.</para></para>
Because the <c>XML-OTF</c> output handles the <c>TS.SequenceCall</c> and <c>TS.PostAction</c> properties in a special way, the order of subproperties in the XML content the <c>ReportSection.GetAllText</c> method returns might not be identical in the two cases.</param>
      <seealso cref="PropertyObject" />
      <seealso cref="Report.ReportSection" />
      <seealso cref="ReportSection" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
      <seealso cref="XMLOptions" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.GetPropertyObjectElements(System.String,System.Int32)">
      <summary><div class="DM_approved">Returns references to all the array elements of the property you specify in one atomic, thread-safe operation. The property you specify must be an array of containers or this method returns a type mismatch error.</div></summary>
      <remarks><div class="DM_approved">Use this method to obtain references to all the array elements of an array of containers in one thread while another thread might add, remove, or rename the elements. If you use the PropertyObject.GetNumElements and PropertyObject.GetPropertyObjectByOffset methods while another thread adds or removes the elements, TestStand might return an unexpected error because the number of elements might have changed. The <c>PropertyObject.GetPropertyObjectElements</c> method avoids this issue by atomically obtaining all the references to all the elements in one call.</div></remarks>
      <param name="lookupString">Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <seealso cref="&quot;Lookup Strings&quot;../InfoTopics/API_lookupString.html" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.GetValInteger64(System.String,System.Int32)">
      <summary>Returns the signed 64-bit integer value of the property the lookupString parameter specifies.
<para>Note: (Platform: (LabVIEW)) You cannot use this method in LabVIEW. Use the PropertyObject.GetValVariant method instead.</para></summary>
      <remarks>TestStand stores numeric values as double-precision, 64-bit floating-point values, signed 64-bit integer values, or unsigned 64-bit integer values.</remarks>
      <returns>Signed 64-bit integer value of the property.</returns>
      <param name="lookupString">Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <seealso cref="&quot;Lookup Strings&quot;../InfoTopics/API_lookupString.html" />
      <seealso cref="PropertyObject.GetValInteger64ByOffset" />
      <seealso cref="PropertyObject.GetValVariant" />
      <seealso cref="PropertyObject.SetValInteger64" />
      <seealso cref="PropertyOptions" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.GetValInteger64ByOffset(System.Int32,System.Int32)">
      <summary>Returns the signed 64-bit integer value of the array element the arrayOffset parameter specifies.
<para>Note: (Platform: (LabVIEW)) You cannot use this method in LabVIEW. Use the PropertyObject.GetValVariant method instead.</para></summary>
      <remarks>This method is valid only for array objects and is intended for use with arrays of 64-bit integers. Use the PropertyObject.GetValUnsignedInteger64ByOffset method with arrays of unsigned 64-bit integers. If the array is of a type other than 64-bit integers, you can use this method with the corresponding PropOption_Coerce constant.</remarks>
      <returns>Signed 64-bit integer value of the array element.</returns>
      <param name="arrayOffset">Specifies a zero-based number representing the offset of an array element in the one-dimensional physical storage of the array. The offset is in terms of the number of elements.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <seealso cref="&quot;Lookup Strings&quot;../InfoTopics/API_lookupString.html" />
      <seealso cref="PropertyObject.GetValInteger64" />
      <seealso cref="PropertyObject.GetValVariant" />
      <seealso cref="PropertyObject.GetValUnsignedInteger64ByOffset" />
      <seealso cref="PropertyObject.SetValInteger64ByOffset" />
      <seealso cref="PropertyOptions" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.SetValInteger64(System.String,System.Int32,System.Int64)">
      <summary>Sets the signed 64-bit integer value of the property the lookupString parameter specifies.
<para>Note: (Platform: (LabVIEW)) You cannot use this method in LabVIEW. Use the PropertyObject.SetValVariant method instead.</para></summary>
      <remarks>TestStand stores numeric values as double-precision, 64-bit floating-point values, signed 64-bit integer values, or unsigned 64-bit integer values.</remarks>
      <param name="lookupString">Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <param name="newValue">Specifies the new value for the property.</param>
      <seealso cref="&quot;Lookup Strings&quot;../InfoTopics/API_lookupString.html" />
      <seealso cref="PropertyObject.GetValInteger64" />
      <seealso cref="PropertyObject.SetValInteger64ByOffset" />
      <seealso cref="PropertyObject.SetValVariant" />
      <seealso cref="PropertyOptions" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.SetValInteger64ByOffset(System.Int32,System.Int32,System.Int64)">
      <summary>Sets the signed 64-bit integer value of the array element the arrayOffset parameter specifies.
<para>Note: (Platform: (LabVIEW)) You cannot use this method in LabVIEW. Use the PropertyObject.SetValVariant method instead.</para></summary>
      <remarks>This method is valid only for array objects and is intended for use with arrays of 64-bit integers. Use the PropertyObject.SetValUnsignedInteger64ByOffset method with arrays of unsigned 64-bit integers. If the array is of a type other than unsigned 64-bit integers, you can use this method with the corresponding PropOption_Coerce constant.</remarks>
      <param name="arrayOffset">Specifies a zero-based number representing the offset of an array element in the one-dimensional physical storage of the array. The offset is in terms of the number of elements.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <param name="newValue">Specifies the new value for the array element.</param>
      <seealso cref="PropertyObject.GetValInteger64ByOffset" />
      <seealso cref="PropertyObject.SetValInteger64" />
      <seealso cref="PropertyObject.SetValUnsignedInteger64ByOffset" />
      <seealso cref="PropertyObject.SetValVariant" />
      <seealso cref="PropertyOptions" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.GetValUnsignedInteger64(System.String,System.Int32)">
      <summary>Returns the unsigned 64-bit integer value of the property the lookupString parameter specifies.
<para>Note: (Platform: LabVIEW) You cannot use this method in LabVIEW. Use the PropertyObject.GetValVariant method instead.</para></summary>
      <remarks>TestStand stores numeric values as double-precision, 64-bit floating-point values, signed 64-bit integer values, or unsigned 64-bit integer values.</remarks>
      <returns>Unsigned 64-bit Integer value of the property.</returns>
      <param name="lookupString">Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <seealso cref="&quot;Lookup Strings&quot;../InfoTopics/API_lookupString.html" />
      <seealso cref="PropertyObject.GetValUnsignedInteger64ByOffset" />
      <seealso cref="PropertyObject.GetValVariant" />
      <seealso cref="PropertyObject.SetValUnsignedInteger64" />
      <seealso cref="PropertyOptions" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.GetValUnsignedInteger64ByOffset(System.Int32,System.Int32)">
      <summary>Returns the unsigned 64-bit integer value of the array element the arrayOffset parameter specifies.
<para>Note: (Platform: (LabVIEW)) You cannot use this method in LabVIEW. Use the PropertyObject.GetValVariant method instead.</para></summary>
      <remarks>This method is valid only for array objects and is intended for use with arrays of unsigned 64-bit integers. Use the PropertyObject.GetValInteger64ByOffset method with arrays of 64-bit integers. If the array is of a type other than unsigned 64-bit integers, you can use this method with the corresponding PropOption_Coerce constant.</remarks>
      <returns>Unsigned 64-bit integer value of the array element.</returns>
      <param name="arrayOffset">Specifies a zero-based number representing the offset of an array element in the one-dimensional physical storage of the array. The offset is in terms of the number of elements.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <seealso cref="&quot;Lookup Strings&quot;../InfoTopics/API_lookupString.html" />
      <seealso cref="PropertyObject.GetValInteger64ByOffset" />
      <seealso cref="PropertyObject.GetValUnsignedInteger64" />
      <seealso cref="PropertyObject.GetValVariant" />
      <seealso cref="PropertyObject.SetValUnsignedInteger64ByOffset" />
      <seealso cref="PropertyOptions" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.SetValUnsignedInteger64(System.String,System.Int32,System.UInt64)">
      <summary>Sets the unsigned 64-bit integer value of the property the lookupString parameter specifies.
<para>Note: (Platform: (LabVIEW)) You cannot use this method in LabVIEW. Use the PropertyObject.SetValVariant method instead.</para></summary>
      <remarks>TestStand stores numeric values as double-precision, 64-bit floating-point values, signed 64-bit integer values, or unsigned 64-bit integer values.</remarks>
      <param name="lookupString">Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <param name="newValue">Specifies the new value for the property.</param>
      <seealso cref="&quot;Lookup Strings&quot;../InfoTopics/API_lookupString.html" />
      <seealso cref="PropertyObject.GetValUnsignedInteger64" />
      <seealso cref="PropertyObject.SetValUnsignedInteger64ByOffset" />
      <seealso cref="PropertyObject.SetValVariant" />
      <seealso cref="PropertyOptions" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.SetValUnsignedInteger64ByOffset(System.Int32,System.Int32,System.UInt64)">
      <summary>Sets the unsigned 64-bit integer value of the array element the arrayOffset parameter specifies.
<para>Note: (Platform: (LabVIEW)) You cannot use this method in LabVIEW. Use the PropertyObject.SetValVariant method instead.</para></summary>
      <remarks>This method is valid only for array objects and is intended for use with arrays of unsigned 64-bit integers. Use the PropertyObject.SetValInteger64ByOffset method with arrays of 64-bit integers. If the array is of a type other than unsigned 64-bit integers, you can use this method with the corresponding PropOption_Coerce constant.</remarks>
      <param name="arrayOffset">Specifies a zero-based number representing the offset of an array element in the one-dimensional physical storage of the array. The offset is in terms of the number of elements.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <param name="newValue">Specifies the new value for the array element.</param>
      <seealso cref="PropertyObject.GetValUnsignedInteger64ByOffset" />
      <seealso cref="PropertyObject.SetValInteger64ByOffset" />
      <seealso cref="PropertyObject.SetValUnsignedInteger64" />
      <seealso cref="PropertyObject.SetValVariant" />
      <seealso cref="PropertyOptions" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.PropertyObject.TypeAttributes">
      <summary>This property is a container for storing data associated with the type definition.</summary>
      <remarks>Use container subproperties under the <c>TypeAttributes</c> property to serve as attribute namespaces. National Instruments recommends that you create a uniquely named container or hierarchy of containers under which you store attribute variables, such as <c>CompanyName.AttributeCategory.Attribute</c>, to avoid name conflicts.
The name <c>NI</c> is reserved at the root level for National Instruments.
National Instruments recommends that you access this property only if the PropertyObject.HasTypeAttributes property is <c>True</c>.
If the object is not a type definition, the property reports an error.</remarks>
      <seealso cref="PropertyObject.Attributes" />
      <seealso cref="PropertyObject.HasAttributes" />
      <seealso cref="PropertyObject.HasTypeAttributes" />
      <seealso cref="PropertyObject.TypeAttributes" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.PropertyObject.HasTypeAttributes">
      <summary>Returns <c>True</c> if this object is a type definition and the PropertyObject.TypeAttributes property contains subproperties.</summary>
      <remarks>Using this property is more efficient than determining whether the PropertyObject.TypeAttributes property contains subproperties. National Instruments recommends that you access the <c>PropertyObject.TypeAttributes</c> property only if the <c>PropertyObject.HasTypeAttributes</c> property is <c>True</c>.</remarks>
      <seealso cref="PropertyObject.Attributes" />
      <seealso cref="PropertyObject.HasAttributes" />
      <seealso cref="PropertyObject.TypeAttributes" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.InsertElements(System.Int32,System.Int32,System.Int32)">
      <summary>Inserts one or more elements into an array object.</summary>
      <remarks>This method is valid only for one-dimensional array objects. Use the PropertyObjectType.ArrayDimensions property to set the size of multi-dimensional array objects.</remarks>
      <param name="arrayOffset">Specifies the array offset of the first element to insert.</param>
      <param name="numElements">Specifies the number of elements to insert.</param>
      <param name="options">Pass <c>0</c> to specify the default behavior or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <seealso cref="PropertyObject.GetNumElements" />
      <seealso cref="PropertyObject.Type" />
      <seealso cref="PropertyObjectType.ArrayDimensions" />
      <seealso cref="PropertyOptions" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.GetTypeDefinitionProtection">
      <summary>Returns the ProtectedObjectOption_None or ProtectedObjectOption_NotEditable protection level applied to a type definition. This method does not support other ProtectedObjectOptions values. The TestStand Sequence Editor enforces the <c>ProtectedObjectOption_NotEditable</c> option.</summary>
      <remarks>You can call this method on any property of the type definition, not just the root object of the type.
<para>Note: TestStand supports password-protecting type definitions to deter unauthorized users from editing the types in the sequence editor. However, any TestStand user can continue to programmatically edit a locked type by using the TestStand PropertyObject API. National Instruments does not recommend password-protecting types as the only way of protecting intellectual property.</para></remarks>
      <seealso cref="Engine.DisplayPasswordProtectTypeDefinitionsDialog" />
      <seealso cref="Engine.DisplayUnlockTypeDefinitionsDialog" />
      <seealso cref="&quot;Password Protect Type Definitions dialog box&quot;javascript:RefLink('/InfoTopics/DB_Pass_Protect_Type_Defs.htm')" />
      <seealso cref="PropertyObject.ClearTypeDefinitionPasswordHistory" />
      <seealso cref="PropertyObject.LockTypeDefinition" />
      <seealso cref="PropertyObject.SetTypeDefinitionProtection " />
      <seealso cref="PropertyObject.TypeDefinitionLocked" />
      <seealso cref="PropertyObject.UnlockTypeDefinition" />
      <seealso cref="ProtectedObjectOptions" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.SetTypeDefinitionProtection(System.Int32,System.Object)">
      <summary>Sets the protection level and, optionally, the password of a type definition.</summary>
      <remarks>You can call this method on any property of the type definition, not just the root object of the type.
<para>Note: TestStand supports password-protecting type definitions to deter unauthorized users from editing the types in the sequence editor. However, any TestStand user can continue to programmatically edit a locked type by using the TestStand PropertyObject API. National Instruments does not recommend password-protecting types as the only way of protecting intellectual property.</para></remarks>
      <param name="newValue">Specifies one of the supported ProtectedObjectOptions. For type locking, this method supports only <c>ProtectedObjectOption_None</c> and <c>ProtectedObjectOption_NotEditable</c>.</param>
      <param name="passwordString">Specifies the password you require to unlock the type. This password can be empty only if the value for  the newValue parameter is <c>ProtectedObjectOption_None</c>. TestStand uses this password and the password history of a type during type conflict resolution to determine whether a newer version of the type can replace an older version without requiring the password for the older version.</param>
      <seealso cref="Engine.DisplayPasswordProtectTypeDefinitionsDialog" />
      <seealso cref="Engine.DisplayUnlockTypeDefinitionsDialog" />
      <seealso cref="&quot;Password Protect Type Definitions dialog box&quot;javascript:RefLink('/InfoTopics/DB_Pass_Protect_Type_Defs.htm')" />
      <seealso cref="PropertyObject.ClearTypeDefinitionPasswordHistory" />
      <seealso cref="PropertyObject.GetTypeDefinitionProtection" />
      <seealso cref="PropertyObject.LockTypeDefinition" />
      <seealso cref="PropertyObject.TypeDefinitionLocked" />
      <seealso cref="PropertyObject.UnlockTypeDefinition" />
      <seealso cref="ProtectedObjectOptions" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.PropertyObject.TypeDefinitionLocked">
      <summary>Returns <c>True</c> if the type definition protection option is set to something other than ProtectedObjectOption_None and the locked state of the type is currently set to locked. Returns <c>False</c> for all other cases.</summary>
      <remarks>You can call this property on any property of the type definition, not just the root object of the type.
<para>Note: TestStand supports password-protecting type definitions to deter unauthorized users from editing the types in the sequence editor. However, any TestStand user can continue to programmatically edit a locked type by using the TestStand PropertyObject API. National Instruments does not recommend password-protecting types as the only way of protecting intellectual property.</para></remarks>
      <seealso cref="Engine.DisplayPasswordProtectTypeDefinitionsDialog" />
      <seealso cref="Engine.DisplayUnlockTypeDefinitionsDialog" />
      <seealso cref="&quot;Password Protect Type Definitions dialog box&quot;javascript:RefLink('/InfoTopics/DB_Pass_Protect_Type_Defs.htm')" />
      <seealso cref="PropertyObject.ClearTypeDefinitionPasswordHistory" />
      <seealso cref="PropertyObject.GetTypeDefinitionProtection" />
      <seealso cref="PropertyObject.LockTypeDefinition" />
      <seealso cref="PropertyObject.SetTypeDefinitionProtection" />
      <seealso cref="PropertyObject.UnlockTypeDefinition" />
      <seealso cref="ProtectedObjectOptions" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.LockTypeDefinition">
      <summary>Changes the in-memory state of a password-protected type definition to locked. This method returns an error if you call it on a type that is not password-protected.</summary>
      <remarks>You can call this method on any property of the type definition, not just the root object of the type.
<para>Note: TestStand supports password-protecting type definitions to deter unauthorized users from editing the types in the sequence editor. However, any TestStand user can continue to programmatically edit a locked type by using the TestStand PropertyObject API. National Instruments does not recommend password-protecting types as the only way of protecting intellectual property.</para></remarks>
      <seealso cref="Engine.DisplayPasswordProtectTypeDefinitionsDialog" />
      <seealso cref="Engine.DisplayUnlockTypeDefinitionsDialog" />
      <seealso cref="&quot;Password Protect Type Definitions dialog box&quot;javascript:RefLink('/InfoTopics/DB_Pass_Protect_Type_Defs.htm')" />
      <seealso cref="PropertyObject.ClearTypeDefinitionPasswordHistory" />
      <seealso cref="PropertyObject.GetTypeDefinitionProtection" />
      <seealso cref="PropertyObject.SetTypeDefinitionProtection" />
      <seealso cref="PropertyObject.TypeDefinitionLocked" />
      <seealso cref="PropertyObject.UnlockTypeDefinition" />
      <seealso cref="ProtectedObjectOptions" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.UnlockTypeDefinition(System.String)">
      <summary>Changes the in-memory state of a password-protected type definition to unlocked. The password you pass for the passwordString parameter must match the password set for the type definition or this method returns an error, even if the type is already in an unlocked state. This method also returns an error if you call it on a type that is not password-protected.</summary>
      <remarks>You can call this method on any property of the type definition, not just the root object of the type.
<para>Note: TestStand supports password-protecting type definitions to deter unauthorized users from editing the types in the sequence editor. However, any TestStand user can continue to programmatically edit a locked type by using the TestStand PropertyObject API. National Instruments does not recommend password-protecting types as the only way of protecting intellectual property.</para></remarks>
      <param name="passwordString">Specifies the password required to unlock the type.</param>
      <seealso cref="Engine.DisplayPasswordProtectTypeDefinitionsDialog" />
      <seealso cref="Engine.DisplayUnlockTypeDefinitionsDialog" />
      <seealso cref="&quot;Password Protect Type Definitions dialog box&quot;javascript:RefLink('/InfoTopics/DB_Pass_Protect_Type_Defs.htm')" />
      <seealso cref="PropertyObject.ClearTypeDefinitionPasswordHistory" />
      <seealso cref="PropertyObject.GetTypeDefinitionProtection" />
      <seealso cref="PropertyObject.LockTypeDefinition" />
      <seealso cref="PropertyObject.SetTypeDefinitionProtection" />
      <seealso cref="PropertyObject.TypeDefinitionLocked" />
      <seealso cref="ProtectedObjectOptions" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.ClearTypeDefinitionPasswordHistory">
      <summary>Clears the password history of a type definition.</summary>
      <remarks>You can call this method on any property of the type definition, not just the root object of the type.
<para>Note: TestStand supports password-protecting type definitions to deter unauthorized users from editing the types in the sequence editor. However, any TestStand user can continue to programmatically edit a locked type by using the TestStand PropertyObject API. National Instruments does not recommend password-protecting types as the only way of protecting intellectual property.</para></remarks>
      <seealso cref="Engine.DisplayPasswordProtectTypeDefinitionsDialog" />
      <seealso cref="Engine.DisplayUnlockTypeDefinitionsDialog" />
      <seealso cref="&quot;Password Protect Type Definitions dialog box&quot;javascript:RefLink('/InfoTopics/DB_Pass_Protect_Type_Defs.htm')" />
      <seealso cref="PropertyObject.GetTypeDefinitionProtection" />
      <seealso cref="PropertyObject.LockTypeDefinition" />
      <seealso cref="PropertyObject.SetTypeDefinitionProtection" />
      <seealso cref="PropertyObject.TypeDefinitionLocked" />
      <seealso cref="PropertyObject.UnlockTypeDefinition" />
      <seealso cref="ProtectedObjectOptions" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.DisplayEditNumericFormatDialog(System.String,System.Boolean@,System.Int32)">
      <summary>Launches a dialog box in which you can edit a numeric format string used to display numbers.</summary>
      <returns>Returns <c>True</c> if you click OK in the dialog box. Returns <c>False</c> if you click Cancel.</returns>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.</param>
      <param name="validFormat">Returns <c>True</c> if the returned format is valid, otherwise returns <c>False</c>.
</param>
      <param name="dlgOptions">Specifies any combination of the EditNumericFormatOptions constants.</param>
      <seealso cref="EditNumericFormatOptions" />
      <seealso cref="PropertyObject.NumericFormat" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.UpdateEnumerators(NationalInstruments.TestStand.Interop.API.PropertyObject)">
      <summary>Replaces the set of enumerators for an enumeration data type.</summary>
      <remarks>Call this method on the root type definition of an enumeration data type to specify the set of enumerators for the type. Calling this method on a PropertyObject that is not the root type definition of an enumeration causes a runtime error. Changing the set of enumerators updates all currently loaded instances of the data type.</remarks>
      <returns>True if a new enumerator was added, the numeric value of an existing enumerator was changed, the value of IsStrict is changed, or the value of IsFlags is changed. False otherwise.</returns>
      <param name="newValues">An array of containers where each container has the following properties:
<c>UpdateEnumeratorsElementProperty_Name (&quot;EnumeratorName&quot;) - Enumerator Name (string)</c>
<c>UpdateEnumeratorsElementProperty_EnumeratorValue (&quot;EnumeratorValue&quot;) - Enumerator Value (number)</c>
<c>UpdateEnumeratorsElementProperty_OldName (&quot;OldEnumeratorName&quot;) [optional] - Prior Name, if renaming (string)</c>
You can specify a new value for the data type's <c>IsStrict</c> setting by attaching a Boolean attribute to the array with a property path of <c>&quot;TestStand.Enum.IsStrict&quot;</c>.
You can specify a new value for the data type's <c>IsFlags</c> setting by attaching a Boolean attribute to the array with a property path of <c>&quot;TestStand.Enum.IsFlags&quot;</c>.
</param>
      <seealso cref="PropertyObject.EnumIsValid" />
      <seealso cref="PropertyObject.Enumerators" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.PropertyObject.Enumerators">
      <summary>Returns the enumerators that a enumeration data type defines.</summary>
      <remarks>Use this property on an enumeration instance or an enumeration data type to obtain the set of enumerators for the type. </remarks>
      <returns>Returns an array of enumeration instances. Each element indicates the name and value of an enumerator that the data type defines. The array also has the following Boolean attributes:
<c>TestStand.Enum.IsStrict</c>: Indicates whether the enumeration data type is strict.
<c>TestStand.Enum.IsFlags</c>: Indicates whether the enumerators the data type defines are flags.</returns>
      <seealso cref="PropertyObject.EnumIsValid" />
      <seealso cref="PropertyObject.UpdateEnumerators" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.GetValueDisplayName(System.String,System.Int32)">
      <summary>Returns the display value of the property that the lookupString parameter specifies.</summary>
      <returns>Returns the display name for the value of the property. If there is no display name, a string representation of the actual value is returned. </returns>
      <param name="lookupString">Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.</param>
      <param name="options">Reserved for future use. Pass 0.</param>
      <seealso cref="&quot;Lookup Strings&quot;../InfoTopics/API_lookupString.html" />
      <seealso cref="PropertyObject.GetFormattedValue" />
      <seealso cref="PropertyObject.Name" />
      <seealso cref="PropertyObject.GetDisplayNames" />
      <seealso cref="&quot;Thread Safety of the PropertyObject API and TestStand Variables&quot;InfoTopics/ThreadSafetyAPI.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObject.EnumIsValid">
      <summary>Indicates whether the current value of an enumeration instance is consistent with its data type.</summary>
      <returns>Returns <c>True</c> if the value of the enumeration is consistent with its data type.</returns>
      <seealso cref="PropertyObject.UpdateEnumerators" />
      <seealso cref="PropertyObject.Enumerators" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.SequenceFile">
      <summary>Objects of the SequenceFile class represent a sequence file that can contain sequences. You can obtain a reference to a SequenceFile object by using the Engine.GetSequenceFileEx or Engine.NewSequenceFile methods. Use the reference to examine or modify sequence file settings and to examine or modify the list of sequences in the sequence file.</summary>
      <seealso cref="Engine.GetSequenceFileEx" />
      <seealso cref="Engine.NewSequenceFile" />
      <seealso cref="PropertyObjectFile.Comment" />
      <seealso cref="PropertyObjectFile.Version" />
      <seealso cref="Sequence" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.SequenceFile.GetSequence(System.Int32)">
      <summary>Obtains a reference to a Sequence object that you specify by an index.</summary>
      <param name="index">Specifies a zero-based index to indicate the sequence.</param>
      <seealso cref="Sequence" />
      <seealso cref="SequenceFile.NumSequences" />
      <seealso cref="SequenceFile.RemoveSequence" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.SequenceFile.GetSequenceByName(System.String)">
      <summary>Returns a reference to a Sequence object you specify by name. </summary>
      <remarks>Sequence names are case-insensitive.</remarks>
      <param name="sequenceNameParam">Specifies the name of the Sequence object to which you want a reference. If the sequence name does not exist, the method reports an error.</param>
      <seealso cref="Sequence" />
      <seealso cref="SequenceFile.GetSequenceIndex" />
      <seealso cref="SequenceFile.SequenceNameExists" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.SequenceFile.SequenceNameExists(System.String)">
      <summary>Returns <c>True</c> if a sequence with the name you specify already exists in the sequence file.</summary>
      <param name="sequenceNameParam">Specifies a sequence name to search for. Sequence names are case-insensitive.</param>
      <seealso cref="SequenceFile.GetSequenceByName" />
      <seealso cref="SequenceFile.GetSequenceIndex" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.SequenceFile.InsertSequence(NationalInstruments.TestStand.Interop.API.Sequence)">
      <summary><para>Note: This method is obsolete. Use the SequenceFile.InsertSequenceEx method instead.</para></summary>
      <remarks>Adds a sequence to the end of the sequences list in the sequence file.
<para>Note: The name of a sequence must be unique if it is contained within a sequence file. Inserting two or more sequences with the same name into a sequence file might result in unexpected behavior.</para></remarks>
      <param name="sequenceToInsert">Specifies the sequence to insert.</param>
      <seealso cref="Engine.NewSequence" />
      <seealso cref="Sequence" />
      <seealso cref="SequenceFile.InsertSequenceEx" />
      <seealso cref="SequenceFile.RemoveSequence" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.SequenceFile.RemoveSequence(System.Int32)">
      <summary>Removes a sequence from a sequence file and returns a reference to it.</summary>
      <param name="index">Specifies a zero-based index to indicate the sequence to remove.</param>
      <seealso cref="Sequence" />
      <seealso cref="SequenceFile.DeleteSequence" />
      <seealso cref="SequenceFile.InsertSequenceEx" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.SequenceFile.DeleteSequence(System.Int32)">
      <summary>Deletes the specified sequence from the sequence file.</summary>
      <param name="index">Specifies a zero-based index to indicate the sequence to delete.</param>
      <seealso cref="SequenceFile.InsertSequenceEx" />
      <seealso cref="SequenceFile.NumSequences" />
      <seealso cref="SequenceFile.RemoveSequence" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.SequenceFile.Save(System.String)">
      <summary>Saves the sequence file to disk.</summary>
      <remarks>Calling this method with an empty string argument has the same effect as calling the PropertyObjectFile.WriteFile method.
Ensure the <c>pathString</c> provided is an absolute path and not relative.</remarks>
      <param name="pathString">Specifies the absolute pathname with which to save the file. Pass an empty string to save the file using the same pathname with which TestStand last loaded or saved it.</param>
      <seealso cref="SequenceFile.Path" />
      <seealso cref="PropertyObjectFile.WriteFile" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.SequenceFile.GetModelSequenceFile(System.String@)">
      <summary>Returns a reference to the process model sequence file that TestStand associates with the sequence file on which you call the method. Release this reference when you are finished using it.</summary>
      <remarks>Returns a <c>NULL</c> reference if the sequence file on which you call the method does not have a process model associated with it. The modelDescriptionString parameter contains a descriptive message even if this method returns <c>NULL</c>.</remarks>
      <param name="modelDescriptionString">Returns a string that describes the process model file.</param>
      <seealso cref="Engine.GetStationModelSequenceFile" />
      <seealso cref="SequenceFile" />
      <seealso cref="SequenceFile.GetModelAbsolutePath" />
      <seealso cref="SequenceFile.HasModel" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.SequenceFile.CreateCallbackOverrideSequence(System.String,System.Boolean)">
      <summary>Use this method to create a callback sequence in the sequence file. The callback sequence you create overrides the Model, Engine, or Front-End callback of the same name as the callback you create.</summary>
      <returns>Specifies a reference to the callback the method creates. Release this reference when you are finished with it.</returns>
      <param name="callbackName">The name of the callback sequence to override. Specify the sequence name of a Model, Engine, or Front-End callback. Refer to DefaultModelCallbacks and SeqFileCallbacks constants for possible values for this parameter.</param>
      <param name="allowCopyDefaultSteps">Pass <c>True</c> to copy the steps of the sequence you are overriding into the new sequence.</param>
      <seealso cref="DefaultModelCallbacks" />
      <seealso cref="SeqFileCallbacks" />
      <seealso cref="Sequence" />
      <seealso cref="SequenceFile.GetModelCallbackNames" />
      <seealso cref="SequenceFile.GetReservedCallbackNames" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.SequenceFile.NewEditContext">
      <summary>Returns a sequence context that approximates the sequence context TestStand creates when you run a sequence in the sequence file.</summary>
      <remarks>You can pass the object this method returns as a parameter to the Engine.DisplayBrowseExprDialogEx and Engine.DisplayBrowsePropertyObjectDialog methods.</remarks>
      <returns>A reference to a SequenceContext object. Release this reference when you are finished using it.</returns>
      <seealso cref="Engine.DisplayBrowseExprDialogEx" />
      <seealso cref="Engine.DisplayBrowsePropertyObjectDialog" />
      <seealso cref="Engine.NewEditContext" />
      <seealso cref="SequenceContext" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.SequenceFile.AsPropertyObject">
      <summary>Returns the underlying PropertyObject that represents the SequenceFile object. Use the PropertyObject to modify, add, or remove custom properties of the object.</summary>
      <seealso cref="PropertyObject" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SequenceFile.NumSequences">
      <summary>Returns the number of sequences contained in the sequence file.</summary>
      <seealso cref="SequenceFile.GetSequence" />
      <seealso cref="SequenceFile.GetSequenceByName" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SequenceFile.FileGlobalsDefaultValues">
      <summary>Returns the PropertyObject that contains the default values of the global variables for the sequence file.</summary>
      <seealso cref="PropertyObject" />
      <seealso cref="SequenceContext.FileGlobals" />
      <seealso cref="SequenceFile.FileGlobalsScope" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SequenceFile.Path">
      <summary>Returns the pathname TestStand used when the sequence file was last saved or loaded.</summary>
      <remarks>This property returns the same value as the PropertyObjectFile.Path property.</remarks>
      <seealso cref="SequenceFile.ModelPath" />
      <seealso cref="PropertyObjectFile.Path" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SequenceFile.ModuleLoadOption">
      <summary>This property instructs TestStand when to load the code modules the steps in the sequence file call. You can use this property to override the load option of all steps in the sequence file, or you can defer to the load option contained in each individual step.</summary>
      <seealso cref="SequenceFile.ModuleUnloadOption" />
      <seealso cref="Step.ModuleLoadOption" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SequenceFile.ModuleUnloadOption">
      <summary>This property instructs TestStand when to unload the code modules the steps in the sequence file call. You can use this property to override the unload option of all steps in the sequence file, or you can defer to the unload option contained in each individual step.</summary>
      <seealso cref="SequenceFile.ModuleLoadOption" />
      <seealso cref="Step.ModuleUnloadOption" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SequenceFile.HasModel">
      <summary>Returns <c>True</c> if TestStand associates a process model sequence file with the sequence file on which you call the method.</summary>
      <seealso cref="SequenceFile.GetModelSequenceFile" />
      <seealso cref="SequenceFile.ModelOption" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SequenceFile.UnloadCallbackEnabled">
      <summary>Specifies if TestStand calls the SequenceFileUnload callback sequence when unloading the sequence file. Set this property to <c>False</c> to prevent TestStand from calling the SequenceFileUnload callback for the sequence file.</summary>
      <seealso cref="Engine.ReleaseSequenceFileEx" />
      <seealso cref="ReleaseSeqFileOptions" />
      <seealso cref="SequenceFile.CanUnload" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SequenceFile.IsExecuting">
      <summary>Returns <c>True</c> if the sequence file contains one or more currently active sequences in an execution.</summary>
      <remarks>If this property returns <c>True</c>, do not edit the sequence file.</remarks>
      <seealso cref="SequenceFile.CanUnload" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.SequenceFile.IncChangeCount">
      <summary>Increments the file change count.</summary>
      <remarks>Increment the change count when making changes to the file to indicate to the sequence editor or user interface that the file was modified.
Calling this method has the same effect as calling the PropertyObjectFile.IncChangeCount method.</remarks>
      <seealso cref="PropertyObjectFile.ChangeCount" />
      <seealso cref="PropertyObjectFile.IncChangeCount" />
      <seealso cref="PropertyObjectFile.IsModified" />
      <seealso cref="PropertyObjectFile.SaveFileIfModified" />
      <seealso cref="SequenceFile.ChangeCount" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SequenceFile.ChangeCount">
      <summary>Returns the number of modifications that have been made to the sequence file since it was loaded into memory.</summary>
      <remarks>The sequence editor and user interfaces use this count to determine when to refresh sequence displays and when to indicate to the user that a sequence file has been modified.
This property returns the same value as the PropertyObjectFile.ChangeCount property.</remarks>
      <seealso cref="PropertyObjectFile.ChangeCount" />
      <seealso cref="PropertyObjectFile.IncChangeCount" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.SequenceFile.GetSequenceIndex(System.String)">
      <summary>Returns the index of the sequence in the sequence file that has the name you specify.</summary>
      <returns>Returns the index of the sequence for which you specify a name. Returns <c>-1</c> if no such sequence exists.</returns>
      <param name="sequenceNameParam">Specifies the name of a sequence in the sequence file.</param>
      <seealso cref="SequenceFile.GetSequenceByName" />
      <seealso cref="SequenceFile.SequenceNameExists" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.SequenceFile.LoadModules(System.Int32,System.Object)">
      <summary>Loads the code modules for all steps in all sequences of the sequence file.</summary>
      <returns>Returns <c>True</c> on success or <c>False</c> if a module fails to load.</returns>
      <param name="loadOptions">Specifies one or more LoadModuleOptions using the bitwise-OR operator to modify the behavior of this method.</param>
      <param name="sequenceContextParam">If you are passing the LoadModule_EvaluateExpressions flag to the loadOptions parameter, pass a SequenceContext object for this parameter to use when evaluating the expressions. Also, if you are calling this method from a step in an execution, pass the sequence context of the execution.</param>
      <seealso cref="LoadModuleOptions" />
      <seealso cref="&quot;Omitting Optional Parameters&quot;javascript:APILink('/InfoTopics/Optional_Parameters.htm')" />
      <seealso cref="SequenceContext" />
      <seealso cref="SequenceFile.UnloadModules" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SequenceFile.SequenceFileType">
      <summary>Specifies the type of sequence file.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SequenceFile.CanUnload">
      <summary>Returns a value that indicates whether the sequence file can be removed from the internal cache of the engine.</summary>
      <remarks>The engine cannot unload a sequence file from the internal cache if multiple load references to it exist or if it is currently executing. Use this method to determine whether calling the Engine.ReleaseSequenceFileEx method would remove the file from the internal cache and return <c>True</c>. 
<para>Note: Even if this function returns <c>True</c>, the <c>Engine.ReleaseSequenceFileEx</c> method might return <c>False</c> if another thread added a load reference to this file between the calls to this method and the <c>Engine.ReleaseSequenceFileEx</c> method.</para></remarks>
      <seealso cref="Engine.ReleaseSequenceFileEx" />
      <seealso cref="SequenceFile.IsExecuting" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.SequenceFile.UnloadModules">
      <summary>Unloads the code modules from all steps in all sequences of the sequence file.</summary>
      <returns>Returns <c>True</c> if all modules were successfully unloaded. If any sequences in the file are executing when you call this method, the method returns <c>False</c>.</returns>
      <seealso cref="SequenceFile.IsExecuting" />
      <seealso cref="SequenceFile.LoadModules" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SequenceFile.BatchSyncOption">
      <summary>Specifies the batch synchronization operation corresponding to all the steps contained in the sequence file when the synchronization setting is <c>BatchSyncOption_UseSeqFileSetting</c>.</summary>
      <seealso cref="BatchSynchronizationOptions" />
      <seealso cref="Step.BatchSyncOption" />
      <seealso cref="StepType.BatchSyncOption" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.SequenceFile.AsPropertyObjectFile">
      <summary>Returns the underlying PropertyObjectFile that represents the SequenceFile object. </summary>
      <seealso cref="PropertyObjectFile" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.SequenceFile.GetModelAbsolutePath(System.Boolean@)">
      <summary>Returns the absolute pathname of the process model sequence file associated with this sequence file.</summary>
      <remarks>Returns an empty string if the file has no model or if the model file could not be found.</remarks>
      <param name="modelExists">Returns <c>True</c> if the model file was found.</param>
      <seealso cref="SequenceFile.GetModelSequenceFile" />
      <seealso cref="SequenceFile.HasModel" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.SequenceFile.InsertSequenceEx(System.Int32,NationalInstruments.TestStand.Interop.API.Sequence)">
      <summary>Inserts a sequence at the specified index.</summary>
      <remarks>Do not insert a sequence into a sequence file when the sequence resides in another sequence file. The sequence reference that you pass must be the only reference to the sequence. You can obtain the sole reference to a sequence by calling the Engine.NewSequence or SequenceFile.RemoveSequence methods.
<para>Note: The name of a sequence must be unique if it is contained within a sequence file. Inserting two or more sequences with the same name into a sequence file might cause unexpected behavior.</para></remarks>
      <param name="index">Specifies the zero-based index at which to insert the sequence.</param>
      <param name="sequenceToInsert">Specifies the sequence to insert.</param>
      <seealso cref="Engine.NewSequence" />
      <seealso cref="Sequence" />
      <seealso cref="SequenceFile.DeleteSequence" />
      <seealso cref="SequenceFile.NumSequences" />
      <seealso cref="SequenceFile.RemoveSequence" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SequenceFile.Id">
      <summary>Returns a unique ID number for the sequence file.
<para>Note: The ID number is never zero.</para></summary>
      <remarks>The ID number is unique with respect to all sequence files that you open before you shut down the TestStand Engine.
Use this ID number to compare two SequenceFile object references to determine whether they refer to the same underlying sequence file.</remarks>
      <seealso cref="SequenceFile.Path" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SequenceFile.ModelOption">
      <summary>Specifies the process model file to use for the sequence file.</summary>
      <remarks>This setting is valid only when you enable the Allow Other Model Settings option in the Station Options dialog box. Refer to StationOptions.AllowOtherModels for more information about allowing sequence files to specify a process model file other than the current station model file.</remarks>
      <seealso cref="&quot;Model tab&quot;javascript:RefLink('/InfoTopics/DB_Station_Opt_Mod_Tab.htm')" />
      <seealso cref="SequenceFile.HasModel" />
      <seealso cref="SequenceFile.ModelPath" />
      <seealso cref="&quot;Station Options dialog box&quot;javascript:RefLink('/InfoTopics/DB_Station_Opt.htm')" />
      <seealso cref="StationOptions.AllowOtherModels" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SequenceFile.ModelPath">
      <summary>Specifies the file path of a particular model file.</summary>
      <remarks>Specifies the file path to a model file when the value of the SequenceFile.ModelOption property is <c>ModelOption_RequireSpecificModel</c>.</remarks>
      <seealso cref="SequenceFile.ModelOption" />
      <seealso cref="SequenceFile.Path" />
      <seealso cref="StationOptions.AllowOtherModels" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.SequenceFile.GetReservedCallbackNames">
      <summary>Obtains the list of reserved Engine callback names.</summary>
      <returns>Array of reserved callback names the function returns.</returns>
      <seealso cref="SequenceFile.CreateCallbackOverrideSequence" />
      <seealso cref="SequenceFile.GetModelCallbackNames" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.SequenceFile.GetModelCallbackNames">
      <summary>Obtains the list of Model callback names based on the model assigned to the sequence file.</summary>
      <returns>Array of Model callback names the function returns.</returns>
      <seealso cref="&quot;Customizing Process Models and Callbacks&quot;javascript:TSFundLink('/InfoTopics/Customize_Process_Models_Callbacks.html')" />
      <seealso cref="SequenceFile.GetReservedCallbackNames" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.SequenceFile.AddLoadReference">
      <summary>Adds a load reference that keeps the file in the internal cache of the engine.</summary>
      <remarks>Call this method to add an additional load reference to  the sequence file. TestStand uses the load reference count to determine when to unload the sequence file from the internal cache of the engine. In addition to this method, the Engine.GetSequenceFileEx and Engine.NewSequenceFile methods also add a load reference to the sequence file. The Engine.ReleaseSequenceFileEx method removes a load reference.
You must call the <c>Engine.ReleaseSequenceFileEx</c> method for each load reference you add to the sequence file. When you release the last load reference, TestStand unloads the file from the internal cache of the engine, TestStand executes the SequenceFileUnload callback sequence, if applicable.
This method generates an error if the sequence file does not have any load references initially.</remarks>
      <seealso cref="Engine.GetSequenceFileEx" />
      <seealso cref="Engine.NewSequenceFile" />
      <seealso cref="Engine.ReleaseSequenceFileEx" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SequenceFile.FileGlobalsScope">
      <summary>Specifies the lifetime of the sequence file global variables and whether multiple executions share the sequence file global variable values.</summary>
      <remarks>If a sequence file unloads from memory and an execution later reloads the sequence file, the execution creates a new run-time copy of the file global variables and initializes the variables to the default values.</remarks>
      <seealso cref="SequenceContext.FileGlobals" />
      <seealso cref="SequenceFile.FileGlobalsDefaultValues" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SequenceFile.ModelPluginDescription">
      <summary>Returns the FileGlobals.ModelPluginComponentDescription variable, if it exists. Otherwise, returns null. This property is accessible even if the file is locked.</summary>
      <seealso cref="SequenceContext.FileGlobals" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.Sequence">
      <summary>Objects of the Sequence class represent a sequence that can contain steps. Use the Sequence class to examine or modify sequence settings and the list of steps in the sequence. Sequences have three groups of steps. The StepGroups enumeration contains a value for each of the step groups. SequenceTypes constants define several types of sequences. You can obtain a reference to the Sequence objects a sequence file contains by calling the SequenceFile.GetSequence method. You can create new sequences by calling the Engine.NewSequence or SequenceFile.CreateCallbackOverrideSequence methods.
<para>Note: Built-in properties of sequences are flagged to be shared at run time. Any changes to built-in properties within the run-time copy of the sequence also edit the original Sequence object in the sequence file.</para></summary>
      <seealso cref="Engine.NewSequence" />
      <seealso cref="Step" />
      <seealso cref="SequenceFile.CreateCallbackOverrideSequence" />
      <seealso cref="SequenceFile.GetSequence" />
      <seealso cref="SequenceTypes" />
      <seealso cref="StepGroups" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Sequence.GetNumSteps(NationalInstruments.TestStand.Interop.API.StepGroups)">
      <summary>Returns the number of steps in the specified step group of the sequence.</summary>
      <param name="stepGroupParam">Specifies a particular step group.</param>
      <seealso cref="Sequence.GetStep" />
      <seealso cref="Sequence.GetStepByName" />
      <seealso cref="Sequence.GetStepByUniqueId" />
      <seealso cref="StepGroups" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Sequence.GetStep(System.Int32,NationalInstruments.TestStand.Interop.API.StepGroups)">
      <summary>Returns a reference to the Step object that you specify by an index.</summary>
      <param name="index">Specifies the zero-based step index that indicates the position of the step in the step group.</param>
      <param name="stepGroupParam">Specifies a particular step group.</param>
      <seealso cref="Sequence.GetStepByName" />
      <seealso cref="Sequence.GetStepByUniqueId" />
      <seealso cref="Step" />
      <seealso cref="StepGroups" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Sequence.GetStepByName(System.String,NationalInstruments.TestStand.Interop.API.StepGroups)">
      <summary>Returns a reference to the Step object you specify by name.</summary>
      <remarks>Returns an error if no Step object exists with the name you specify.</remarks>
      <param name="nameOfStep">Specifies the name of the step for which you want a reference. When more than one step using the same name exists in the step group, the method returns the first step with that name.  Name comparison is case-insensitive.</param>
      <param name="stepGroupParam">Specifies a particular step group.</param>
      <seealso cref="Sequence.GetStep" />
      <seealso cref="Sequence.GetStepByUniqueId" />
      <seealso cref="Sequence.GetStepIndex" />
      <seealso cref="Sequence.StepNameExists" />
      <seealso cref="Step" />
      <seealso cref="StepGroups" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Sequence.InsertStep(NationalInstruments.TestStand.Interop.API.Step,System.Int32,NationalInstruments.TestStand.Interop.API.StepGroups)">
      <summary>Inserts a step into the sequence.</summary>
      <remarks><para>Note: Never insert a step into a sequence when that step resides in another sequence. The step reference you pass must be the only reference to the step. You can obtain the sole reference to a step by calling the Engine.NewStep method or the Sequence.RemoveStep method.</para></remarks>
      <param name="stepToInsert">Specifies the step to insert.</param>
      <param name="index">Specifies the zero-based index that indicates the location where to insert the step in the step group.</param>
      <param name="stepGroupParam">Specifies a particular step group.</param>
      <seealso cref="Engine.NewStep" />
      <seealso cref="Sequence.DeleteStep" />
      <seealso cref="Sequence.RemoveStep" />
      <seealso cref="StepGroups" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Sequence.RemoveStep(System.Int32,NationalInstruments.TestStand.Interop.API.StepGroups)">
      <summary>Removes a step from a sequence and returns a reference to it.</summary>
      <param name="index">Specifies the zero-based index that indicates the location where to insert the step in the step group.</param>
      <param name="stepGroupParam">Specifies a particular step group.</param>
      <seealso cref="Sequence.DeleteStep" />
      <seealso cref="Sequence.InsertStep" />
      <seealso cref="StepGroups" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Sequence.DeleteStep(System.Int32,NationalInstruments.TestStand.Interop.API.StepGroups)">
      <summary>Deletes a step from the sequence.</summary>
      <param name="index">Specifies the zero-based step index that indicates the position of the step in the step group.</param>
      <param name="stepGroupParam">Specifies the step group that contains the step you want to delete.</param>
      <seealso cref="Sequence.InsertStep" />
      <seealso cref="Sequence.RemoveStep" />
      <seealso cref="StepGroups" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Sequence.StepNameExists(System.String,NationalInstruments.TestStand.Interop.API.StepGroups)">
      <summary>Returns <c>True</c> if a step with the name you specify exists in the step group.</summary>
      <param name="nameOfStep">Specifies the name to search for.</param>
      <param name="stepGroupParam">Specifies a particular step group.</param>
      <seealso cref="Sequence.GetStepByName" />
      <seealso cref="Sequence.GetStepIndex" />
      <seealso cref="StepGroups" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Sequence.EvalEntryPointNameExpression(NationalInstruments.TestStand.Interop.API.SequenceFile)">
      <summary><para>Note: This method is obsolete. Use the Sequence.EvalEntryPointNameExpressionEx method instead.</para></summary>
      <remarks>Applies only to an entry point sequence in a process model file. Call this function to determine the name to display for the entry point in the user interface menu bar. The function evaluates the entry point name expression for the entry point sequence in the context of the currently selected sequence file in the user interface.</remarks>
      <returns>Returns the name of the entry point.</returns>
      <param name="sequenceFileParam">Specifies the currently selected sequence file in the user interface.</param>
      <seealso cref="Sequence.EvalEntryPointNameExpressionEx" />
      <seealso cref="SequenceFile" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Sequence.EvalEntryPointEnabledExpression(NationalInstruments.TestStand.Interop.API.SequenceFile)">
      <summary><para>Note: This method is obsolete. Use the Sequence.EvalEntryPointEnabledExpressionEx method instead.</para></summary>
      <remarks>Applies only to an entry point sequence in a process model file. Call this function to determine whether to enable the entry point in the user interface menu bar. The function evaluates the entry point-enabled expression for the entry point sequence in the context of the currently selected sequence file in the user interface.</remarks>
      <returns>Returns <c>True</c> if the entry point is enabled in the user interface menu bar.</returns>
      <param name="sequenceFileParam">Specifies the currently selected sequence file in the user interface.</param>
      <seealso cref="Sequence.EvalEntryPointEnabledExpressionEx" />
      <seealso cref="SequenceFile" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Sequence.GetEntryPointMenuFromHint(System.String)">
      <summary>This method applies only to an entry point sequence in a process model file. Call this function to determine the user interface menu in which the entry point belongs. The method uses the Menu Hints option for the entry point sequence.</summary>
      <returns>Returns a zero-based index into the list of menu names you pass as the menuNameList parameter. This index indicates the menu to which the entry point belongs in the menu. If none of the menus in the list matches a menu hint for the entry point, the method returns <c>-1</c>. If this occurs, you must choose the menu in which to display the entry point. You can choose the menu based on the type of entry point.</returns>
      <param name="menuNameList">Pass a comma-separated list of the menu names in the user interface, such as &quot;<c>File,Configure,Debug</c>&quot;.
<para>Note: The method ignores all &quot;<c>_</c>&quot; and &quot;<c>&amp;</c>&quot; characters when comparing the names in the list with the menu hints for the entry point.</para></param>
      <seealso cref="Sequence.EntryPointMenuHint" />
      <seealso cref="Sequence.Type" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Sequence.AsPropertyObject">
      <summary>Returns the underlying PropertyObject that represents the Sequence object. Use the PropertyObject to modify, add, or remove custom properties of the object.</summary>
      <seealso cref="PropertyObject" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Sequence.Parameters">
      <summary>Returns the PropertyObject that contains the parameters for the sequence.</summary>
      <seealso cref="PropertyObject" />
      <seealso cref="Sequence.Locals" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Sequence.Locals">
      <summary>Returns the PropertyObject that contains the local variables for the sequence.</summary>
      <seealso cref="PropertyObject" />
      <seealso cref="SequenceFile.FileGlobalsDefaultValues" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Sequence.ShowEntryPointForFileWindow">
      <summary>Set this property to <c>True</c> if you want the entry point to appear in the menu bar when a Sequence File window is the active window.</summary>
      <remarks>This property applies only to an entry point sequence in a process model file. </remarks>
      <seealso cref="Sequence.ShowEntryPointForAllWindows" />
      <seealso cref="Sequence.ShowEntryPointForEditorOnly" />
      <seealso cref="Sequence.ShowEntryPointForExeWindow" />
      <seealso cref="Sequence.Type" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Sequence.ShowEntryPointForExeWindow">
      <summary>Set this property to <c>True</c> if you want the entry point to appear in the menu bar when an Execution window is the active window.</summary>
      <remarks>This property applies only to an entry point sequence in a process model file. </remarks>
      <seealso cref="Sequence.ShowEntryPointForAllWindows" />
      <seealso cref="Sequence.ShowEntryPointForEditorOnly" />
      <seealso cref="Sequence.ShowEntryPointForFileWindow" />
      <seealso cref="Sequence.Type" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Sequence.EntryPointInitiallyHidden">
      <summary>Specifies if an execution of the entry point is hidden when it starts.</summary>
      <remarks>This property applies only to an entry point sequence in a process model file. The property indicates if an execution of the entry point is hidden when it starts. In other words, if the property is <c>True</c>, the user interface does not display an Execution window for the entry point sequence when it begins executing it. The user interface does this by assigning the <c>ExecTypeMask_InitiallyHidden</c> value to the TypeMask property of the execution.</remarks>
      <seealso cref="Execution.TypeMask" />
      <seealso cref="ExecutionTypeMask" />
      <seealso cref="Sequence.Type" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Sequence.Type">
      <summary>Specifies the type of the sequence.</summary>
      <seealso cref="Sequence.GetEffectiveType" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Sequence.Name">
      <summary>Returns or specifies the name of the sequence.</summary>
      <remarks><para>Note: The name of a sequence must be unique if it is contained within a sequence file. Inserting two or more sequences with the same name into a sequence file might cause unexpected behavior.</para>
<para>Note: TestStand does not validate variable names you create programmatically for invalid characters, such as spaces, which can result in errors when you use expressions. Use the PropertyObject.ValidateNewElementName method to validate variable names. TestStand expressions require PropertyObject names to be strings that contain only letters, numbers, and underscores. PropertyObject names cannot contain spaces, start with a number, or be empty. Additionally, the PropertyObject name cannot be &quot;Value&quot;, and you cannot have duplicate subproperty names. For example, <c>MyVariableName_2000</c> is a valid PropertyObject name. Names of elements in a PropertyObject array can contain any character. Both sequence names and step names are examples of such named array elements. However, sequence names cannot be empty or contain control characters. You cannot have duplicate sequence names. <c>NI</c> is reserved for root attribute names.</para></remarks>
      <seealso cref="PropertyObject.ValidateNewElementName" />
      <seealso cref="Sequence.SequenceIndex" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Sequence.GotoCleanupOnFailure">
      <summary><para>Note: This property is obsolete. Use the Sequence.FailureAction property instead.</para> </summary>
      <remarks>Execution flow jumps to the Cleanup step group if this property is <c>True</c> and if a step sets the status property of the sequence to <c>Failed</c>. If the StationOptions.AlwaysGotoCleanupOnFailure property is <c>True</c>, the flow of execution jumps to the Cleanup step group on failure regardless of the state of this property.</remarks>
      <seealso cref="Sequence.FailureAction" />
      <seealso cref="StationOptions.AlwaysGotoCleanupOnFailure" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Sequence.DisableResults">
      <summary>Specifies to disable result recording for any steps in the sequence.</summary>
      <remarks>If this property is <c>True</c>, TestStand does not record results for any steps in the sequence. If this property is <c>False</c>, TestStand records results based on the setting of the Step.ResultRecordingOption property of each individual step or the StationOptions.DisableResults and Execution.DisableResults properties.
<para>Note: TestStand might not honor changes to this property in a running sequence until the sequence completes the current step group.</para></remarks>
      <seealso cref="Execution.DisableResults" />
      <seealso cref="StationOptions.DisableResults" />
      <seealso cref="Step.ResultRecordingOption" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Sequence.ShowEntryPointForEditorOnly">
      <summary>Set this property to <c>True</c> if you want the entry point to appear only in the menu bar of a sequence editor and not in an operator interface.</summary>
      <remarks>This property applies only to an entry point sequence in a process model file. </remarks>
      <seealso cref="Sequence.ShowEntryPointForAllWindows" />
      <seealso cref="Sequence.ShowEntryPointForExeWindow" />
      <seealso cref="Sequence.ShowEntryPointForFileWindow" />
      <seealso cref="Sequence.Type" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Sequence.ShowEntryPointForAllWindows">
      <summary>Set this property to <c>True</c> if you want the entry point to appear in the menu bar, regardless of what type of window is active.</summary>
      <remarks>This property applies only to an entry point sequence in a process model file. </remarks>
      <seealso cref="Sequence.ShowEntryPointForEditorOnly" />
      <seealso cref="Sequence.ShowEntryPointForExeWindow" />
      <seealso cref="Sequence.ShowEntryPointForFileWindow" />
      <seealso cref="Sequence.Type" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Sequence.GetStepIndex(System.String,NationalInstruments.TestStand.Interop.API.StepGroups)">
      <summary>Returns the index of the step with the name that matches the name you specify.</summary>
      <returns>Returns the index of the step with the name that matches the name you specify. Returns <c>-1</c> if no such step exists.</returns>
      <param name="nameOfStep">Specifies the name of the step for which you want the index. When more than one step using the same name exists in the step group, the method returns the index of the first step with that name. Name comparison is case-insensitive. You can also pass a unique step ID.</param>
      <param name="stepGroupParam">Specifies a particular step group.</param>
      <seealso cref="Sequence.GetStepByName" />
      <seealso cref="Sequence.GetStepByUniqueId" />
      <seealso cref="Sequence.StepNameExists" />
      <seealso cref="Step.UniqueStepId" />
      <seealso cref="StepGroups" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Sequence.LoadModules(System.Int32,System.Object)">
      <summary>Call this method to load the code modules for the steps in the sequence.</summary>
      <returns>Returns <c>True</c> on success, or <c>False</c> if a module fails to load.</returns>
      <param name="loadOptions">Specifies one or more LoadModuleOptions using the bitwise-OR operator to modify the behavior of this method.</param>
      <param name="sequenceContextParam">If passing the LoadModule_EvaluateExpressions flag to the loadOptions parameter, pass a SequenceContext object for this parameter to use when evaluating the expressions. Also, if calling this method from a step in an execution, pass the sequence context of the execution.</param>
      <seealso cref="Engine.UnloadAllModules" />
      <seealso cref="LoadModuleOptions" />
      <seealso cref="&quot;Omitting Optional Parameters&quot;javascript:APILink('/InfoTopics/Optional_Parameters.htm')" />
      <seealso cref="Sequence.UnloadModules" />
      <seealso cref="SequenceContext" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Sequence.GetBreakOnEnd(NationalInstruments.TestStand.Interop.API.StepGroups,System.Object)">
      <summary><para>Note: This method is obsolete. Use the Sequence.GetBreakOnEndSettings method instead.</para></summary>
      <remarks>Returns <c>True</c> if the step group of the sequence is set to break when all the steps in the step group are done executing.
This method, along with the <c>Sequence.SetBreakOnEnd</c> method, implements breakpoints for breaking after the last step in a step group.
<para>Note: The <c>Sequence.SetBreakOnEnd</c> method is obsolete. Use the Sequence.SetBreakOnEndSettings method instead.</para></remarks>
      <param name="stepGroupParam">Specifies a particular step group.</param>
      <param name="executionParam">Pass a reference to an Execution object to obtain the breakpoint settings on the End step, which apply to a particular execution. If there is no execution-specific breakpoint setting or if you do not pass an Execution object, the method returns the breakpoint setting on the End step of the sequence file.</param>
      <seealso cref="&quot;Omitting Optional Parameters&quot;javascript:APILink('/InfoTopics/Optional_Parameters.htm')" />
      <seealso cref="Sequence.GetBreakOnEndSettings" />
      <seealso cref="Sequence.SetBreakOnEndSettings" />
      <seealso cref="Step.GetBreakSettings" />
      <seealso cref="StepGroups" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Sequence.SetBreakOnEnd(NationalInstruments.TestStand.Interop.API.StepGroups,System.Boolean,System.Object)">
      <summary><para>Note: This method is obsolete. Use the Sequence.SetBreakOnEndSettings method instead.</para></summary>
      <remarks>Notifies TestStand when executions of this sequence and step group break after executing steps.
Use this method, along with the <c>Sequence.GetBreakOnEnd</c> method, to implement breakpoints for breaking after the last step in a step group.
<para>Note: The <c>Sequence.GetBreakOnEnd</c> method is obsolete. Use the Sequence.GetBreakOnEndSettings method instead.</para></remarks>
      <param name="stepGroupParam">Specifies a particular step group.</param>
      <param name="breakOnEnd">Pass <c>True</c> if you want executions of this sequence and step group to break after executing steps.</param>
      <param name="executionParam">Pass a reference to an Execution object to obtain the breakpoint settings on the End step, which apply to a particular execution. If there is no execution-specific breakpoint setting or if you do not pass an Execution object, the method returns the breakpoint setting on the End step of the sequence file.</param>
      <seealso cref="&quot;Omitting Optional Parameters&quot;javascript:APILink('/InfoTopics/Optional_Parameters.htm')" />
      <seealso cref="Sequence.GetBreakOnEndSettings" />
      <seealso cref="Sequence.SetBreakOnEndSettings" />
      <seealso cref="Step.GetBreakSettings" />
      <seealso cref="StepGroups" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Sequence.GetEffectiveType">
      <summary>Returns the effective sequence type.</summary>
      <remarks>Typically, the effective sequence type is the same as the value of the Sequence.Type property. One exception occurs when this sequence belongs to a sequence file that has a model file, and that model file has a callback with the same name as this sequence. In this case, the effective type is SeqType_Callback. The other exception occurs when this sequence has a reserved name, in which case this method returns SeqType_ReservedCallback.</remarks>
      <seealso cref="Sequence.GetEffectiveType" />
      <seealso cref="Sequence.Type" />
      <seealso cref="SequenceTypes" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Sequence.EvalEntryPointNameExpressionEx(NationalInstruments.TestStand.Interop.API.EditArgs)">
      <summary>Evaluates the entry point name expression.</summary>
      <remarks>This method applies only to an entry point sequence in a process model file. Call this function to determine the name to display for the entry point in the user interface menu bar. The function evaluates the entry point name expression for the entry point sequence in the context of the editArgs parameter, which specifies the currently selected items in the sequence editor or user interface.</remarks>
      <returns>Returns the name of the entry point.</returns>
      <param name="editArgs">Specifies which items in the user interface are currently selected.</param>
      <seealso cref="EditArgs" />
      <seealso cref="Sequence.EntryPointNameExpression" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Sequence.EvalEntryPointEnabledExpressionEx(NationalInstruments.TestStand.Interop.API.EditArgs)">
      <summary>Evaluates the entry point enabled expression.</summary>
      <remarks>This method applies only to an entry point sequence in a process model file. Call this function to determine whether to enable the entry point in the user interface menu bar. The function evaluates the entry point enabled expression for the entry point sequence in the context of the editArgs parameter, which specifies the currently selected items in the sequence editor or user interface.</remarks>
      <returns>Returns <c>True</c> if you can enable the entry point in the user interface menu bar.</returns>
      <param name="editArgs">Specifies which items in the user interface are currently selected.</param>
      <seealso cref="EditArgs" />
      <seealso cref="Sequence.EntryPointEnabledExpression" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Sequence.EntryPointIgnoreClient">
      <summary>Specifies if the entry point ignores the client sequence file.</summary>
      <remarks>This property applies only to an entry point sequence in a process model file. Set this property to <c>True</c> for entry points wholly contained in the process model and do not call into the client sequence file. User interfaces and the sequence editor use this option to determine whether to pass a client sequence file to the Engine.NewExecution method when they execute this entry point. </remarks>
      <seealso cref="Engine.NewExecution" />
      <seealso cref="Sequence.Type" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Sequence.EntryPointCheckToSaveTitledSeqFiles">
      <summary>Specifies if sequence files must be saved before the entry point executes.</summary>
      <remarks>This property applies only to an entry point sequence in a process model file. The property indicates if the sequence editor must attempt to save modified sequence files before executing the entry point.</remarks>
      <seealso cref="Sequence.Type" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Sequence.UnloadModules">
      <summary>Unloads code modules for all steps in the sequence.</summary>
      <returns>Returns <c>True</c> if all code modules are unloaded.
<para>Note: Some code modules might not be unloaded because they are executing.</para></returns>
      <seealso cref="Engine.UnloadAllModules" />
      <seealso cref="Sequence.LoadModules" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Sequence.EntryPointNameExpression">
      <summary>Specifies a string expression that determines the menu item name of the entry point.</summary>
      <remarks><para>Note: This property applies only to an entry point sequence in a process model.</para></remarks>
      <seealso cref="Sequence.EntryPointEnabledExpression" />
      <seealso cref="Sequence.EntryPointMenuHint" />
      <seealso cref="Sequence.Type" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Sequence.EntryPointEnabledExpression">
      <summary>Specifies a Boolean expression the Sequence.EvalEntryPointEnabledExpressionEx method evaluates.</summary>
      <remarks>If the expression evaluates to <c>False</c>, TestStand dims the entry point in the menu. If the expression is empty, the entry point is enabled in the menu.</remarks>
      <seealso cref="Sequence.EntryPointNameExpression" />
      <seealso cref="Sequence.EntryPointMenuHint" />
      <seealso cref="Sequence.EvalEntryPointEnabledExpressionEx" />
      <seealso cref="Sequence.Type" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Sequence.EntryPointMenuHint">
      <summary>Specifies a menu name for the entry point. You can specify multiple menu names separated by commas. An empty string value specifies that the application determines the menu the entry point appears in based on the entry point sequence type.</summary>
      <remarks><para>Note: This property applies only to an entry point sequence in a process model.</para>
An application uses the first menu name in the list that it can find in the user interface. This option is useful if you use multiple user interfaces that have different menu names. If an application cannot find any menus in the user interface with the names that you specify, the application uses the default menu for the entry point type.</remarks>
      <seealso cref="Sequence.EntryPointEnabledExpression" />
      <seealso cref="Sequence.EntryPointNameExpression" />
      <seealso cref="Sequence.GetEntryPointMenuFromHint" />
      <seealso cref="Sequence.Type" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Sequence.CreateNewUniqueStepIds">
      <summary>Replaces the unique step ID with a new unique step ID in all the steps in a sequence.</summary>
      <seealso cref="Step.CreateNewUniqueStepId" />
      <seealso cref="Step.UniqueStepId" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Sequence.GetStepByUniqueId(System.String)">
      <summary>Returns a reference to the Step object you specify by unique ID.</summary>
      <remarks>Returns a <c>NULL</c> reference if no step exists with the unique ID you specify.</remarks>
      <param name="uniqueStepId">Specifies the unique ID of the step for which you want a reference.</param>
      <seealso cref="Sequence.GetStep" />
      <seealso cref="Sequence.GetStepByName" />
      <seealso cref="Step" />
      <seealso cref="Step.UniqueStepId" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Sequence.SequenceFile">
      <summary>Returns the sequence file that contains this sequence.</summary>
      <returns>Returns the containing sequence file or a <c>NULL</c> reference if this sequence does not belong to a sequence file.</returns>
      <seealso cref="SequenceFile" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Sequence.AllowInteractiveExecutionOfEntryPoint">
      <summary>Set this property to <c>False</c> to prohibit the user from using this entry point sequence to run an interactive execution in the sequence editor or user interface.</summary>
      <remarks>This property applies only to an entry point sequence in a process model file. </remarks>
      <seealso cref="Sequence.Type" />
      <seealso cref="SequenceFile.SequenceFileType" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Sequence.OptimizeNonReentrantCalls">
      <summary>Specifies to decrease the amount of time required for TestStand to call the sequence after the first call to the sequence in an execution.</summary>
      <remarks>If you set this property to <c>False</c>, TestStand initializes a new copy of each custom step property in a sequence each time it calls the sequence. TestStand performs the initialization so the sequence always begins executing with the initial property values the steps in the sequence specify. This initialization is necessary only if a sequence relies on the initial value of a custom step property and then modifies the value. Few sequences rely on this information.
When you set this property to <c>True</c>, TestStand initializes the value of the custom step properties in the sequence the first time it calls the sequence in an execution. TestStand reuses the custom step property values when it calls the sequence again. If the same sequence is in a different thread or recursively within the same thread simultaneously, TestStand creates unique copies of the custom step properties.
<para>Note: When you set this property to <c>True</c>, TestStand maintains a loaded copy of the sequence until the execution is complete and does not unload the code modules for the sequence until after the execution ends, even if you attempt to unload the sequence and regardless of the value of the Unload Option on the General tab of the Sequence File Properties dialog box for the sequence file or the steps in the sequence. Because you cannot programmatically edit a loaded sequence, set this property to <c>False</c> if you need to modify the sequence at run time.</para></remarks>
      <seealso cref="&quot;General tab of the Sequence File Properties dialog box&quot;javascript:RefLink('/InfoTopics/DB_Seq_File_Prop_Gen_Tab.htm')" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Sequence.CopyStepsOnOverride">
      <summary>Specifies the behavior of TestStand when you click Add in the Sequence File Callbacks dialog box to create an overriding sequence file in the client sequence file.</summary>
      <remarks>If you set this property to <c>True</c>, TestStand copies all steps and local variables in the callback sequence of the model file to the callback sequence you create in the client sequence file.
<para>Note: TestStand always copies the sequence parameters, regardless of this setting.</para>
This property applies only to callback sequences that reside in a model sequence file.</remarks>
      <seealso cref="Engine.DisplaySequenceFileCallbacksDialog" />
      <seealso cref="&quot;Sequence File Callbacks dialog box&quot;javascript:RefLink('/InfoTopics/DB_Callbacks.htm')" />
      <seealso cref="Sequence.Type" />
      <seealso cref="SequenceFile.CreateCallbackOverrideSequence" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Sequence.SetBreakOnEndSettings(NationalInstruments.TestStand.Interop.API.StepGroups,System.Boolean,System.Boolean,System.Int32,System.String,System.Object)">
      <summary>Specifies if the step group in the sequence is set to break after all the steps in the sequence execute.</summary>
      <param name="stepGroupParam">Specifies a particular step group.</param>
      <param name="isSet">Specifies whether the breakpoint is set. If a breakpoint is set, this parameter returns <c>True</c>.</param>
      <param name="enabled">Specifies whether the breakpoint is enabled. TestStand ignores disabled breakpoints during execution.</param>
      <param name="passCount">Specifies the number of iterations the execution skips the breakpoint before suspending execution. Pass <c>0</c> if you do not want to use a conditional pass count.</param>
      <param name="Condition">Specifies the expression that must evaluate to <c>True</c> before suspending the execution. An empty value defaults to <c>True</c>. If you specify a non-zero pass count value and a condition expression for the breakpoint, the pass count only decrements when the expression evaluates to <c>True</c>.</param>
      <param name="executionParam">Specifies a reference to an Execution object to obtain the breakpoint settings on the End step, which apply to a particular execution. If there is no execution-specific breakpoint setting or if you do not pass an Execution object, the method returns the breakpoint setting on the End step of the sequence file.</param>
      <seealso cref="&quot;Omitting Optional Parameters&quot;javascript:APILink('/InfoTopics/Optional_Parameters.htm')" />
      <seealso cref="Sequence.GetBreakOnEndSettings" />
      <seealso cref="Step.SetBreakSettings" />
      <seealso cref="StepGroups" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Sequence.GetBreakOnEndSettings(NationalInstruments.TestStand.Interop.API.StepGroups,System.Boolean@,System.Boolean@,System.Int32@,System.String@,System.Object)">
      <summary>Returns a value that indicates whether the step group of the sequence is set to break when all the steps in the sequence execute.</summary>
      <param name="stepGroupParam">Specifies a particular step group.</param>
      <param name="isSet">Returns a value that indicates whether the breakpoint is set.</param>
      <param name="enabled">Returns a value that indicates whether the breakpoint is enabled. TestStand ignores disabled breakpoints during execution.</param>
      <param name="passCount">Returns the number of times the execution must evaluate the condition expression before suspending the execution. Pass <c>0</c> if you do not want to use a conditional pass count.</param>
      <param name="Condition">Returns the expression that must evaluate to <c>True</c> before suspending the execution. An empty value defaults to <c>True</c>. If you specify a non-zero value for the passCount parameter and a condition expression for the breakpoint, the pass count decrements only when the expression evaluates to <c>True</c>.</param>
      <param name="executionParam">Pass a reference to an Execution object to obtain the breakpoint settings on the End step, which apply to a particular execution. If there is no execution-specific breakpoint setting or if you do not pass an Execution object, the method returns the breakpoint setting on the End step of the sequence file.</param>
      <seealso cref="&quot;Omitting Optional Parameters&quot;javascript:APILink('/InfoTopics/Optional_Parameters.htm')" />
      <seealso cref="Sequence.SetBreakOnEndSettings" />
      <seealso cref="Step.GetBreakSettings" />
      <seealso cref="StepGroups" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Sequence.HasMismatchedBlocks">
      <summary>If this property is <c>True</c>, the sequence contains steps that define block structure and the steps are not properly matched. For example, this property is <c>True</c> if a sequence contains a For step without a corresponding End step.
<para>Note: A sequence with mismatched blocks cannot execute.</para></summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Sequence.Requirements">
      <summary>Returns the Requirements property for the sequence. The Links subproperty of the Requirements property is an array of string values that represents the product and unit requirements the sequence covers.</summary>
      <remarks>You can use the following pseudocode to add a new element to the list of requirements:
<para><code>PropertyObject links = sequence.Requirements.GetPropertyObject(&quot;Links&quot;, 0);</code></para><para><code>int nextAvailableIndex = links.GetNumElements();</code></para><para><code>links.SetValStringByOffset(nextAvailableIndex, PropertyOptions.PropOption_InsertElement, &quot;REQ_ABC&quot;);</code></para></remarks>
      <seealso cref="PropertyObject" />
      <seealso cref="PropertyObjectFile.Requirements" />
      <seealso cref="Step.Requirements" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Sequence.SequenceIndex">
      <summary>Returns the zero-based index of the sequence within the containing sequence file. Returns <c>-1</c> if the sequence is not within a sequence file.</summary>
      <seealso cref="Sequence.Name" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Sequence.Id">
      <summary>Returns a unique identification number for the sequence. 
<para>Note: The ID number is never zero.</para></summary>
      <remarks>The ID number is unique with respect to all sequences that you open before you shut down the TestStand Engine. 
Use this ID number to compare two sequence object references to determine whether they refer to the same underlying sequence. A run-time copy of a sequence has a different ID than the corresponding edit-time copy of the sequence.</remarks>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Sequence.FailureAction">
      <summary>Specifies whether execution flow jumps to the Cleanup step group when a step sets the status property of the sequence to <c>Failed</c>.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.Step">
      <summary>Objects of the Step class represent steps in TestStand sequences. A step can perform many tasks, such as initializing an instrument, performing a complex test, or making a decision that affects the flow of execution in a sequence. You can obtain a reference to a step in a sequence by calling the Sequence.GetStep method. Create new steps with the Engine.NewStep method.
<para>Note: Built-in properties of steps are flagged to be shared at run-time.  Any changes to built-in properties within the run-time copy of the step edits the original step object in the sequence file.</para></summary>
      <seealso cref="Engine.NewStep" />
      <seealso cref="Sequence" />
      <seealso cref="Sequence.GetStep" />
      <seealso cref="StepType" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.AdditionalResults">
      <summary>Accesses the parameter additional results and custom additional results of a step.</summary>
      <seealso cref="StepAdditionalResults" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.AdditionalResultsHints">
      <summary>Returns a list of additional result hints associated with a step instance. Use this property when step types support multiple operations and you want to specify different additional result hints for different step operations.</summary>
      <remarks>The combined members of StepType.AdditionalResultsHints and <c>"Step.AdditionalResultsHints"</c> define a list of preconfigured custom additional results you can choose to log when you edit the additional results of a step in a user interface. 
You normally edit the <c>Step.AdditionalResultsHints</c> collection in an Edit substep.</remarks>
      <seealso cref="AdditionalResults" />
      <seealso cref="StepType.AdditionalResultsHints" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Step.DisplayAdditionalResultsDialog(System.String,System.Int32)">
      <summary>Launches the Additional Results dialog box, in which you can edit additional results for a step.</summary>
      <returns>Returns <c>True</c> if you click OK in the dialog box. Returns <c>False</c> if you click Cancel.</returns>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.</param>
      <param name="dlgOptions">Specifies any combination of CommonDialogOptions.</param>
      <seealso cref="&quot;Additional Results dialog box&quot;javascript:RefLink('/InfoTopics/DB_Additional_Results_Step.htm')" />
      <seealso cref="CommonDialogOptions" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Step.AsPropertyObject">
      <summary>Returns the underlying PropertyObject that represents the Step object. Use the PropertyObject to modify, add, or remove custom properties of the object.</summary>
      <seealso cref="PropertyObject" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.IsSequenceCall">
      <summary>Returns <c>True</c> if the step is a Sequence Call step.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.AdapterKeyName">
      <summary>Returns the key name of the module adapter the step uses.</summary>
      <remarks>If the step does not use a module adapter, this property returns <c>None Adapter</c>, which is the value of the constant NoneAdapterKeyName.</remarks>
      <seealso cref="&quot;Adapter.KeyName&quot;Adapter_KeyName_P.htm" />
      <seealso cref="AdapterKeyNames" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.BreakOnStep">
      <summary><para>Note: This property is obsolete. Use the Step.GetBreakSettings and Step.SetBreakSettings methods instead.</para></summary>
      <remarks>If this property is <c>True</c>, TestStand suspends execution before executing the step. This property is now equivalent to setting or getting the sequence file version of the breakpoint.</remarks>
      <seealso cref="Step.GetBreakSettings" />
      <seealso cref="Step.SetBreakSettings" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.RunMode">
      <summary><para>Note: This property is obsolete. Use the Step.GetRunModeEx and Step.SetRunModeEx methods instead.</para></summary>
      <remarks>Specifies the run mode of the step. Although you can use this property, it is now equivalent to setting or getting the sequence file version of the run mode. 
The RunModes constants define the valid values for this property.
This property is the run mode TestStand stores for the step in the sequence file. To set the run mode temporarily, set the <c>Step.RunTimeRunMode</c> property instead. Setting this property also sets the <c>Step.RunTimeRunMode</c> property. In the sequence editor, the Sequence File window shows this property for the steps, and the Execution window shows the <c>Step.RunTimeRunMode</c> property for the steps.
<para>Note: The <c>Step.RunTimeRunMode</c> property is obsolete. Use the <c>Step.GetRunModeEx</c> and <c>Step.SetRunModeEx</c> methods instead.</para></remarks>
      <seealso cref="RunModes" />
      <seealso cref="Step.GetRunModeEx" />
      <seealso cref="Step.SetRunModeEx" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.RunTimeRunMode">
      <summary><para>Note: This property is obsolete. Use the Step.GetRunModeEx  and Step.SetRunModeEx methods instead.</para></summary>
      <remarks>Specifies the run-time run mode of the step. Although you can use this property, it is now equivalent to setting or getting the sequence file version of the run mode.
The RunModes constants define the valid values for this property.
This property is the run mode TestStand uses when it executes the sequence file. When running a step, TestStand copies the value of the <c>Step.RunMode</c> property to this property if you have not already explicitly set this property. Unlike the <c>Step.RunMode</c> property, the value of this property is not saved but is discarded when the sequence file is unloaded. Setting this property has no effect on the <c>Step.RunMode</c> property. In the sequence editor, the Sequence File window shows the <c>Step.RunMode</c> property for the steps, and the Execution window shows the <c>Step.RunTimeRunMode</c> property for the steps.
<para>Note: The <c>Step.RunMode</c> property is obsolete. Use the <c>Step.GetRunModeEx</c>  and <c>Step.SetRunModeEx</c> methods instead.</para></remarks>
      <seealso cref="RunModes" />
      <seealso cref="Step.GetRunModeEx" />
      <seealso cref="Step.SetRunModeEx" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.StepFailCausesSequenceFail">
      <summary>Specifies if failure of the step causes the sequence to fail.</summary>
      <remarks>If  this property is <c>True</c> and the step fails, TestStand sets the internal status property of the sequence that contains the step to <c>Failure</c>. If the Sequence.FailureAction property is <c>True</c> for the sequence, the execution then jumps to the Cleanup step group of the sequence.</remarks>
      <seealso cref="Sequence.FailureAction" />
      <seealso cref="Step.CausedSequenceFailure" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.Precondition">
      <summary>Specifies an expression that must evaluate to <c>True</c> or be empty to execute the step.</summary>
      <remarks>This string is an expression with a Boolean result. Use the AnyOf() and AllOf() expression functions to specify more than one expression. The following is an example of an expression for a precondition based on the results of another step:
<c>RunState.Sequence.Main[&quot;NameOfAnotherStep&quot;].Result.Status == &quot;Passed&quot;</c></remarks>
      <seealso cref="Engine.DisplayPreconditionDialog" />
      <seealso cref="Step.EvalPrecondForInteractiveExecution" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.Description">
      <summary><para>Note: This property is obsolete. Use the Step.GetDescriptionEx method instead.</para></summary>
      <remarks>Describes the step. You can change this string whenever you modify the step settings.</remarks>
      <seealso cref="Step.GetDescriptionEx" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.PassAction">
      <summary>Specifies the type of post action you want to occur if the step passes.</summary>
      <remarks>Assign a PostActionValues string constant to the property to specify the type of post action to perform.</remarks>
      <seealso cref="PostActionValues" />
      <seealso cref="Step.PassActionTargetByExpr" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.PassActionTarget">
      <summary><para>Note: This property is obsolete. Use the Step.PassActionTargetByExpr property instead.</para></summary>
      <remarks>Specifies the target for the post action the Step.PassAction property specifies. Post action targets are now expressions. If you set the target using this property, TestStand converts the target into a string constant expression before storing it. If you attempt to obtain the target using this property and it is a string constant expression, TestStand converts the target back into the string it represents and returns the string to you. If the target is not a string constant but is a more complex expression, TestStand returns an error if you try to obtain the value using this property.
If the <c>Step.PassAction</c> property is PostAction_GotoStep, the target is the name of the step. If the <c>Step.PassAction</c> property is PostAction_CallCallback, the target is the name of the callback sequence. For all other types of post actions, the target property is not used.</remarks>
      <seealso cref="PostActionValues" />
      <seealso cref="Step.PassAction" />
      <seealso cref="Step.PassActionTargetByExpr" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.FailAction">
      <summary>Specifies the type of post action you want to occur if the step fails.</summary>
      <remarks>Assign a PostActionValues string constant to the property to specify the type of post action to perform.</remarks>
      <seealso cref="PostActionValues" />
      <seealso cref="Step.FailActionTargetByExpr" />
      <seealso cref="Step.PassAction" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.FailActionTarget">
      <summary><para>Note: This property is obsolete. Use the Step.FailActionTargetByExpr property instead.</para></summary>
      <remarks>Specifies the target for the post action the <c>Step.FailAction</c> property specifies. Post action targets are now expressions. If you set the target using this property, TestStand converts the target into a string constant expression before storing it. If you attempt to obtain the target using this property and it is a string constant expression, TestStand converts the target back into the string it represents and returns the string to you. If the target is not a string constant but is a more complex expression, TestStand returns an error if you try to obtain the value using this property.
If the <c>Step.FailAction</c> property is PostAction_GotoStep, the target is the name of the step. If the <c>Step.FailAction</c> property is PostAction_CallCallback, the target is the name of the callback sequence. For all other types of post actions, the target property is not used.</remarks>
      <seealso cref="PostActionValues" />
      <seealso cref="Step.FailAction" />
      <seealso cref="Step.FailActionTargetByExpr" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.CustomTrueAction">
      <summary>Specifies the type of action you want to occur when the custom post action expression evaluates to <c>True</c>.</summary>
      <remarks>Assign a PostActionValues string constant to the property to specify the type of post action to perform.</remarks>
      <seealso cref="PostActionValues" />
      <seealso cref="Step.CustomActionExpression" />
      <seealso cref="Step.CustomFalseAction" />
      <seealso cref="Step.CustomFalseActionTargetByExpr" />
      <seealso cref="Step.CustomTrueActionTargetByExpr" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.CustomTrueActionTarget">
      <summary><para>Note: This property is obsolete. Use the Step.CustomTrueActionTargetByExpr property instead.</para></summary>
      <remarks>Specifies the target for the post action the Step.CustomTrueAction property specifies. Post action targets are now expressions. If you set the target using this property, TestStand converts the target into a string constant expression before storing it. If you attempt to obtain the target using this property and the target is a string constant expression, TestStand converts it back into the string it represents and returns the string to you. If the target is not a string constant but is a more complex expression, TestStand returns an error if you try to obtain the value using this property.
<para><para>&#160;&#160;&#160;&#160;* If the <c>Step.CustomTrueAction</c> property is PostAction_GotoStep, the target is the name of the step or the ID of the step. If you specify the target by name, the target step must reside in the same step group. If you specify the target by ID, the target step can reside in any step group in the sequence.</para><para>&#160;&#160;&#160;&#160;* If the <c>Step.CustomTrueAction</c> property is PostAction_CallCallback, the target is the name of the callback sequence.</para><para>&#160;&#160;&#160;&#160;* For all other types of post actions, the target property is not used.</para></para></remarks>
      <seealso cref="Step.CustomActionExpression" />
      <seealso cref="Step.CustomFalseAction" />
      <seealso cref="Step.CustomFalseActionTargetByExpr" />
      <seealso cref="Step.CustomTrueAction" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.CustomFalseAction">
      <summary>Specifies the type of action you want to occur when the custom post action expression evaluates to <c>False</c>.</summary>
      <remarks>Assign a PostActionValues string constant to the property to specify the type of post action to perform.</remarks>
      <seealso cref="PostActionValues" />
      <seealso cref="Step.CustomActionExpression" />
      <seealso cref="Step.CustomFalseActionTargetByExpr" />
      <seealso cref="Step.CustomTrueAction" />
      <seealso cref="Step.CustomTrueActionTargetByExpr" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.CustomFalseActionTarget">
      <summary><para>Note: This property is obsolete. Use the Step.CustomFalseActionTargetByExpr property instead.</para></summary>
      <remarks>Specifies the target for the post action the Step.CustomFalseAction property specifies. Post action targets are now expressions. If you set the target using this property, TestStand converts the target into a string constant expression before storing it. If you attempt to obtain the target using this property and the target is a string constant expression, TestStand converts it back into the string it represents and returns the string to you. If the target is not a string constant but is a more complex expression, TestStand returns an error if you try to obtain the value using this property.
<para><para>&#160;&#160;&#160;&#160;* If the <c>Step.CustomFalseAction</c> property is PostAction_GotoStep, the target is the name of the step or the ID of the step. If you specify the target by name, the target step must reside in the same step group. If you specify the target by ID, the target step can reside in any step group in the sequence.</para><para>&#160;&#160;&#160;&#160;* If the <c>Step.CustomFalseAction</c> property is PostAction_CallCallback, the target is the name of the callback sequence.</para><para>&#160;&#160;&#160;&#160;* For all other types of post actions, the target property is not used.</para></para></remarks>
      <seealso cref="PostActionValues" />
      <seealso cref="Step.CustomActionExpression" />
      <seealso cref="Step.CustomFalseAction" />
      <seealso cref="Step.CustomFalseActionTargetByExpr" />
      <seealso cref="Step.CustomTrueAction" />
      <seealso cref="Step.CustomTrueActionTargetByExpr" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.CustomActionExpression">
      <summary>Specifies the custom post action condition expression for the step.</summary>
      <seealso cref="Step.CustomFalseAction" />
      <seealso cref="Step.CustomFalseActionTargetByExpr" />
      <seealso cref="Step.CustomTrueAction" />
      <seealso cref="Step.CustomTrueActionTargetByExpr" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.LoopType">
      <summary>Specifies the type of looping for the step.</summary>
      <remarks>Use the StepLoopTypes constants to specify the value of the property.</remarks>
      <seealso cref="Step.LoopIncExpression" />
      <seealso cref="Step.LoopInitExpression" />
      <seealso cref="Step.LoopStatusExpression" />
      <seealso cref="Step.LoopWhileExpression" />
      <seealso cref="StepLoopTypes" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.LoopWhileExpression">
      <summary>Specifies the While Loop expression for the step.</summary>
      <seealso cref="Step.LoopIncExpression" />
      <seealso cref="Step.LoopInitExpression" />
      <seealso cref="Step.LoopStatusExpression" />
      <seealso cref="Step.LoopType" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.LoopStatusExpression">
      <summary>Specifies the loop status result expression for the step.</summary>
      <seealso cref="Step.LoopIncExpression" />
      <seealso cref="Step.LoopInitExpression" />
      <seealso cref="Step.LoopType" />
      <seealso cref="Step.LoopWhileExpression" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.StatusExpression">
      <summary>Specifies the status expression for the step.</summary>
      <remarks>Use this expression to set the ResultStatus property of the step. TestStand executes this expression after executing all other substeps and expressions for the step. The expression must evaluate to a string.</remarks>
      <seealso cref="Step.PostExpression" />
      <seealso cref="Step.PreExpression" />
      <seealso cref="Step.ResultStatus" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.ResultStatus">
      <summary>Specifies the status string for the step.</summary>
      <remarks>Although you can define custom status strings, you usually set this property to one of the <c>ResultStatus_</c> constants of StepProperties.</remarks>
      <seealso cref="Step.GetResultStatusDisplayString" />
      <seealso cref="Step.StatusExpression" />
      <seealso cref="StepProperties" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.PreExpression">
      <summary>Specifies the Pre expression for the step.</summary>
      <remarks>TestStand evaluates the Pre expression before it calls the Pre-Step substep and code module for the step.</remarks>
      <seealso cref="Step.PostExpression" />
      <seealso cref="Step.StatusExpression" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.PostExpression">
      <summary>Specifies the Post expression for the step.</summary>
      <remarks>TestStand evaluates the Post expression after calling the code module and Post-Step substep for the step.</remarks>
      <seealso cref="Step.PreExpression" />
      <seealso cref="Step.StatusExpression" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.RecordResult">
      <summary><para>Note: This property is obsolete. Use the Step.ResultRecordingOption property instead.</para></summary>
      <remarks>Specifies whether to record the Result properties of the step. If you set this property to <c>True</c>, TestStand records the result of the step, unless the Engine.DisableResults property is <c>True</c> or the Sequence.DisableResults property is <c>True</c>.
For steps that loop, use the Step.RecordLoopIterationResults property to specify to add step results to the sequence result list after each loop iteration.</remarks>
      <seealso cref="Engine.DisableResults" />
      <seealso cref="Sequence.DisableResults" />
      <seealso cref="StationOptions.DisableResults" />
      <seealso cref="Step.RecordLoopIterationResults" />
      <seealso cref="Step.ResultRecordingOption" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.ModuleLoadOption">
      <summary>Specifies the option that determines when TestStand loads the code module for the step.</summary>
      <remarks>The <c>SequenceFile.ModuleLoadOption</c> property takes precedence over this property, unless the value of the <c>SequenceFile.ModuleLoadOption</c> property is <c>LoadOption_UseStepLoadOption</c>.</remarks>
      <seealso cref="SequenceFile.ModuleLoadOption" />
      <seealso cref="Step.ModuleUnloadOption" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.ModuleUnloadOption">
      <summary>Specifies the option that determines when TestStand unloads the code module for the step.</summary>
      <remarks>The <c>SequenceFile.ModuleUnloadOption</c> property takes precedence over this property, unless the value of the <c>SequenceFile.ModuleUnloadOption</c> property is <c>UnloadOption_UseStepUnloadOption</c>.</remarks>
      <seealso cref="SequenceFile.ModuleUnloadOption" />
      <seealso cref="Step.ModuleLoadOption" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.Name">
      <summary>Specifies the name of the step.</summary>
      <remarks>You can use the following code snippet to set the default name of the new step:
<para><code>Step.Name = Step.StepType.AsPropertyObject.EvaluateEx(Step.StepType.DefaultNameExpr, EvalOption_DoNotAlterValues).GetValString(&quot;&quot;, 0)</code></para>
<para>Note: TestStand does not validate step names you create programmatically for invalid characters, which can result in errors when you use expressions. Use the PropertyObject.ValidateNewName method to validate step names. Step names can contain any character.</para></remarks>
      <seealso cref="PropertyObject.ValidateNewElementName" />
      <seealso cref="Step.GetDescriptionEx" />
      <seealso cref="Step.GetStepSettingsString" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.SmallIcon">
      <summary>Returns the small version of the icon that represents the step.</summary>
      <remarks>The step type defines the icon the property returns. If the step type does not specify an icon, the property returns the icon the Adapter of the step specifies.</remarks>
      <seealso cref="&quot;Adapter&quot;Adapter.htm" />
      <seealso cref="Engine.SmallImageListEx" />
      <seealso cref="Step.IconName" />
      <seealso cref="Step.LargeIcon" />
      <seealso cref="Step.SmallIconIndex" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.LargeIcon">
      <summary>Returns the large version of the icon that represents the step.</summary>
      <remarks>The step type of the step defines the icon the property returns. If the step type does not specify an icon, the property returns the icon the Adapter of the step specifies.</remarks>
      <seealso cref="Adapter" />
      <seealso cref="Engine.LargeImageListEx" />
      <seealso cref="Step.IconName" />
      <seealso cref="Step.LargeIconIndex" />
      <seealso cref="Step.SmallIcon" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.SmallIconIndex">
      <summary>Returns a unique index for the small version of the icon that represents the step. You can use this index to retrieve the icon image from the image list you obtain with the Engine.SmallImageList property.</summary>
      <seealso cref="Engine.SmallImageList" />
      <seealso cref="Step.IconName" />
      <seealso cref="Step.LargeIconIndex" />
      <seealso cref="Step.SmallIcon" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.LargeIconIndex">
      <summary>Returns a unique index for the large version of the icon that represents the step. You can use this index to retrieve the icon image from the image list you obtain with the Engine.LargeImageListEx property.</summary>
      <seealso cref="Engine.LargeImageListEx" />
      <seealso cref="Step.IconName" />
      <seealso cref="Step.LargeIcon" />
      <seealso cref="Step.SmallIconIndex" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.IconName">
      <summary>Specifies the filename of the icon for the step.</summary>
      <remarks>If the step type has no icon file, the property returns the icon filename for the module adapter the step uses.
Icon files are located in the <c>&lt;TestStand&gt;\Components\Icons</c> and <c>&lt;TestStand&#160;Public&gt;\Components\Icons</c> directories.</remarks>
      <seealso cref="&quot;Adapter&quot;Adapter.htm" />
      <seealso cref="Step.LargeIcon" />
      <seealso cref="Step.SmallIcon" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.LoopInitExpression">
      <summary>Specifies the loop initialization expression for the step.</summary>
      <seealso cref="Step.LoopIncExpression" />
      <seealso cref="Step.LoopStatusExpression" />
      <seealso cref="Step.LoopType" />
      <seealso cref="Step.LoopWhileExpression" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.LoopIncExpression">
      <summary>Specifies the loop increment expression for the step.</summary>
      <seealso cref="Step.LoopInitExpression" />
      <seealso cref="Step.LoopStatusExpression" />
      <seealso cref="Step.LoopType" />
      <seealso cref="Step.LoopWhileExpression" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Step.ExecuteEditSubstep">
      <summary><para>Note: This method is obsolete. Use the Step.ExecuteSubstep method instead.</para></summary>
      <remarks>Executes the first Edit substep for the step, if one exists. Check the Step.CanExecuteEditSubstep property before calling this method.</remarks>
      <returns>Returns <c>True</c> if the Edit substep modifies the step.</returns>
      <seealso cref="Step.CanExecuteSubstep" />
      <seealso cref="Step.ExecuteSubstep" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.CanExecuteEditSubstep">
      <summary><para>Note: This property is obsolete. Use the Step.CanExecuteSubstep method instead.</para></summary>
      <remarks>Returns a value that indicates whether you can execute the specified substep.</remarks>
      <seealso cref="Step.CanExecuteSubstep" />
      <seealso cref="Step.ExecuteSubstep" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.CanSpecifyModule">
      <summary>Returns a value that indicates whether this step supports the Step.SpecifyModule method. This property returns <c>False</c> if the Module.CanSpecify property is <c>False</c>, if the <c>Step.TS.CanSpecifyModule</c>PropertyObject is <c>False</c>, or if the step has a step type and Specify Module is enabled on the Disable Properties tab of the Step Type Properties dialog box  for the step type.</summary>
      <seealso cref="&quot;Disable Properties tab&quot;javascript:RefLink('/InfoTopics/DB_Step_Type_Prop_DisableProp_Tab.htm')" />
      <seealso cref="Module.CanSpecify" />
      <seealso cref="&quot;Step Type Properties dialog box&quot;javascript:RefLink('/InfoTopics/DB_Step_Type_Prop.htm')" />
      <seealso cref="Step.CanCreateCode" />
      <seealso cref="Step.SpecifyModule" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Step.SpecifyModule(System.Int32)">
      <summary>Launches the Specify Module dialog box for the step, if one exists.</summary>
      <remarks>Check the Step.CanSpecifyModule property to verify that you can call this method.
The current version of TestStand does not support all SpecifyModuleOptions options for all adapters, as the following list indicates:
<para><para>&#160;&#160;&#160;&#160;* LabVIEW Adapter&#8212;Only supports <c>SpecMod_ReadOnly</c>.</para><para>&#160;&#160;&#160;&#160;* LabWindows/CVI Adapter&#8212;Supports all options.</para><para>&#160;&#160;&#160;&#160;* C/C++ DLL Adapter&#8212;Supports all options.</para><para>&#160;&#160;&#160;&#160;* .NET&#8212;Only supports <c>SpecMod_ReadOnly</c>.</para><para>&#160;&#160;&#160;&#160;* ActiveX/COM Adapter&#8212;Only supports <c>SpecMod_ReadOnly</c>.</para><para>&#160;&#160;&#160;&#160;* Sequence Adapter&#8212;Supports all options.</para><para>&#160;&#160;&#160;&#160;* HTBasic Adapter&#8212;Only supports <c>SpecMod_ReadOnly</c>.</para></para></remarks>
      <returns>Returns <c>True</c> if the Specify Module dialog box modifies the step.</returns>
      <param name="specModOptions">Specifies one or more SpecifyModuleOptions to modify the behavior of the dialog box.</param>
      <seealso cref="&quot;Specify Module dialog box&quot;javascript:RefLink('/InfoTopics/DB_EditAutoCall.htm')" />
      <seealso cref="SpecifyModuleOptions" />
      <seealso cref="Step.CanSpecifyModule" />
      <seealso cref="Step.CreateCode" />
      <seealso cref="Step.EditCode" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.PassActionTargetByExpr">
      <summary>Specifies the target for the post action the Step.PassAction property specifies.</summary>
      <remarks>If the <c>Step.PassAction</c> property is PostAction_GotoStep, the target is the name of the step. If the <c>Step.PassAction</c> property is PostAction_CallCallback, the target is the name of the callback sequence. For all other types of post actions, the target property is not used.
This value is an expression. You can set the value with the name of the property that stores the name of the target or with a string constant (the name of the target in quotation marks).</remarks>
      <seealso cref="PostActionValues" />
      <seealso cref="Step.PassAction" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.FailActionTargetByExpr">
      <summary>Specifies the target for the post action that the Step.FailAction property specifies.</summary>
      <remarks>If the <c>Step.FailAction</c> property is PostAction_GotoStep, the target is the name of the step. If the <c>Step.FailAction</c> property is PostAction_CallCallback, the target is the name of the callback sequence. For all other types of post actions, the target property is not used.
This value is an expression. You can set the value with the name of the property that stores the name of the target or with a string constant (the name of the target in quotation marks).</remarks>
      <seealso cref="PostActionValues" />
      <seealso cref="Step.FailAction" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.CustomTrueActionTargetByExpr">
      <summary>Specifies the target for the post action the Step.CustomTrueAction property specifies.</summary>
      <remarks><para><para>&#160;&#160;&#160;&#160;* If the <c>Step.CustomTrueAction</c> property is PostAction_GotoStep, the target is the name of the step or the ID of the step. If you specify the target by name, the target step must reside in the same step group. If you specify the target by ID, the target step can reside in any step group in the sequence.</para><para>&#160;&#160;&#160;&#160;* If the <c>Step.CustomTrueAction</c> is PostAction_CallCallback, the target is the name of the callback sequence.</para><para>&#160;&#160;&#160;&#160;* For all other types of post actions, the target property is not used.</para></para>
This value is an expression. You can set the value with the name of the property that stores the name of the target or with a string constant. A string constant is the name of the target enclosed in double quotation marks.</remarks>
      <seealso cref="PostActionValues" />
      <seealso cref="Step.CustomActionExpression" />
      <seealso cref="Step.CustomFalseAction" />
      <seealso cref="Step.CustomFalseActionTargetByExpr" />
      <seealso cref="Step.CustomTrueAction" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.CustomFalseActionTargetByExpr">
      <summary>Specifies the target for the post action the Step.CustomFalseAction property specifies.</summary>
      <remarks><para><para>&#160;&#160;&#160;&#160;* If the <c>Step.CustomFalseAction</c> property is PostAction_GotoStep, the target is the name of the step or the ID of the step. If you specify the target by name, the target step must reside in the same step group. If you specify the target by ID, the target step can reside in any step group in the sequence.</para><para>&#160;&#160;&#160;&#160;* If the <c>Step.CustomFalseAction</c> property is PostAction_CallCallback, the target is the name of the callback sequence.</para><para>&#160;&#160;&#160;&#160;* For all other types of post actions, the target property is not used.</para></para>
This value is an expression. You can set the value with the name of the property that stores the name of the target or with a string constant. A string constant is the name of the target enclosed in double quotation marks.</remarks>
      <seealso cref="PostActionValues" />
      <seealso cref="Step.CustomActionExpression" />
      <seealso cref="Step.CustomFalseAction" />
      <seealso cref="Step.CustomTrueAction" />
      <seealso cref="Step.CustomTrueActionTargetByExpr" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Step.LoadModule(System.Int32,System.Object)">
      <summary>Loads the code module for the step.</summary>
      <returns>Returns <c>True</c> on success or <c>False</c> if the module fails to load.</returns>
      <param name="loadOptions">Specifies one or more LoadModuleOptions using the bitwise-OR operator to modify the behavior of this method.</param>
      <param name="sequenceContextParam">If passing the LoadModule_EvaluateExpressions flag to the loadOptions parameter, pass a SequenceContext object for this parameter to use when evaluating the expressions. Also, if you are calling this method from a step in an execution, pass the sequence context of the execution.</param>
      <seealso cref="LoadModuleOptions" />
      <seealso cref="&quot;Omitting Optional Parameters&quot;javascript:APILink('/InfoTopics/Optional_Parameters.htm')" />
      <seealso cref="SequenceContext" />
      <seealso cref="Step.UnloadModule" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.StepGroup">
      <summary>Returns the step group in which the step currently resides.</summary>
      <remarks>If the step is not currently inserted in a sequence, accessing this property returns an error.</remarks>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.StepIndex">
      <summary>Returns the zero-based index that indicates where in the step group the step resides.</summary>
      <remarks>If the step is not currently inserted in a sequence, accessing this property returns an error.</remarks>
      <seealso cref="Step.Sequence" />
      <seealso cref="Step.StepGroup" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Step.SetRunModeEx(System.String,System.Object)">
      <summary>Sets the run mode of a step.</summary>
      <remarks>You can set the run mode either for the sequence file or for a particular execution. If you pass an Execution object for the executionParam parameter, the run mode change applies only to that execution and is lost when the execution is destroyed. If you do not pass an Execution object, the run mode change effects all current and future executions and is saved when you save the sequence file.</remarks>
      <param name="newRunMode">The RunModes constants define the valid values for this parameter.</param>
      <param name="executionParam">If you want to set the run mode for a particular execution only, pass a reference to an Execution object.</param>
      <seealso cref="&quot;Omitting Optional Parameters&quot;javascript:APILink('/InfoTopics/Optional_Parameters.htm')" />
      <seealso cref="RunModes" />
      <seealso cref="Step.GetRunModeEx" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Step.GetRunModeEx(System.Object)">
      <summary>Obtains the run mode of a step.</summary>
      <remarks>You can get the run mode for either the sequence file or for a particular execution. If you pass an Execution object for the executionParam parameter, the run mode the method returns is the one that you set for that execution. If no execution-specific run mode exists or if you do not pass an Execution object, this method returns the run mode of the sequence file.</remarks>
      <returns>Returns a run mode string. The RunModes constants define the valid return values for this method.</returns>
      <param name="executionParam">Specifies a reference to an Execution object if you want to obtain the run mode that applies to a particular execution.</param>
      <seealso cref="&quot;Omitting Optional Parameters&quot;javascript:APILink('/InfoTopics/Optional_Parameters.htm')" />
      <seealso cref="RunModes" />
      <seealso cref="Step.SetRunModeEx" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Step.GetBreakOnStepEx(System.Object)">
      <summary><para>Note: This method is obsolete. Use the Step.GetBreakSettings method instead.</para></summary>
      <remarks>Determines if a breakpoint is set on the step.</remarks>
      <returns>Returns <c>True</c> if a breakpoint is set on the step.</returns>
      <param name="executionParam">Specifies a reference to an Execution object to obtain the breakpoint settings on a step, which apply to a particular execution. If there is no execution-specific breakpoint setting or if you do not pass an Execution object, the method returns the breakpoint setting on the step of the sequence file.</param>
      <seealso cref="&quot;Omitting Optional Parameters&quot;javascript:APILink('/InfoTopics/Optional_Parameters.htm')" />
      <seealso cref="Step.GetBreakSettings" />
      <seealso cref="Step.SetBreakSettings" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Step.SetBreakOnStepEx(System.Boolean,System.Object)">
      <summary><para>Note: This method is obsolete. Use the Step.SetBreakSettings method instead.</para></summary>
      <remarks>Sets or unsets a breakpoint on the step.</remarks>
      <param name="newBreakSetting">Pass <c>True</c> to set a breakpoint on the step or <c>False</c> to unset a breakpoint.</param>
      <param name="executionParam">Specifies a reference to an Execution object to obtain the breakpoint settings on a step, which apply to a particular execution. If there is no execution-specific breakpoint setting or if you do not pass an Execution object, the method sets the breakpoint setting on the step of the sequence file.</param>
      <seealso cref="&quot;Omitting Optional Parameters&quot;javascript:APILink('/InfoTopics/Optional_Parameters.htm')" />
      <seealso cref="Step.GetBreakSettings" />
      <seealso cref="Step.SetBreakSettings" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.CancelCurrentExecution">
      <summary>When this property is <c>True</c>, TestStand does not evaluate the pre-expression and does not call the Pre-Step substeps, step module, subsequent Post-Step substeps, or the Post-Step callbacks for the step, nor does it evaluate the post expression or status expression.</summary>
      <remarks>This property is reset to <c>False</c> after TestStand uses it so that the step runs normally the next time it executes. The property is also reset to <c>False</c> before the start of the next iteration when performing step looping. You can set this property from the Pre-Step Engine callbacks, the step pre- or post-expression, or the Pre- or Post-Step substep of a step type. By setting this property to <c>True</c>, you can use this property to impose additional conditions that a step must meet before it can execute.

Setting this property to <c>True</c> in an <c>OnNewStep</c> substep for the inserted step instructs TestStand to cancel the insertion of the step.</remarks>
      <seealso cref="Step.CancelCurrentModuleExecution" />
      <seealso cref="Step.CancelStepCallback" />
      <seealso cref="&quot;Using Substeps&quot;javascript:TSFundLink('/InfoTopics/Step_Type_Prop_Substeps.html')" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.EvalPrecondForInteractiveExecution">
      <summary>Specifies if TestStand evaluates the step precondition when you run the step interactively.</summary>
      <seealso cref="&quot;Execution tab&quot;javascript:RefLink('/InfoTopics/DB_Station_Opt_Exe_Tab.htm')" />
      <seealso cref="&quot;Station Options dialog box&quot;javascript:RefLink('/InfoTopics/DB_Station_Opt.htm')" />
      <seealso cref="Step.Precondition" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.IgnoreRTE">
      <summary>Prevents the step from reporting a run-time error to the sequence.</summary>
      <remarks>When a step causes a run-time error, the step stops executing and TestStand sets the status of the step to <c>Error</c>. 
If you set this property to <c>False</c>, TestStand also sets the internal status of the sequence to <c>Error</c> and the execution branches to the Cleanup step group for the sequence.
If you set this property to <c>True</c>, TestStand does not set the internal status of the sequence to <c>Error</c>. Instead, TestStand resets the <c>Error.Occurred</c> property of the step to <c>False</c> and execution continues normally with the next step. The value of the <c>Result.Status</c> property remains as <c>Error</c> for the step.</remarks>
      <seealso cref="RunModes" />
      <seealso cref="StationOptions.RTEOption" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.WindowActivation">
      <summary>Determines if the TestStand application activates its window when the step completes.</summary>
      <seealso cref="Engine.AppMainHwnd" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.RecordLoopIterationResults">
      <summary>Specifies whether to add the step results to the sequence results list after each loop iteration.</summary>
      <remarks>TestStand also adds the final result it computes for the step loop as a whole if you enable the Step.ResultRecordingOption property for the step.</remarks>
      <seealso cref="Step.LoopIncExpression" />
      <seealso cref="Step.LoopInitExpression" />
      <seealso cref="Step.LoopStatusExpression" />
      <seealso cref="Step.LoopType" />
      <seealso cref="Step.ResultRecordingOption" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.UseMutex">
      <summary>Specifies that the step acquires a lock before it executes and releases the lock after it completes.</summary>
      <remarks>Use the Step.MutexNameOrRefExpr property to specify which lock the step uses.</remarks>
      <seealso cref="Step.BatchSyncOption" />
      <seealso cref="Step.MutexNameOrRefExpr" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.MutexNameOrRefExpr">
      <summary>Specifies which lock the step acquires and releases. This property is ignored if the Step.UseMutex property is <c>False</c>.</summary>
      <remarks>Enter a string expression to specify the name of an existing lock. You can also enter an expression that evaluates an ActiveX reference to an existing Lock object.
Pass an empty string to specify that TestStand uses a lock unique to the step.</remarks>
      <seealso cref="Step.BatchSyncOption" />
      <seealso cref="Step.UseMutex" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.BatchSyncOption">
      <summary>Specifies the Batch Synchronization operation that the step enters before it executes and exits after it completes.</summary>
      <seealso cref="Step.MutexNameOrRefExpr" />
      <seealso cref="Step.UseMutex" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Step.SetBreakSettings(System.Boolean,System.Boolean,System.Int32,System.String,System.Object)">
      <summary>Specifies if the step of the sequence is set to break.</summary>
      <param name="isSet">Specifies if the breakpoint is set.</param>
      <param name="enabled">Specifies if the breakpoint is enabled. TestStand ignores disabled breakpoints during execution.</param>
      <param name="passCount">Specifies the number of iterations the execution skips the breakpoint before suspending execution. Pass <c>0</c> if you do not want to use a conditional pass count.</param>
      <param name="Condition">Specifies the expression that must evaluate to <c>True</c> before suspending the execution. An empty value defaults to <c>True</c>. If you specify a non-zero pass count value and a condition expression for the breakpoint, the pass count only decrements when the expression evaluates to <c>True</c>.</param>
      <param name="executionParam">Specifies a reference to an Execution object to update the breakpoint settings on a step, which apply to a particular execution. If there is no execution-specific breakpoint setting or if you do not pass an Execution object, the method sets the breakpoint setting on the step of the sequence file.</param>
      <seealso cref="&quot;Omitting Optional Parameters&quot;javascript:APILink('/InfoTopics/Optional_Parameters.htm')" />
      <seealso cref="Sequence.GetBreakOnEndSettings" />
      <seealso cref="Sequence.SetBreakOnEndSettings" />
      <seealso cref="Step.GetBreakSettings" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Step.GetBreakSettings(System.Boolean@,System.Boolean@,System.Int32@,System.String@,System.Object)">
      <summary>Returns a value that indicates whether the step of a sequence is set to break.</summary>
      <param name="isSet">Returns a value that indicates whether the breakpoint is set.</param>
      <param name="enabled">Returns a value that indicates whether the breakpoint is enabled. TestStand ignores disabled breakpoints during execution.</param>
      <param name="passCount">Returns the number of times the execution must evaluate the condition expression before suspending the execution. Pass <c>0</c> if you do not want to use a conditional pass count.</param>
      <param name="Condition">Returns the expression that must evaluate to <c>True</c> before suspending the execution. An empty value defaults to <c>True</c>. If you specify a non-zero pass count value and a condition expression for the breakpoint, the pass count only decrements when the expression evaluates to <c>True</c>.</param>
      <param name="executionParam">Specifies a reference to an Execution object to obtain the breakpoint settings on a step, which apply to a particular execution. If there is no execution-specific breakpoint setting or if you do not pass an Execution object, the method returns the breakpoint setting on the step of the sequence file.</param>
      <seealso cref="&quot;Omitting Optional Parameters&quot;javascript:APILink('/InfoTopics/Optional_Parameters.htm')" />
      <seealso cref="Sequence.GetBreakOnEndSettings" />
      <seealso cref="Sequence.SetBreakOnEndSettings" />
      <seealso cref="Step.SetBreakSettings" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Step.ChangeAdapter(System.String)">
      <summary>Changes the adapter a step uses. ChangeAdapter replaces the module of the step with a new module associated with the specified adapter.</summary>
      <remarks>Returns an error if the step does not allow you to change the adapter. To avoid this error, call this method only if the Step.CanChangeAdapter method returns <c>True</c>.</remarks>
      <param name="adapterName">Specifies the adapter key name of the new adapter for the step. If the step does not specify a module adapter, pass an empty string.</param>
      <seealso cref="AdapterKeyNames" />
      <seealso cref="Step.CanChangeAdapter" />
      <seealso cref="Step.ChangeStepType" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Step.ChangeStepType(NationalInstruments.TestStand.Interop.API.StepType)">
      <summary>Changes the step type of a step. </summary>
      <remarks>Returns an error if the step does not allow changing the step type. To avoid this error, call this method only if the Step.CanChangeStepType method returns <c>True</c>.
To acquire a step type to pass as a parameter, call Engine.GetTypeDefinition and pass the name of the desired step type, then query the returned PropertyObject for the StepType interface.</remarks>
      <param name="stepTypePtr">Specifies the step type to which you want to convert the step.</param>
      <seealso cref="Engine.GetTypeDefinition" />
      <seealso cref="Step.CanChangeStepType" />
      <seealso cref="Step.ChangeAdapter" />
      <seealso cref="Step.StepType" />
      <seealso cref="StepType" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Step.CanChangeAdapter(System.String)">
      <summary>Returns a value that indicates whether the step allows changing the adapter.</summary>
      <remarks>Call CanChangeAdapter before calling the Step.ChangeAdapter method to ensure that no errors occur.</remarks>
      <returns>Returns <c>True</c> if the step allows changing to the specified adapter. Otherwise, returns <c>False</c>.</returns>
      <param name="adapterName">Specifies an adapter key name that determines whether the step allows changing to that specific adapter. Pass the default value of the empty string to check if the step allows changing to any adapter.</param>
      <seealso cref="AdapterKeyNames" />
      <seealso cref="Step.CanChangeStepType" />
      <seealso cref="Step.ChangeAdapter" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Step.CanChangeStepType(NationalInstruments.TestStand.Interop.API.StepType)">
      <summary>Returns a value that indicates whether the step allows changing the step type.</summary>
      <remarks>Call this method before calling the Step.ChangeStepType method to ensure that an error does not occur.</remarks>
      <returns>Returns <c>True</c> if the step allows changing to the specified step type. Otherwise, returns <c>False</c>.</returns>
      <param name="stepTypePtr">Specifies a step type that checks if the step allows changing to that specific step type. Pass the default value of <c>NULL</c> to check if the step allows changing to any step type.</param>
      <seealso cref="Step.CanChangeAdapter" />
      <seealso cref="Step.ChangeStepType" />
      <seealso cref="StepType" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Step.CreateNewUniqueStepId">
      <summary>Replaces the unique step ID with a new unique step ID.</summary>
      <seealso cref="Step.UniqueStepId" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.UniqueStepId">
      <summary>Returns an identification string unique among all steps TestStand has created or will create.
<para>Note: Sequence editors you create with TestStand assign new unique IDs to steps that you duplicate in the editor. However, the value of <c>Step.UniqueStepId</c> is not unique if you duplicate a step using the TestStand API or if you copy a sequence file using the file system. It is incorrect programming practice to create a non-unique UniqueStepId using the API. Call Step.CreateNewUniqueStepId to ensure that a programmatically duplicated step has a unique ID. At run time, you can guard against mistakenly matching steps from duplicated files by <c>Step.UniqueStepId</c>. To do so, append the string representation of the value of <c>Step.Sequence.SequenceFile.Id</c> to the <c>Step.UniqueStepId</c> value before comparing it.</para></summary>
      <remarks>An example of a UniqueStepId is <c>ID#:aXPIZYIPFEWM/Jsuxx0FAD</c>.</remarks>
      <seealso cref="Step.CreateNewUniqueStepId" />
      <seealso cref="Step.Name" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.CausedSequenceFailure">
      <summary>Specifies if this step caused the sequence to fail.</summary>
      <seealso cref="Sequence.FailureAction" />
      <seealso cref="Step.StepFailCausesSequenceFail" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.Sequence">
      <summary>Returns a reference to the sequence in which the step resides.</summary>
      <remarks>Returns a <c>NULL</c> reference if the step is not currently inserted into a sequence. This property returns the run-time copy of a sequence if called on the run-time copy of a step.</remarks>
      <seealso cref="Sequence" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Step.GetResultStatusDisplayString">
      <summary>Returns a localized string description of the step result.</summary>
      <seealso cref="Step.ResultStatus" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Step.GetExecutionFlowString(System.Int32,System.Object)">
      <summary><para>Note: This method is obsolete. Use the Step.GetStepSettingsString method instead.</para></summary>
      <remarks>Returns a string description of the execution flow settings for this step.
Execution flow settings include preconditions, post actions, loop settings, and run mode. This string can change whenever you modify any of the step settings.</remarks>
      <param name="options">Specifies a StepDescriptionOptions constant. Use the bitwise-OR operator to specify multiple StepDescriptionOptions constants.</param>
      <param name="executionParam">Specifies a reference to an Execution object if you want to obtain the run mode that applies to a particular execution. If there is no execution-specific run mode for the step or if you do not pass an Execution object, the method returns the run mode setting of the sequence file.</param>
      <seealso cref="&quot;Omitting Optional Parameters&quot;javascript:APILink('/InfoTopics/Optional_Parameters.htm')" />
      <seealso cref="Step.GetDescriptionEx" />
      <seealso cref="Step.GetStepSettingsString" />
      <seealso cref="Step.Name" />
      <seealso cref="StepDescriptionOptions" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.CanCreateCode">
      <summary>Returns a value that indicates whether the step supports the Step.CreateCode method. This property returns <c>False</c> if the Module.CanCreateCode property is <c>False</c>, or if the <c>Step.TS.CanCreateCode</c> PropertyObject is <c>False</c>, or if the step has a step type and Edit Code is enabled on the Disable Properties tab of the Step Type Properties dialog box for the step type.</summary>
      <seealso cref="&quot;Disable Properties tab&quot;javascript:RefLink('/InfoTopics/DB_Step_Type_Prop_DisableProp_Tab.htm')" />
      <seealso cref="Module.CanCreateCode" />
      <seealso cref="&quot;Step Type Properties dialog box&quot;javascript:RefLink('/InfoTopics/DB_Step_Type_Prop.htm')" />
      <seealso cref="Step.CanEditCode" />
      <seealso cref="Step.CanSpecifyModule" />
      <seealso cref="Step.CreateCode" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Step.CreateCode">
      <summary>Creates a code module for this step.</summary>
      <remarks>The contents of the code module depend on the adapter used to create this step, the module settings for this step, and the code templates configured for the step type.
For adapters that use Microsoft Visual Studio, calling this method can result in prompts to the user if any of the following conditions exist:
<para><para>&#160;&#160;&#160;&#160;* Multiple versions of Visual Studio exist on the computer and you select the Always Prompt for Version option from the Version of Visual Studio to Use for Create and Edit Code ring control in the Adapter Configuration dialog box.</para><para>&#160;&#160;&#160;&#160;* Multiple versions of Visual Studio exist on the computer and you select the Use the Version that Matches the Project File option from the Version of Visual Studio to Use for Create and Edit Code ring control in the Adapter Configuration dialog box, and TestStand cannot match the version of the file.</para><para>&#160;&#160;&#160;&#160;* A method already exists with the same name.</para><para>&#160;&#160;&#160;&#160;* The specified solution does not contain the specified project.</para><para>&#160;&#160;&#160;&#160;* The specified project does not contain the specified source file.</para></para>
<para>Note: Some adapters do not support this method. Use the Step.CanCreateCode method to determine whether the step can create code with this method.</para></remarks>
      <returns>Indicates if the step was modified.</returns>
      <seealso cref="&quot;Adapter Configuration dialog box&quot;javascript:RefLink('/InfoTopics/DB_AdapterConfig.htm')" />
      <seealso cref="Step.CanCreateCode" />
      <seealso cref="Step.EditCode" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.CanEditCode">
      <summary>Returns a value that indicates whether this step supports the Step.EditCode method. This property returns <c>False</c> if the Module.CanEditCode property is <c>False</c>, if the <c>Step.TS.CanEditCode</c> PropertyObject is <c>False</c>, or if the step has a step type and Edit Code is enabled on the Disable Properties tab of the Step Type Properties dialog box for the step type.</summary>
      <seealso cref="&quot;Disable Properties tab&quot;javascript:RefLink('/InfoTopics/DB_Step_Type_Prop_DisableProp_Tab.htm')" />
      <seealso cref="Module.CanEditCode" />
      <seealso cref="Step.CanCreateCode" />
      <seealso cref="Step.CanSpecifyModule" />
      <seealso cref="Step.EditCode" />
      <seealso cref="&quot;Step Type Properties dialog box&quot;javascript:RefLink('/InfoTopics/DB_Step_Type_Prop.htm')" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Step.EditCode">
      <summary>Launches an external application to edit the code module associated with this step.</summary>
      <remarks>A different application is launched for each adapter. For example, the <c>EditCode</c> method launches LabVIEW for steps created with the LabVIEW Adapter.
For adapters that use Microsoft Visual Studio, calling this method can result in prompts to the user if any of the following conditions exist:
<para><para>&#160;&#160;&#160;&#160;* Multiple versions of Visual Studio exist on the computer and you select the Always Prompt for Version option from the Version of Visual Studio to Use for Create and Edit Code ring control in the Adapter Configuration dialog box.</para><para>&#160;&#160;&#160;&#160;* Multiple versions of Visual Studio exist on the computer and you select the Use the Version that Matches the Project File option from the Version of Visual Studio to Use for Create and Edit Code ring control in the Adapter Configuration dialog box, and TestStand cannot match the version of the file.</para><para>&#160;&#160;&#160;&#160;* The specified solution does not contain the specified project.</para><para>&#160;&#160;&#160;&#160;* The specified project does not contain the specified source file.</para></para></remarks>
      <returns>Indicates if the step was modified.</returns>
      <seealso cref="&quot;Adapter Configuration dialog box&quot;javascript:RefLink('/InfoTopics/DB_AdapterConfig.htm')" />
      <seealso cref="Step.CanEditCode" />
      <seealso cref="Step.CreateCode" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Step.UnloadModule">
      <summary>Unloads the code module for the step.</summary>
      <remarks>The module is not unloaded if the step is currently executing.</remarks>
      <returns>Indicates if the module was successfully unloaded.</returns>
      <seealso cref=".LoadModule" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.StepType">
      <summary>Returns the step type for this step.</summary>
      <seealso cref="StepType" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Step.GetDescriptionEx(System.Int32)">
      <summary>Returns a description string for the step.</summary>
      <remarks>This string can change whenever you modify any of the step settings.</remarks>
      <param name="options">Specifies one or more StepDescriptionOptions constants. Use the bitwise-OR operator to specify multiple sequence file flags.</param>
      <seealso cref="StepDescriptionOptions" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.Module">
      <summary>Returns a reference to the Module object related to the current step.</summary>
      <remarks>You must acquire the module interface for the specific adapter from the object this property returns to specify the code module name, location, and parameters for the Module object.</remarks>
      <seealso cref="&quot;Module&quot;Module.htm" />
      <seealso cref="&quot;Module.Adapter&quot;Module_Adapter_P.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Step.CanExecuteSubstep(System.Int32,System.Object)">
      <summary>Returns a value that indicates whether you can execute the specified substep.</summary>
      <remarks>Call this method before calling the Step.ExecuteSubstep method.</remarks>
      <param name="substepIndex">Specifies the zero-based index of the substep.</param>
      <param name="sequenceContextParam">If you call this method from a step, you must pass a SequenceContext. For executing substeps from a user interface, do not pass any value for this parameter.</param>
      <seealso cref="&quot;Omitting Optional Parameters&quot;javascript:APILink('/InfoTopics/Optional_Parameters.htm')" />
      <seealso cref="SequenceContext" />
      <seealso cref="Step.ExecuteSubstep" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Step.ExecuteSubstep(System.Int32,System.Object)">
      <summary>Executes a step type substep.</summary>
      <remarks>Call this method to execute a substep from the step type of the specified step. Examine the step type to determine the substeps it provides. This method can execute any type of substep including Pre, Post, Edit, or Custom substeps.
Use the PropertyObject.GetArrayOffset method to obtain the index from the name of a substep. For example: <c>RunState.PreviousStep.ExecuteSubstep&#40;RunState.Engine.GetTypeDefinition&#40;&#34;MessagePopup&#34;&#41;.GetArrayOffset&#40;&#34;Substeps&#34;, 0, &#34;&#91;&#92;&#34;Post&#92;&#34;&#93;&#34;&#41;&#41;</c></remarks>
      <returns>Returns <c>True</c> if the substep indicates that it modified the step by incrementing  the sequence file change count. Typically, only Edit substeps increment the sequence file change count.</returns>
      <param name="substepIndex">Specifies the zero-based index of the substep. Use the <c>PropertyObject.GetArrayOffset</c> method to obtain the index from the name of a substep.</param>
      <param name="sequenceContextParam">Typically, you pass the current sequence context when you call this method from within a thread of an execution. If you do not pass any value for this parameter, TestStand approximates the sequence context as if you are running the step in a sequence. When executing substeps from a user interface, do not pass any value for this parameter.</param>
      <seealso cref="&quot;Omitting Optional Parameters&quot;javascript:APILink('/InfoTopics/Optional_Parameters.htm')" />
      <seealso cref="PropertyObject.GetArrayOffset" />
      <seealso cref="SequenceContext" />
      <seealso cref="SequenceFile.ChangeCount" />
      <seealso cref="Step.StepType" />
      <seealso cref="StepType.GetSubstep" />
      <seealso cref="StepType.NumSubsteps" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.CancelStepCallback">
      <summary>Specifies that TestStand does not call any further Engine callbacks for the same event.</summary>
      <remarks>In an Engine callback sequence, set this property on the step that triggers the callback to specify that TestStand does not call any further Engine callbacks for the same triggering event. For example, a SequenceFilePostStepRuntimeError callback that completely handles a run-time error might set this property to prevent TestStand from also executing a ProcessModelPostStepRuntimeError callback for the same step error.</remarks>
      <seealso cref="CallbackTypes" />
      <seealso cref="Step.CancelCurrentExecution" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.LastStepResult">
      <summary>Specifies the PropertyObject object that holds the result of the current or most recent step execution.</summary>
      <remarks>You can set this property to <c>NULL</c> (Nothing) in a step or substep module to remove the step result from the result list. If you set this property to a value other than <c>NULL</c> or if you set the property when the step is not executing, the result list does not change.
This property does not return loop iteration results.</remarks>
      <seealso cref="PropertyObject" />
      <seealso cref="Step.CurrentLoopResult" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.CurrentLoopResult">
      <summary>Specifies the PropertyObject object that holds the result for the loop iteration the step is running.</summary>
      <remarks>You can set this property to <c>NULL</c> (Nothing) in a step or substep module to remove the step iteration result from the result list. If you set this property to a value other than <c>NULL</c> or if you set the property when the step is not executing, the result list does not change.
Returns a <c>NULL</c> reference if the step is not looping.</remarks>
      <seealso cref="PropertyObject" />
      <seealso cref="Step.LastStepResult" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Step.GetEditSubstepMenuStructure">
      <summary>Returns the menu structure for the Edit substeps associated with the step type of the step.</summary>
      <remarks>A step type can have more than one Edit substep associated with it. This function returns an object that describes the menu used to select an Edit substep to execute.</remarks>
      <returns>The object that specifies the menu structure. See MenuItemProperties for a description of this property object. </returns>
      <seealso cref="MenuItemProperties" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.EditAsReadOnly">
      <summary>Specifies if dialog boxes that edit the step launch in read-only mode. Implement code for such dialog boxes to obtain the value of this property and launch the Edit dialog box in read-only mode if it returns <c>True</c>. The sequence editor sets this property if the file that contains the step is read-only, if the user does not have sufficient privileges to edit the step, or if executions are currently running.</summary>
      <remarks>When implementing an Edit substep for a step type, this property works in conjunction with the Supports Edit As Read-Only option for the Edit substep in the 
Step Type Properties dialog box. The sequence editor does not call the Edit substep for a read-only step unless Supports Edit As Read-Only is <c>True</c> for the Edit substep. If you do not want to handle launching the dialog box in read-only mode, leave Supports Edit As Read-Only set to <c>False</c>.</remarks>
      <seealso cref="&quot;Step Type Properties dialog box&quot;javascript:RefLink('/InfoTopics/DB_Step_Type_Prop.htm')" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.BlockLevel">
      <summary>Specifies the number of blocks that enclose the step. Specifies <c>0</c> for top-level steps.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.BlockLevelsUnmatched">
      <summary>Specifies the number of unterminated blocks that enclose the step.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.BlockFlags">
      <summary>Specifies flags that indicate how the step affects the block structure of the sequence.</summary>
      <seealso cref="BlockFlags" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.BlockEndIndex">
      <summary>Returns the index of the step that closes the block this step opens.  Returns <c>-1</c> if this step does not open a matched block.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.BlockStartIndex">
      <summary>Specifies the index of the step that opens the block this step closes. Specifies <c>-1</c> if this step does not close a matched block.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.BlockPreviousIndex">
      <summary>Specifies the index of the nearest previous step that starts a block, regardless of the level of the preceding block. Specifies <c>-1</c> if this step does not also start a block or if no previous block exists.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.BlockNextIndex">
      <summary>Specifies the index of the nearest following step that starts a block, regardless of the level of the next block. Specifies <c>-1</c> if this step does not start a block or if no subsequent block exists.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.BlockParentIndex">
      <summary>Specifies the index of the step that starts the enclosing block. Specifies <c>-1</c> if this step does not reside in an enclosing block.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.Requirements">
      <summary>Returns the Requirements property for the step. The Links subproperty of the Requirements property is an array of string values that represents the product and unit requirements the step covers.</summary>
      <remarks>You can use the following pseudocode to add a new element to the list of requirements:
<para><code>PropertyObject links = step.Requirements.GetPropertyObject(&quot;Links&quot;, 0);</code></para><para><code>int nextAvailableIndex = links.GetNumElements();</code></para><para><code>links.SetValStringByOffset(nextAvailableIndex, PropertyOptions.PropOption_InsertElement, &quot;REQ_ABC&quot;);</code></para></remarks>
      <seealso cref="PropertyObject" />
      <seealso cref="PropertyObjectFile.Requirements" />
      <seealso cref="Sequence.Requirements" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Step.GetStepSettingsString(System.Int32,NationalInstruments.TestStand.Interop.API.Execution)">
      <summary>Returns a string description of the step settings.</summary>
      <remarks>The string description includes information about settings such as synchronization, switching, run mode, looping, post actions, preconditions, pre/post/status expressions, module specification, breakpoint options, window activation, result recording, module loading and unloading, ignoring of run-time errors and termination, subsequence tracing, and whether a step failure causes a sequence failure. This property returns a string that can change whenever you modify any of the step settings.</remarks>
      <param name="options">Specifies a StepDescriptionOptions constant. Use the bitwise-OR operator to specify multiple <c>StepDescriptionOptions</c> constants.</param>
      <param name="executionParam">Specifies a reference to an Execution object to retrieve execution specific settings for a running instance of the step.</param>
      <seealso cref="Execution" />
      <seealso cref="StepDescriptionOptions" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.SwitchExecEnabled">
      <summary>Specifies whether to perform a switching operation for the step. The step performs the switching operation the Step.SwitchExecOperation property specifies for the virtual device the Step.SwitchExecVirtualDevice property specifies.
<para>Note: This feature is available only when you install NI Switch Executive software.</para></summary>
      <seealso cref="Step.SwitchExecOperation" />
      <seealso cref="Step.SwitchExecVirtualDevice" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.SwitchExecVirtualDevice">
      <summary>Specifies an expression TestStand evaluates at run time to determine the virtual device name on which to perform the switching operation.</summary>
      <remarks><para>Note: NI Switch Executive software in Measurement &amp; Automation Explorer defines the virtual device name.</para></remarks>
      <seealso cref="Step.SwitchExecEnabled" />
      <seealso cref="Step.SwitchExecOperation" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.SwitchExecOperation">
      <summary>Specifies whether to connect or disconnect the routes the <c>Step.SwitchExecRoutesToConnect</c> and <c>Step.SwitchExecRoutesToDisconnect</c> properties specify, or disconnect all previously connected routes for a virtual device.
<para>Note: This operation returns as soon as the instrument is ready for another operation, which might be before or after the switches involved settle. Enable the Step.SwitchExecWaitForDebounce property if you want to wait until all switches have debounced.</para></summary>
      <seealso cref="Step.SwitchExecOperationOrder" />
      <seealso cref="Step.SwitchExecRoutesToConnect" />
      <seealso cref="Step.SwitchExecRoutesToDisconnect" />
      <seealso cref="Step.SwitchExecVirtualDevice" />
      <seealso cref="Step.SwitchExecWaitForDebounce" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.SwitchExecRoutesToConnect">
      <summary>Specifies an expression TestStand evaluates at run time to determine the routes to connect when the value of the Step.SwitchExecOperation property is Connect or ConnectDisconnect.
<para>Note: The expression must be a valid route specification string the NI Switch Executive configuration defines for the virtual device name the  Step.SwitchExecVirtualDevice property specifies. The string can be a combination of route group alias names, route names, and physical route paths. You can use the SwitchFindRoute expression function to dynamically determine a physical route path at run time.</para></summary>
      <seealso cref="&quot;Route Specification String&quot;javascript:RefLink('/InfoTopics/Route_Spec_String.htm')" />
      <seealso cref="Step.SwitchExecOperation" />
      <seealso cref="Step.SwitchExecVirtualDevice" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.SwitchExecRoutesToDisconnect">
      <summary>Specifies an expression TestStand evaluates at run time to determine the routes to disconnect when the value of the Step.SwitchExecOperation property is Disconnect or ConnectDisconnect.
<para>Note: The expression must be a valid route specification string the NI Switch Executive configuration defines for the virtual device name the Step.SwitchExecVirtualDevice property specifies. The string can be a combination of route group alias names, route names, and physical route paths. You can use the SwitchFindRoute expression function to dynamically determine a physical route path at run time.</para></summary>
      <seealso cref="&quot;Route Specification String&quot;javascript:RefLink('/InfoTopics/Route_Spec_String.htm')" />
      <seealso cref="Step.SwitchExecOperation" />
      <seealso cref="Step.SwitchExecVirtualDevice" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.SwitchExecMulticonnectMode">
      <summary>Specifies the behavior when more than one connection operation occurs on a specific route.
<para>Note: If the value of this property is Multiconnect, a route can exist longer if another step specifies a lifetime for the same route.</para></summary>
      <seealso cref="Step.SwitchExecOperation" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.SwitchExecOperationOrder">
      <summary>Specifies whether the Disconnect operation occurs before or after the Connect operation when the value of the Step.SwitchExecOperation property is <c>ConnectDisconnect</c>.</summary>
      <seealso cref="Step.SwitchExecOperation" />
      <seealso cref="Step.SwitchExecVirtualDevice" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.SwitchExecConnectionLifetime">
      <summary>Specifies the lifetime that TestStand applies to routes when the value of the Step.SwitchExecOperation property is <c>Connect</c> or <c>ConnectDisconnect</c>. You can specify whether you want the route to exist until manually disconnected later or until the step, sequence, thread, or execution completes.
<para>Note: If the value of the Step.SwitchExecMulticonnectMode property is <c>Multiconnect</c>, a route can exist longer if another step specifies a lifetime for the same route. Selecting a lifetime other than <c>Manual</c> guarantees that the route stays connected as long as the step, sequence, thread, or execution in which you connect is executing. If you manually disconnect a previously connected route using a non-manual lifetime setting, TestStand releases the reference to the route for the last step that performed a connect action for the route.</para></summary>
      <seealso cref="Step.SwitchExecOperation" />
      <seealso cref="Step.SwitchExecMulticonnectMode" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.SwitchExecWaitForDebounce">
      <summary>Specifies if the operation the Step.SwitchExecOperation property specifies waits for all switches to debounce before returning to TestStand.
<para>Note: The wait for debounce occurs after both the Connect and Disconnect operations are complete.</para></summary>
      <seealso cref="Step.SwitchExecOperation" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Step.LogAdditionalResult(NationalInstruments.TestStand.Interop.API.PropertyObject,System.String,System.Int32)">
      <summary>If the step is currently executing, this method adds a custom additional result to the step results.</summary>
      <remarks>If the step is looping, this method adds a custom additional result to the Step.CurrentLoopResult. If the step is not looping, this method adds a custom additional result to Step.LastStepResult property.
This method returns an error if the step is not executing. This method performs no action if you disable result recording.
This method does not affect the additional result settings of the step that you programmatically configure using the Step.AdditionalResults property.</remarks>
      <param name="resultValue">Specifies the value of the additional result.</param>
      <param name="resultName">Specifies the name of the additional result. Pass an empty string to use the name of the object you passed for the resultValue parameter.</param>
      <param name="resultPropertyFlags">Specifies the PropertyFlags of the additional result. You must include the <c>PropFlags_IncludeInReport</c> flag for the additional result to appear in the report.</param>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.ResultRecordingOption">
      <summary>Specifies whether to record the result properties of the step.</summary>
      <remarks>For steps that loop, use the Step.RecordLoopIterationResults property to specify to add step results to the sequence result list after each loop iteration.</remarks>
      <seealso cref="Sequence.DisableResults" />
      <seealso cref="Step.RecordLoopIterationResults" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Step.CancelCurrentModuleExecution">
      <summary>When this property is <c>True</c>, TestStand does not call the code module for the step.</summary>
      <remarks>This property is reset to <c>False</c> after TestStand uses it so that the step runs normally the next time it executes. The property is also reset to <c>False</c> before the start of the next iteration when looping on a step. You can set this property from the Pre-Step Engine callbacks, the step pre-expression, or the Pre-Step substep of a step type. By setting this property to <c>True</c>, you can use this property to impose additional conditions that a step must meet before it can execute the code module.</remarks>
      <seealso cref="Step.CancelCurrentExecution" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.User">
      <summary>Objects of the User class represent the data and privileges TestStand associates with a TestStand user or user group. Call the Engine.GetUser or Engine.NewUser method to obtain a User object for a particular user or user group. Obtain the object for the currently logged-in user from the Engine.CurrentUser property.
You can obtain an array of users or user groups using the UsersFile.UserList and UsersFile.UserGroupList properties. Use the PropertyObject class methods to add or remove objects from the array to change the TestStand user or user group list.
You can use the PropertyObject class to access the subproperties of an object from the User class. Refer to User Data Type Subproperties for the default subproperties TestStand defines.</summary>
      <seealso cref="Engine.CurrentUser" />
      <seealso cref="Engine.GetUser" />
      <seealso cref="Engine.NewUser" />
      <seealso cref="UserPrivileges" />
      <seealso cref="UsersFile.UserGroupList" />
      <seealso cref="UsersFile.UserList" />
      <seealso cref="&quot;User Data Type Subproperties&quot;javascript:RefLink('/InfoTopics/UserManWin_User_Data_Type_Subproperties.htm')" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.User.ValidatePassword(System.String)">
      <summary>Returns <c>True</c> if the string you specify matches the user password.</summary>
      <param name="passwordString">Specifies the string to compare with the user password.</param>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.User.HasPrivilege(System.String)">
      <summary>Returns <c>True</c> if the user or any user group of which the user is a member has the privilege you specify by name.</summary>
      <param name="privilegeName">Specifies the name of the privilege to check. You can specify the name of any privilege property. You can specify the full privilege path in the UserPrivileges property view, such as <c>Debug.RunSelectedTests</c>, or you can specify the base privilege name, such as <c>RunSelectedTests</c>. If you specify only the base privilege name and more than one instance of the base privilege name exists, the method returns the value of the first base privilege it finds with that name.</param>
      <seealso cref="Engine.CurrentUserHasPrivilege" />
      <seealso cref="UserPrivileges" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.User.AsPropertyObject">
      <summary>Returns the underlying PropertyObject that represents the User object. Use the PropertyObject to modify, add, or remove custom properties of the object.</summary>
      <seealso cref="PropertyObject" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.User.LoginName">
      <summary>Specifies the login name of the user.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.User.Password">
      <summary>Specifies the password for the user.</summary>
      <remarks>When you set this property, TestStand scrambles the password before storing it internally. When you get this property, TestStand returns the scrambled password to you, to prevent users from programmatically accessing passwords without authorization.</remarks>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.User.FullName">
      <summary>Specifies the full name of the user.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.User.Privileges">
      <summary>Returns the PropertyObject that contains the privilege settings for the user.</summary>
      <remarks>Do not use this property to determine whether a user has certain privileges. Instead, use the User.HasPrivilege or Engine.CurrentUserHasPrivilege methods.</remarks>
      <seealso cref="Engine.CurrentUserHasPrivilege" />
      <seealso cref="PropertyObject" />
      <seealso cref="User.HasPrivilege" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.User.Members">
      <summary>Returns the underlying PropertyObject that represents the list of user names that are members of the group. This property applies only to user groups.</summary>
      <seealso cref="Engine.GetUserGroup" />
      <seealso cref="PropertyObject" />
      <seealso cref="UsersFile.UserGroupList" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.Adapter">
      <summary>Use Adapter objects to configure and obtain information about the module adapters.
Typically, you use this class only when you write a user interface application or sequence editor.
<para>Note: If you are considering writing a user interface application, National Instruments recommends using the TestStand User Interface (UI) Controls instead of writing the application using the TestStand Engine API.</para>
To obtain an Adapter object, call the Engine.GetAdapter method. Pass a zero-based index to specify the Adapter object for which you want to obtain a reference. To find out the number of available adapters, obtain the value of the Engine.NumAdapters property.</summary>
      <seealso cref="Engine.GetAdapter" />
      <seealso cref="Engine.NumAdapters" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Adapter.Configure">
      <summary>Launches the Adapter Configuration dialog box for the adapter.</summary>
      <remarks>When Adapter.IsConfigurable is <c>False</c>, calling this method has no effect.</remarks>
      <seealso cref="&quot;Adapter Configuration dialog box&quot;javascript:RefLink('/InfoTopics/DB_AdapterConfig.htm')" />
      <seealso cref="Adapter.IsConfigurable" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Adapter.AsPropertyObject">
      <summary>Returns the underlying PropertyObject that represents the adapter.</summary>
      <remarks>Use the PropertyObject to edit, add, or remove custom properties of the adapter.</remarks>
      <seealso cref="PropertyObject" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Adapter.IsConfigurable">
      <summary>Returns <c>True</c> if the adapter has an Adapter Configuration dialog box you can launch using the Adapter.Configure method.</summary>
      <seealso cref="&quot;Adapter Configuration dialog box&quot;javascript:RefLink('/InfoTopics/DB_AdapterConfig.htm')" />
      <seealso cref="Adapter.Configure" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Adapter.KeyName">
      <summary>Returns the name other TestStand API functions, such as the Engine.NewStep method, use to refer to the adapter.</summary>
      <seealso cref="Adapter.DisplayName" />
      <seealso cref="Engine.NewStep" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Adapter.DisplayName">
      <summary>Returns the name to display for the adapter.</summary>
      <seealso cref="Adapter.KeyName" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Adapter.SmallIcon">
      <summary>Returns a small icon that represents the adapter.</summary>
      <seealso cref="Adapter.IconName" />
      <seealso cref="Adapter.LargeIcon" />
      <seealso cref="Adapter.SmallIconIndex" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Adapter.LargeIcon">
      <summary>Returns a large icon that represents the adapter.</summary>
      <seealso cref="Adapter.IconName" />
      <seealso cref="Adapter.LargeIconIndex" />
      <seealso cref="Adapter.SmallIcon" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Adapter.SmallIconIndex">
      <summary>Returns a unique index for the small icon that represents the adapter. Use this index to retrieve the icon from the image list you obtain with the Engine.SmallImageListEx property.</summary>
      <seealso cref="Adapter.IconName" />
      <seealso cref="Adapter.LargeIconIndex" />
      <seealso cref="Adapter.SmallIcon" />
      <seealso cref="Engine.SmallImageListEx" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Adapter.LargeIconIndex">
      <summary>Returns a unique index for the large icon that represents the adapter. Use this index to retrieve the icon from the image list you obtain with the Engine.LargeImageListEx property.</summary>
      <seealso cref="Adapter.IconName" />
      <seealso cref="Adapter.LargeIcon" />
      <seealso cref="Adapter.SmallIconIndex" />
      <seealso cref="Engine.LargeImageListEx" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Adapter.IconName">
      <summary>Returns the icon filename for the adapter.</summary>
      <remarks>Icon files are located in the <c>&lt;TestStand&gt;\Components\Icons</c> and <c>&lt;TestStand&#160;Public&gt;\Components\Icons</c> directories.</remarks>
      <seealso cref="Adapter.LargeIcon" />
      <seealso cref="Adapter.SmallIcon" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Adapter.Hidden">
      <summary>Specifies if the adapter is present in the list of adapters. This property is used to hide the adapter.</summary>
      <remarks>Set this property to <c>True</c> to hide the adapter in controls that display the list of adapters.</remarks>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Adapter.ShowArgsInStepDescription">
      <summary>Specifies that the description for the step that uses the adapter includes the arguments the step passes to the methods or sequences they call.</summary>
      <seealso cref="Step.GetDescriptionEx" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Adapter.IsSupported">
      <summary>Indicates whether this adapter is supported by the current instance of the TestStand Engine.</summary>
      <remarks>Use this property to check if an adapter is supported by the current instance of TestStand Engine.
Unsupported adapters exist in the TestStand Engine so that TestStand can open sequence files containing unsupported adapter steps. You can view and edit these sequence files, even though you cannot execute the unsupported steps.
Support for an adapter can depend on the bitness of TestStand. For example, 32-bit TestStand does not support the LabVIEW NXG Adapter.</remarks>
      <seealso cref="Engine.Is64Bit" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.Execution">
      <summary>An execution is an object TestStand creates to contain all the information it uses to run the sequences and subsequences it calls. Use objects of this class to control and get information about executions. For example, you can use methods to suspend, resume, or terminate execution, and you can use properties to determine whether the execution is an interactive execution or whether the execution is in the process of terminating.</summary>
      <seealso cref="Engine.NewExecution" />
      <seealso cref="Engine.NewHierarchicalExecution" />
      <seealso cref="SequenceContext.Execution" />
      <seealso cref="Thread.Execution" />
      <seealso cref="UIMessage.Execution" />
      <seealso cref="WatchExpression.ExecutionScope" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Execution.Break">
      <summary>Suspends the execution.</summary>
      <seealso cref="Engine.BreakAll" />
      <seealso cref="Execution.BreakOnEntry" />
      <seealso cref="Execution.Resume" />
      <seealso cref="Execution.RTEOptionForThisExecution" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Execution.Resume">
      <summary>Resumes the execution from a suspended state.</summary>
      <remarks>The execution state does not change immediately after the call to this method returns, but the state will change before the next step within the execution executes.</remarks>
      <seealso cref="Engine.BreakAll" />
      <seealso cref="Execution.Break" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Execution.StepOver">
      <summary>Resumes the execution from a suspended state and then suspends the execution again after execution of the next step completes.</summary>
      <seealso cref="Execution.Break" />
      <seealso cref="Execution.StepInto" />
      <seealso cref="Execution.StepOver" />
      <seealso cref="Thread.SetStepOver" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Execution.StepInto">
      <summary>Resumes the execution from a suspended state and then suspends the execution again at the earliest possible point.</summary>
      <remarks>If the step module adapter for the next step can step into the step module in debug mode, execution suspends at the beginning of the step module code. If the step is a Sequence Call step, this method suspends execution at the first step in the subsequence.</remarks>
      <seealso cref="Execution.Break" />
      <seealso cref="Execution.StepOut" />
      <seealso cref="Execution.StepOver" />
      <seealso cref="Thread.SetStepInto" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Execution.StepOut">
      <summary>Resumes the execution from a suspended state and then suspends the execution again after execution of the current sequence completes.</summary>
      <seealso cref="Execution.Break" />
      <seealso cref="Execution.StepInto" />
      <seealso cref="Execution.StepOver" />
      <seealso cref="Thread.SetStepOut" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Execution.Abort">
      <summary>Aborts the execution.</summary>
      <remarks>Cleanup step groups do not execute as part of the abort process.
If a call to a step module is active, the execution waits for the step module to return.
The execution state does not change immediately after the call to this method returns, but the state will change before the next step within the execution executes.</remarks>
      <seealso cref="Engine.AbortAll" />
      <seealso cref="Engine.TerminateAll" />
      <seealso cref="Execution.Terminate" />
      <seealso cref="StationOptions.GetTimeLimitAction" />
      <seealso cref="StationOptions.SetTimeLimitAction" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Execution.Terminate">
      <summary>Terminates the execution.</summary>
      <remarks>Cleanup step groups execute as part of the termination process. If the execution is an interactive execution, use the Execution.TerminateInteractiveExecution method instead.
If a call to a step module is active, the execution waits for the step module to return.
The execution state does not change immediately after the call to this method returns, but the state will change before the next step within the execution executes.</remarks>
      <seealso cref="Engine.AbortAll" />
      <seealso cref="Engine.TerminateAll" />
      <seealso cref="Execution.Abort" />
      <seealso cref="Execution.TerminateInteractiveExecution" />
      <seealso cref="StationOptions.GetTimeLimitAction" />
      <seealso cref="StationOptions.SetTimeLimitAction" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Execution.TerminateInteractiveExecution">
      <summary>Terminates an interactive execution.</summary>
      <remarks>If you started the interactive execution while suspended in a normal execution, execution suspends at the point in the original execution at which you started the interactive execution.
The Cleanup step group for the sequence in which you started the interactive execution only runs if you created the execution as an interactive execution and if the user enables the Run Setup and Cleanup option on the Execution tab of the Station Options dialog box.
If a call to a step module is active, the execution waits for the step module to return.
The execution state does not change immediately after the call to this method returns, but the state will change before the next step within the execution executes.</remarks>
      <seealso cref="Engine.NewExecution" />
      <seealso cref="&quot;Execution tab&quot;javascript:RefLink('/InfoTopics/DB_Station_Opt_Exe_Tab.htm')" />
      <seealso cref="&quot;Station Options dialog box&quot;javascript:RefLink('/InfoTopics/DB_Station_Opt.htm')" />
      <seealso cref="Execution.Terminate" />
      <seealso cref="Thread.DoInteractiveExecution" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Execution.CancelTermination">
      <summary>Cancels the termination of a currently terminating execution.</summary>
      <remarks>Call this method from within a step. Calling this method from the main thread of the user interface or from within an edit substep of a step type results in deadlock.</remarks>
      <seealso cref="Engine.TerminateAll" />
      <seealso cref="Execution.Terminate" />
      <seealso cref="Execution.TerminateInteractiveExecution" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Execution.Restart(System.Boolean)">
      <summary><para>Note: This method is obsolete. Use the Execution.RestartEx method instead.</para></summary>
      <remarks>Execution restarts from the beginning.</remarks>
      <param name="breakOnEntryParam">Pass <c>True</c> to stop at the first step in the execution.</param>
      <seealso cref="Execution.RestartEx" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Execution.GetThread(System.Int32)">
      <summary>Returns a Thread object for the thread that you identify by index.</summary>
      <remarks>Do not call this method when handling a UIMsg_Trace message because TestStand allows non-foreground threads to run and complete while TestStand handles trace events. As a result, obtaining a thread by index is unreliable during trace event handling.</remarks>
      <param name="index">Specifies the zero-based index of the list of threads in the execution.</param>
      <seealso cref="Execution.ForegroundThread" />
      <seealso cref="Execution.ForegroundThreadIndex" />
      <seealso cref="Execution.NumThreads" />
      <seealso cref="PropertyObject" />
      <seealso cref="Thread" />
      <seealso cref="UIMessageCodes" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Execution.GetSequenceFile">
      <summary>Returns the SequenceFile object that contains the sequence in which the execution began.</summary>
      <remarks>If the execution is using a process model, the method returns the SequenceFile object for the client sequence file.
<para>Note: Do not call the Engine.ReleaseSequenceFileEx method for a reference this method returns.</para></remarks>
      <seealso cref="Engine.ReleaseSequenceFileEx" />
      <seealso cref="Execution.ClientFile" />
      <seealso cref="Execution.GetModelSequenceFile" />
      <seealso cref="Execution.ModelSequenceFilePath" />
      <seealso cref="SequenceFile" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Execution.GetModelSequenceFile">
      <summary>Returns the SequenceFile object for the process model file the execution is using.</summary>
      <remarks>Returns a <c>NULL</c> object reference if the execution is not using a process model. 
<para>Note: Do not call the Engine.ReleaseSequenceFileEx method for a reference this method returns.</para></remarks>
      <seealso cref="Engine.ReleaseSequenceFileEx" />
      <seealso cref="Execution.ClientFile" />
      <seealso cref="Execution.GetSequenceFile" />
      <seealso cref="Execution.ModelSequenceFilePath" />
      <seealso cref="SequenceFile" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Execution.AsPropertyObject">
      <summary>Returns the underlying PropertyObject that represents the Execution object.</summary>
      <remarks>Use the PropertyObject to modify, add, or remove custom properties of the object.</remarks>
      <seealso cref="PropertyObject" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Execution.InInteractiveMode">
      <summary>Returns <c>True</c> if the execution is executing steps interactively.</summary>
      <remarks>This property is always <c>True</c> for executions that you create as interactive executions. For executions that you start as normal executions, this property is only <c>True</c> when you interactively execute steps while at a breakpoint state. If you run the sequence using the Run Selected Steps Interactive Execution entry point, this property is <c>True</c>.</remarks>
      <seealso cref="Execution.TerminateInteractiveExecution" />
      <seealso cref="InteractiveArgs" />
      <seealso cref="SequenceContext.InteractiveContext" />
      <seealso cref="StationOptions.InteractiveBranchMode" />
      <seealso cref="Thread.DoInteractiveExecution" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Execution.TypeMask">
      <summary>Specifies the ExecutionTypeMask constants with which you created the execution.</summary>
      <seealso cref="Engine.NewExecution" />
      <seealso cref="ExecutionTypeMask" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Execution.BreakOnRTEForThisExecution">
      <summary><para>Note: This property is obsolete. Use the Execution.RTEOptionForThisExecution property instead.</para></summary>
      <remarks>Set this property to <c>False</c> if you do not want to receive a break event on run-time errors for the execution. If you set this property to <c>False</c>, the next run-time error causes the execution to terminate. Cleanup step groups of the active sequences run as part of the termination procedure.</remarks>
      <seealso cref="Execution.RTEOptionForThisExecution" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Execution.NumThreads">
      <summary>Returns the current number of threads in the execution.</summary>
      <remarks>Do not access this property when handling a UIMsg_Trace message. TestStand allows non-foreground threads to run and complete while TestStand handles trace events. As a result, obtaining the number of threads is unreliable during trace event handling.</remarks>
      <seealso cref="Execution.ForegroundThread" />
      <seealso cref="Execution.ForegroundThreadIndex" />
      <seealso cref="Execution.GetThread" />
      <seealso cref="Thread" />
      <seealso cref="UIMessageCodes" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Execution.ForegroundThreadIndex">
      <summary>Specifies the foreground thread of the execution.</summary>
      <remarks>The foreground thread is the thread the sequence editor or user interface displays as active for the execution. You specify the thread with a zero-based index into the list of threads in the execution.
Do not access this property when handling a UIMsg_Trace message. TestStand allows non-foreground threads to run and complete while TestStand handles trace events. As a result, getting and setting thread indexes is unreliable during trace event handling. Use the Execution.ForegroundThread method instead.</remarks>
      <seealso cref="Execution.ForegroundThread" />
      <seealso cref="Execution.NumThreads" />
      <seealso cref="Thread" />
      <seealso cref="UIMessageCodes" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Execution.SeqFilePreStepCallbackEnabled">
      <summary><para>Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.</para></summary>
      <remarks>Enables the SequenceFilePreStep callback. Set this property to <c>False</c> to disable the SequenceFilePreStep callback.</remarks>
      <seealso cref="Execution.EnableCallback" />
      <seealso cref="Execution.IsCallbackEnabled" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Execution.SeqFilePostStepCallbackEnabled">
      <summary><para>Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.</para></summary>
      <remarks>Enables the SequenceFilePostStep callback. Set this property to <c>False</c> to disable the SequenceFilePostStep callback.</remarks>
      <seealso cref="Execution.EnableCallback" />
      <seealso cref="Execution.IsCallbackEnabled" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Execution.ModelPreStepCallbackEnabled">
      <summary><para>Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.</para></summary>
      <remarks>Enables the ProcessModelPreStep callback. Set this property to <c>False</c> to disable the ProcessModelPreStep callback.</remarks>
      <seealso cref="Execution.EnableCallback" />
      <seealso cref="Execution.IsCallbackEnabled" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Execution.ModelPostStepCallbackEnabled">
      <summary><para>Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.</para></summary>
      <remarks>Enables the ProcessModelPostStep callback. Set this property to <c>False</c> to disable the ProcessModelPostStep callback.</remarks>
      <seealso cref="Execution.EnableCallback" />
      <seealso cref="Execution.IsCallbackEnabled" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Execution.StationPreStepCallbackEnabled">
      <summary><para>Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.</para></summary>
      <remarks>Enables the StationPreStep callback. Set this property to <c>False</c> to disable the StationPreStep callback.</remarks>
      <seealso cref="Execution.EnableCallback" />
      <seealso cref="Execution.IsCallbackEnabled" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Execution.StationPostStepCallbackEnabled">
      <summary><para>Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.</para></summary>
      <remarks>Enables the StationPostStep callback. Set this property to <c>False</c> to disable the StationPostStep callback.</remarks>
      <seealso cref="Execution.EnableCallback" />
      <seealso cref="Execution.IsCallbackEnabled" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Execution.SeqFilePreInteractiveCallbackEnabled">
      <summary><para>Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.</para></summary>
      <remarks>Enables the SequenceFilePreInteractive callback. Set this property to <c>False</c> to disable the SequenceFilePreInteractive callback.</remarks>
      <seealso cref="Execution.EnableCallback" />
      <seealso cref="Execution.IsCallbackEnabled" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Execution.SeqFilePostInteractiveCallbackEnabled">
      <summary><para>Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.</para></summary>
      <remarks>Enables the SequenceFilePostInteractive callback. Set this property to <c>False</c> to disable the SequenceFilePostInteractive callback.</remarks>
      <seealso cref="Execution.EnableCallback" />
      <seealso cref="Execution.IsCallbackEnabled" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Execution.ModelPreInteractiveCallbackEnabled">
      <summary><para>Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.</para></summary>
      <remarks>Enables the ProcessModelPreInteractive callback. Set this property to <c>False</c> to disable the ProcessModelPreInteractive callback.</remarks>
      <seealso cref="Execution.EnableCallback" />
      <seealso cref="Execution.IsCallbackEnabled" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Execution.ModelPostInteractiveCallbackEnabled">
      <summary><para>Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.</para></summary>
      <remarks>Enables the ProcessModelPostInteractive callback. Set this property to <c>False</c> to disable the ProcessModelPostInteractive callback.</remarks>
      <seealso cref="Execution.EnableCallback" />
      <seealso cref="Execution.IsCallbackEnabled" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Execution.StationPreInteractiveCallbackEnabled">
      <summary><para>Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.</para></summary>
      <remarks>Enables the StationPreInteractive callback. Set this property to <c>False</c> to disable the StationPreInteractive callback.</remarks>
      <seealso cref="Execution.EnableCallback" />
      <seealso cref="Execution.IsCallbackEnabled" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Execution.StationPostInteractiveCallbackEnabled">
      <summary><para>Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.</para></summary>
      <remarks>Enables the StationPostInteractive callback. Set this property to <c>False</c> to disable the StationPostInteractive callback.</remarks>
      <seealso cref="Execution.EnableCallback" />
      <seealso cref="Execution.IsCallbackEnabled" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Execution.TimeResultsEnabled">
      <summary>Stores timing results for steps in the execution.</summary>
      <remarks>Set this property to <c>False</c> to disable the storing of timing results for steps. TestStand stores time results only when the Execution.StandardResultsEnabled property is  <c>True</c>.</remarks>
      <seealso cref="Execution.StandardResultsEnabled" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Execution.StandardResultsEnabled">
      <summary>Stores all the standard results for steps in the execution. Standard results include properties that specify basic step execution information.</summary>
      <remarks>Set this property to <c>False</c> to disable storing the standard results for the execution.
The standard results are the subproperties in the <c>TS</c> property of the result list entry for each step.</remarks>
      <seealso cref="Execution.DisableResults" />
      <seealso cref="Execution.TimeResultsEnabled" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Execution.ResultStatus">
      <summary>Specifies the result status string for the execution.</summary>
      <remarks><para>Note: You cannot use this property to determine if a completed execution encountered an error. Instead, access the Occurred sub-property of Execution.ErrorObject.</para> Although you can define custom status strings, you usually set this property to one of the <c>ResultStatus_</c> constants of StepProperties.</remarks>
      <seealso cref="Execution.ResultObject" />
      <seealso cref="StepProperties" />
      <seealso cref="Execution.ErrorObject" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Execution.ErrorObject">
      <summary>Returns the error PropertyObject that contains the error reporting properties for this execution.</summary>
      <remarks>The subproperties of the error object include <c>Code</c>, <c>Msg</c>, and <c>Occurred</c>.</remarks>
      <seealso cref="Execution.DisableResults" />
      <seealso cref="Execution.ResultObject" />
      <seealso cref="PropertyObject" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Execution.Report">
      <summary>Returns the Report object for the execution.</summary>
      <seealso cref="Report" />
      <seealso cref="SequenceContext.Report" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Execution.Id">
      <summary>Returns a unique ID number for the execution.
<para>Note: The ID number is never zero.</para></summary>
      <remarks>The ID number is unique with respect to all executions you can initiate before you shut down the TestStand Engine.
Use this ID number to compare two Execution object references to determine whether they refer to the same underlying execution.</remarks>
      <seealso cref="Execution.DisplayName" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Execution.DisplayName">
      <summary>Returns the name to display for the execution.</summary>
      <seealso cref="Thread.DisplayName" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Execution.AddExtraResult(System.String,System.String)">
      <summary>Specifies a step property for TestStand to copy to the results list after the execution of each step.</summary>
      <remarks>TestStand always copies each subproperty within the Result property of each step to the result list. If the step has a result property, you can use this function to specify an additional step property to include in the result list. If a step does not have the property you specify, TestStand does not add the property to the result list element for that step. You can add any number of extra results by calling this method repeatedly.</remarks>
      <param name="propertyName">Specifies the property name of the property to add to the results. For example, to add the upper limit of Numeric Limit Test steps, pass the name <c>&quot;Step.Limits.High&quot;</c>.</param>
      <param name="resultPropertyName">Specifies the name with which to store the copy of the property in the results list entry for each step.</param>
      <seealso cref="Execution.ClearExtraResultList" />
      <seealso cref="Execution.DeleteExtraResult" />
      <seealso cref="Execution.ResultObject" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Execution.DeleteExtraResult(System.String)">
      <summary>Removes a specific property from the list of properties to add to the results.</summary>
      <param name="propertyName">Specifies the property name of the property to remove from the list of properties to add to the results. Use the same name that you passed as the first parameter to the Execution.AddExtraResult method, such as <c>Step.Limits.High</c>. </param>
      <seealso cref="Execution.AddExtraResult" />
      <seealso cref="Execution.ClearExtraResultList" />
      <seealso cref="Execution.ResultObject" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Execution.ClearExtraResultList">
      <summary>Clears the list of properties to add to the results list.</summary>
      <seealso cref="Execution.AddExtraResult" />
      <seealso cref="Execution.DeleteExtraResult" />
      <seealso cref="Execution.ResultObject" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Execution.GetStates(NationalInstruments.TestStand.Interop.API.ExecutionRunStates@,NationalInstruments.TestStand.Interop.API.ExecutionTerminationStates@)">
      <summary>Returns the current state of the execution.</summary>
      <remarks><para>Note: When a user interface that uses TestStand UI Controls needs to obtain the state of the execution, National Instruments recommends using the ApplicationMgr.GetRunState method or the ExecutionViewMgr.RunState property instead of directly calling the <c>Execution.GetStates</c> method on the execution.</para></remarks>
      <param name="runState">Returns the running state of the execution.</param>
      <param name="termState">If the execution is terminating, this value indicates how it is terminating.</param>
      <seealso cref="&quot;ApplicationMgr.GetRunState&quot;javascript:UILink('/RefTopics/ApplicationMgr_GetRunState_M.htm')" />
      <seealso cref="Execution.CancelTermination" />
      <seealso cref="Execution.GetTerminationMonitorStatus" />
      <seealso cref="Execution.InitTerminationMonitor" />
      <seealso cref="ExecutionRunStates" />
      <seealso cref="ExecutionTerminationStates" />
      <seealso cref="&quot;ExecutionViewMgr.RunState&quot;javascript:UILink('/RefTopics/ExecutionViewMgr_RunState_P.htm')" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Execution.ResultObject">
      <summary>Returns the Result PropertyObject for the execution.</summary>
      <remarks>Typically, the Result PropertyObject contains at least the Error, Status, ReportText, and Common subproperties.
<para><para>&#160;&#160;&#160;&#160;* Error&#8212;Property object that contains the error information for the execution.</para><para>&#160;&#160;&#160;&#160;* ResultList&#8212;Array that contains the combined results for all the steps in the execution.</para><para>&#160;&#160;&#160;&#160;* SequenceFile&#8212;String that contains the path of the sequence file associated with the execution.</para><para>&#160;&#160;&#160;&#160;* Sequence&#8212;String that contains the name of the sequence associated with the execution.</para><para>&#160;&#160;&#160;&#160;* Status&#8212;String that contains the status of the execution.</para></para>
You can also obtain the Error subproperty of the Result PropertyObject by using the ErrorObject property. You can access the Status subproperty by using the ResultStatus property.</remarks>
      <seealso cref="Execution.ErrorObject" />
      <seealso cref="Execution.ResultStatus" />
      <seealso cref="PropertyObject" />
      <seealso cref="StepProperties" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Execution.WaitForEnd(System.Int32,System.Boolean,System.Object)">
      <summary><para>Note: This method is obsolete. Use the Execution.WaitForEndEx method instead.</para></summary>
      <remarks>Waits for an execution to end. This method is not meant to be used by a user interface or sequence editor as it does not process UIMessages. Instead, use this method from a step to synchronize with another execution.</remarks>
      <returns>Returns <c>True</c> when the execution ends or <c>False</c> when the timeout occurs.</returns>
      <param name="millisecondTimeOut">Specifies the maximum number of milliseconds to wait. Specify -1 for no timeout.</param>
      <param name="processWindowsMsgs">Specify <c>True</c> to process Microsoft Windows messages while waiting or <c>False</c> to wait without processing Windows messages.</param>
      <param name="callingExecution">If you call this method from a step, pass a reference to the execution of the step to allow this method to return immediately when the step execution is terminated or aborted.</param>
      <seealso cref="&quot;Omitting Optional Parameters&quot;javascript:APILink('/InfoTopics/Optional_Parameters.htm')" />
      <seealso cref="Thread.WaitForEnd" />
      <seealso cref="Execution.WaitForEndEx" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Execution.StationPostResultCallbackEnabled">
      <summary><para>Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.</para></summary>
      <remarks>Enables the StationPostResult callback. Set this property to <c>False</c> to disable the StationPostResult callback.</remarks>
      <seealso cref="Execution.EnableCallback" />
      <seealso cref="Execution.IsCallbackEnabled" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Execution.ModelPostResultCallbackEnabled">
      <summary><para>Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.</para></summary>
      <remarks>Enables the ProcessModelPostResult callback. Set this property to <c>False</c> to disable the ProcessModelPostResult callback.</remarks>
      <seealso cref="Execution.EnableCallback" />
      <seealso cref="Execution.IsCallbackEnabled" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Execution.SeqFilePostResultCallbackEnabled">
      <summary><para>Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.</para></summary>
      <remarks>Enables the SequenceFilePostResult callback. Set this property to <c>False</c> to disable the SequenceFilePostResult callback.</remarks>
      <seealso cref="Execution.EnableCallback" />
      <seealso cref="Execution.IsCallbackEnabled" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Execution.StationPostErrorCallbackEnabled">
      <summary><para>Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.</para></summary>
      <remarks>Enables the StationPostError callback. Set this property to <c>False</c> to disable the StationPostError callback.</remarks>
      <seealso cref="Execution.EnableCallback" />
      <seealso cref="Execution.IsCallbackEnabled" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Execution.ModelPostErrorCallbackEnabled">
      <summary><para>Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.</para></summary>
      <remarks>Enables the ProcessModelPostError callback. Set this property to <c>False</c> to disable the ProcessModelPostError callback.</remarks>
      <seealso cref="Execution.EnableCallback" />
      <seealso cref="Execution.IsCallbackEnabled" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Execution.SeqFilePostErrorCallbackEnabled">
      <summary><para>Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.</para></summary>
      <remarks>Enables the SequenceFilePostError callback. Set this property to <c>False</c> to disable the SequenceFilePostError callback.</remarks>
      <seealso cref="Execution.EnableCallback" />
      <seealso cref="Execution.IsCallbackEnabled" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Execution.StationPostFailCallbackEnabled">
      <summary><para>Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.</para></summary>
      <remarks>Enables the StationPostFail callback. Set this property to <c>False</c> to disable the StationPostFail callback.</remarks>
      <seealso cref="Execution.EnableCallback" />
      <seealso cref="Execution.IsCallbackEnabled" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Execution.ModelPostFailCallbackEnabled">
      <summary><para>Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.</para></summary>
      <remarks>Enables the ProcessModelPostFail callback. Set this property to <c>False</c> to disable the ProcessModelPostFail callback.</remarks>
      <seealso cref="Execution.EnableCallback" />
      <seealso cref="Execution.IsCallbackEnabled" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Execution.SeqFilePostFailCallbackEnabled">
      <summary><para>Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.</para></summary>
      <remarks>Enables the SequenceFilePostFail callback. Set this property to <c>False</c> to disable the SequenceFilePostFail callback.</remarks>
      <seealso cref="Execution.EnableCallback" />
      <seealso cref="Execution.IsCallbackEnabled" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Execution.SequenceFilePath">
      <summary>Returns the absolute pathname of the sequence file for this execution.</summary>
      <remarks>If the execution is using a process model, the method returns the pathname of the client sequence file.</remarks>
      <returns>Returns the sequence file pathname. Returns an empty string for unsaved sequence files.</returns>
      <seealso cref="Execution.ClientFile" />
      <seealso cref="Execution.GetSequenceFile" />
      <seealso cref="Execution.ModelSequenceFilePath" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Execution.ModelSequenceFilePath">
      <summary>Returns the absolute pathname of the model sequence file for this execution.</summary>
      <seealso cref="Execution.ClientFile" />
      <seealso cref="Execution.SequenceFilePath" />
      <seealso cref="SequenceContext.IsProcessModel" />
      <seealso cref="SequenceFile.ModelPath" />
      <seealso cref="StationOptions.StationModelSequenceFilePath" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Execution.ClearTemporaryBreakpoints">
      <summary>Clears the temporary breakpoints on all threads.</summary>
      <remarks>You can set temporary breakpoints by calling the Execution.StepInto, Execution.StepOut, or Execution.StepOver methods.</remarks>
      <seealso cref="Execution.StepInto" />
      <seealso cref="Execution.StepOut" />
      <seealso cref="Execution.StepOver" />
      <seealso cref="Thread.ClearTemporaryBreakpoint" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Execution.SecondsExecuting">
      <summary>Returns the total number of seconds for which the execution has been running.</summary>
      <remarks>The value returned does not include time spent while the execution is suspended at a breakpoint. Restarting the execution resets the value of this property.
</remarks>
      <seealso cref="Engine.SecondsSince1970UniversalCoordinatedTime" />
      <seealso cref="Engine.SecondsSinceStart" />
      <seealso cref="Execution.SecondsAtStart" />
      <seealso cref="Execution.SecondsSuspended" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Execution.SecondsSuspended">
      <summary>Returns the total number of seconds for which the execution has been suspended at breakpoints.</summary>
      <remarks>Restarting the execution resets the value of this property.</remarks>
      <seealso cref="Engine.SecondsSince1970UniversalCoordinatedTime" />
      <seealso cref="Engine.SecondsSinceStart" />
      <seealso cref="Execution.SecondsAtStart" />
      <seealso cref="Execution.SecondsExecuting" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Execution.SecondsAtStart">
      <summary>Returns the number of seconds between the creation of the engine and the beginning of the execution.</summary>
      <remarks>This property returns the value of the Engine.SecondsSinceStart property when the execution starts. Restarting the execution resets the value of this property.</remarks>
      <seealso cref="Engine.SecondsSince1970UniversalCoordinatedTime" />
      <seealso cref="Engine.SecondsSinceStart" />
      <seealso cref="Execution.SecondsExecuting" />
      <seealso cref="Execution.SecondsSuspended" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Execution.GetFileGlobals(NationalInstruments.TestStand.Interop.API.SequenceFile)">
      <summary>Gets the run-time copy of the sequence file globals for a particular execution and sequence file.</summary>
      <remarks>Sequence file globals are per execution and per sequence. All steps in a particular sequence file within a particular execution share the same copy of the sequence file globals at run time.</remarks>
      <returns>Returns a PropertyObject that contains the file globals for the particular sequence file you pass as the sequenceFileParam parameter. It returns the run-time copy of the file globals. If a run-time copy has not yet been created, a new one is created and returned.</returns>
      <param name="sequenceFileParam">Specifies the sequence file that contains the file globals you want returned.</param>
      <seealso cref="PropertyObject" />
      <seealso cref="SequenceContext.FileGlobals" />
      <seealso cref="SequenceFile" />
      <seealso cref="SequenceFile.FileGlobalsDefaultValues" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Execution.ForegroundThread">
      <summary>Specifies the foreground thread of the execution.</summary>
      <remarks>The foreground thread is the thread that the sequence editor or user interface displays as active for the execution.</remarks>
      <seealso cref="Execution.ForegroundThreadIndex" />
      <seealso cref="Execution.NumThreads" />
      <seealso cref="Thread" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Execution.RestartEx(System.Int32)">
      <summary>Restarts a completed execution.</summary>
      <remarks>Use this method instead of the <c>Execution.Restart</c> method when you require the new functionality the RestartOptions constants provide. For example, use this method if you need to restart an execution created as non-restartable.</remarks>
      <param name="restartOptionsParam">Specifies which RestartOptions to use. You can specify more than one RestartOption by combining the constants using the bitwise-OR operator.</param>
      <seealso cref="Execution.RestartWithNewArguments" />
      <seealso cref="RestartOptions" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Execution.ClientFile">
      <summary>Specifies the client sequence file when executing with a process model.</summary>
      <remarks>Typically, you set this property in the process model to dynamically specify which client sequence file the process model invokes.
When the execution first uses the client sequence file, it locks the file so that it cannot be unloaded from the sequence file cache of the engine until the execution completes or until this property is set to a different sequence file. Additionally, when you set this property to a different sequence file or a <c>NULL</c> reference to clear out the execution reference to the previous client sequence file, ensure you have disabled the Optimize Non-Reentrant Calls to This Sequence sequence property setting in all sequences of the client sequence file, or the execution maintains a reference to the client sequence file until it completes.</remarks>
      <seealso cref="SequenceContext.ProcessModelClient" />
      <seealso cref="SequenceFile" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Execution.TracingDisabled">
      <summary>Disables tracing on a per-execution basis. </summary>
      <remarks>If tracing is globally disabled, enabling this property does nothing. This property is meant to disable tracing only when it would otherwise be enabled based on the StationOptions.TracingEnabled property, since this property overrides the enable setting on the station.</remarks>
      <seealso cref="SequenceContext.CanTrace" />
      <seealso cref="StationOptions.TracingEnabled" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Execution.RTEOptionForThisExecution">
      <summary>Specifies the current setting that indicates how TestStand responds to a run-time error.</summary>
      <remarks>The original setting for this property is the value of the StationOptions.RTEOption property when the execution is created.</remarks>
      <seealso cref="&quot;Run-Time Error dialog box&quot;javascript:RefLink('/InfoTopics/DB_Run_Time_Error.htm')" />
      <seealso cref="StationOptions.RTEOption" />
      <seealso cref="Thread.SetBatchRTEOption" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Execution.WaitForEndEx(System.Int32,System.Boolean,System.Object,System.Object)">
      <summary>Waits for an execution to end.</summary>
      <remarks>This method is not meant to be used by a user interface or sequence editor, as it does not process UIMessages. Instead, use this method from a step to synchronize with another execution. If you need to call this method from a user interface, you must call this method from a non-UI thread.</remarks>
      <returns>Returns <c>True</c> when the execution ends or <c>False</c> when the timeout occurs.</returns>
      <param name="millisecondTimeOut">Specifies the maximum number of milliseconds to wait. Specify <c>-1</c> for no timeout.
If you pass a value for the callingSequenceContext parameter, TestStand suspends the timeout while the calling execution is suspended at a breakpoint so that the time spent at a breakpoint does not count towards the elapsed timeout time.</param>
      <param name="processWindowsMsgs">Specify <c>True</c> to process Microsoft Windows messages while waiting or <c>False</c> to wait without processing Windows messages.</param>
      <param name="stepToStoreResultsIn">Specifies a step in which to store the results of the execution. If you specify a step, the result status of the step reflects that of the execution, and TestStand stores the result list for the execution in the <c>TS.AsyncSequenceCall</c> result property for the step.</param>
      <param name="callingSequenceContext">If you are calling this method from inside of an execution, pass the current sequence context of the execution you are calling the method from for this parameter so TestStand can monitor the execution and abort the method if the calling execution is terminated or aborted.
</param>
      <seealso cref="&quot;Omitting Optional Parameters&quot;javascript:APILink('/InfoTopics/Optional_Parameters.htm')" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Execution.DisableResults">
      <summary>Records results for steps running in the execution.</summary>
      <remarks>When this property is <c>True</c>, TestStand does not record results for any steps that run in the execution. When this property is <c>False</c>, TestStand records results based on the setting of the <c>ResultRecordingOption</c> property of each individual step or based on the <c>DisableResults</c> property of both the engine and the sequence.</remarks>
      <seealso cref="Execution.ResultObject" />
      <seealso cref="Sequence.DisableResults" />
      <seealso cref="StationOptions.DisableResults" />
      <seealso cref="Step.RecordLoopIterationResults" />
      <seealso cref="Step.ResultRecordingOption" />
      <seealso cref="Step.ResultStatus" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Execution.BreakOnEntry">
      <summary>Returns the value of the breakOnEntry parameter of the method call that started the most recent execution.</summary>
      <remarks>Use this read-only property to determine whether the execution was created with the breakAtFirstStep parameter set to <c>True</c>.
The methods that start executions are Engine.NewExecution,  Engine.NewHierarchicalExecution, and RestartEx. If the most recent call was the <c>Engine.NewExecution</c> or the <c>Engine.NewHierarchicalExecution</c> method, this property returns the value specified for the breakOnFirstStep parameter.  If the most recent call was the <c>Execution.Restart</c> method, this property returns the value of the breakOnEntryParam parameter.  If the most recent call was the <c>Execution.RestartEx</c> method, this property returns <c>True</c> if the restartOptionsParam parameter included the RestartOption_BreakOnEntry value.</remarks>
      <seealso cref="Engine.NewExecution" />
      <seealso cref="Engine.NewHierarchicalExecution" />
      <seealso cref="Execution.RestartEx" />
      <seealso cref="RestartOptions" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Execution.StartCount">
      <summary>Returns the number of times the execution has been started.</summary>
      <remarks>This count increments after TestStand sends the UIMsg_StartExecution message to the user interface. Calling this property while handling the <c>UIMsg_StartExecution</c> message returns <c>0</c> the first time the execution starts.
</remarks>
      <seealso cref="Execution.RestartEx" />
      <seealso cref="UIMessageCodes" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Execution.InitTerminationMonitor">
      <summary>Creates the initial termination monitor data property object the Execution.GetTerminationMonitorStatus method uses.</summary>
      <remarks>Only call this method once, when you want to begin monitoring the status of the execution.
Use this method with the <c>Execution.GetTerminationMonitorStatus</c> method to monitor the state of an execution when performing a task inside of a step that takes a long time or requires user input to continue, such as launching a dialog box. When performing such a task, first call this method and hold on to the PropertyObject it returns. Then, while performing the task or inside of the message processing loop, periodically call the <c>Execution.GetTerminationMonitorStatus</c> method and pass the PropertyObject this method returns. If the method returns <c>True</c>, the execution is terminating and you should abort the task you are performing.
Use the <c>Execution.InitTerminationMonitor</c> and <c>Execution.GetTerminationMonitorStatus</c> methods to monitor whether the execution receives a request to terminate or abort the execution. The monitor only recognizes requests to terminate or abort while monitoring, so a code module that executes in a Cleanup step group of an already terminating execution monitors for a subsequent request to terminate the step or abort the execution. Use the <c>Execution.GetStates</c> method to determine the execution state of the code module.</remarks>
      <returns>A property object that contains data the <c>Execution.GetTerminationMonitorStatus</c> method uses to determine whether a particular execution is terminating and, therefore, whether a particular operation (that is, a code module of a step within the execution) needs to abort what it is doing.
<para>Note: Do not directly access the data in this property object.</para></returns>
      <seealso cref="Execution.GetStates" />
      <seealso cref="Execution.GetTerminationMonitorStatus" />
      <seealso cref="PropertyObject" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Execution.GetTerminationMonitorStatus(NationalInstruments.TestStand.Interop.API.PropertyObject,System.Object)">
      <summary>Monitors an execution so the calling code can abort what it is doing and exit if the user requests that the execution terminate or abort.</summary>
      <remarks>Use this method with the Execution.InitTerminationMonitor method to monitor the state of the execution when performing a task inside of a step that takes a long time or requires user input to continue, such as launching a dialog box. When performing such a task, first call the <c>Execution.InitTerminationMonitor</c> method and hold on to the PropertyObject it returns. Then, while performing the task or inside of the message processing loop, periodically call this method and pass the PropertyObject you got from the <c>Execution.InitTerminationMonitor</c> method. If the method returns <c>True</c>, the execution is terminating and you should abort the task you are performing.
This method calls the Execution.GetStates method to update the state information it stores in terminationMonitorData. The <c>Execution.GetTerminationMonitorStatus</c> method uses the state information to determine whether to exit an execution under various conditions, such as when a Cleanup step launches a dialog box while the sequence is already terminating.
Use the <c>Execution.InitTerminationMonitor</c> and <c>Execution.GetTerminationMonitorStatus</c> methods to monitor whether the execution receives a request to terminate or abort the execution. The monitor only recognizes requests to terminate or abort while monitoring, so a code module that executes in a Cleanup step group of an already terminating execution monitors for a subsequent request to terminate the step or abort the execution. Use the <c>Execution.GetStates</c> method to determine the execution state of the code module.</remarks>
      <returns>Returns <c>True</c> if the execution is terminating or aborting.</returns>
      <param name="terminationMonitorData">Specifies a property object you obtain by calling the Execution.InitTerminationMonitor method. The data this property object contains is not meant to be accessed directly.</param>
      <param name="sequenceContextParam">If you are monitoring an execution from a step that is running as part of the execution so you can abort the step when the execution terminates or aborts, pass the SequenceContext object of the step. If you are monitoring an execution from a step in a different execution or from code that is not part of a step, leave this parameter unspecified. When you specify this parameter, TestStand uses other information about the execution of the step that is monitoring the execution to determine whether to abort.</param>
      <seealso cref="Execution.GetStates" />
      <seealso cref="Execution.InitTerminationMonitor" />
      <seealso cref="&quot;Omitting Optional Parameters&quot;javascript:APILink('/InfoTopics/Optional_Parameters.htm')" />
      <seealso cref="PropertyObject" />
      <seealso cref="SequenceContext" />
      <seealso cref="&#xD;&#xA;" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Execution.RunTimeVariables">
      <summary>Use this property object to create and access variables you want to exist only for the current run of the execution.</summary>
      <remarks>TestStand destroys these variables when the execution completes, terminates, or aborts.</remarks>
      <seealso cref="Engine.TemporaryGlobals" />
      <seealso cref="PropertyObject" />
      <seealso cref="Thread.RunTimeVariables" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Execution.AddPostStepCustomUIMessage(System.Int32,System.String,System.Int32)">
      <summary>Associates a new custom user interface message with an execution.</summary>
      <remarks>Use this function when you want TestStand to send a custom user interface message based on a user-defined expression. You define the Boolean expression to evaluate after each step executes. If the expression is <c>True</c>, TestStand sends the custom user interface message.
This message is synchronous. The thread that sends this message suspends until you process it.
This message is sent regardless of the Enable Tracing setting, Disable Result Recording for All Sequences setting, Step Run Mode setting, or Step Result Recording option.</remarks>
      <param name="MsgCode">Specifies the custom user interface message code. You can use more than one custom user interface message associated with the same code. TestStand sends the custom user interface messages when the associated expression evaluates to <c>True</c>.</param>
      <param name="Expression">Specifies the valid expression to evaluate after each step executes.</param>
      <param name="CustomUIMessageOptions">Specifies any combination of the flags found in CustomPostStepUIMsgOptions.</param>
      <seealso cref="CustomPostStepUIMsgOptions" />
      <seealso cref="Engine.RegisterUIMessage" />
      <seealso cref="Execution.RemovePostStepCustomUIMessage" />
      <seealso cref="UIMessage" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Execution.RemovePostStepCustomUIMessage(System.Int32)">
      <summary>Removes a custom user interface message associated with an execution.</summary>
      <remarks>Use this method to remove any custom user interface messages previously associated with an execution by calling the Execution.AddPostStepCustomUIMessage method.</remarks>
      <param name="MsgCode">Specifies the custom UI message code. This method does not return an error when the message code is not associated with an execution.</param>
      <seealso cref="Engine.RegisterUIMessage" />
      <seealso cref="Execution.AddPostStepCustomUIMessage" />
      <seealso cref="UIMessage" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Execution.EnableCallback(NationalInstruments.TestStand.Interop.API.CallbackTypes,System.Boolean)">
      <summary>Enables or disables the callback sequence that corresponds to the callback type passed as the input parameter.</summary>
      <remarks>If the newValue parameter is set to <c>False</c>, TestStand disables the callback. Otherwise, TestStand enables the callback. Use the Execution.IsCallbackEnabled method to determine whether a callback is enabled.</remarks>
      <param name="callbackType">Specifies the callback type.</param>
      <param name="newValue">If this value is <c>False</c>, TestStand disables the callback. Otherwise, TestStand enables the callback.</param>
      <seealso cref="CallbackTypes" />
      <seealso cref="Execution.IsCallbackEnabled" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Execution.IsCallbackEnabled(NationalInstruments.TestStand.Interop.API.CallbackTypes)">
      <summary>Determines whether the callback type the parameter passes is enabled.</summary>
      <param name="callbackType">Specifies the callback type. Refer to CallbackTypes for the possible values.</param>
      <seealso cref="CallbackTypes" />
      <seealso cref="Execution.EnableCallback" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Execution.NewSequenceDefaultValues(NationalInstruments.TestStand.Interop.API.Sequence)">
      <summary>Creates a default value copy of the sequence.</summary>
      <remarks>Whenever TestStand begins executing a sequence, it makes a run-time copy of the sequence. Normally, TestStand creates the run-time copy from the edit-time copy of the sequence in the sequence file. You can use this method in conjunction with the Execution.SetSequenceDefaultValues method to instruct the execution to use different default values for the local variables and step properties. Changes to the default value sequence this method returns do not update the edit-time copy of the sequence.</remarks>
      <returns>Returns a Sequence object that represents default values an execution can use to create run-time copies of the sequence during execution. Typically, you update the local variables and step properties in the sequence this method returns, and use the  Execution.SetSequenceDefaultValues method to instruct the execution to use the sequence to create run-time sequences.</returns>
      <param name="origSequence">Specifies which default value sequence the method creates.</param>
      <seealso cref="Execution.ClearSequenceDefaultValues" />
      <seealso cref="Execution.GetSequenceDefaultValues" />
      <seealso cref="Execution.SetSequenceDefaultValues" />
      <seealso cref="Sequence" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Execution.GetSequenceDefaultValues(NationalInstruments.TestStand.Interop.API.Sequence,NationalInstruments.TestStand.Interop.API.SequenceDefaultValueScopes)">
      <summary>Returns the default value copy of the sequence, if it exists. Otherwise, this method returns <c>NULL</c>.</summary>
      <remarks>Use this method to return default value sequences the Execution.SetSequenceDefaultValues method previously specified. 
If a sequence specifies to optimize non-reentrant calls, changes to the default value sequence this method returns do not apply to run-time sequences that the execution caches. Call the Execution.SetSequenceDefaultValues method to ensure the execution uses any changes to the sequence in all subsequent invocations.</remarks>
      <returns>Returns a Sequence object that represents the default values an execution is using to create run-time copies of the sequence.</returns>
      <param name="origSequence">Specifies which default value sequence the method returns.</param>
      <param name="defaultValueType">Specifies whether the method operates on the list of default value sequences for the execution or the hierarchy of executions with which the execution is associated.</param>
      <seealso cref="Execution.ClearSequenceDefaultValues" />
      <seealso cref="Execution.SetSequenceDefaultValues" />
      <seealso cref="Sequence" />
      <seealso cref="Sequence.OptimizeNonReentrantCalls" />
      <seealso cref="SequenceDefaultValueScopes" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Execution.SetSequenceDefaultValues(NationalInstruments.TestStand.Interop.API.Sequence,NationalInstruments.TestStand.Interop.API.SequenceDefaultValueScopes)">
      <summary>Instructs the execution to use a default value copy of the sequence to create run-time copies of the sequence.</summary>
      <remarks>Whenever TestStand begins executing a sequence, it makes a run-time copy of the sequence. Normally, TestStand creates the run-time copy from the edit-time copy of the sequence in the sequence file. You can use this method in conjunction with the Execution.NewSequenceDefaultValues method to instruct the execution to use different default values for the local variables and step properties.
You can associate default value sequences with either a specific execution or the hierarchy of executions with which the execution is associated. For example, setting a default value sequence on the hierarchy of execution associated with a Batch model applies the default value sequence to the controlling batch execution and all test socket executions. If an execution and the execution hierarchy both specify a default value sequence, TestStand uses the default value sequence the execution specifies.</remarks>
      <param name="defValSequence">Specifies the default value sequence the execution uses to create run-time sequences. Use the Execution.NewSequenceDefaultValues method to create a default value sequence and update the local variables and step properties in the sequence before calling this method.</param>
      <param name="defaultValueType">Specifies whether the method operates on the list of default value sequences for the execution or the hierarchy of executions associated with the execution.</param>
      <seealso cref="Execution.ClearSequenceDefaultValues" />
      <seealso cref="Execution.GetSequenceDefaultValues" />
      <seealso cref="Execution.NewSequenceDefaultValues" />
      <seealso cref="Sequence" />
      <seealso cref="SequenceDefaultValueScopes" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Execution.ClearSequenceDefaultValues(NationalInstruments.TestStand.Interop.API.Sequence,NationalInstruments.TestStand.Interop.API.SequenceDefaultValueScopes)">
      <summary>Removes a specific default value sequence or all default value sequences.</summary>
      <remarks>This method operates on either the list of default value sequences for the execution or the hierarchy of executions associated with this execution.</remarks>
      <param name="origSequence">Specifies the sequences that indicate the default value to remove. Passing <c>NULL</c> removes all default value sequences.</param>
      <param name="defaultValueType">Specifies whether the method operates on the list of default value sequences for the execution or the hierarchy of executions associated with the execution.</param>
      <seealso cref="Sequence" />
      <seealso cref="SequenceDefaultValueScopes" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Execution.NewThread(NationalInstruments.TestStand.Interop.API.SequenceFile,System.String,System.Int32,NationalInstruments.TestStand.Interop.API.SequenceContext,NationalInstruments.TestStand.Interop.API.PropertyObject)">
      <summary>Creates and returns a new Thread object.</summary>
      <remarks>When you call this method, the thread begins executing immediately. This method behaves similar to a Sequence Call step you configure to run in a new thread.</remarks>
      <returns>The thread created by this method.</returns>
      <param name="sequenceFileParam">Specifies the SequenceFile object that contains the sequence to execute.</param>
      <param name="sequenceNameParam">Specifies the name of the sequence to execute.</param>
      <param name="options">Pass <c>0</c> for the default behavior or pass one or more NewThreadOptions constants. Use the bitwise-OR operator to pass multiple constants.</param>
      <param name="sequenceContextParam">If you call this method from a code module for a step inside of an execution, pass the sequence context of the step. This allows this method to behave similar to a Sequence Call step and to set the SequenceContext.Caller property correctly.</param>
      <param name="sequenceArgsParam">Specifies a PropertyObject object that contains the arguments to the sequence you want to execute. Each subproperty of PropertyObject represents a parameter to the sequence. The subproperties must appear in the same order as the sequence parameters.</param>
      <seealso cref="NewThreadOptions" />
      <seealso cref="PropertyObject" />
      <seealso cref="SequenceContext" />
      <seealso cref="SequenceContext.Caller" />
      <seealso cref="SequenceFile" />
      <seealso cref="Thread" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Execution.Reports">
      <summary>Returns the collection of reports for the execution.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Execution.OverrideNonTerminatableThreads">
      <summary>Overrides the value you set in the Thread.TerminationOption property. When an execution terminates, threads with a <c>TerminationOption</c> of ThreadTerminationOptions_Normal stop. If the <c>Execution.OverrideNonTerminatableThreads</c> property is set, threads with a <c>TerminationOption</c> of ThreadTerminationOptions_Prompt also stop without prompting. This option does not affect threads with a <c>TerminationOption</c> of ThreadTerminationOptions_Never.</summary>
      <seealso cref="Execution.TerminateNonTerminatableThreadsPrompt" />
      <seealso cref="Thread.TerminationOption" />
      <seealso cref="ThreadTerminationOptions" />
      <seealso cref="&quot;UIMsg_NonTerminatableThreadsArePreventingTermination&quot;UIMessageCodes.htm" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Execution.TerminateNonTerminatableThreadsPrompt">
      <summary>Specifies the prompt message for a user interface to display in response to the UIMsg_NonTerminatableThreadsArePreventingTermination event. For example, a process model that spawns threads with a Thread.TerminationOption property set to ThreadTerminationOptions_Prompt might set this property to inform users of the specific work they might lose if they terminate the threads. A user interface can display a different prompt message, but this behavior typically is not necessary. </summary>
      <seealso cref="Execution.OverrideNonTerminatableThreads" />
      <seealso cref="Thread.TerminationOption" />
      <seealso cref="ThreadTerminationOptions" />
      <seealso cref="UIMessageCodes" />
      <seealso cref="&quot;UIMsg_NonTerminatableThreadsArePreventingTermination&quot;UIMessageCodes.htm" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Execution.MaximumResultsPerPostResultsCallback">
      <summary>Specifies the maximum number of results a thread accumulates before calling its PostResults callbacks.</summary>
      <seealso cref="Execution.PostResultsCallback_PostFlushMask" />
      <seealso cref="Execution.PostResultsCallback_PreFlushMask" />
      <seealso cref="Execution.PostResultsCallbackMask" />
      <seealso cref="Execution.PostResultsCallbackOptions" />
      <seealso cref="PostResultsCallbackMaskOptions" />
      <seealso cref="PostResultsCallbackOptions" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Execution.PostResultsCallbackInterval">
      <summary>Specifies the interval at which threads in the execution call PostResults callbacks.</summary>
      <remarks>If the time since a thread last called the PostResults callback equals or exceeds the value of this property, the thread calls the PostResults callback when TestStand next generates a result.
If the interval is a negative number, the absolute value determines the interval. In this case, threads call PostResults callbacks if the number of results accumulated exceeds the estimate of how many results TestStand can process within the interval based on the duration of previous PostResults callbacks. This mechanism provides more of a balance between result generation and result processing tasks if result generation is much faster than result processing.</remarks>
      <seealso cref="Execution.PostResultsCallback_PostFlushMask" />
      <seealso cref="Execution.PostResultsCallback_PreFlushMask" />
      <seealso cref="Execution.PostResultsCallbackMask" />
      <seealso cref="Execution.PostResultsCallbackOptions" />
      <seealso cref="PostResultsCallbackMaskOptions" />
      <seealso cref="PostResultsCallbackOptions" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Execution.PostResultsCallbackOptions">
      <summary>Specifies the options for when TestStand calls PostResults callbacks.</summary>
      <seealso cref="Execution.MaximumResultsPerPostResultsCallback" />
      <seealso cref="Execution.PostResultsCallback_PostFlushMask" />
      <seealso cref="Execution.PostResultsCallback_PreFlushMask" />
      <seealso cref="Execution.PostResultsCallbackInterval" />
      <seealso cref="Execution.PostResultsCallbackMask" />
      <seealso cref="PostResultsCallbackMaskOptions" />
      <seealso cref="PostResultsCallbackOptions" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Execution.DiscardResults">
      <summary>When you set this property to <c>True</c>, each step in the execution does not add its results to the corresponding <c>Locals.ResultList</c> array. Regardless of the value of this property, TestStand passes results to the PostResults and the PostResultListEntry Engine callbacks.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Execution.ThreadIds">
      <summary>Returns an array that contains the thread ID of each thread in the execution.</summary>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Execution.RestartWithNewArguments(System.Int32,NationalInstruments.TestStand.Interop.API.PropertyObject)">
      <summary>Restarts a completed execution and passes the arguments you specify to the restarted execution.</summary>
      <remarks>Use this method instead of the Execution.RestartEx method when you want to pass new arguments to an execution you restart. You most commonly use this method in combination with the ExecTypeMask_DiscardArgumentsWhenDone option, but you can use this method with any execution. This method discards any arguments an execution already holds and replaces them with the arguments you specify.</remarks>
      <param name="restartOptionsParam">Specifies which RestartOptions constant to use. You can specify more than one restart option by combining the constants using the bitwise-OR operator.</param>
      <param name="sequenceArgsParam">Specifies a <c>PropertyObject</c> object that contains the arguments to the sequence you want to execute. Each subproperty of the <c>PropertyObject</c> object represents a parameter for the sequence. The subproperties must appear in the same order in which the sequence parameters appear. You can pass a <c>NULL</c> reference if you do not want to pass any arguments. Passing <c>NULL</c> discards any arguments an execution already holds. If you want to reuse the arguments an execution already holds, use the Execution.RestartEx method instead of this method.</param>
      <seealso cref="Execution.RestartEx" />
      <seealso cref="ExecutionTypeMask" />
      <seealso cref="RestartOptions" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Execution.PostResultsCallbackMask">
      <summary>Specifies the mask of the sequences in which TestStand accumulates step results to transfer as a parameter to the PostResults callbacks sequence.</summary>
      <remarks>You typically specify the callback mask if a custom process model plug-in processes results on-the-fly.</remarks>
      <seealso cref="Execution.MaximumResultsPerPostResultsCallback" />
      <seealso cref="Execution.PostResultsCallback_PostFlushMask" />
      <seealso cref="Execution.PostResultsCallback_PreFlushMask" />
      <seealso cref="Execution.PostResultsCallbackInterval" />
      <seealso cref="Execution.PostResultsCallbackOptions" />
      <seealso cref="PostResultsCallbackMaskOptions" />
      <seealso cref="PostResultsCallbackOptions" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Execution.PostResultsCallback_PreFlushMask">
      <summary>TestStand calls PostResults callbacks with all accumulated results before entering any sequence you specify using this property.</summary>
      <remarks>You typically set the pre-flush mask and post-flush mask when a Model Plugin – OnTheFly Step Results entry point requires that the Context parameter of the entry point refer to the same sequence stack frame that executes all the steps in the Steps parameter of the entry point. Otherwise, the Steps parameter of the entry point can contain steps from multiple stack frames. Using this technique results in fewer steps for each invocation of the OnTheFly Step Results entry point, which can affect performance.</remarks>
      <seealso cref="Execution.MaximumResultsPerPostResultsCallback" />
      <seealso cref="Execution.PostResultsCallback_PostFlushMask" />
      <seealso cref="Execution.PostResultsCallbackInterval" />
      <seealso cref="Execution.PostResultsCallbackMask" />
      <seealso cref="Execution.PostResultsCallbackOptions" />
      <seealso cref="PostResultsCallbackMaskOptions" />
      <seealso cref="PostResultsCallbackOptions" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Execution.PostResultsCallback_PostFlushMask">
      <summary>TestStand calls PostResults callbacks with all accumulated results before exiting any sequence you specify using this property.</summary>
      <remarks>You typically specify the pre-flush mask and post-flush mask when a Model Plugin – OnTheFly Step Results entry point requires that the Context parameter of the entry point refer to the same sequence stack frame that executes all the steps in the Steps parameter of the entry point. Otherwise, the Steps parameter of the entry point can contain steps from multiple stack frames. Using this technique results in fewer steps for each invocation of the OnTheFly Step Results entry point, which can affect performance.</remarks>
      <seealso cref="Execution.MaximumResultsPerPostResultsCallback" />
      <seealso cref="Execution.PostResultsCallback_PreFlushMask" />
      <seealso cref="Execution.PostResultsCallbackInterval" />
      <seealso cref="Execution.PostResultsCallbackMask" />
      <seealso cref="Execution.PostResultsCallbackOptions" />
      <seealso cref="PostResultsCallbackMaskOptions" />
      <seealso cref="PostResultsCallbackOptions" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Execution.OutputRecordStreams">
      <summary>Returns the collection of <c>ExecutionOutputRecordStream</c> objects associated with this Execution.</summary>
      <seealso cref="ExecutionOutputRecordStreams" />
      <seealso cref="ExecutionOutputRecordStream" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Execution.IsController">
      <summary>Indicates whether an execution is a process model controller. </summary>
      <remarks>Process models set this property to <c>True</c> for their controlling execution.  The controlling execution for the Batch and Parallel models creates an additional execution for each test socket. The Sequential Model uses a single execution, which serves as both the controlling execution and the socket execution.</remarks>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.Thread">
      <summary>Threads are elements of an Execution. Each thread maintains a call stack that contains a SequenceContext object for each active sequence invocation. You can obtain a thread of an execution by calling the Execution.GetThread method.</summary>
      <seealso cref="Execution.GetThread" />
      <seealso cref="SequenceContext" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Thread.ClearTemporaryBreakpoint">
      <summary>Clears the temporary breakpoint you set by calling the Thread.SetStepInto, Thread.SetStepOut, or Thread.SetStepOver methods.</summary>
      <remarks>Call the Execution.ClearTemporaryBreakpoints method to clear temporary breakpoints of all threads in an execution.</remarks>
      <seealso cref="Execution.ClearTemporaryBreakpoints" />
      <seealso cref="Thread.SetStepInto" />
      <seealso cref="Thread.SetStepOut" />
      <seealso cref="Thread.SetStepOver" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Thread.SetStepOver">
      <summary>Sets the execution to suspend again after execution of the next step completes.</summary>
      <remarks>The method does not resume the execution. The Execution.StepOver method, however, performs the equivalent of calling this method on the foreground thread and then resuming the execution.</remarks>
      <seealso cref="Execution.StepOver" />
      <seealso cref="Thread.ClearTemporaryBreakpoint" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Thread.SetStepInto">
      <summary>Sets the execution to suspend again at the earliest possible point.</summary>
      <remarks>The method does not resume the execution. The Execution.StepInto method, however, performs the equivalent of calling this method on the foreground thread and then resuming the execution.</remarks>
      <seealso cref="Execution.StepInto" />
      <seealso cref="Thread.ClearTemporaryBreakpoint" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Thread.SetStepOut">
      <summary>Sets the execution to suspend again after execution of the current sequence completes.</summary>
      <remarks>The method does not resume the execution. The Execution.StepOut method, however, performs the equivalent of calling this method on the foreground thread and then resuming the execution.</remarks>
      <seealso cref="Execution.StepOut" />
      <seealso cref="Thread.ClearTemporaryBreakpoint" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Thread.GetSequenceContext(System.Int32,System.Int32@)">
      <summary>Returns a reference to the SequenceContext object that corresponds to the call stack index you specify.</summary>
      <param name="callStackIndex">Specifies a zero-based index into the call stack. You obtain the number of items on the call stack from the Thread.CallStackSize property. Call stack index 0 specifies the sequence context for the most recently executing step group.</param>
      <param name="frameId">Returns a unique ID for the sequence context that this method returns. Use this ID with subsequent calls to GetSequenceContext to determine whether the execution is in the same sequence. This can help you minimize the number of items that you must update in the execution display in a user interface.</param>
      <seealso cref="SequenceContext" />
      <seealso cref="SequenceContext.CallStackDepth" />
      <seealso cref="Thread.CallStackSize" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Thread.ClearCurrentRTE">
      <summary>Clears the <c>Result.Error.Occurred</c> property of the current step.</summary>
      <remarks>Use this method to cause the execution thread to ignore a run-time error.</remarks>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Thread.DoInteractiveExecution(NationalInstruments.TestStand.Interop.API.InteractiveArgs)">
      <summary>Executes specific steps interactively.</summary>
      <remarks>You can call this method only if the thread is currently suspended at a breakpoint. You can only run steps in the sequence and step group in which the execution is suspended.</remarks>
      <param name="InteractiveArgsParam">Specifies an InteractiveArgs object that indicates which steps are currently selected steps in the user interface and that contains the looping information necessary for an interactive execution. The selected steps you specify must be in the currently executing step group.</param>
      <seealso cref="InteractiveArgs" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Thread.PostUIMessage(NationalInstruments.TestStand.Interop.API.UIMessageCodes,System.Double,System.String,System.Boolean)">
      <summary><para>Note: This method is obsolete. Use the Thread.PostUIMessageEx method instead.</para></summary>
      <remarks>Posts a user interface message to the current user interface or sequence editor.</remarks>
      <param name="eventCode">Specifies the type of UIMessage.</param>
      <param name="numericDataParam">Specifies numeric data to pass with the message. For example, when you post a <c>UIMsg_ProgressPercent</c> event, this parameter specifies the percent done.</param>
      <param name="stringDataParam">Specifies string data to pass with the message. For example, when you post a <c>UIMsg_ProgressText</c> event, this parameter specifies the text to display.</param>
      <param name="synchronous">Typically, you pass <c>True</c> for this parameter to direct the method to wait until the user interface processes the message. If you pass <c>False</c>, the method returns immediately without waiting for the user interface to handle the message. If you pass <c>False</c> and post messages faster than the user interface processes messages, the number of messages in the queue the user interface must handle grows unbounded and floods the user interface with messages, which causes the user interface to become unresponsive.</param>
      <seealso cref="Thread.PostUIMessageEx" />
      <seealso cref="UIMessage" />
      <seealso cref="UIMessageCodes" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Thread.AsPropertyObject">
      <summary>Returns the underlying PropertyObject that represents the Thread object. Use the PropertyObject to modify, add, or remove custom properties of the object.</summary>
      <seealso cref="PropertyObject" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Thread.DisplayName">
      <summary>Returns the name to display for the thread.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Thread.Execution">
      <summary>Returns a reference to the Execution object to which the thread belongs.</summary>
      <remarks>Release the Execution reference when you have finished using it.</remarks>
      <seealso cref="Execution" />
      <seealso cref="SequenceContext.Execution" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Thread.Id">
      <summary>Returns a unique ID number for the thread. The ID number is unique with respect to all threads that you initiate before you shut down the TestStand Engine.
<para>Note: The ID number is never zero.</para></summary>
      <remarks>Use this ID number to compare two Thread object references to determine whether they refer to the same underlying thread.</remarks>
      <seealso cref="Thread" />
      <seealso cref="Thread.DisplayName" />
      <seealso cref="Thread.UniqueThreadId" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Thread.CallStackSize">
      <summary>Returns the number of call stack entries that currently exist for the thread.</summary>
      <remarks>You can obtain a sequence context for each call stack entry by passing a call stack index to the Thread.GetSequenceContext method.</remarks>
      <seealso cref="SequenceContext.CallStackDepth" />
      <seealso cref="Thread.GetSequenceContext" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Thread.WaitForEnd(System.Int32,System.Boolean,System.Object,System.Object)">
      <summary>Waits for the thread to finish executing.</summary>
      <returns>Returns <c>True</c> if the thread finished executing. Returns <c>False</c> if the timeout expired.</returns>
      <param name="millisecondTimeOut">Specifies the number of milliseconds to wait or, pass <c>-1</c> to wait indefinitely.
If you pass a value for the callingSequenceContext parameter, TestStand suspends the timeout while the calling execution is suspended at a breakpoint so that the time spent at a breakpoint does not count towards the elapsed timeout time.</param>
      <param name="processWindowsMsgs">Pass <c>True</c> to process Microsoft Windows messages while waiting.</param>
      <param name="stepToStoreResultsIn">Specifies the step for which the result is set to the sequence result of this thread.</param>
      <param name="callingSequenceContext">If you call this method from within a sequence, you can pass the current sequence context to specify that the method returns immediately if the user terminates the execution from which you call this method.</param>
      <seealso cref="Execution.WaitForEndEx" />
      <seealso cref="&quot;Omitting Optional Parameters&quot;javascript:APILink('/InfoTopics/Optional_Parameters.htm')" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Thread.ExternallySuspended">
      <summary><para>Note: Because the Allow Break While in Code Modules option on the Execution tab of the Station Options dialog box is enabled by default in TestStand 2014 or later, you do not need to use this property unless you disable the option.</para>
Specifies to treat this thread as suspended when you stop the execution for a breakpoint.</summary>
      <remarks>By default, when a step blocks or takes a long time to complete and the user attempts to suspend (break) execution, execution cannot suspend until the step unblocks and returns. For example, if the user breaks execution when a step launches a dialog box, execution does not suspend until after the user closes the dialog box.
A step uses this property to enable execution to break while it performs a lengthy operation or waits an indeterminate period of time. When a step sets this property, it specifies that TestStand considers the thread to be suspended if the user requests that the execution break. For example, you can add the following code to the step code module:
<c>Boolean previousExternallySuspended = mySequenceContext.GetThread().ExternallySuspended</c>
<c>' set externally suspended to true</c><br/><c>mySequenceContext.GetThread().ExternallySuspended = true</c>
<c>' Insert code to launch a dialog box or perform another operation that might block indefinitely</c>
<c>' restore the previous setting of externally suspended</c><br/><c>mySequenceContext.GetThread().ExternallySuspended = previousExternallySuspended</c>
<para>Note: When you reset this property to <c>False</c>, the call to set the property blocks if the execution is suspended. This prevents the step from executing further until the user continues the execution.</para></remarks>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Thread.PostUIMessageEx(NationalInstruments.TestStand.Interop.API.UIMessageCodes,System.Double,System.String,System.Object,System.Boolean)">
      <summary>Posts a user interface message to the current user interface or sequence editor.</summary>
      <remarks>The messages that you can post from a step are UIMsg_ProgressPercent and UIMsg_ProgressText. These messages tell the user interface to display a progress indicator or text message for the execution.</remarks>
      <param name="eventCode">Specifies the type of UIMessage.</param>
      <param name="numericDataParam">Specifies numeric data to pass with the message. When you post a UIMsg_ProgressPercent event, this parameter specifies the percent done.</param>
      <param name="stringDataParam">Specifies string data to pass with the message. When you post a UIMsg_ProgressText event, this parameter specifies the text to display.</param>
      <param name="activeXDataParam">Specifies an ActiveX reference to pass with the message. </param>
      <param name="synchronous">Typically, you pass <c>True</c> for this parameter to direct the method to wait until the user interface processes the message. If you pass <c>False</c> and post messages faster than the user interface processes messages, the number of messages in the queue the user interface must handle grows unbounded and floods the user interface with messages, which causes the user interface to become unresponsive.</param>
      <seealso cref="Engine.PostUIMessage" />
      <seealso cref="UIMessageCodes" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Thread.Batch">
      <summary>Returns the Batch object to which this thread belongs.</summary>
      <remarks>Returns a <c>NULL</c> reference if this thread was not added to a batch. The Batch Synchronization step type uses this method.</remarks>
      <seealso cref="Thread.AddToBatch" />
      <seealso cref="Thread.SetBatchRTEOption" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Thread.AddToBatch(System.Object,System.Int32)">
      <summary>Adds this thread to a Batch object.</summary>
      <remarks>The Batch Synchronization step type uses this method.</remarks>
      <param name="batchObj">Specifies the batch object to which TestStand adds the thread.</param>
      <param name="orderNumber">Specifies the order number corresponding to the thread within the batch.</param>
      <seealso cref="Thread.Batch" />
      <seealso cref="Thread.SetBatchRTEOption" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Thread.Resume">
      <summary>Resumes execution of the thread.</summary>
      <remarks>If you create a thread as initially suspended using either a sequence call step or the TestStand API, use this method to begin executing the thread.</remarks>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Thread.UniqueThreadId">
      <summary>Returns an identification string that is unique among all threads in all instances of the TestStand Engine.</summary>
      <remarks>Use this string to uniquely identify a TestStand thread across multiple instances of the TestStand Engine. If you are using only one instance of the TestStand Engine, you can use the numeric Thread.Id property of the thread instead.</remarks>
      <seealso cref="Thread.DisplayName" />
      <seealso cref="Thread.Id" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Thread.SetBatchRTEOption(NationalInstruments.TestStand.Interop.API.RTEOptions)">
      <summary>Specifies the behavior of TestStand when a run-time error occurs in any execution with a thread that is part of the same batch as the thread on which you call this method.</summary>
      <remarks>Calling this method on a thread that is not part of a batch has no effect.</remarks>
      <param name="newValue">Specifies the behavior of TestStand when a run-time error occurs.</param>
      <seealso cref="Engine.DisplayRunTimeErrorDialogEx" />
      <seealso cref="RTEOptions" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Thread.RunTimeVariables">
      <summary>Use this PropertyObject to create and access variables you want to exist only for the current run of the thread.</summary>
      <remarks>TestStand destroys these variables when the thread completes, terminates, or aborts.</remarks>
      <seealso cref="Engine.TemporaryGlobals" />
      <seealso cref="Execution.RunTimeVariables" />
      <seealso cref="PropertyObject" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Thread.WillStepIntoModule">
      <summary>Returns <c>True</c> if the execution will step into the code module for the current step.</summary>
      <remarks>This property is <c>True</c> only when accessed from a Pre-Step substep and the execution will suspend in the code module for the step that uses the substep. Obtaining this property from other locations, such as an expression or a step code module, always returns <c>False</c>.</remarks>
      <seealso cref="Thread.SetStepInto" />
      <seealso cref="&quot;Using Substeps&quot;javascript:TSFundLink('/InfoTopics/Step_Type_Prop_Substeps.html')" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Thread.TerminationOption">
      <summary>Specifies the behavior of a thread when its execution attempts to terminate. This property does not inhibit aborting. The default value is <c>ThreadTerminationOption_Normal</c>.</summary>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Thread.FlushPostResults">
      <summary>Instructs the thread to immediately call its PostResults callbacks with accumulated results. This method does nothing if the thread has no accumulated results.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.SequenceContext">
      <summary>A SequenceContext object contains complete information about an execution at a particular point during the execution. You can use the sequence context to access all the objects, variables, and properties in the execution. From the sequence context, you also can obtain references to all the steps in the current sequence, the sequence contexts for the calling sequences, the Process Model entry point sequence, and the <c>MainSequence</c> in the client sequence file. You can pass the current sequence context or subproperties to code modules you call from steps.</summary>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.SequenceContext.IsInteractiveStep(System.Int32)">
      <summary>Returns <c>True</c> if the execution that the sequence context represents is in interactive mode and if the step you specify is selected for interactive execution.</summary>
      <remarks>User interfaces dim excluded steps during an interactive execution. The StationOptions.InteractiveBranchMode property setting determines if excluded steps execute.</remarks>
      <param name="stepIndexParam">Specifies the zero-based index of the step within the current step group.</param>
      <seealso cref="SequenceContext.InInteractiveMode" />
      <seealso cref="SequenceContext.IsStepExcludedFromExecution" />
      <seealso cref="StationOptions.InteractiveBranchMode" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.SequenceContext.AsPropertyObject">
      <summary>Returns the underlying PropertyObject that represents the object. Use the PropertyObject to modify, add, or remove custom properties of the object.</summary>
      <seealso cref="PropertyObject" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SequenceContext.Step">
      <summary>Returns a reference to the currently executing step.</summary>
      <remarks>Returns a run-time error if the execution is currently suspended at a breakpoint. </remarks>
      <seealso cref="SequenceContext.NextStep" />
      <seealso cref="SequenceContext.PreviousStep" />
      <seealso cref="SequenceContext.StepIndex" />
      <seealso cref="Step" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SequenceContext.PreviousStep">
      <summary>Returns a reference to the step that executed last. </summary>
      <remarks>Returns a run-time error if no previous step exists.</remarks>
      <seealso cref="SequenceContext.NextStep" />
      <seealso cref="SequenceContext.PreviousStepIndex" />
      <seealso cref="SequenceContext.Step" />
      <seealso cref="Step" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SequenceContext.NextStep">
      <summary>Returns a reference to the next step to execute.</summary>
      <remarks>Returns a run-time error if no next step exists.</remarks>
      <seealso cref="SequenceContext.NextStepIndex" />
      <seealso cref="SequenceContext.PreviousStep" />
      <seealso cref="SequenceContext.Step" />
      <seealso cref="Step" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SequenceContext.Sequence">
      <summary>Returns a reference to the run-time copy of the currently executing sequence. </summary>
      <seealso cref="Sequence" />
      <seealso cref="SequenceContext.SequenceFile" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SequenceContext.SequenceFile">
      <summary>Returns a reference to the sequence file of the currently executing sequence. </summary>
      <seealso cref="SequenceContext.Sequence" />
      <seealso cref="SequenceFile" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SequenceContext.StepIndex">
      <summary>Specifies the zero-based index of the currently executing step. The index indicates the position of the step in the step group the SequenceContext.StepGroup property identifies. If execution is suspended between steps, this property returns <c>-1</c>.</summary>
      <seealso cref="SequenceContext.SequenceIndex" />
      <seealso cref="SequenceContext.Step" />
      <seealso cref="SequenceContext.StepGroup" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SequenceContext.PreviousStepIndex">
      <summary>Specifies the zero-based index of the step that executed last. The index indicates the position of the step in the step group the SequenceContext.StepGroup property identifies.</summary>
      <remarks>This property returns <c>-1</c> if no step executed previously.</remarks>
      <seealso cref="SequenceContext.NextStepIndex" />
      <seealso cref="SequenceContext.PreviousStep" />
      <seealso cref="SequenceContext.StepGroup" />
      <seealso cref="SequenceContext.StepIndex" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SequenceContext.NextStepIndex">
      <summary>Specifies the zero-based index of the next step to execute. The index indicates the position of the step in the step group the SequenceContext.StepGroup property identifies.</summary>
      <remarks>This property returns <c>-1</c> if the step group contains no additional steps to execute.</remarks>
      <seealso cref="SequenceContext.NextStep" />
      <seealso cref="SequenceContext.PreviousStepIndex" />
      <seealso cref="SequenceContext.StepGroup" />
      <seealso cref="SequenceContext.StepIndex" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SequenceContext.SequenceIndex">
      <summary>Returns the zero-based index of the currently executing sequence in the sequence file.</summary>
      <seealso cref="SequenceContext.Sequence" />
      <seealso cref="SequenceContext.SequenceFile" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SequenceContext.StepGroup">
      <summary>Specifies the step group of the currently executing step.</summary>
      <seealso cref="SequenceContext.SelectedStepGroup" />
      <seealso cref="SequenceContext.Sequence" />
      <seealso cref="SequenceContext.Step" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SequenceContext.Caller">
      <summary>Returns the sequence context of the calling sequence.
<para>Note: To access additional levels of the call stack, such as the caller of the calling sequence, use the Thread.GetSequenceContext method to specify the desired call stack level as a parameter.</para></summary>
      <remarks>Returns a <c>NULL</c> reference if no calling sequence exists. For asynchronously called sequences, this property might reference a sequence context that is no longer running steps.</remarks>
      <seealso cref="SequenceContext" />
      <seealso cref="SequenceContext.CallingStep" />
      <seealso cref="SequenceContext.CallStackDepth" />
      <seealso cref="SequenceContext.Root" />
      <seealso cref="Thread.GetSequenceContext" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SequenceContext.CallStackName">
      <summary>Returns the name to display in the call stack list for the sequence context.</summary>
      <seealso cref="SequenceContext.Caller" />
      <seealso cref="SequenceContext.CallingStep" />
      <seealso cref="SequenceContext.CallStackDepth" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SequenceContext.RunTimeErrorMessage">
      <summary><para>Note: This property is obsolete. Use the SequenceContext.GetRunTimeErrorMessageEx method instead.</para></summary>
      <remarks>Returns a display string that contains the run-time error message for the current step the context specifies.</remarks>
      <seealso cref="SequenceContext.ErrorReported" />
      <seealso cref="SequenceContext.GetRunTimeErrorMessageEx" />
      <seealso cref="SequenceContext.SequenceErrorOccurred" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SequenceContext.StepGroupStartedInteractiveExe">
      <summary>Returns <c>True</c> if the current step group is the one in which an interactive execution was started and this is the sequence context for that execution.</summary>
      <seealso cref="SequenceContext.InInteractiveMode" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SequenceContext.InInteractiveMode">
      <summary>Returns <c>True</c> if the sequence context is for an interactive execution.</summary>
      <seealso cref="SequenceContext.InteractiveContext" />
      <seealso cref="SequenceContext.IsInteractiveStep" />
      <seealso cref="SequenceContext.IsStepExcludedFromExecution" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SequenceContext.InteractiveContext">
      <summary>If the sequence context is for an interactive execution, this property returns a reference to an InteractiveContext object.</summary>
      <remarks>Returns a <c>NULL</c> reference if the sequence context is not for an interactive execution.</remarks>
      <seealso cref="InteractiveContext" />
      <seealso cref="SequenceContext.InInteractiveMode" />
      <seealso cref="SequenceContext.IsInteractiveStep" />
      <seealso cref="SequenceContext.IsStepExcludedFromExecution" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SequenceContext.Engine">
      <summary>Returns a reference to the Engine object.</summary>
      <seealso cref="Engine" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SequenceContext.Root">
      <summary>Returns the root sequence context of the execution with which this sequence context is associated.</summary>
      <remarks>The root sequence context is the first sequence context of the execution.</remarks>
      <seealso cref="SequenceContext" />
      <seealso cref="SequenceContext.CallStackDepth" />
      <seealso cref="SequenceContext.Main" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SequenceContext.Main">
      <summary>Returns the <c>MainSequence</c> context of the execution with which this sequence context is associated.</summary>
      <remarks>If you start an execution using a Process Model entry point, the <c>MainSequence</c> context is the sequence context of the <c>MainSequence</c> in the client sequence file. If you start an execution without using an Execution entry point by executing a sequence or steps directly the <c>MainSequence</c> context is the same as the root sequence context stored in the SequenceContext.Root property.</remarks>
      <seealso cref="SequenceContext" />
      <seealso cref="SequenceContext.CallStackDepth" />
      <seealso cref="SequenceContext.ProcessModelClient" />
      <seealso cref="SequenceContext.Root" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SequenceContext.Thread">
      <summary>Returns a reference to the currently executing thread. </summary>
      <seealso cref="SequenceContext.Execution" />
      <seealso cref="Thread" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SequenceContext.Execution">
      <summary>Returns a reference to the currently executing execution.</summary>
      <seealso cref="Execution" />
      <seealso cref="Thread.Execution" />
      <seealso cref="UIMessage.Execution" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SequenceContext.Report">
      <summary>Returns a reference to the current report.</summary>
      <seealso cref="Execution.Report" />
      <seealso cref="Report" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SequenceContext.ProcessModelClient">
      <summary>Specifies a reference to the client sequence file of a process model execution.</summary>
      <seealso cref="SequenceContext.Main" />
      <seealso cref="SequenceContext.Root" />
      <seealso cref="SequenceFile" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SequenceContext.SelectedFile">
      <summary>Returns a reference to the selected sequence file, if any, when this execution began.</summary>
      <remarks>TestStand sets this property only for the root context in an execution.</remarks>
      <seealso cref="EditArgs" />
      <seealso cref="SequenceContext.Root" />
      <seealso cref="SequenceContext.SelectedExecution" />
      <seealso cref="SequenceContext.SelectedPropertyObjectFile" />
      <seealso cref="SequenceContext.SelectedPropertyObjects" />
      <seealso cref="SequenceContext.SelectedSequences" />
      <seealso cref="SequenceContext.SelectedStepGroup" />
      <seealso cref="SequenceContext.SelectedSteps" />
      <seealso cref="SequenceFile" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SequenceContext.SelectedExecution">
      <summary>Returns a reference to the execution, if any, selected when this execution began.</summary>
      <remarks>TestStand sets this property only for the root context in an execution.</remarks>
      <seealso cref="EditArgs" />
      <seealso cref="Execution" />
      <seealso cref="SequenceContext.Root" />
      <seealso cref="SequenceContext.SelectedFile" />
      <seealso cref="SequenceContext.SelectedPropertyObjectFile" />
      <seealso cref="SequenceContext.SelectedPropertyObjects" />
      <seealso cref="SequenceContext.SelectedSequences" />
      <seealso cref="SequenceContext.SelectedStepGroup" />
      <seealso cref="SequenceContext.SelectedSteps" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SequenceContext.Locals">
      <summary>Returns a reference to the object that contains the locals for the currently executing sequence.</summary>
      <remarks>Changes made to the structure or values of properties in locals for the currently executing sequence file do not affect the default file locals defined in the sequence file.</remarks>
      <seealso cref="PropertyObject" />
      <seealso cref="Sequence.Locals" />
      <seealso cref="SequenceContext.FileGlobals" />
      <seealso cref="SequenceContext.StationGlobals" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SequenceContext.Parameters">
      <summary>Returns a reference to the object that contains the parameters for the currently executing sequence.</summary>
      <seealso cref="PropertyObject" />
      <seealso cref="SequenceContext.Caller" />
      <seealso cref="SequenceContext.CallingStep" />
      <seealso cref="SequenceContext.Locals" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SequenceContext.FileGlobals">
      <summary>Returns a reference to the object that contains the globals for the currently executing sequence file.</summary>
      <remarks>Changes made to the structure or values of properties in globals for the currently executing sequence file do not affect the default file globals defined in the sequence file.</remarks>
      <seealso cref="PropertyObject" />
      <seealso cref="SequenceContext.Locals" />
      <seealso cref="SequenceContext.StationGlobals" />
      <seealso cref="SequenceFile.FileGlobalsDefaultValues" />
      <seealso cref="SequenceFile.FileGlobalsScope" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SequenceContext.StationGlobals">
      <summary>Returns a reference to the object that contains the globals for the current installation of TestStand.</summary>
      <remarks>You can use this property to store temporary station globals. Updating temporary station globals does not update the station globals file. </remarks>
      <seealso cref="Engine.Globals" />
      <seealso cref="PropertyObject" />
      <seealso cref="SequenceContext.FileGlobals" />
      <seealso cref="SequenceContext.Locals" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SequenceContext.CallStackDepth">
      <summary>Returns the zero-based sequence call depth of the sequence context in the current execution. The call depth refers to the number of nested sequences called before reaching the currently executing sequence. The call stack depth of the first sequence an execution calls is zero, and the call stack depth increases with each call to a subsequence.</summary>
      <seealso cref="SequenceContext.Caller" />
      <seealso cref="SequenceContext.CallingStep" />
      <seealso cref="SequenceContext.CallStackName" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SequenceContext.LoopIndex">
      <summary>Specifies the value of the loop index at a given point as a step loops. The value of the loop index depends on the looping construct you select for the step.</summary>
      <remarks><para>Note: This property returns the value of the loop index truncated to a 32-bit integer. To retrieve the underlying 64-bit floating point loop index, call <c>SequenceContext.AsPropertyObject().GetValNumber(&quot;RunState.LoopIndex&quot;, 0)</c>.</para></remarks>
      <seealso cref="SequenceContext.LoopNumFailed" />
      <seealso cref="SequenceContext.LoopNumIterations" />
      <seealso cref="SequenceContext.LoopNumPassed" />
      <seealso cref=".Step" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SequenceContext.LoopNumPassed">
      <summary>Specifies the number of passed iterations when a step loops.</summary>
      <seealso cref="SequenceContext.LoopIndex" />
      <seealso cref="SequenceContext.LoopNumFailed" />
      <seealso cref="SequenceContext.LoopNumIterations" />
      <seealso cref="SequenceContext.Step" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SequenceContext.LoopNumFailed">
      <summary>Specifies the number of failed iterations when a step loops.</summary>
      <seealso cref="SequenceContext.LoopIndex" />
      <seealso cref="SequenceContext.LoopNumIterations" />
      <seealso cref="SequenceContext.LoopNumPassed" />
      <seealso cref="SequenceContext.Step" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SequenceContext.IsProcessModel">
      <summary>Returns <c>True</c> if the sequence that is executing for the sequence context is within a process model sequence file.</summary>
      <seealso cref="SequenceContext.ProcessModelClient" />
      <seealso cref="SequenceContext.Sequence" />
      <seealso cref="SequenceContext.SequenceFile" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SequenceContext.Tracing">
      <summary>Specifies whether to trace the execution of steps to which this sequence context applies.</summary>
      <seealso cref="Execution.TracingDisabled" />
      <seealso cref="SequenceContext.CanTrace" />
      <seealso cref="StationOptions.TracingEnabled" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SequenceContext.SequenceFailed">
      <summary>Specifies the failure state of the currently executing sequence.</summary>
      <remarks>Setting this property to <c>True</c> does not cause the currently executing sequence to go to the Cleanup step group when the Sequence.FailureAction property or StationOptions.AlwaysGotoCleanupOnFailure property are <c>True</c>. Set the SequenceContext.GotoCleanup property to <c>True</c> to force a sequence to go to the Cleanup step group.</remarks>
      <seealso cref="Sequence.FailureAction" />
      <seealso cref="SequenceContext.GotoCleanup" />
      <seealso cref="SequenceContext.SequenceErrorOccurred" />
      <seealso cref="StationOptions.AlwaysGotoCleanupOnFailure" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SequenceContext.SelectedSequences">
      <summary>Returns an array of references to the selected sequences, if any, when this execution began.</summary>
      <remarks>TestStand sets this property only for the root context in an execution.
Returns an empty array if no sequences were selected.</remarks>
      <seealso cref="Sequence" />
      <seealso cref="SequenceContext.SelectedExecution" />
      <seealso cref="SequenceContext.SelectedFile" />
      <seealso cref="SequenceContext.SelectedPropertyObjectFile" />
      <seealso cref="SequenceContext.SelectedPropertyObjects" />
      <seealso cref="SequenceContext.SelectedStepGroup" />
      <seealso cref="SequenceContext.SelectedSteps" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SequenceContext.SelectedSteps">
      <summary>Returns an array of references to the selected steps, if any, when this execution began.</summary>
      <remarks>Returns an empty array if no steps were selected. TestStand sets this property only for the root context in an execution.</remarks>
      <seealso cref="SequenceContext.SelectedExecution" />
      <seealso cref="SequenceContext.SelectedFile" />
      <seealso cref="SequenceContext.SelectedPropertyObjectFile" />
      <seealso cref="SequenceContext.SelectedPropertyObjects" />
      <seealso cref="SequenceContext.SelectedSequences" />
      <seealso cref="SequenceContext.SelectedStepGroup" />
      <seealso cref="Step" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SequenceContext.ApplicationIsEditor">
      <summary>Returns <c>True</c> if the current application is a sequence editor.</summary>
      <seealso cref="Engine.ApplicationIsEditor" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SequenceContext.GotoCleanup">
      <summary>Specifies the Goto cleanup state of the currently executing sequence.</summary>
      <seealso cref="Sequence.FailureAction" />
      <seealso cref="SequenceContext.SequenceErrorOccurred" />
      <seealso cref="SequenceContext.SequenceFailed" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SequenceContext.EngineAsDispatch">
      <summary><para>Note: This property is obsolete. Use the SequenceContext.Engine property instead.</para></summary>
      <remarks>Returns a reference to the Engine object.</remarks>
      <seealso cref="SequenceContext.Engine" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SequenceContext.Id">
      <summary>Returns the unique ID that distinguishes this sequence context from all other sequence contexts.
<para>Note: The ID number is never zero.</para></summary>
      <seealso cref="Execution.Id" />
      <seealso cref="Thread.Id" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.SequenceContext.IsStepExcludedFromExecution(NationalInstruments.TestStand.Interop.API.Step)">
      <summary>Specifies whether the step was selected as part of the interactive execution or the hierarchical execution in progress.</summary>
      <remarks>User interfaces dim excluded steps during an interactive execution. The StationOptions.InteractiveBranchMode property setting determines if excluded steps execute.</remarks>
      <returns>Returns <c>True</c> if the step was not selected as part of the interactive execution or the hierarchical execution in progress.</returns>
      <param name="step">Specifies the step to verify.</param>
      <seealso cref="SequenceContext.InInteractiveMode" />
      <seealso cref="SequenceContext.IsInteractiveStep" />
      <seealso cref="StationOptions.InteractiveBranchMode" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.SequenceContext.GetRunTimeErrorMessageEx(System.String@,System.String@,System.String@)">
      <summary>Returns the display strings that contain the run-time error details for the current step the context specifies.</summary>
      <remarks>If a run-time error occurs, use this method to obtain the error message display strings. Typically, you use this method in a user interface to launch a custom Run-Time Error dialog box. To obtain a reference to a failing context from an Engine callback, such as the PostStepRunTimeError callback, access the context specified by the lookup string <c>&quot;RunState.Caller.ThisContext&quot;</c>.</remarks>
      <param name="detailsMsg">Returns a string that describes the specific cause of the error.</param>
      <param name="errorCodeMsg">Returns a string with the error code number and the general meaning.</param>
      <param name="locationMsg">Returns a string that describes where the error occurred.</param>
      <seealso cref="&quot;Run-Time Error dialog box&quot;javascript:RefLink('/InfoTopics/DB_Run_Time_Error.htm')" />
      <seealso cref="SequenceContext.SequenceErrorMessage" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SequenceContext.CallingStep">
      <summary>Returns a run-time copy of the Step object for the step that called the current sequence.</summary>
      <remarks>This property is valid when the current sequence is called synchronously or asynchronously. This property does not exist in the root SequenceContext. Any changes to property values in the returned Step object only modify the execution version of the object.</remarks>
      <seealso cref="SequenceContext.Caller" />
      <seealso cref="SequenceContext.CallStackDepth" />
      <seealso cref="SequenceContext.Root" />
      <seealso cref="Step" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SequenceContext.SequenceErrorMessage">
      <summary>Reports the sequence error message to the step that calls the sequence.</summary>
      <seealso cref="SequenceContext.ErrorReported" />
      <seealso cref="SequenceContext.SequenceErrorCode" />
      <seealso cref="SequenceContext.SequenceErrorOccurred" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SequenceContext.SequenceErrorCode">
      <summary>Reports the sequence error code to the step that calls the sequence.</summary>
      <seealso cref="SequenceContext.ErrorReported" />
      <seealso cref="SequenceContext.SequenceErrorMessage" />
      <seealso cref="SequenceContext.SequenceErrorOccurred" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SequenceContext.SequenceErrorOccurred">
      <summary>Reports the sequence error occurred flag to the step that calls the sequence.</summary>
      <seealso cref="SequenceContext.ErrorReported" />
      <seealso cref="SequenceContext.SequenceErrorCode" />
      <seealso cref="SequenceContext.SequenceErrorMessage" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SequenceContext.ErrorReported">
      <summary>Set this property to <c>True</c> from within a SequenceFilePostStepRuntimeError, ProcessModelPostStepRuntimeError, or StationPostStepRuntimeError callback sequence to prevent TestStand from sending a UIMsg_BreakOnRunTimeError message to the user interface. The <c>UIMsg_BreakOnRunTimeError</c> message tells the user interface to launch the Run-Time Error dialog box. By setting this property to <c>True</c> in the callback, you are telling TestStand that the callback has already handled the run-time error.</summary>
      <remarks>You can set this property from within an expression such as <c>RunState.Caller.RunState.ErrorReported = True</c>. Also, when you implement the callback, National  Instruments recommends that you verify that this property is already <c>True</c> before continuing because a different run-time error callback might have already handled the error. Outside of run-time error callbacks, this property is always <c>False</c>, and the value has no meaning. Refer to the <c>Overriding SequenceFilePostStepRuntimeError Callback</c> example located in the <c>&lt;TestStand Public&gt;\Examples\Modifying Process Models\Overriding Engine Callbacks</c> directory for more information about how to use this property.</remarks>
      <seealso cref="&quot;Run-Time Error dialog box&quot;javascript:RefLink('/InfoTopics/DB_Run_Time_Error.htm')" />
      <seealso cref="SequenceContext.GetRunTimeErrorMessageEx" />
      <seealso cref="SequenceContext.SequenceErrorCode" />
      <seealso cref="SequenceContext.SequenceErrorMessage" />
      <seealso cref="SequenceContext.SequenceErrorOccurred" />
      <seealso cref="SequenceContext.SequenceFailed" />
      <seealso cref="UIMessageCodes" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SequenceContext.SelectedStepGroup">
      <summary>Specifies the index of the step group selected when the execution started.
</summary>
      <remarks>TestStand sets this property only for the root context in an execution.</remarks>
      <seealso cref="SequenceContext.SelectedExecution" />
      <seealso cref="SequenceContext.SelectedFile" />
      <seealso cref="SequenceContext.SelectedPropertyObjectFile" />
      <seealso cref="SequenceContext.SelectedPropertyObjects" />
      <seealso cref="SequenceContext.SelectedSequences" />
      <seealso cref="SequenceContext.SelectedSteps" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SequenceContext.SelectedPropertyObjectFile">
      <summary>Returns the PropertyObjectFile object for the file that was active when the execution started.</summary>
      <remarks>When the initially active file is a sequence file, this property is identical to the SequenceContext.SelectedFile property. TestStand sets this property only for the root context in an execution.</remarks>
      <seealso cref="PropertyObjectFile" />
      <seealso cref="SequenceContext.SelectedExecution" />
      <seealso cref="SequenceContext.SelectedFile" />
      <seealso cref="SequenceContext.SelectedPropertyObjects" />
      <seealso cref="SequenceContext.SelectedSequences" />
      <seealso cref="SequenceContext.SelectedStepGroup" />
      <seealso cref="SequenceContext.SelectedSteps" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SequenceContext.CallerDiscardsResults">
      <summary>Returns a value that indicates whether any sequence in the call stack instructs TestStand to disable results or if any calling step higher in the call stack instructs TestStand to not record results.</summary>
      <remarks>This property does not consider whether the execution or the engine specified to discard the results. A PostStepResult callback typically uses this property to determine whether the callback processes a step result.</remarks>
      <seealso cref="Execution.DisableResults" />
      <seealso cref="StationOptions.DisableResults" />
      <seealso cref="Sequence.DisableResults" />
      <seealso cref="Step.ResultRecordingOption" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.SequenceContext.GetRunTimeErrorWinHelpInfo(System.Int32@,System.String@)">
      <summary>Obtains the help ID and help file for the run-time error. Use the help ID and help file when you call the Engine.DisplayHelpTopic method.</summary>
      <remarks>If a run-time error occurs, use this method to obtain the associated help file and/or help ID.
<para>Note: Not all run-time errors have associated help files.</para></remarks>
      <param name="helpID">Returns a help ID for a topic in a help file to provide context-sensitive help for the object.</param>
      <param name="helpFile">Returns the help file path.</param>
      <seealso cref="Engine.DisplayHelpTopic" />
      <seealso cref="SequenceContext.GetRunTimeErrorMessageEx" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SequenceContext.SelectedPropertyObjects">
      <summary>Returns an array of references to the selected PropertyObjects, if any, when the execution began.</summary>
      <remarks>TestStand sets this property only for the root context in an execution.</remarks>
      <seealso cref="SequenceContext.SelectedExecution" />
      <seealso cref="SequenceContext.SelectedFile" />
      <seealso cref="SequenceContext.SelectedPropertyObjectFile" />
      <seealso cref="SequenceContext.SelectedSequences" />
      <seealso cref="SequenceContext.SelectedStepGroup" />
      <seealso cref="SequenceContext.SelectedSteps" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SequenceContext.LoopNumIterations">
      <summary>Specifies the number of iterations completed at a given point as a step loops.</summary>
      <seealso cref="SequenceContext.LoopIndex" />
      <seealso cref="SequenceContext.LoopNumFailed" />
      <seealso cref="SequenceContext.LoopNumPassed" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SequenceContext.NumStepsExecuted">
      <summary>Specifies the number of steps that have completed execution in the stack frame the context represents.</summary>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.SequenceContext.GetMultipleValues(System.String,NationalInstruments.TestStand.Interop.API.PropertyObjectElements)">
      <summary>This method determines if the value of an element of a subproperty of multiple steps, such as the value, comment, format, or flags, represents the shared element value for all the steps in the array. Use this method with a SequenceContext that was created by passing an array of step references to the Engine.NewEditContext method, where the SequenceContext.Step property in the context contains the subset of properties all steps contain. This method returns zero if the Step subproperty element specified by lookupString and elem parameters has the same value for all steps.</summary>
      <remarks>Use this method and the SequenceContext.SetMultipleValues method if you are writing a sequence editor in which you can select multiple steps. Display <c>Multiple Values</c> for an element when the value of the step property element is not the same.
You can create a SequenceContext with a Step property that represents multiple steps by calling the Engine.NewEditContext method and passing an array of object references to steps as the first parameter.</remarks>
      <returns>Returns <c>0</c> if the value of the property element is the same for all steps in the context. If you pass in PropertyObjectElement_Flags for the elem parameter, the return value represents the bits of the PropertyFlags constant. A bit value is <c>0</c> if the flag value is the same for all steps.</returns>
      <param name="lookupString">Specifies the name of a subproperty within the SequenceContext you want to obtain the multiple values of. You can also pass lookup strings to this parameter.</param>
      <param name="elem">Specifies the element of the subproperty that you want to obtain the multiple values of.</param>
      <seealso cref="Engine.NewEditContext" />
      <seealso cref="&quot;Lookup Strings&quot;../InfoTopics/API_lookupString.html" />
      <seealso cref="PropertyFlags" />
      <seealso cref="PropertyObjectElements" />
      <seealso cref="SequenceContext.SetMultipleValues" />
      <seealso cref="SequenceContext.Step" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.SequenceContext.SetMultipleValues(System.String,NationalInstruments.TestStand.Interop.API.PropertyObjectElements,System.Int32)">
      <summary>Use this method to update the multiple value state for property elements under SequenceContext.Step in a context that Engine.NewEditContext created. You create a SequenceContext that represents multiple steps by passing an array of object references to steps as the first parameter. When you set the value of a property element of the steps the context represents, you must use this method to update the context so that SequenceContext.GetMultipleValues returns correct values.</summary>
      <remarks>Use this method if you are writing a sequence editor in which you can select multiple steps and the editor displays <c>Multiple Values</c> for step property elements.
Calling this method does not update any object in the sequence context or any object you used to create the sequence context.</remarks>
      <param name="lookupString">Pass the name of a subproperty within the SequenceContext you want to set the multiple values of. You can also pass lookup strings to this parameter.</param>
      <param name="elem">Specifies the element of the subproperty that you want to set the multiple value state of.</param>
      <param name="multipleValues">For the PropertyObjectElement_Flags element of a subproperty, specify the bits of the PropertyFlags constant where each bit is zero if the corresponding flags have the same value. For all other elements, pass <c>0</c> if the element contains the same value and <c>1</c> if the element contains multiple values.</param>
      <seealso cref="Engine.NewEditContext" />
      <seealso cref="&quot;Lookup Strings&quot;../InfoTopics/API_lookupString.html" />
      <seealso cref="PropertyFlags" />
      <seealso cref="PropertyObjectElements" />
      <seealso cref="SequenceContext.GetMultipleValues" />
      <seealso cref="SequenceContext.Step" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.SequenceContext.NewExecution(NationalInstruments.TestStand.Interop.API.SequenceFile,System.String,NationalInstruments.TestStand.Interop.API.SequenceFile,System.Boolean,System.Boolean,System.Int32,NationalInstruments.TestStand.Interop.API.PropertyObject)">
      <summary>Creates and returns a new Execution object.</summary>
      <remarks>When you call this method, the execution begins immediately. This method behaves similar to a Sequence Call step that you configure to run in a new execution </remarks>
      <returns>The execution created by this method.</returns>
      <param name="sequenceFileParam">Specifies the SequenceFile object that contains the sequence to execute. If the execution uses a process model, pass the client SequenceFile object.</param>
      <param name="sequenceNameParam">Specifies the name of the sequence or Process Model entry point to execute.</param>
      <param name="processModelParam">Specifies the process model SequenceFile object if you want to execute a Process Model entry point. Otherwise, a <c>NULL</c> object reference in LabVIEW, <c>0</c> in LabWindows/CVI, or the <c>Nothing</c> keyword in Visual Basic, pass a <c>NULL</c> dispatch pointer in Microsoft Foundation Classes.</param>
      <param name="breakAtFirstStep">Pass <c>True</c> to suspend execution before executing the first step.</param>
      <param name="synchronous">Pass <c>True</c> to force this method to wait until the execution completes.</param>
      <param name="executionTypeMaskParam">Pass <c>0</c> for the default behavior or pass one or more ExecutionTypeMask constants. Use the bitwise-OR operator to pass multiple constants.</param>
      <param name="sequenceArgsParam">Specifies a PropertyObject object that contains the arguments to the sequence you want to execute. Each subproperty of the PropertyObject object represents a parameter to the sequence. The subproperties must appear in the same order as the sequence parameters.</param>
      <seealso cref="Execution" />
      <seealso cref="ExecutionTypeMask " />
      <seealso cref="PropertyObject" />
      <seealso cref="SequenceFile" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SequenceContext.CanTrace">
      <summary>Returns a value that indicates whether the SequenceContext can trace. The return value depends on the current values of SequenceContext.Tracing, Execution.TracingDisabled, whether steps in the current sequence are viewable, and all other factors that affect tracing.</summary>
      <seealso cref="Execution.TracingDisabled" />
      <seealso cref="SequenceContext.Tracing" />
      <seealso cref="StationOptions.TracingEnabled" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.InteractiveContext">
      <summary>Use objects of this class to obtain additional information about a currently executing interactive execution. Obtain objects of this class using the SequenceContext.InteractiveContext property of the sequence context in which the interactive execution began.</summary>
      <seealso cref="Engine.NewExecution" />
      <seealso cref="SequenceContext.InteractiveContext" />
      <seealso cref="Thread.DoInteractiveExecution" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.InteractiveContext.AsPropertyObject">
      <summary>Returns the underlying PropertyObject that represents the InteractiveContext object. </summary>
      <remarks>Use the PropertyObject to modify, add, or remove custom properties of the object.</remarks>
      <seealso cref="PropertyObject" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.InteractiveContext.IsRootExecution">
      <summary>Returns <c>True</c> if the execution is a root interactive execution. Returns <c>False</c> if the execution is a nested interactive execution.</summary>
      <remarks>A root interactive execution is a new, independent execution the user initiates on selected steps from a Sequence File window.
The user starts a nested interactive execution from an Execution window for a normal execution suspended at a breakpoint. The nested interactive execution runs within the context of the normal execution.</remarks>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.InteractiveContext.SavedPreviousStepIndex">
      <summary>Applies only to nested interactive executions. Returns the index of the last step that executed in the normal execution before the user began the current interactive execution.</summary>
      <remarks>If the InteractiveContext.IsRootExecution property is <c>False</c>, this property returns the value of the SequenceContext.PreviousStepIndex property at the time the interactive execution began. This value is purely informational and is provided so you can display information to the user when writing a user interface.
Returns <c>-1</c> if the <c>InteractiveContext.IsRootExecution</c> property is <c>True</c>.</remarks>
      <seealso cref="InteractiveContext.IsRootExecution" />
      <seealso cref="SequenceContext.PreviousStepIndex" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.InteractiveContext.SavedNextStepIndex">
      <summary>Applies only to nested interactive executions. Returns the index of the step ready to execute next in the normal execution when the user began the current interactive execution.</summary>
      <remarks>If the InteractiveContext.IsRootExecution property is <c>False</c>, this property returns the value of the SequenceContext.NextStepIndex property at the time the interactive execution began. This value is purely informational and is provided so you can display information to the user when writing a user interface.
Returns <c>-1</c> if the <c>InteractiveContext.IsRootExecution</c> property is <c>True</c>.</remarks>
      <seealso cref="InteractiveContext.IsRootExecution" />
      <seealso cref="SequenceContext.NextStepIndex" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.InteractiveContext.SavedStepIndex">
      <summary>Applies only to nested interactive executions. Returns the index of the active step in the normal execution when the user began the current interactive execution.</summary>
      <remarks>If the IsRootExecution property is <c>False</c>, this property returns the state of the SequenceContext.StepIndex property before the interactive execution began.
Currently, because you can only begin an interactive execution between steps in the currently executing sequence, this property always returns -1.
Returns <c>-1</c> if the IsRootExecution property is <c>True</c>.</remarks>
      <seealso cref="InteractiveContext.IsRootExecution" />
      <seealso cref="SequenceContext.StepIndex" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.InteractiveContext.InteractiveArgs">
      <summary>Returns the InteractiveArgs object for the current interactive execution.</summary>
      <remarks>Use this property to obtain a reference to the InteractiveArgs object used to initiate the currently executing interactive execution.</remarks>
      <seealso cref="InteractiveArgs" />
      <seealso cref="SequenceContext.InteractiveContext" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.InteractiveArgs">
      <summary>When you call the Engine.NewExecution or Thread.DoInteractiveExecution methods to create an interactive execution, use an object of this class to pass information about the current state of the user interface. These methods use the object to determine which steps are currently selected in the user interface.
Create objects for this class using the Engine.NewInteractiveArgs method.</summary>
      <seealso cref="Engine.NewExecution" />
      <seealso cref="Engine.NewHierarchicalExecution" />
      <seealso cref="Engine.NewInteractiveArgs" />
      <seealso cref="Thread.DoInteractiveExecution" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.InteractiveArgs.GetStepIndex(System.Int32)">
      <summary>Returns a step index stored at a specific position in the list of steps to run interactively.</summary>
      <remarks>The step index that the method returns is a zero-based index into the list of steps for the sequence.</remarks>
      <param name="arrayIndexParam">Specifies a zero-based index for the list of steps to run interactively.</param>
      <seealso cref="InteractiveArgs.Sequence" />
      <seealso cref="InteractiveArgs.StepGroup" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.InteractiveArgs.AddStepIndex(System.Int32)">
      <summary>Adds a step to the list of steps to execute interactively</summary>
      <param name="stepIndexParam">Specifies a zero-based index for a step in the list of steps for the sequence in which you are running steps interactively.</param>
      <seealso cref="InteractiveArgs.Sequence" />
      <seealso cref="InteractiveArgs.StepGroup" />
      <seealso cref="Step.StepIndex" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.InteractiveArgs.ContainsStep(System.Int32)">
      <summary>Returns <c>True</c> if the step you specify is in the list of steps to run interactively.</summary>
      <param name="stepIndexParam">Specifies a zero-based index for a step in the list of steps for the sequence in which you are running steps interactively.</param>
      <seealso cref="Step.StepIndex" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.InteractiveArgs.ClearStepList">
      <summary>Clears the list of steps to execute interactively.</summary>
      <seealso cref="InteractiveArgs.AddStepIndex" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.InteractiveArgs.AsPropertyObject">
      <summary>Returns the underlying PropertyObject that represents the InteractiveArgs object.</summary>
      <remarks>Use the PropertyObject to modify, add, or remove custom properties for the object.
<para>Note: Do not use this function to remove or modify the dynamic properties TestStand already provides for InteractiveArgs objects. You can do this through the other methods of the InteractiveArgs class.</para></remarks>
      <seealso cref="PropertyObject" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.InteractiveArgs.StepGroup">
      <summary>Returns or specifies the step group containing the steps to execute interactively.</summary>
      <seealso cref="InteractiveArgs.Sequence" />
      <seealso cref="&#xD;&#xA;" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.InteractiveArgs.NumSteps">
      <summary>Returns the number of step indexes added to the InteractiveArgs object.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.InteractiveArgs.LoopCount">
      <summary>Returns or specifies the number of times to execute the list of selected steps.</summary>
      <remarks>If the value of this property is -1, the execution loops indefinitely on the selected steps.</remarks>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.InteractiveArgs.StopExpression">
      <summary>Gets or sets an expression with a value that indicates when to stop an execution that specifies a loop count.</summary>
      <remarks>If the expression evaluates to <c>True</c>, the interactive execution stops. If the expression is an empty string, it is not evaluated.</remarks>
      <seealso cref="InteractiveArgs.LoopCount" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.InteractiveArgs.Sequence">
      <summary>Specifies the sequence that contains the steps the InteractiveArgs object lists by index.</summary>
      <remarks>Set this property before passing the InteractiveArgs to a method that starts an execution. If you do not set this property, TestStand assumes that InteractiveArgs specifies steps in the first sequence the execution runs.  If you specify a process model, the first sequence an execution runs is the Process Model entry point.</remarks>
      <seealso cref="InteractiveArgs.StepGroup" />
      <seealso cref="Sequence" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.EditArgs">
      <summary>Use objects of the EditArgs class to pass information about the current state of the user interface to methods such as Engine.NewExecution, Sequence.EvalEntryPointNameExpressionEx, Engine.GetEditTimeToolMenuItems, and Engine.GetRunTimeToolMenuItems. Objects of this class contain information about currently selected sequences, steps, sequence files, and executions. This selection information appears in the <c>RunState.InitialSelection</c> property of the sequence context.
Create objects of this class using the Engine.NewEditArgs method. Typically, you use this class only when you are writing a user interface or sequence editor.</summary>
      <seealso cref="Engine.GetEditTimeToolMenuItems" />
      <seealso cref="Engine.GetRunTimeToolMenuItems" />
      <seealso cref="Engine.NewEditArgs" />
      <seealso cref="Engine.NewExecution" />
      <seealso cref="Engine.NewHierarchicalExecution" />
      <seealso cref="Sequence.EvalEntryPointEnabledExpressionEx" />
      <seealso cref="Sequence.EvalEntryPointNameExpressionEx" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EditArgs.SetSelectedSequenceFile(NationalInstruments.TestStand.Interop.API.SequenceFile)">
      <summary>Use this property to set the currently active sequence file as the selected sequence file.</summary>
      <remarks>Stores the selected sequence file so you can use it in the sequence context.</remarks>
      <param name="sequenceFile">Specifies the active SequenceFile object.</param>
      <seealso cref="SequenceFile" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EditArgs.AddSelectedSequence(NationalInstruments.TestStand.Interop.API.Sequence)">
      <summary>Adds a sequence to the list of currently selected sequences.</summary>
      <remarks>Stores the selected sequence so you can use it in the sequence context.</remarks>
      <param name="sequence">Specifies the sequence object being added to the list.</param>
      <seealso cref="Sequence" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EditArgs.AddSelectedStep(NationalInstruments.TestStand.Interop.API.Step)">
      <summary>Adds a step to the list of currently selected steps.</summary>
      <remarks>Stores the selected step so you can use it in the sequence context.</remarks>
      <param name="step">Specifies the step object being added to the list.</param>
      <seealso cref="Step" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EditArgs.ClearSelectedSequences">
      <summary>Clears the list of currently selected sequences.</summary>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EditArgs.ClearSelectedSteps">
      <summary>Clears the list of currently selected steps.</summary>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EditArgs.SetSelectedExecution(NationalInstruments.TestStand.Interop.API.Execution)">
      <summary>Use this property to set the currently active execution as the selected execution.</summary>
      <remarks>Stores the selected execution so you can use it in the sequence context.</remarks>
      <param name="execution">Specifies the selected Execution object.</param>
      <seealso cref="Execution" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EditArgs.AsPropertyObject">
      <summary>Returns the underlying PropertyObject that represents the EditArgs object.</summary>
      <remarks>Use the PropertyObject class to modify, add, or remove the custom properties of the object.
Do not use this method to remove or modify the dynamic properties TestStand already provides for EditArgs objects. Instead, use any of the other methods of the EditArgs class to remove or modify the dynamic properties.</remarks>
      <seealso cref="PropertyObject" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EditArgs.SetSelectedStepGroup(NationalInstruments.TestStand.Interop.API.StepGroups)">
      <summary>Use this property to set the currently active step group as the selected step group.</summary>
      <remarks>Stores the selected step group so you can use it in the sequence context.</remarks>
      <param name="stepGroupParam">Specifies an active step group object.</param>
      <seealso cref="StepGroups" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EditArgs.SetSelectedPropertyObjectFile(NationalInstruments.TestStand.Interop.API.PropertyObjectFile)">
      <summary>Use this property to set the currently active property object file as the selected property object file.</summary>
      <remarks>Stores the selected property object file so you can use it in the sequence context.</remarks>
      <param name="propertyFile">Specifies the selected PropertyObjectFile object.</param>
      <seealso cref="PropertyObjectFile" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EditArgs.AddSelectedPropertyObject(NationalInstruments.TestStand.Interop.API.PropertyObject)">
      <summary>Adds a PropertyObject to the list of currently selected property objects.</summary>
      <remarks>Stores the selected PropertyObject so you can use it in the sequence context.</remarks>
      <param name="propertyToAdd">Specifies the PropertyObject being added to the list.</param>
      <seealso cref="PropertyObject" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EditArgs.ClearSelectedPropertyObjects">
      <summary>Clears the list of currently selected property objects.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.UIMessage">
      <summary>TestStand uses UIMessage objects to pass information about the state of the engine and the current executions to the user interface or sequence editor. You can obtain UIMessage objects in a user interface program by providing a callback to the engine. The engine calls the callback when it has a UIMessage object to pass. If you do not provide a callback, you can set the Engine.UIMessagePollingEnabled property to <c>True</c> and call the Engine.GetUIMessage method to poll for UIMessage objects.</summary>
      <seealso cref="Engine.GetUIMessage" />
      <seealso cref="Engine.UIMessagePollingEnabled" />
      <seealso cref="&quot;User Interface (UI) Messages&quot;../InfoTopics/App_User_Interface_UI_Messages.html" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.UIMessage.AsPropertyObject">
      <summary>Returns the underlying PropertyObject that represents the UIMessage object. Use the PropertyObject to modify, add, or remove custom properties of the object.</summary>
      <seealso cref="PropertyObject" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.UIMessage.Event">
      <summary>Returns the event code that describes the type of UIMessage. The eventCode parameter of the Thread.PostUIMessageEx method that posted the user interface message specifies the value this method returns.</summary>
      <seealso cref="Thread.PostUIMessageEx" />
      <seealso cref="UIMessage.Execution" />
      <seealso cref="UIMessageCodes" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.UIMessage.IsSynchronous">
      <summary>Returns <c>True</c> if the thread that posted the event is blocked and is waiting for you to acknowledge the UIMessage.</summary>
      <remarks>Threads can post UIMessages synchronously or asynchronously. If a thread posts a user interface message synchronously, the thread blocks until the message is acknowledged or the last reference to the user interface message is released. If a thread posts a user interface message asynchronously, the thread returns <c>False</c>.</remarks>
      <seealso cref="Thread.PostUIMessageEx" />
      <seealso cref="UIMessage.Acknowledge" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.UIMessage.Execution">
      <summary>Returns a reference to the execution to which the event applies.</summary>
      <remarks>Release the execution reference when you are done using it. If the event is not associated with an execution, this property returns a <c>NULL</c> reference.</remarks>
      <seealso cref="Execution" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.UIMessage.Thread">
      <summary>Returns a reference to the thread to which the event applies.</summary>
      <remarks>Release the thread reference when you are done using it. If the event is not associated with a thread, this property returns a <c>NULL</c> reference.</remarks>
      <seealso cref="Thread" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.UIMessage.NumericData">
      <summary>Returns the numeric value passed to the numericDataParam parameter of the Thread.PostUIMessageEx method that posted the UIMessage.</summary>
      <remarks>An example of a user interface message event that uses numericDataParam is the <c>UIMsg_ProgressPercent</c> event. If you define custom user interface message events, you can pass numeric data to the <c>Thread.PostUIMessageEx</c> method.</remarks>
      <seealso cref="Thread.PostUIMessageEx" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.UIMessage.StringData">
      <summary>Returns the string value passed to the stringDataParam parameter of the Thread.PostUIMessageEx method that posted the UIMessage.</summary>
      <remarks>An example of a user interface message event that uses stringDataParam is the <c>UIMsg_ProgressText</c> event. If you define custom user interface message events, you can pass string data to the <c>Thread.PostUIMessageEx</c> method.</remarks>
      <seealso cref="Thread.PostUIMessageEx" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.UIMessage.ActiveXData">
      <summary>Returns the ActiveX reference passed to the activeXDataParam parameter of the Thread.PostUIMessageEx method that posted the user interface message.</summary>
      <seealso cref="Thread.PostUIMessageEx" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.UIMessage.Acknowledge">
      <summary>If you are not using the TestStand manager controls in a custom user interface, call this method on each UIMessage you receive after you finish using the message. The TestStand manager controls automatically call this method. If the user interface message is synchronous, this method unblocks the thread that posts the message. This method also indicates to the engine that you are ready to receive further messages.</summary>
      <seealso cref="UIMessage.IsSynchronous" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.Report">
      <summary>Use objects of the Report class to modify, save, load, retrieve, and view reports. To obtain the Report object for an execution, retrieve the value of the Execution.Report property.
Usually, the process model updates the Report object associated with the execution, and the sequence editor or user interface displays it.</summary>
      <seealso cref="Engine.ExternalReportViewers" />
      <seealso cref="Execution.Report" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Report.Append(System.String)">
      <summary>Appends a string to the report.</summary>
      <remarks><para>Note: TestStand releases any ReportSection object assigned to the <c>Report</c> object when you call this method.</para></remarks>
      <returns>Returns an index that refers to this append operation. Use this value with the Report.GetSection method. Calling the Report.Reset method invalidates the index.</returns>
      <param name="stringToAppend">Specifies the string to append to the report.</param>
      <seealso cref="Report.GetSection" />
      <seealso cref="Report.LatestAppendIndex" />
      <seealso cref="Report.Reset" />
      <seealso cref="ReportSection" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Report.Reset(System.String)">
      <summary>Replaces the current report data with the data in the string you specify.</summary>
      <remarks>This method sets the Report.LatestAppendIndex property to 0.
<para>Note: Any ReportSection object assigned to the <c>Report</c> object is released when you call this method.</para></remarks>
      <returns>Returns the number of times you have reset the report.</returns>
      <param name="newValue">Specifies the new report string.</param>
      <seealso cref="Report.LatestAppendIndex" />
      <seealso cref="Report.ResetCount" />
      <seealso cref="ReportSection" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Report.Save(System.String,System.Boolean,NationalInstruments.TestStand.Interop.API.ReportConversion)">
      <summary>Saves the report to the file you specify.</summary>
      <remarks>Calling this method updates the Report.Location property.
<para>Note: If a ReportSection object is assigned to the report, this method saves the report obtained by calling the ReportSection.GetAllText method to disk.</para></remarks>
      <param name="pathString">Specifies the file in which to save the report.</param>
      <param name="appendIfAlreadyExists">Specifies whether to append or overwrite the file if it already exists. Pass <c>True</c> to append to the file. Pass <c>False</c> to overwrite it.</param>
      <param name="linefeedConversion">Specifies a linefeed conversion for the report text.</param>
      <seealso cref="Report.Location" />
      <seealso cref="ReportConversion" />
      <seealso cref="ReportSection" />
      <seealso cref="ReportSection.GetAllText" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Report.Load(System.String,NationalInstruments.TestStand.Interop.API.ReportConversion)">
      <summary>Replaces the current report data with the data in the file you specify.</summary>
      <remarks>Calling this method updates the Report.Location property.</remarks>
      <param name="pathString">Specifies the pathname of the file that contains the report data.</param>
      <param name="linefeedConversion">Specifies a linefeed conversion for the report text.</param>
      <seealso cref="Report.Location" />
      <seealso cref="ReportConversion" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Report.LaunchViewer(NationalInstruments.TestStand.Interop.API.ReportConversion)">
      <summary>Launches an external file viewer to allow the user to view the report.</summary>
      <remarks>If the current TestStand configuration specifies an external viewer for the format, TestStand launches that viewer. Otherwise, TestStand launches the viewer that Microsoft Windows associates with the file extension the report format specifies.</remarks>
      <param name="linefeedConversion">Specifies a linefeed conversion for the report text.</param>
      <seealso cref="Engine.ExternalReportViewers" />
      <seealso cref="Engine.LaunchExternalViewer" />
      <seealso cref="ReportConversion" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Report.GetTempFile(NationalInstruments.TestStand.Interop.API.ReportConversion,System.Object)">
      <summary>Stores the report in a temporary file and returns the pathname of the file.</summary>
      <returns>The pathname of the temporary file used by this method to store the report.</returns>
      <param name="linefeedConversion">Specifies a linefeed conversion for the report text.</param>
      <param name="extensionString">String parameter that specifies the file extension for the temporary file. If you do not specify an extension string, the Report.Format property of the report determines the file extension.</param>
      <seealso cref="&quot;Omitting Optional Parameters&quot;javascript:APILink('/InfoTopics/Optional_Parameters.htm')" />
      <seealso cref="Report.Format" />
      <seealso cref="Report.TempFileDirectory" />
      <seealso cref="ReportConversion" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Report.AsPropertyObject">
      <summary>Returns the underlying PropertyObject that represents the Report object. Use the PropertyObject to modify, add, or remove custom properties for the object.</summary>
      <seealso cref="PropertyObject" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Report.All">
      <summary>Returns the entire report as a string.</summary>
      <seealso cref="Report.GetSection" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Report.Id">
      <summary>Returns a unique ID that distinguishes this report from all other reports.
<para>Note: The ID number is never zero.</para></summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Report.Location">
      <summary>Specifies a string that indicates the display value for the report location.</summary>
      <remarks>If you call the Report.Load or Report.Save method of this class, this property is automatically set to the pathname of the report file. You cannot use this property to set the location of the report.</remarks>
      <seealso cref="Report.Load" />
      <seealso cref="Report.Save" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Report.Format">
      <summary>Specifies the file format of the report. Specify the file format by passing the file extension for that format, such as <c>txt</c> for ASCII text files, <c>htm</c> or <c>html</c> for HTML files, and <c>rtf</c> for rich text format files.</summary>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Report.GetSection(System.Int32,System.Int32)">
      <summary>Returns a section of the report.</summary>
      <remarks>After calling the Report.Append method multiple times, call this method to obtain the section of text associated with the specified append index.
<para>Note: When a ReportSection object is assigned to the <c>Report</c> object, this method returns invalid values and is not supported.</para></remarks>
      <returns>The content of the report that the index parameters specify.</returns>
      <param name="oldestIndex">Specifies the index of the Report.Append method that starts the section.</param>
      <param name="latestIndex">Specifies the index of the Report.Append method that ends the section.</param>
      <seealso cref="Report.Append" />
      <seealso cref="Report.LatestAppendIndex" />
      <seealso cref="Report.Reset" />
      <seealso cref="ReportSection" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Report.LatestAppendIndex">
      <summary>Returns the most recent index the Report.Append method returns.</summary>
      <remarks>Use this value with the Report.GetSection method to obtain the last section of the report.
<para>Note: When a ReportSection object is assigned to the <c>Report</c> object, this property returns invalid values and is not supported.</para></remarks>
      <seealso cref="Report.Append" />
      <seealso cref="Report.GetSection" />
      <seealso cref="Report.Reset" />
      <seealso cref="ReportSection" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Report.IsEmpty">
      <summary>Returns if the report is empty.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Report.ResetCount">
      <summary>Returns the number of times you have reset the report.</summary>
      <seealso cref="Report.Reset" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Report.StyleSheetPath">
      <summary>Specifies a string which specifies the absolute pathname of the style sheet used to transform XML reports.</summary>
      <remarks>If this property is not specified, the default style sheet is used to transform the XML report.</remarks>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Report.TempFileDirectory">
      <summary>Specifies a string that specifies the directory path where TestStand saves the file the Report.GetTempFile method creates. If you call the Report.Load or Report.Save method of this class, this property is automatically set to the directory path of the report file.</summary>
      <remarks><para>Note: Writing to this property is obsolete. Use the Report.SetTempFileDirectoryEx method instead. When you write to this property after calling the <c>Report.SetTempFileDirectoryEx</c> method with the tempFileDirectoryOptions parameter value set to SetTempFileDirectoryOption_NeverOverride, TestStand returns a run-time error.</para>
</remarks>
      <seealso cref="Report.GetTempFile" />
      <seealso cref="Report.Load" />
      <seealso cref="Report.Save" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Report.SuspendReportRefresh">
      <summary>Set this property to <c>True</c> to suspend report refreshes when modifying the ReportSection associated with the report. You typically use this property with on-the-fly report generation to avoid generating a partial report, when you are more likely to modify the <c>ReportSection</c> object associated with the report while TestStand processes the report for display purposes.</summary>
      <remarks>Call this property only from a code module or a statement step used for report generation, not from an executing sequence or the user interface code. 
After you set this property to <c>True</c>, you must reset this property to <c>False</c> in the same code module or statement step for the user interfaces and report generation to function correctly.
When this property is <c>True</c>, the Report.IsEmpty property always returns <c>True</c> and the Report.All property returns an empty string.</remarks>
      <seealso cref="Report.All" />
      <seealso cref="Report.IsEmpty" />
      <seealso cref="ReportSection" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Report.ReportSection">
      <summary>Specifies the ReportSection object associated with the <c>Report</c> object, which uses the report data stored in the <c>ReportSection</c> object as the report. If no <c>ReportSection</c> object was previously set, this property returns <c>NULL</c>.</summary>
      <remarks>If you call the Report.Append, Report.Load, or Report.Reset methods, this property returns <c>NULL</c>.
If this property is set, the Report.LatestAppendIndex method always returns <c>-1</c>.
Setting this property discards any report data set from prior calls to the <c>Report.Append</c> or <c>Report.Reset</c> methods.</remarks>
      <seealso cref="Report.Append" />
      <seealso cref="Report.LatestAppendIndex" />
      <seealso cref="Report.Load" />
      <seealso cref="Report.Reset" />
      <seealso cref="ReportSection" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Report.NewReportSection">
      <summary>Creates and returns a reference to a ReportSection object.</summary>
      <remarks>The <c>ReportSection</c> object this method returns is empty.</remarks>
      <seealso cref="ReportSection" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Report.RefreshDisplay">
      <summary>Call this method to refresh the ReportView control after you make changes to an associated Report.ReportSection object to indicate that a report has changed and that the user interface must be refreshed.</summary>
      <remarks>Calling the Report.Append or Report.Reset methods or assigning a new reference to the <c>Report.ReportSection</c> property automatically refreshes the <c>ReportView</c> control. However, when you make changes to a <c>ReportSection</c> object already assigned to a <c>Report.ReportSection</c> property, the Report object does not automatically notify the <c>ReportView</c> control. You must call the <c>Report.RefreshDisplay</c> method to notify the <c>ReportView</c> control to refresh in this case.</remarks>
      <seealso cref="Report.Append" />
      <seealso cref="Report.ReportSection" />
      <seealso cref="Report.Reset" />
      <seealso cref="&quot;ReportView&quot;javascript:UILink('/RefTopics/ReportView.htm')" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Report.SetTempFileDirectoryEx(System.String,NationalInstruments.TestStand.Interop.API.SetTempFileDirectoryOptions)">
      <summary>Specifies the directory path where TestStand saves the file the Report.GetTempFile method creates.</summary>
      <remarks>When you use the SetTempFileDirectoryOption_Default option with this method, calling the Report.Load or Report.Save method modifies the directory path where TestStand saves the file the <c>Report.GetTempFile</c> method creates. Using the <c>SetTempFileDirectoryOption_Default</c> option with this method results in the same behavior as using the Report.TempFileDirectory property to specify the directory path where TestStand saves the file the <c>Report.GetTempFile</c> method creates.
Use the SetTempFileDirectoryOption_NeverOverride option to ensure that TestStand saves the file the <c>Report.GetTempFile</c> method creates in the directory path this method specifies. You can override the directory path by calling this method again to set the directory path.
By default, TestStand saves the file the <c>Report.GetTempFile</c> method creates in the directory path of the report file. Typically, if you save generated reports on a network drive to which you do not have delete permission, you cannot delete the file the <c>Report.GetTempFile</c> method creates after the execution. To work around this situation, use the <c>Report.SetTempFileDirectoryEx</c> method with the <c>SetTempFileDirectoryOption_NeverOverride</c> option to save the file the <c>Report.GetTempFile</c> method creates to a local drive.</remarks>
      <param name="directory">Specifies the directory path to save the file. </param>
      <param name="tempFileDirectoryOption">Pass <c>0</c> to specify the default behavior or an option from the SetTempFileDirectoryOptions enumeration.</param>
      <seealso cref="Report.GetTempFile" />
      <seealso cref="Report.TempFileDirectory" />
      <seealso cref="SetTempFileDirectoryOptions" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.DefaultModelCallbacks">
      <summary>Use these string constants to specify the callbackName parameter of the SequenceFile.CreateCallbackOverrideSequence method.</summary>
      <seealso cref="FrontEndCallbacks" />
      <seealso cref="SeqFileCallbacks" />
      <seealso cref="SequenceFile.CreateCallbackOverrideSequence" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.DefaultModelCallbacks.DefModCback_PreUUT">
      <summary>(Value: &quot;PreUUT&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.DefaultModelCallbacks.DefModCback_PostUUT">
      <summary>(Value: &quot;PostUUT&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.DefaultModelCallbacks.DefModCback_PreUUTLoop">
      <summary>(Value: &quot;PreUUTLoop&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.DefaultModelCallbacks.DefModCback_PostUUTLoop">
      <summary>(Value: &quot;PostUUTLoop&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.DefaultModelCallbacks.DefModCback_ModifyRptEntry">
      <summary>(Value: &quot;ModifyReportEntry&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.DefaultModelCallbacks.DefModCback_ReportOptions">
      <summary>(Value: &quot;ReportOptions&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.DefaultModelCallbacks.DefModCback_TestReport">
      <summary>(Value: &quot;TestReport&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.DefaultModelCallbacks.DefModCback_GetReportFilePath">
      <summary>(Value: &quot;GetReportFilePath&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.DefaultModelCallbacks.DefModCback_ProcessCleanup">
      <summary>(Value: &quot;ProcessCleanup&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.DefaultModelCallbacks.DefModCback_ProcessSetup">
      <summary>(Value: &quot;ProcessSetup&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.DefaultModelCallbacks.DefModCback_LogToDatabase">
      <summary>(Value: &quot;LogToDatabase&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.DefaultModelCallbacks.DefModCback_ModifyReportHeader">
      <summary>(Value: &quot;ModifyReportHeader&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.DefaultModelCallbacks.DefModCback_ModifyReportFooter">
      <summary>(Value: &quot;ModifyReportFooter&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.DefaultModelCallbacks.DefModCback_ModifyReportEntry">
      <summary>(Value: &quot;ModifyReportEntry&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.DefaultModelCallbacks.DefModCback_ModelOptions">
      <summary>(Value: &quot;ModelOptions&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.DefaultModelCallbacks.DefModCback_DatabaseOptions">
      <summary>(Value: &quot;DatabaseOptions&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.DefaultModelCallbacks.DefModCback_ModelPluginOptions">
      <summary>(Value: &quot;ModelPluginOptions&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.DefaultModelCallbacks.DefModCback_ModelPluginConfiguration">
      <summary>(Value: &quot;ModelPluginConfiguration&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.DefaultModelCallbacks.DefModCback_PreMainSequence">
      <summary>(Value: &quot;PreMainSequence&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.DefaultModelCallbacks.DefModCback_PostMainSequence">
      <summary>(Value: &quot;PostMainSequence&quot;)</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.AdapterKeyNames">
      <summary>Use these names when calling TestStand API functions, such as the Engine.NewStep method.</summary>
      <seealso cref="Engine.DefaultAdapter" />
      <seealso cref="Engine.GetAdapterByKeyName" />
      <seealso cref="Engine.NewStep" />
      <seealso cref="Step.AdapterKeyName" />
      <seealso cref="Step.ChangeAdapter" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.AdapterKeyNames.StdCVIAdapterKeyName">
      <summary>(Value: &quot;C/CVI Std Prototype Adapter&quot;) <para>Note: This constant is obsolete. Use FlexCVIAdapterKeyName instead.</para></summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.AdapterKeyNames.FlexCAdapterKeyName">
      <summary>(Value: &quot;DLL Flexible Prototype Adapter&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.AdapterKeyNames.LVAdapterKeyName">
      <summary>(Value: &quot;G Std Prototype Adapter&quot;) <para>Note: This constant is obsolete. Use <c>FlexLVAdapterKeyName</c> instead.</para></summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.AdapterKeyNames.SequenceAdapterKeyName">
      <summary>(Value: &quot;Sequence Adapter&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.AdapterKeyNames.NoneAdapterKeyName">
      <summary>(Value: &quot;None Adapter&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.AdapterKeyNames.HTBasicAdapterKeyName">
      <summary>(Value: &quot;HTBasic Adapter&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.AdapterKeyNames.AutomationAdapterKeyName">
      <summary>(Value: &quot;Automation Adapter&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.AdapterKeyNames.GAdapterKeyName">
      <summary>(Value: &quot;G Std Prototype Adapter&quot;) <para>Note: This constant is obsolete. Use <c>FlexLVAdapterKeyName</c> instead.</para></summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.AdapterKeyNames.DotNetAdapterKeyname">
      <summary>(Value: &quot;DotNet Adapter&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.AdapterKeyNames.FlexCVIAdapterKeyName">
      <summary>(Value: &quot;C/CVI Flexible Prototype Adapter&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.AdapterKeyNames.FlexLVAdapterKeyName">
      <summary>(Value: &quot;G Flexible VI Adapter&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.AdapterKeyNames.LabVIEWNXGAdapterKeyName">
      <summary>(Value: &quot;LabVIEW NXG Adapter&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.AdapterKeyNames.PythonAdapterKeyName">
      <summary>(Value: &quot;Python Adapter&quot;)</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.StepTypes">
      <summary>These constants containing the type names for the built-in step types. Use these constants with the Engine.NewStep method to create a step of a particular step type.
<para>Note: This list represents only the commonly used step type names.</para></summary>
      <seealso cref="Engine.NewStep" />
      <seealso cref="StepType" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.StepTypes.StepType_Action">
      <summary>(Value: &quot;Action&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.StepTypes.StepType_Goto">
      <summary>(Value: &quot;Goto&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.StepTypes.StepType_Statement">
      <summary>(Value: &quot;Statement&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.StepTypes.StepType_SequenceCall">
      <summary>(Value: &quot;SequenceCall&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.StepTypes.StepType_PassFailTest">
      <summary>(Value: &quot;PassFailTest&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.StepTypes.StepType_NumericMeasurement">
      <summary>(Value: &quot;NumericLimitTest&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.StepTypes.StepType_StringMeasurement">
      <summary>(Value: &quot;StringValueTest&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.StepTypes.StepType_MessagePopup">
      <summary>(Value: &quot;MessagePopup&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.StepTypes.StepType_CallExecutable">
      <summary>(Value: &quot;CallExecutable&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.StepTypes.StepType_LimitLoader">
      <summary>(Value: &quot;LimitLoaderStep &quot;) This constant is obsolete. Use <c>StepType_PropertyLoaderEx</c> instead.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.StepTypes.StepType_Label">
      <summary>(Value: &quot;Label&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.StepTypes.StepType_MultiNumericMeasurement">
      <summary>(Value: &quot;NI_MultipleNumericLimitTest&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.StepTypes.StepType_PropertyLoader">
      <summary>(Value: &quot;NI_VariableAndPropertyLoader&quot;) This constant is obsolete. Use <c>StepType_PropertyLoaderEx</c> instead.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.StepTypes.StepType_PropertyLoaderEx">
      <summary>(Value: &quot;NI_PropertyLoader&quot;)</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.StepLoopTypes">
      <summary>These constants specify the valid values for the Step.LoopType property.</summary>
      <seealso cref="Step.LoopIncExpression" />
      <seealso cref="Step.LoopInitExpression" />
      <seealso cref="Step.LoopStatusExpression" />
      <seealso cref="Step.LoopType" />
      <seealso cref="Step.LoopWhileExpression" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.StepLoopTypes.LoopType_NoLoop">
      <summary>(Value: &quot;NoLooping&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.StepLoopTypes.LoopType_FixedNumLoops">
      <summary>(Value: &quot;FixedNumLoops&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.StepLoopTypes.LoopType_PassFailCount">
      <summary>(Value: &quot;PassFailCount&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.StepLoopTypes.LoopType_Custom">
      <summary>(Value: &quot;Custom&quot;)</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.PostActionValues">
      <summary>Use these constants to specify the type of action you want to take for a particular post action of a step.</summary>
      <seealso cref="Step.CustomFalseAction" />
      <seealso cref="Step.CustomTrueAction" />
      <seealso cref="Step.FailAction" />
      <seealso cref="Step.PassAction" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PostActionValues.PostAction_NextStep">
      <summary>(Value: &quot;Next&quot;) Execution continues normally with the next step. This is the default value.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PostActionValues.PostAction_GotoStep">
      <summary>(Value: &quot;Goto&quot;) Execution branches to a step in the current step group, to the end of the current step group, or to the Cleanup step group. If the post action for a step specifies that execution branches to the Cleanup step group and the current step is in the Cleanup step group, execution proceeds normally with the next step in the Cleanup step group.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PostActionValues.PostAction_CallCallback">
      <summary>(Value: &quot;Cback&quot;) Calls a sequence before continuing to the next step. You can select any sequence in the sequence file. TestStand does not pass any arguments to the sequence. If the sequence has parameters, TestStand uses the default values of the parameters.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PostActionValues.PostAction_Terminate">
      <summary>(Value: &quot;Terminate&quot;) Terminates execution.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PostActionValues.PostAction_Break">
      <summary>(Value: &quot;Break&quot;) Suspends execution before continuing to the next step.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.SequenceContextProperties">
      <summary>Use these constants to create lookup strings to access some of the commonly used and built-in properties of a sequence context using the PropertyObject class.</summary>
      <seealso cref="&quot;Lookup Strings&quot;../InfoTopics/API_lookupString.html" />
      <seealso cref="SequenceContext" />
      <seealso cref="SequenceContext.AsPropertyObject" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SequenceContextProperties.SeqContext_RunStateProp">
      <summary>(Value: &quot;RunState&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SequenceContextProperties.RunState_LoopIndex">
      <summary>(Value: &quot;LoopIndex&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SequenceContextProperties.RunState_LoopNumPassed">
      <summary>(Value: &quot;LoopNumPassed&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SequenceContextProperties.RunState_LoopNumFailed">
      <summary>(Value: &quot;LoopNumFailed&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SequenceContextProperties.RunState_StepProp">
      <summary>(Value: &quot;Step&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SequenceContextProperties.RunState_SeqProp">
      <summary>(Value: &quot;Sequence&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SequenceContextProperties.RunState_SeqFileProp">
      <summary>(Value: &quot;SequenceFile&quot;)</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.SequenceProperties">
      <summary>Use these string constants to create lookup strings when using the PropertyObject class to access the built-in properties of a sequence.</summary>
      <seealso cref="&quot;Lookup Strings&quot;../InfoTopics/API_lookupString.html" />
      <seealso cref="PropertyObject" />
      <seealso cref="StepGroups" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SequenceProperties.Seq_SetupProp">
      <summary>(Value: &quot;Setup&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SequenceProperties.Seq_MainProp">
      <summary>(Value: &quot;Main&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SequenceProperties.Seq_CleanupProp">
      <summary>(Value: &quot;Cleanup&quot;)</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.StepProperties">
      <summary>Use these string constants to create lookup strings to access properties of the built-in step types using the PropertyObject class. Notice that some of the constants refer to properties, whereas other constants refer to property values.</summary>
      <seealso cref="&quot;CVIModule&quot;CVIModule.htm" />
      <seealso cref="&quot;DllModule&quot;DllModule.htm" />
      <seealso cref="&quot;LabVIEWModule&quot;LabVIEWModule.htm" />
      <seealso cref="PropertyObject" />
      <seealso cref="PropertyObject.NumericFormat" />
      <seealso cref="&quot;SequenceCallModule&quot;SequenceCallModule.htm" />
      <seealso cref="Step.Module" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.StepProperties.Step_ResultProp">
      <summary>(Value: &quot;Result&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.StepProperties.Result_NumericProp">
      <summary>(Value: &quot;Numeric&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.StepProperties.Result_StringProp">
      <summary>(Value: &quot;String&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.StepProperties.Result_PassFailProp">
      <summary>(Value: &quot;PassFail&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.StepProperties.Result_StatusProp">
      <summary>(Value: &quot;Status&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.StepProperties.ResultStatus_NoStatus">
      <summary>(Value: &quot;&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.StepProperties.ResultStatus_Done">
      <summary>(Value: &quot;Done&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.StepProperties.ResultStatus_Skipped">
      <summary>(Value: &quot;Skipped&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.StepProperties.ResultStatus_Passed">
      <summary>(Value: &quot;Passed&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.StepProperties.ResultStatus_Failed">
      <summary>(Value: &quot;Failed&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.StepProperties.ResultStatus_Error">
      <summary>(Value: &quot;Error&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.StepProperties.ResultStatus_Running">
      <summary>(Value: &quot;Running&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.StepProperties.ResultStatus_Looping">
      <summary>(Value: &quot;Looping&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.StepProperties.Step_InBufProp">
      <summary>(Value: &quot;InBuf&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.StepProperties.Step_LimitsProp">
      <summary>(Value: &quot;Limits&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.StepProperties.Limits_LowProp">
      <summary>(Value: &quot;Low&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.StepProperties.Limits_HighProp">
      <summary>(Value: &quot;High&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.StepProperties.Limits_StringProp">
      <summary>(Value: &quot;String&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.StepProperties.Step_TSInfoProp">
      <summary>(Value: &quot;TS&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.StepProperties.TSInfo_StepAdditions">
      <summary>(Value: &quot;SData&quot;) Do not use this constant to access the adapter-specific properties of a step. Instead, use the specific module interface for the Module object for the step. Use the Step.Module property to acquire a reference to a Module object.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.StepProperties.Step_MeasComparisonType">
      <summary>(Value: &quot;Comp&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.StepProperties.NumMeasComp_EQ">
      <summary>(Value: &quot;EQ&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.StepProperties.NumMeasComp_NE">
      <summary>(Value: &quot;NE&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.StepProperties.NumMeasComp_GT">
      <summary>(Value: &quot;GT&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.StepProperties.NumMeasComp_LT">
      <summary>(Value: &quot;LT&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.StepProperties.NumMeasComp_GE">
      <summary>(Value: &quot;GE&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.StepProperties.NumMeasComp_LE">
      <summary>(Value: &quot;LE&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.StepProperties.NumMeasComp_GTLT">
      <summary>(Value: &quot;GTLT&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.StepProperties.NumMeasComp_GELE">
      <summary>(Value: &quot;GELE&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.StepProperties.NumMeasComp_GELT">
      <summary>(Value: &quot;GELT&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.StepProperties.NumMeasComp_GTLE">
      <summary>(Value: &quot;GTLE&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.StepProperties.NumMeasComp_LOG">
      <summary>(Value: &quot;LOG&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.StepProperties.NumMeasRadix">
      <summary>(Value: &quot;DisplayRadix&quot;) This constant is obsolete. In TestStand 2.0, set the numeric format using the PropertyObject.NumericFormat property of the following step properties: <c>Limits.High</c>, <c>Limits.Low</c>, and <c>Result.Numeric</c>.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.StepProperties.StrMeasComp_IgnoreCase">
      <summary>(Value: &quot;IgnoreCase&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.StepProperties.StrMeasComp_CaseSensitive">
      <summary>(Value: &quot;CaseSensitive&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.StepProperties.ResultStatus_Terminated">
      <summary>(Value: &quot;Terminated&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.StepProperties.ResultStatus_Waiting">
      <summary>(Value: &quot;Waiting&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.StepProperties.Limits_NominalValueProp">
      <summary>(Value: &quot;Nominal&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.StepProperties.NumMeasComp_EQTHRESHOLD">
      <summary>(Value: &quot;EQT&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.StepProperties.Limits_ThresholdTypeProp">
      <summary>(Value: &quot;ThresholdType&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.StepProperties.NumMeasThresholdType_PERCENTAGE">
      <summary>(Value: &quot;PERCENTAGE&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.StepProperties.NumMeasThresholdType_PPM">
      <summary>(Value: &quot;PPM&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.StepProperties.NumMeasThresholdType_DELTA">
      <summary>(Value: &quot;DELTA&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.StepProperties.Step_MeasThresholdType">
      <summary>(Value: &quot;ThresholdType&quot;)</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.CVIStepAdditions">
      <summary><para>Note: Do not use these constants to access the adapter-specific properties of a step. Use the CVIModule interface for the Module object for the step. Use the Step.Module property to acquire a reference to a Module object.</para>
In TestStand 3.0 or later, these string constants are obsolete.
These string constants were previously used to create lookup strings to access the adapter-specific properties of a LabWindows/CVI step. The following example code sets the module pathname property of a LabWindows/CVI step:
<c>TS_PropertySetValString(propObj, &amp;errorInfo, Step_TSInfoProp &quot;.&quot; TSInfo_StepAdditions &quot;.&quot; CVIStep_ModulePathProp, 0, testFilePath);</c></summary>
      <seealso cref="&quot;Lookup Strings&quot;../InfoTopics/API_lookupString.html" />
      <seealso cref="Step" />
      <seealso cref="Step.Module" />
      <seealso cref="StepProperties" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.CVIStepAdditions.CVIStep_ModulePathProp">
      <summary>(Value: &quot;ModulePath&quot;) This constant is obsolete.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.CVIStepAdditions.CVIStep_FunctionNameProp">
      <summary>(Value: &quot;FuncName&quot;) This constant is obsolete.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.CVIStepAdditions.CVIStep_FunctionPrototypeProp">
      <summary>(Value: &quot;FuncProto&quot;) This constant is obsolete.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.CVIStepAdditions.CVIStep_ParamsStringProp">
      <summary>(Value: &quot;ExtProtoParams&quot;) This constant is obsolete.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.CVIStepAdditions.CVIStep_ModuleTypeProp">
      <summary>(Value: &quot;ModuleType&quot;) This constant is obsolete.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.CVIStepAdditions.CVIStep_SeqContextPassProp">
      <summary>(Value: &quot;SeqContextType&quot;) This constant is obsolete.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.CVIStepAdditions.CVIStep_ModuleSrcPathProp">
      <summary>(Value: &quot;ModuleSrcPath&quot;) This constant is obsolete.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.CVIStepAdditions.CVIStep_ModulePrjPathProp">
      <summary>(Value: &quot;ModulePrjPath&quot;) This constant is obsolete.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.LVStepAdditions">
      <summary><para>Note: Do not use these constants to access the adapter-specific properties of a step. Use the LabVIEWModule interface for the Module object for the step. Use the Step.Module property to acquire a reference to a Module object.</para>
In TestStand 3.0 or later, these string constants are obsolete.
These string constants were previously used to create lookup strings to access the adapter-specific properties of a LabVIEW step. The following example code sets the module pathname of a LabVIEW step:
<c>TS_PropertySetValString(propObj, &amp;errorInfo, Step_TSInfoProp &quot;.&quot; TSInfo_StepAdditions &quot;.&quot; LVStep_ModulePathProp, 0, testFilePath)<c>;</c></c></summary>
      <seealso cref="&quot;LabVIEWModule&quot;LabVIEWModule.htm" />
      <seealso cref="&quot;Lookup Strings&quot;../InfoTopics/API_lookupString.html" />
      <seealso cref="Step.Module" />
      <seealso cref="StepProperties" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.LVStepAdditions.LVStep_ModulePathProp">
      <summary>(Value: &quot;ViPath&quot;) This constant is obsolete.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.LVStepAdditions.LVStep_PassInBufProp">
      <summary>(Value: &quot;PassInBuf&quot;) This constant is obsolete.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.LVStepAdditions.LVStep_PassInvocInfoProp">
      <summary>(Value: &quot;PassInvocInfo&quot;) This constant is obsolete.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.LVStepAdditions.LVStep_PassSeqContextProp">
      <summary>(Value: &quot;PassContextPtr&quot;) This constant is obsolete.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.LVStepAdditions.LVStep_ShowFrontPanelProp">
      <summary>(Value: &quot;ShowFrntPnl&quot;) This constant is obsolete.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.SequenceCallStepAdditions">
      <summary><para>Note: Do not use the following constants to access the adapter-specific properties of a step. Use the SequenceCallModule interface for the Module object for the step. Use the Step.Module property to acquire a reference to a Module object.</para>
In TestStand 3.0 or later, these string constants are obsolete.
These string constants were previously used to create lookup strings when using the PropertyObject class to access the adapter-specific properties of a Sequence Call step.</summary>
      <seealso cref="&quot;Lookup Strings&quot;../InfoTopics/API_lookupString.html" />
      <seealso cref="&quot;SequenceCallModule&quot;SequenceCallModule.htm" />
      <seealso cref="&quot;Specify Module dialog box&quot;javascript:RefLink('/InfoTopics/DB_EditAutoCall.htm')" />
      <seealso cref="Step.Module" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SequenceCallStepAdditions.SCStep_SeqFilePathProp">
      <summary>(Value: &quot;SFPath&quot;) Pathname of the sequence file that contains the subsequence. The value of this property is meaningful only when <c>SCStep_SpecifyByExprProp</c> and <c>SCStep_UseCurrentFileProp</c> are <c><c>False</c></c>.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SequenceCallStepAdditions.SCStep_SeqFilePathExprProp">
      <summary>(Value: &quot;SFPathExpr&quot;) An expression that must evaluate to a string which obtains the pathname of the sequence file that contains the subsequence. The value of this property is meaningful only when <c>SCStep_SpecifyByExprProp</c> is <c>True</c> and <c>Step_UseCurrentFileProp</c> is <c>False</c>.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SequenceCallStepAdditions.SCStep_SeqNameProp">
      <summary>(Value: &quot;SeqName&quot;) Name of the subsequence. The value of this property is meaningful only when <c>SCStep_SpecifyByExprProp</c> is <c>False</c>.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SequenceCallStepAdditions.SCStep_SeqNameExprProp">
      <summary>(Value: &quot;SeqNameExpr&quot;) An expression, that must evaluate to a string, to obtain the name of the subsequence to be called. The value of this property is meaningful only when <c>SCStep_SpecifyByExprProp</c> is <c>True</c>.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SequenceCallStepAdditions.SCStep_ActualArgsProp">
      <summary>(Value: &quot;ActualArgs&quot;) An object that contains a list of arguments to the subsequence. If the subsequence has fewer parameters than the number of arguments, the subsequence ignores the extra arguments. If the subsequence has more parameters than the number of arguments, the subsequences uses the default values of the extra parameters.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SequenceCallStepAdditions.SCStep_UseCurrentFileProp">
      <summary>(Value: &quot;UseCurFile&quot;) A Boolean property that is <c>True</c> when the file that contains the Sequence Call step also contains the subsequence.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SequenceCallStepAdditions.SCStep_SpecifyByExprProp">
      <summary>(Value: &quot;SpecifyByExpr&quot;) If this Boolean property is <c>True</c>, TestStand evaluates the <c>SCStep_SeqFilePathExprProp</c> expression property to determine the pathname of the sequence file that contains the subsequence. TestStand also evaluates the <c>SCStep_SeqNameExprProp</c> expression property to determine the name of the subsequence.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SequenceCallStepAdditions.SCStep_ArgPrototypeProp">
      <summary>(Value: &quot;Prototype&quot;) An object that contains a list of parameters. TestStand uses the parameter list only for displaying the arguments in the Specify Module dialog box. The Specify Module dialog box sets this property when you select a sequence with the Load Prototype button. The value of this property is meaningful only when <c>SCStep_UseArgPrototypeProp</c> is <c>True</c>.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SequenceCallStepAdditions.SCStep_TraceSettingProp">
      <summary>(Value: &quot;Trace&quot;) A property that controls if tracing occurs while the subsequence executes. Following are the three possible values: <c>SCStep_TraceSettingValOff</c>, <c>Step_TraceSettingValOn</c>, and <c>SCStep_TraceSettingValDontChange</c>.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SequenceCallStepAdditions.SCStep_TraceSettingValOff">
      <summary>(Value: &quot;Off&quot;) A value of the <c>SCStep_TraceSettingProp</c> property. It disables tracing while the subsequence executes. </summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SequenceCallStepAdditions.SCStep_TraceSettingValOn">
      <summary>(Value: &quot;On&quot;) A value of the <c>SCStep_TraceSettingProp</c> property. It enables tracing while the subsequence executes. </summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SequenceCallStepAdditions.SCStep_TraceSettingValDontChange">
      <summary>(Value: &quot;Don't Change&quot;) A value of the <c>SCStep_TraceSettingProp</c> property. When tracing is enabled in the Sequence Call step that calls the subsequence, tracing only occurs while the subsequence executes.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SequenceCallStepAdditions.SCStep_IgnoreTerminateProp">
      <summary>(Value: &quot;IgnoreTerminate&quot;) If this Boolean property is <c>True</c> and the user or a step module attempts to terminate the subsequence before it completes, the execution continues with the next step.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SequenceCallStepAdditions.SCStep_UseArgPrototypeProp">
      <summary>(Value: &quot;UsePrototype&quot;) If this Boolean property is <c>True</c>, the prototype for displaying arguments in the Specify Module dialog box is taken from the <c>SCStep_ArgPrototypeProp</c> property. If this property is <c>False</c>, the prototype is taken from the selected sequence, if any. The Specify Module dialog box sets this property to <c>True</c> when you enable the Specify Expressions for Pathname and Sequence option or when you disable the Use Prototype of Selected Sequence option.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.FlexCStepAdditions">
      <summary><para>Note: Do not use these constants to access the adapter-specific properties of a step. Use the DllModule interface for the Module object for the step. Use the Step.Module property to acquire a reference to a Module object.</para>
In TestStand 3.0 or later, these string constants are obsolete. 
These string constants were previously used to create lookup strings to access the C/C++ DLL Adapter-specific properties of a step. Notice that the <c>FlexCStep_ExternalCallProp</c> constant refers to the property that contains the properties which have constants that begin with the <c>ExternalCall_</c> prefix. The <c>ExternalCall_ParametersProp</c> constant represents the property that contains an array of objects that describe the return value and parameters for the function. Constants that have names that begin with <c>FCParam_</c> apply to the return value and each parameter.</summary>
      <seealso cref="&quot;DllModule&quot;DllModule.htm" />
      <seealso cref="&quot;Lookup Strings&quot;../InfoTopics/API_lookupString.html" />
      <seealso cref="Step.Module" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.FlexCStepAdditions.FlexCStep_ExternalCallProp">
      <summary>(Value: &quot;Call&quot;) This constant is obsolete.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.FlexCStepAdditions.ExternalCall_LibPathProp">
      <summary>(Value: &quot;LibPath&quot;) This constant is obsolete.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.FlexCStepAdditions.ExternalCall_FunctionNameProp">
      <summary>(Value: &quot;Func&quot;) This constant is obsolete.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.FlexCStepAdditions.ExternalCall_CallConvProp">
      <summary>(Value: &quot;Conv&quot;) This constant is obsolete.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.FlexCStepAdditions.ExternalCall_ParametersProp">
      <summary>(Value: &quot;Params&quot;) This constant is obsolete.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.FlexCStepAdditions.FCParam_NameProp">
      <summary>(Value: &quot;Name&quot;) This constant is obsolete.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.FlexCStepAdditions.FCParam_TypeProp">
      <summary>(Value: &quot;Type&quot;) This constant is obsolete.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.FlexCStepAdditions.FCParam_NumericTypeProp">
      <summary>(Value: &quot;NumType&quot;) This constant is obsolete.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.FlexCStepAdditions.FCParam_ObjectTypeProp">
      <summary>(Value: &quot;ObjType&quot;) This constant is obsolete.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.FlexCStepAdditions.FCParam_NumericPassingProp">
      <summary>(Value: &quot;NumPass&quot;) This constant is obsolete.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.FlexCStepAdditions.FCParam_NumArrayElementsProp">
      <summary>(Value: &quot;NumEls&quot;) This constant is obsolete.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.FlexCStepAdditions.FCParam_StringPassingProp">
      <summary>(Value: &quot;StrPass&quot;) This constant is obsolete.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.FlexCStepAdditions.FCParam_ResultActionProp">
      <summary>(Value: &quot;ResultAct&quot;) This constant is obsolete.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.FlexCStepAdditions.FCParam_ArgValueProp">
      <summary>(Value: &quot;ArgVal&quot;) This constant is obsolete.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.FlexCStepAdditions.FCParam_FlagsProp">
      <summary>(Value: &quot;Flags&quot;) This constant is obsolete.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.FlexCStepAdditions.FCParam_ArrayElemPassingProp">
      <summary>(Value: &quot;ElemPass&quot;) This constant is obsolete.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.FlexCStepAdditions.FCParam_StringSizeProp">
      <summary>(Value: &quot;StrSize&quot;) This constant is obsolete.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.RunModes">
      <summary>Use these constants to specify the type of action you want to take before executing the step.</summary>
      <seealso cref="Step.GetRunModeEx" />
      <seealso cref="Step.SetRunModeEx" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.RunModes.RunMode_Normal">
      <summary>(Value: &quot;Normal&quot;) The step executes normally.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.RunModes.RunMode_Skip">
      <summary>(Value: &quot;Skip&quot;) The step does not execute. Instead, the step status is set to <c>Skipped</c>.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.RunModes.RunMode_ForceFail">
      <summary>(Value: &quot;Fail&quot;) The step does not execute. Instead, the step status is set to <c>Failed</c>.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.RunModes.RunMode_ForcePass">
      <summary>(Value: &quot;Pass&quot;) The step does not execute. Instead, the step status is set to <c>Passed</c>.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.NamedPropertyTypes">
      <summary>Use these constants to specify one of the built-in, named data types when calling a method such as Engine.NewPropertyObject or PropertyObject.NewSubProperty.</summary>
      <seealso cref="Engine.NewPropertyObject" />
      <seealso cref="PropertyObject.NewSubProperty" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.NamedPropertyTypes.PropType_Path">
      <summary>(Value: &quot;Path&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.NamedPropertyTypes.PropType_FCParam">
      <summary>(Value: &quot;FCParameter&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.NamedPropertyTypes.PropType_Error">
      <summary>(Value: &quot;Error&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.NamedPropertyTypes.PropType_CommonResults">
      <summary>(Value: &quot;CommonResults&quot;)</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.UserPrivileges">
      <summary>Use these string constants to check if a user has a particular built-in privilege. Use the Engine.CurrentUserHasPrivilege or User.HasPrivilege method with these constants.</summary>
      <seealso cref="Engine.CurrentUserHasPrivilege" />
      <seealso cref="User.HasPrivilege" />
      <seealso cref="&quot;User and Group Privileges&quot;javascript:RefLink('/InfoTopics/UserManWin_User_Data_Type_Subproperties.htm')" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UserPrivileges.Priv_Execute">
      <summary>(Value: &quot;Execute&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UserPrivileges.Priv_Terminate">
      <summary>(Value: &quot;Terminate&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UserPrivileges.Priv_Abort">
      <summary>(Value: &quot;Abort&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UserPrivileges.Priv_CtrlExecFlow">
      <summary>(Value: &quot;ControlExecFlow&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UserPrivileges.Priv_SinglePass">
      <summary>(Value: &quot;SinglePass&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UserPrivileges.Priv_RunAnySequence">
      <summary>(Value: &quot;RunAnySequence&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UserPrivileges.Priv_RunSelectedTests">
      <summary>(Value: &quot;RunSelectedTests&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UserPrivileges.Priv_LoopSelectedTests">
      <summary>(Value: &quot;LoopSelectedTests&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UserPrivileges.Priv_EditSequenceFiles">
      <summary>(Value: &quot;EditSequenceFiles&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UserPrivileges.Priv_EditTypes">
      <summary>(Value: &quot;EditTypes&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UserPrivileges.Priv_ConfigEngine">
      <summary>(Value: &quot;ConfigEngine&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UserPrivileges.Priv_ConfigAdapter">
      <summary>(Value: &quot;ConfigAdapter&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UserPrivileges.Priv_ConfigApp">
      <summary>(Value: &quot;ConfigApp&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UserPrivileges.Priv_EditUsers">
      <summary>(Value: &quot;EditUsers&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UserPrivileges.Priv_EditStationGlobals">
      <summary>(Value: &quot;EditStationGlobals&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UserPrivileges.Priv_EditWorkspace">
      <summary>(Value: &quot;EditWorkspace&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UserPrivileges.Priv_UseSourceControl">
      <summary>(Value: &quot;UseSourceControl&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UserPrivileges.Priv_EditProcessModelFiles">
      <summary>(Value: &quot;EditProcessModelFiles&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UserPrivileges.Priv_SaveSequenceFiles">
      <summary>(Value: &quot;SaveSequenceFiles&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UserPrivileges.Priv_UserLoggedIn">
      <summary>(Value: &quot;*&quot;)  Use this value with the <c>Engine.CurrentUserHasPrivilege</c> method to determine whether a user is logged in.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UserPrivileges.Priv_Operate">
      <summary>(Value: &quot;Operate&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UserPrivileges.Priv_Debug">
      <summary>(Value: &quot;Debug&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UserPrivileges.Priv_Develop">
      <summary>(Value: &quot;Develop&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UserPrivileges.Priv_Configure">
      <summary>(Value: &quot;Configure&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UserPrivileges.Priv_ConfigReport">
      <summary>(Value: &quot;ConfigReport&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UserPrivileges.Priv_ConfigDatabase">
      <summary>(Value: &quot;ConfigDatabase&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UserPrivileges.Priv_ConfigModel">
      <summary>(Value: &quot;ConfigModel&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UserPrivileges.Priv_GrantAll">
      <summary>(Value: &quot;GrantAll&quot;) This property exists in all the group privileges in the user privileges property view.  If the value is <c>True</c>, the user is granted all the privileges in the group.<para>Note: Do not use this constant with the Engine.CurrentUserHasPrivilege method.</para></summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UserPrivileges.Priv_EditRuntimeVariables">
      <summary>(Value: &quot;EditRuntimeVariables&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UserPrivileges.Priv_EditTemplates">
      <summary>(Value: &quot;EditTemplates&quot;) </summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.OpenFileDialogOptions">
      <summary>These constants represent the options you can use with the openFileDialogFlags parameter of the Engine.DisplayFileDialog method. Use the bitwise-OR operator to specify more than one option.
</summary>
      <seealso cref="Engine.AppMainHwnd" />
      <seealso cref="Engine.DisplayFileDialog" />
      <seealso cref="Engine.FindFile" />
      <seealso cref="&quot;Open File dialog box&quot;javascript:RefLink('/InfoTopics/DB_Open_File.htm')" />
      <seealso cref="WindowsFileDialogFlags" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.OpenFileDialogOptions.OpenFile_DisableUseAbsPathCheck">
      <summary>(Value: 0x1) Dims the Use Absolute Path option.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.OpenFileDialogOptions.OpenFile_InitialSetUseAbsPathCheck">
      <summary>(Value: 0x2) Sets the initial state of the Use Absolute Path option to enabled when the dialog box first opens.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.OpenFileDialogOptions.OpenFile_InitialUnsetUseAbsPathCheck">
      <summary>(Value: 0x4) Sets the initial state of the Use Absolute Path option to disabled when the dialog box first opens.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.OpenFileDialogOptions.OpenFile_UseAbsolutePath">
      <summary>(Value: 0x83) Combination of the <c>OpenFile_DisableUseAbsPathCheck</c>, <c>OpenFile_InitialSetUseAbsPathCheck</c>, and <c>OpenFile_HideUseAbsPathCheck</c> flags. Use this flag to ensure that the method returns only absolute pathnames.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.OpenFileDialogOptions.OpenFile_UseRelativePath">
      <summary>(Value: 0x85) Combination of the <c>OpenFile_DisableUseAbsPathCheck</c>, <c>OpenFile_InitialUnsetUseAbsPathCheck</c>, and <c>OpenFile_HideUseAbsPathCheck</c> flags. Use this flag to ensure that the method returns only relative pathnames or simple filenames.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.OpenFileDialogOptions.OpenFile_ResolveNonExistentFile">
      <summary>(Value: 0x8) Verifies that the Engine.FindFileEx method would find files in pathnames that specify files that do not exist if the files did exist. Use this option with the Save As dialog box to ensure that TestStand saves the file to a pathname under one of the TestStand search directories.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.OpenFileDialogOptions.OpenFile_FileMustNotExist">
      <summary>(Value: 0x10) Specifies that the pathname the user entered must not exist on disk. If the user selects an existing file, the dialog box displays a warning message and does not close.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.OpenFileDialogOptions.OpenFile_SaveAsDialog">
      <summary>(Value: 0x40) Creates a Save As dialog box.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.OpenFileDialogOptions.OpenFile_HideUseAbsPathCheck">
      <summary>(Value: 0x80) Hides the Use Absolute Path option.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.OpenFileDialogOptions.OpenFile_ShowBrowseIntoLLBCheck">
      <summary>(Value: 0x100) Shows the Browse Into LLB option, which allows users to browse the contents of a LabVIEW LLB file.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.OpenFileDialogOptions.OpenFile_SelectDirectoriesOnly">
      <summary>(Value: 0x200) Creates a Directory Selection dialog box. The user can select only folders.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.OpenFileDialogOptions.OpenFile_HideMultiSelectListCtrl">
      <summary>(Value: 0x400) For multiple selection file dialog boxes, hides the list control that shows the currently selected pathnames. If you do not set this option, the TestStand File dialog box displays an additional list control that contains the currently selected pathnames. Create a multiple selection dialog box by passing the WinFileDlg_ALLOWMULTISELECT option to the win32Flags parameter. </summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.OpenFileDialogOptions.OpenFile_NoOptions">
      <summary>(Value: 0x0) No options.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.OpenFileDialogOptions.OpenFile_ModalToAppMainWind">
      <summary>(Value: 0x10000) By default, the dialog box is modal to the last active window of the calling thread, or if none exists, to the last active window from AppMainHwnd. If you set this option, the dialog box is modal with respect to the window handle of the Engine.AppMainHwnd property. Typically, you do not need to set this option.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.OpenFileDialogOptions.OpenFile_InitialSetBrowseIntoLLB">
      <summary>(Value: 0x20) Enables the Browse Into LLB option.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.OpenFileDialogOptions.OpenFile_UseSequenceFileFilters">
      <summary>(Value: 0x800) Specifies to add the file extensions for the loaded sequence file translators to the list of file types the Open File dialog box can select.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.OpenFileDialogOptions.OpenFile_IgnoreInitialPathExtension">
      <summary>(Value: 0x1000) If the initial path specifies a file and the file extension is not part of the file filter string, TestStand removes the file extension from the default name that appears in the open file dialog box.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.OpenFileDialogOptions.OpenFile_SubstituteMacrosByDefault">
      <summary>(Value: 0x2000) Enables the Substitute Path Macros option in the File Not Found dialog box and the File Conflict dialog box. </summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.ExecutionMask">
      <summary>Use these constants to specify the StationOptions.ExecutionMask property.
Each constant corresponds to an Execution option. The user typically sets these options on the Execution tab of the Station Options dialog box.</summary>
      <seealso cref="&quot;Execution tab&quot;javascript:RefLink('/InfoTopics/DB_Station_Opt_Exe_Tab.htm')" />
      <seealso cref="StationOptions.ExecutionMask" />
      <seealso cref="&quot;Station Options dialog box&quot;javascript:RefLink('/InfoTopics/DB_Station_Opt.htm')" />
      <seealso cref="StationOptions.RTEOption" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ExecutionMask.ExecMask_BreakpointsEnabled">
      <summary>(Value: 0x1) Honors breakpoints.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ExecutionMask.ExecMask_BreakWhileTerminating">
      <summary>(Value: 0x2) Honors breakpoints when terminating an execution.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ExecutionMask.ExecMask_BreakOnRunTimeError">
      <summary>(Value: 0x4) Specifies that the message, <c>UIMsg_BreakOnRunTimeError</c>, is sent when an error occurs and the value of the StationOptions.RTEOption property is <c>RTEOption_ShowDialog</c>.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ExecutionMask.ExecMask_TracingEnabled">
      <summary>(Value: 0x8) Enables tracing. When tracing is enabled, the sequence editor or user interface displays each step as it executes. This option is useful for debugging but adds significant performance overhead to the execution of test programs.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ExecutionMask.ExecMask_TraceIntoSetupCleanup">
      <summary>(Value: 0x10) Enables tracing of steps in the Setup and Cleanup step groups of each sequence.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ExecutionMask.ExecMask_TraceIntoPrePostCallbacks">
      <summary>(Value: 0x20) Generates trace events for steps in any of the Pre-Step and Post-Step Engine callbacks.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ExecutionMask.ExecMask_TraceIntoPostActionCallbacks">
      <summary>(Value: 0x40) Generates trace events for steps in Post Action callbacks.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ExecutionMask.ExecMask_TraceIntoSeparateExecutionCallbacks">
      <summary>(Value: 0x80) Specifies to generate trace events for steps in callbacks that run as executions separate from the top-level sequence execution. Examples include Front-End callbacks and callbacks you execute from the Tools menu.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ExecutionMask.ExecMask_TraceIntoEntryPoints">
      <summary>(Value: 0x100) Generates trace events for steps in Process Model entry point sequences.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ExecutionMask.ExecMask_TraceIntoSequenceCallsMarkedAsTraceOff">
      <summary>(Value: 0x200) Enables tracing into all subsequences when tracing is enabled for the calling sequence.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ExecutionMask.ExecMask_TraceWhileTerminating">
      <summary>(Value: 0x400) Generates trace events for steps that run while execution is terminating. Examples of steps that can run when an execution is terminating are steps in the Cleanup step groups that run when you terminate execution in the middle of a sequence.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ExecutionMask.ExecMask_TraceAllThreads">
      <summary>(Value: 0x800) Generates trace events for all running threads in an execution. If you do not set this option, TestStand generates trace events only for the active thread.
<para>Note: The TestStand User Interface (UI) Controls display only the active thread and do not support enabling this constant.</para></summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ExecutionMask.ExecMask_DefaultExecutionMask">
      <summary>(Value: 0x801D) Bitwise-OR combination of the <c>ExecMask_BreakpointsEnabled</c>, <c>ExecMask_BreakOnRunTimeError</c>, <c>ExecMask_TraceIntoSetupCleanup</c>, and <c>ExecMask_TracingEnabled</c> flags.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ExecutionMask.ExecMask_InteractiveRecordResults">
      <summary>(Value: 0x1000) Records the results of steps you run interactively.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ExecutionMask.ExecMask_InteractiveRunSetupCleanup">
      <summary>(Value: 0x2000) Specifies whether to run the Setup and Cleanup step groups for the sequence that contains the selected steps. This option applies only when you initiate the interactive execution as an independent, top-level execution.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ExecutionMask.ExecMask_InteractiveEvaluatePreconditions">
      <summary>(Value: 0x4000) Specifies whether to evaluate preconditions for steps you run interactively.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ExecutionMask.ExecMask_AllowBreakWhileInCodeModules">
      <summary>(Value: 0x8000) Enables TestStand to display an execution as suspended so you can debug it even if one or more threads are executing code inside a code module, which can be useful when code modules take a long time to complete, are blocked waiting for something, or are running continuously in the background. While the execution is suspended, steps with running code modules show a status of <span class="Monospace">Running</span>. If the code module completes while the execution is suspended, the thread suspends immediately after returning from the code module until you resume the execution.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.ReadWriteOptions">
      <summary>These constants represent the options you can use with the RWOptions parameter of the methods that read and write PropertyObjects. Use the bitwise-OR operator to specify more than one option.</summary>
      <seealso cref="PropertyObject.ReadEx" />
      <seealso cref="PropertyObject.Serialize" />
      <seealso cref="PropertyObject.UnserializeEx" />
      <seealso cref="PropertyObject.Write" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ReadWriteOptions.RWOption_ValuesOnly">
      <summary>(Value: 0x1) Use this option to read or write the value of the object and the value of each subproperty. TestStand does not write the type information for the object and subproperties when you use this flag.
TestStand writes all values even if the value is the default value for a type. If you use PropertyObject.ReadEx or PropertyObject.UnserializeEx to read the contents of a persisted object written using this option, the structure of the target object must match the structure of the values read. If the target structure is incorrect, the values in the target object do not update.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ReadWriteOptions.RWOption_EraseExistingObject">
      <summary>(Value: 0x2) When writing an object, use this option to clear out any existing object with the same name.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ReadWriteOptions.RWOption_EraseAll">
      <summary>(Value: 0x4) When writing an object to a file, use this option to clear the entire contents of the existing file.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ReadWriteOptions.RWOption_NoOptions">
      <summary>(Value: 0x0) No options.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ReadWriteOptions.RWOption_DoNotWriteTypes">
      <summary>(Value: 0x8) Do not write any type definitions when writing type definition instances.
TestStand writes only values that are not the default value for a type. If you use the PropertyObject.ReadEx or PropertyObject.UnserializeEx methods to read the contents of a persisted object written using this option, the type definitions must already be loaded. If the types are no loaded, the <c>PropertyObject.ReadEx</c> fails.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.PropertyOptions">
      <summary>These constants represent the options you can use with many of the methods of the PropertyObject class. Use the bitwise-OR operator to specify more than one option for a particular method.</summary>
      <seealso cref="&quot;Localization tab&quot;javascript:RefLink('/InfoTopics/DB_Station_Opt_Loc_Tab.htm')" />
      <seealso cref="PropertyFlags" />
      <seealso cref="PropertyObject" />
      <seealso cref="PropertyObject.Clone" />
      <seealso cref="PropertyObject.DeleteSubProperty" />
      <seealso cref="PropertyObject.GetValBoolean" />
      <seealso cref="PropertyObject.GetValNumber" />
      <seealso cref="PropertyObject.GetValString" />
      <seealso cref="PropertyObject.GetValVariant" />
      <seealso cref="PropertyObject.IsAliasObject" />
      <seealso cref="PropertyObject.IsEqualTo" />
      <seealso cref="PropertyObject.IsModifiedType" />
      <seealso cref="PropertyObject.SetPropertyObject" />
      <seealso cref="PropertyObject.SetValBoolean" />
      <seealso cref="PropertyObject.SetValNumber" />
      <seealso cref="PropertyObject.SetValString" />
      <seealso cref="PropertyObject.SetValVariant" />
      <seealso cref="&quot;Station Options dialog box&quot;javascript:RefLink('/InfoTopics/DB_Station_Opt.htm')" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyOptions.PropOption_InsertIfMissing">
      <summary>(Value: 0x1) If the property the lookupString parameter specifies does not exist, use this option with the SetVal and GetVal methods of the PropertyObject class to create a new property. The PropertyObject.SetValVariant and PropertyObject.GetValVariant methods do not support the <c>InsertIfMissing</c> option.
<para>Note: TestStand does not support adding a new subproperty to an instance of a type unless you add the subproperty below a container you have marked as unstructured in the type definition by using the PropFlags_UnstructuredProperty flag. TestStand does not report any errors and creates the property, but does not save the property. When resolving type conflicts and updating type instances, TestStand automatically removes the property.</para></summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyOptions.PropOption_DeleteIfExists">
      <summary>(Value: 0x2) When calling the PropertyObject.DeleteSubProperty method, use this option to avoid an error if the subproperty you specify does not exist.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyOptions.PropOption_DoNothingIfExists">
      <summary>(Value: 0x4) Use this option with the SetVal methods of the PropertyObject class to avoid setting the value of a property that already exists. Usually, you use this option in combination with the PropOption_InsertIfMissing option.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyOptions.PropOption_SetOnlyIfDoesNotExist">
      <summary>(Value: 0x5) This is the combination of the <c>PropOption_DoNothingIfExists</c> and the <c>PropOption_InsertIfMissing</c> options.
<para>Note: TestStand does not support adding a new subproperty to an instance of a type unless you add the subproperty below a container you have marked as unstructured in the type definition by using the PropFlags_UnstructuredProperty flag. TestStand does not report any errors and creates the property, but does not save the property. When resolving type conflicts and updating type instances, TestStand automatically removes the property.</para></summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyOptions.PropOption_CoerceFromNumber">
      <summary>(Value: 0x8) Use this option for implicit conversion when using a numeric value as a Boolean or string. You can use this option with the PropertyObject.GetValBoolean and PropertyObject.GetValString methods.  When you use this option with the <c>PropertyObject.GetValString</c> method, you can pass one of the <c>PropOption_DecimalPoint</c> options to specify the decimal point character. You can also use this option with the PropertyObject.GetValNumber, PropertyObject.GetValInteger64, and PropertyObject.GetValUnsignedInteger64 methods to convert the returned number to the required representation.  Pass this option to the PropertyObject.GetValString of an enumeration object to get the numerical value of the enumeration converted to a string when enumerator information is unavailable.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyOptions.PropOption_CoerceFromString">
      <summary>(Value: 0x10) Use this option for implicit conversion when using a string value as a Boolean or number. You can use this option with the PropertyObject.GetValNumber and PropertyObject.GetValBoolean methods.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyOptions.PropOption_CoerceFromBoolean">
      <summary>(Value: 0x20) Use this option for implicit conversion when using a Boolean value as a string or number. You can use this option with the PropertyObject.GetValNumber and PropertyObject.GetValString methods.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyOptions.PropOption_CoerceToNumber">
      <summary>(Value: 0x40) Use this option for implicit conversion when setting a numeric value with a Boolean or string. You can use this option with the PropertyObject.SetValBoolean and PropertyObject.SetValString methods. TestStand ignores this flag when you specify <c>PropOption_InsertIfMissing</c> and the property does not exist. You can also use this option with the PropertyObject.SetValNumber, PropertyObject.SetValInteger64, and PropertyObject.SetValUnsignedInteger64 methods to convert the new value to the required representation.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyOptions.PropOption_CoerceToString">
      <summary>(Value: 0x80) Use this option for implicit conversion when setting a string value with a Boolean or number. You can use this option with the PropertyObject.SetValNumber and PropertyObject.SetValBoolean methods. TestStand ignores this flag when you specify <c>PropOption_InsertIfMissing</c> and the property does not exist.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyOptions.PropOption_CoerceToBoolean">
      <summary>(Value: 0x100) Use this option for implicit conversion when setting a Boolean value with a string or number. You can use this option with the PropertyObject.SetValNumber and PropertyObject.SetValString methods. TestStand ignores this flag when you specify <c>PropOption_InsertIfMissing</c> and the property does not exist.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyOptions.PropOption_Coerce">
      <summary>(Value: 0x301F8) Use this option to convert the value of a property from or to any of the supported basic types. This is the combination of the <c>PropOption_CoerceFromNumber</c>, <c>PropOption_CoerceFromString</c>, <c>PropOption_CoerceFromBoolean</c>, <c>PropOption_CoerceFromReference</c>, <c>PropOption_CoerceToNumber</c>, <c>PropOption_CoerceToString</c>, <c>PropOption_CoerceToBoolean</c>, and <c>PropOption_CoerceToReference</c> flags. </summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyOptions.PropOption_InsertElement">
      <summary>(Value: 0x1) Use this option with the SetByOffset methods of the PropertyObject class to insert a new array element at the specified offset. This option is valid only for one-dimensional arrays.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyOptions.PropOption_RemoveElement">
      <summary>(Value: 0x2) Use this value with the <c>Get_ByOffset</c> methods of the PropertyObject class to remove the array element at the specified offset. This option is valid only for one-dimensional arrays.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyOptions.PropOption_OverrideNotDeletable">
      <summary>(Value: 0x400000) Use with methods that delete properties to override the PropFlags_NotDeletable flag.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyOptions.PropOption_NotOwning">
      <summary>(Value: 0x200) Use this option with the PropertyObject.SetPropertyObject method to create an alias to the specified property object. Use the PropertyObject.IsAliasObject method to determine whether the object is an alias.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyOptions.PropOption_CoerceFromReference">
      <summary>(Value: 0x10000) Use this option for implicit conversion when using an ActiveX reference value as a string or number. You can use this option with the PropertyObject.GetValNumber and PropertyObject.GetValString methods.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyOptions.PropOption_CoerceToReference">
      <summary>(Value: 0x20000) Use this option for implicit conversion when setting an ActiveX reference value with a string or number. You can use this option with the PropertyObject.SetValNumber and PropertyObject.SetValString methods. TestStand ignores this flag when you specify <c>PropOption_InsertIfMissing</c> and the property does not exist.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyOptions.PropOption_CoerceBadNumbersToZero">
      <summary>(Value: 0x40000) Use this option to attempt to coerce a non-numeric string to a number that yields zero instead of an error.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyOptions.PropOption_NoOptions">
      <summary>(Value: 0x0) No options.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyOptions.PropOption_ReferToAlias">
      <summary>(Value: 0x400) Use this option when calling methods on alias objects to perform operations on the alias instead of the object to which the alias refers. Use the PropertyObject.IsAliasObject method to determine whether the object is an alias.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyOptions.PropOption_RequireIdenticalStructure">
      <summary>(Value: 0x2000) Use with the PropertyObject.IsEqualTo method to require that both objects be identical in every way for the comparison to return <c>True</c>. When you use this option, the following items must also be identical for the <c>PropertyObject.IsEqualTo</c> method to return <c>True</c>:
<para><para>&#160;&#160;&#160;&#160;* Array element prototypes for arrays of containers</para><para>&#160;&#160;&#160;&#160;* Type definitions for type instances</para><para>&#160;&#160;&#160;&#160;* Comments</para><para>&#160;&#160;&#160;&#160;* Numeric formats</para><para>&#160;&#160;&#160;&#160;* Order of subproperties</para></para></summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyOptions.PropOption_CaseInsensitive">
      <summary>(Value: 0x1000) Use with the PropertyObject.IsEqualTo method to ignore the case of string property values when comparing.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyOptions.PropOption_DoNotRecurse">
      <summary>(Value: 0x4000) Use with the PropertyObject.IsEqualTo method to compare only the top level object and not the subproperties.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyOptions.PropOption_DoNotShareProperties">
      <summary>(Value: 0x8000000) Use this value with the PropertyObject.Clone method of the PropertyObject class. Normally, if a cloned object has a subproperty that has the PropFlags_Shared flag set, that subproperty is shared between the original object and the clone; that is, both objects point to the same subproperty object. This option prevents such subproperties from being shared between the original object and the clone.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyOptions.PropOption_CopyAllFlags">
      <summary>(Value: 0x20000000) Use this value with the PropertyObject.Clone method to require all flags in the object and the subproperties to be copied. If you do not pass this option, the Clone function removes flags such as <c>PropFlags_NotDeletable</c> and <c>PropFlags_NotEditable</c> from the copy.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyOptions.PropOption_DoNotAdoptCurrentName">
      <summary>(Value: 0x800) Use this value with the PropertyObject.SetPropertyObject method to require that the object you pass to the method keeps its name. If you do not use this option, the method changes the object to have the same name as the object it is replacing.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyOptions.PropOption_DecimalPoint_UsePeriod">
      <summary>(Value: 0x0) Use this option to specify the period character as the decimal point when you implicitly convert a string to a number or a number to a string in a call to a GetVal or SetVal method that coerces between a number and string.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyOptions.PropOption_DecimalPoint_UsePreference">
      <summary>(Value: 0x1000) Use the Localization preferences on the Localization tab of the Station Options dialog box to determine whether the operating system setting determines the decimal point character when you implicitly convert a string to a number or a number to a string in a call to a GetVal or SetVal method that coerces between a number and string.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyOptions.PropOption_DecimalPoint_UseSystemSetting">
      <summary>(Value: 0x2000) Use the character that the operating system setting specifies as the decimal point when you implicitly convert a string to a number or a number to a string in a call to a GetVal or SetVal method that coerces between a number and string.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyOptions.PropOption_DecimalPoint_UseComma">
      <summary>(Value: 0x3000) Use this option to specify the comma character as the decimal point when you implicitly convert a string to a number or a number to a string in a call to a GetVal or SetVal method that coerces between a number and string.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyOptions.PropOption_CoerceFromEnum">
      <summary>(Value: 0xC0)  Use this option for implicit conversion when using an enumeration value as a string or number. You can use this option with the PropertyObject.GetValNumber and PropertyObject.GetValString methods. </summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyOptions.PropOption_CoerceToEnum">
      <summary>(Value: 0x18)  Use this option for implicit conversion when setting an enumeration value with a string or number. You can use this option with the PropertyObject.SetValNumber and PropertyObject.SetValString methods. TestStand ignores this flag when you specify PropOption_InsertIfMissing and the property does not exist.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.PropertyFlags">
      <summary>These constants represent the flags you can set and get on PropertyObject objects. Use the bitwise-OR operator to specify more than one flag for a particular PropertyObject object.</summary>
      <seealso cref="PropertyObject" />
      <seealso cref="PropertyObject.EvaluateEx" />
      <seealso cref="PropertyObject.GetFlags" />
      <seealso cref="PropertyObject.SetFlags" />
      <seealso cref="PropertyObjTypeFlags" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyFlags.PropFlags_NotEditable">
      <summary>(Value: 0x1) Set this flag to prevent the user from editing the object or deleting the properties of the object in a sequence editor.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyFlags.PropFlags_PassByReference">
      <summary>(Value: 0x4) This flag allows a sequence to control how TestStand passes each parameter to it. Set this flag to pass the parameter by reference. Remove this flag to pass a copy of the parameter.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyFlags.PropFlags_Hidden">
      <summary>(Value: 0x8) Set this flag in an object to prevent it from appearing in the sequence editor unless the Show Hidden Properties station option is set.</summary>
      <seealso cref="Engine.ShowHiddenProperties" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyFlags.PropFlags_HiddenInTypes">
      <summary>(Value: 0x10) Set this flag in an object to prevent it from being seen in the sequence editor Type view unless the Show Hidden Properties station option is set.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyFlags.PropFlags_DontTypeCheckParameter">
      <summary>(Value: 0x80) Set this flag in a sequence parameter to disable type-checking for the parameter.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyFlags.PropFlags_ExcludeFromComparison">
      <summary>(Value: 0x10000) Set this flag in a property to ignore the property when the containing object is compared to another object. This flag affects the PropertyObject.IsEqualTo method.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyFlags.PropFlags_Shared">
      <summary>(Value: 0x20000) Use this flag to specify that a property be shared among multiple copies of the containing object. If this flag is set when the containing object is copied, such as creating an instance of a type or calling the <c>PropertyObject.Clone</c> method, the copy of the object receives a pointer to the property rather than a copy of the property. In the sequence editor, you can change only the value of a shared property, not the shared property in the instance of the type.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyFlags.PropFlags_SharedAtRunTime">
      <summary>(Value: 0x40000) This flag is similar to <c>PropFlags_Shared</c>, except the flag is honored only during run time.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyFlags.PropFlags_ExcludeFromCopy">
      <summary>(Value: 0x80000) Set this flag on a property in a data type or step type to prevent the property from being copied when an instance of the type is created. <para>Note: This property has no effect when set on a property in an instance of a type.</para></summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyFlags.PropFlags_UnstructuredProperty">
      <summary>(Value: 0x200000) This flag indicates that no type restrictions exist for the property. Separate instances of the property can contain objects of different types.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyFlags.PropFlags_NotDeletable">
      <summary>(Value: 0x400000) Set this flag in any object to prevent the user from deleting the object in a sequence editor.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyFlags.PropFlags_Propagate">
      <summary>(Value: 0x100) This flag applies only to local variables. If you set the Propagate flag for a sequence local, the variable also appears at run-time as a local variable in subsequences the sequence calls. The variable continues to propagate as the call chain extends.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyFlags.PropFlags_PermitPropagation">
      <summary>(Value: 0x200) This flag applies only to local variables. TestStand uses the PermitPropagation flag to determine which variable takes precedence when a subsequence defines a variable with the same name as a variable the calling sequence propagates. If you do not set the PermitPropagation flag, TestStand preserves the subsequence local variable. If you set the PermitPropagation flag, TestStand replaces the subsequence variable with the variable the caller propagates.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyFlags.PropFlags_IntermediateExprValue">
      <summary>(Value: 0x40) Indicates that the object is a temporary object created as the result of an expression evaluation. The PropertyObject.EvaluateEx method can return an object with this flag set.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyFlags.PropFlags_IsMeasurementValue">
      <summary>(Value: 0x400) Set this flag on a property to indicate that the value represents a measurement. Utilities and components can identify measurement values by searching for properties that set the IsMeasurementValue flag. Typically, a component considers that the IsMeasurementValue flag on a container property applies recursively to the subproperties of the container.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyFlags.PropFlags_DontCopyToResults">
      <summary>(Value: 0x800) After executing a step, TestStand automatically copies a subset of the step properties to the end of the result list. You can set this flag for a step subproperty to prevent TestStand from copying the property to the result list.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyFlags.PropFlags_IsLimit">
      <summary>(Value: 0x1000) Set this flag on a property to indicate that it contains a test limit value. Utilities and components can identify limit values by searching for properties that set the IsLimit flag. Typically, a component considers that the IsLimit flag on a container property applies recursively to the subproperties of the container.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyFlags.PropFlags_IncludeInReport">
      <summary>(Value: 0x2000) Set this flag on a property to specify that a report generator displays the property in the report. This flag affects only properties that are in a result list or that TestStand copies to a result list. Typically, a report generator considers that the IncludeInReport flag on a container property applies recursively to the subproperties of the container. Typically, a report generator does not recursively apply this flag from a property to its attributes. Set this flag on both the attribute and on the property that owns the top-level attribute for the attribute to appear in the report.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyFlags.PropFlags_CommentNotEditable">
      <summary>(Value: 0x1000000) Set this flag to prevent the user from editing the comment on the object in a sequence editor.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyFlags.PropFlags_NameNotEditable">
      <summary>(Value: 0x4000000) Set this flag to prevent the user from editing the name of the object in a sequence editor. </summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyFlags.PropFlags_SerializeAlias">
      <summary>(Value: 0x2000000) Indicates that when serialized, the alias object serializes the object for which it is an alias.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.GetSeqFileOptions">
      <summary>These constants represent the options you can use with the getSeqFileFlags parameter of the Engine.GetSequenceFileEx method. Use the bitwise-OR operator to specify more than one option.</summary>
      <seealso cref="Engine.FindFileEx" />
      <seealso cref="Engine.GetSequenceFileEx" />
      <seealso cref="Engine.ReleaseSequenceFileEx" />
      <seealso cref="&quot;Model tab&quot;javascript:RefLink('/InfoTopics/DB_Station_Opt_Mod_Tab.htm')" />
      <seealso cref="&quot;Station Options dialog box&quot;javascript:RefLink('/InfoTopics/DB_Station_Opt.htm')" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.GetSeqFileOptions.GetSeqFile_PreloadModules">
      <summary>(Value: 0x1) If this flag is set, TestStand honors the Module Load options for the sequence and launches the preload progress dialog box when opening the file. Otherwise, it does not preload any of the modules the steps in the sequence use or display the preload progress dialog box.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.GetSeqFileOptions.GetSeqFile_UpdateFromDisk">
      <summary>(Value: 0x2) If this flag is set and the sequence is currently in memory, TestStand checks the date of the file on disk and reloads it if it is newer. If the flag is not set and the sequence is currently in memory, TestStand does not load the file.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.GetSeqFileOptions.GetSeqFile_AllowTypeConflicts">
      <summary>(Value: 0x4) If this flag is set, conflicts TestStand encounters between the sequence and types currently in memory do not prevent TestStand from loading the sequence. If this flag is not set, TestStand returns an error as soon as it encounters a type conflict.
<para>Note: The Engine.GetSequenceFileEx method ignores this value.</para></summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.GetSeqFileOptions.GetSeqFile_CheckModelOptions">
      <summary>(Value: 0x8) If this flag is set, TestStand verifies that the sequence file does not refer to a specific process model file that conflicts with the current settings on the Model tab of the Station Options dialog box.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.GetSeqFileOptions.GetSeqFile_OperatorInterfaceFlags">
      <summary>(Value: 0x6B) The standard set of flags a user interface uses. This is the combination of the <c>GetSeqFile_CheckModelOptions</c>, <c>GetSeqFile_PreloadModules</c>, <c>GetSeqFile_FindFile</c>, <c>GetSeqFile_SearchCurrentDir</c>, and <c>GetSeqFile_UpdateFromDisk</c> flags.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.GetSeqFileOptions.GetSeqFile_DoNotRunLoadCallback">
      <summary>(Value: 0x10) If this flag is set, TestStand does not run the SequenceFileLoad callback sequence. Even if you use this option, TestStand executes the SequenceFileLoad callback for subsequent calls to the Engine.GetSequenceFileEx method that do not use this option. TestStand does not execute the SequenceFileUnload callback when you release the sequence file with the Engine.ReleaseSequenceFileEx method if all calls to obtain the sequence file use this option.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.GetSeqFileOptions.GetSeqFile_NoOptions">
      <summary>(Value: 0x0) No options.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.GetSeqFileOptions.GetSeqFile_FindFile">
      <summary>(Value: 0x20) If this flag is set, TestStand attempts to find a relative pathname using the Engine.FindFileEx method. </summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.GetSeqFileOptions.GetSeqFile_SearchCurrentDir">
      <summary>(Value: 0x40) If this flag is set, TestStand attempts to find a relative pathname by searching the current directory first.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.GetSeqFileOptions.GetSeqFile_GetFileOnlyIfInCache">
      <summary>(Value: 0x200) If this flag is set, the Engine.GetSequenceFileEx method returns a sequence file only if the file is already in the engine internal cache. If the file is not in the cache, the <c>Engine.GetSequenceFileEx</c> method returns a NULL reference.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.ExecutionTypeMask">
      <summary>Use these constants to specify the executionTypeMaskParam parameter of the Engine.NewExecution, Engine.NewHierarchicalExecution, and  SequenceContext.NewExecution methods.</summary>
      <seealso cref="Engine.NewExecution" />
      <seealso cref="Engine.NewHierarchicalExecution" />
      <seealso cref="Execution.RestartEx" />
      <seealso cref="Execution.Resume" />
      <seealso cref="Execution.TypeMask" />
      <seealso cref="&quot;Run Options tab&quot;javascript:RefLink('/InfoTopics/DB_Step_Prop_Run_Opt_Tab.htm')" />
      <seealso cref="SequenceContext.NewExecution" />
      <seealso cref="StationOptions.BreakOnSequenceFailure" />
      <seealso cref="StationOptions.BreakOnStepFailure" />
      <seealso cref="&quot;Step Properties dialog box&quot;javascript:RefLink('/InfoTopics/DB_Step_Prop.htm')" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ExecutionTypeMask.ExecTypeMask_Normal">
      <summary>(Value: 0) Specifies that the execution is visible in the window when it starts.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ExecutionTypeMask.ExecTypeMask_InitiallyHidden">
      <summary>(Value: 0x1) Specifies that an execution does not appear in a window unless a trace or break event occurs. Typically, you use this constant for executions you do not want the user to see unless an error occurs. Use this constant with <c>ExecTypeMask_TracingInitiallyOff</c> flag to hide the execution even when tracing is on for the application.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ExecutionTypeMask.ExecTypeMask_TracingInitiallyOff">
      <summary>(Value: 0x2) Disables tracing for the execution. Tracing can be turned back on by either a sequence call setting or by setting the <c>RunState.Tracing</c> property of the sequence context to <c>True</c>.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ExecutionTypeMask.ExecTypeMask_InitiallySuspended">
      <summary>(Value: 0x4) Specifies that the execution is created in a suspended state. You must call the Execution.Resume method to continue execution.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ExecutionTypeMask.ExecTypeMask_NotRestartable">
      <summary>(Value: 0x8) Specifies that the execution cannot be restarted with the Execution.RestartEx method.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ExecutionTypeMask.ExecTypeMask_CloseWindowWhenDone">
      <summary>(Value: 0x10) Directs the sequence editor and user interfaces to close the Execution window when it finishes executing.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ExecutionTypeMask.ExecTypeMask_BreakOnStepFailure">
      <summary>(Value: 0x20) Specifies whether the sequence editor and user interfaces suspend when a step fails. TestStand does not suspend an execution on a failing Sequence Call step if the step that caused the sequence failure already suspended execution. When this constant is not set, TestStand suspends execution based on the value of the setting in the StationOptions.BreakOnStepFailure property.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ExecutionTypeMask.ExecTypeMask_BreakOnSequenceFailure">
      <summary>(Value: 0x40) Specifies whether the sequence editor and user interfaces suspend when a failing step causes a sequence failure to first occur. TestStand does not suspend on failing Sequence Call steps already in the stack. If the sequence failure setting is reset, TestStand suspends when the next failing step causes sequence failure. When this constant is not set, TestStand suspends execution based on the value of the setting in the StationOptions.BreakOnSequenceFailure property.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ExecutionTypeMask.ExecTypeMask_AutoWaitAtEndOfSequence">
      <summary>(Value: 0x80) Use this option to have the calling sequence wait for the launching execution to complete before the calling sequence returns. This constant applies only to the SequenceContext.NewExecution method.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ExecutionTypeMask.ExecTypeMask_UseSTA">
      <summary>(Value: 0x100) Specifies whether TestStand initializes the concurrency model of the thread as single-threaded apartment (STA) or multi-threaded apartment (MTA). By default, TestStand initializes new executions and threads to use the MTA model. A thread must use the STA model if the thread creates or launches a dialog box that contains ActiveX controls. 
If you use this option to launch a sequence with a step that displays an ActiveX control, you might need to set the Load Option on the Run Options tab of the Step Properties dialog box to Load dynamically. This option ensures that TestStand loads the module the step calls in the thread initialized as STA.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ExecutionTypeMask.ExecTypeMask_DisplayPreloadProgress">
      <summary>(Value: 0x200) Specifies to launch the Preload Progress dialog box while preloading code modules for the execution of a sequence file. You normally use this flag only for executions you initiate from a user interface.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ExecutionTypeMask.ExecTypeMask_DiscardArgumentsWhenDone">
      <summary>(Value: 0x400) Directs the execution to discard its arguments when it finishes executing. Executions normally hold arguments until the execution is destroyed so the execution can use the arguments again if the execution restarts. However, because the execution holds the arguments, arguments that contain a reference to a .NET object prevent TestStand from unloading .NET assemblies until the execution is destroyed. Use this option to avoid this situation and to ensure that TestStand more promptly cleans up arguments. When using this option, if you restart the execution, the execution no longer uses any arguments unless you use the Execution.RestartWithNewArguments method to restart it.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.ExecutionRunStates">
      <summary>The Execution.GetStates method returns one of these values to indicate the running state of the execution.</summary>
      <seealso cref="Execution.Break" />
      <seealso cref="Execution.GetStates" />
      <seealso cref="Execution.RestartEx" />
      <seealso cref="Execution.Resume" />
      <seealso cref="Execution.StepInto" />
      <seealso cref="Execution.StepOver" />
      <seealso cref="Execution.Terminate" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ExecutionRunStates.ExecRunState_Running">
      <summary>(Value: 1) The execution is running.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ExecutionRunStates.ExecRunState_Paused">
      <summary>(Value: 2) The execution is suspended.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ExecutionRunStates.ExecRunState_Stopped">
      <summary>(Value: 3) The execution has finished executing.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.ExecutionTerminationStates">
      <summary>The Execution.GetStates method returns one of these values to indicate whether the execution is terminating. If the execution is terminating, these values indicate how it is terminating.</summary>
      <seealso cref="Execution.GetStates" />
      <seealso cref="Execution.RestartEx" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ExecutionTerminationStates.ExecTermState_Normal">
      <summary>(Value: 1) The execution is not terminating.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ExecutionTerminationStates.ExecTermState_Terminating">
      <summary>(Value: 2) TestStand is terminating the running execution.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ExecutionTerminationStates.ExecTermState_TerminatingInteractive">
      <summary>(Value: 3) TestStand is terminating the running interactive execution.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ExecutionTerminationStates.ExecTermState_Aborting">
      <summary>(Value: 4) TestStand is aborting the running execution.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ExecutionTerminationStates.ExecTermState_KillingThreads">
      <summary>(Value: 5) TestStand is ending the threads in the execution.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.DecimalPointLocalizationOptions">
      <summary>Use these constants to specify the decimalPointOption parameter of the Engine.LocalizeExpression, Engine.DelocalizeExpression, and Engine.GetLocalizedDecimalPoint methods. The decimalPointOption parameter specifies how TestStand determines which character it uses as the localized decimal point character.</summary>
      <seealso cref="Engine.DelocalizeExpression" />
      <seealso cref="Engine.GetLocalizedDecimalPoint" />
      <seealso cref="Engine.LocalizeExpression" />
      <seealso cref="Engine.StationOptions" />
      <seealso cref="StationOptions.UseLocalizedDecimalPoint" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.DecimalPointLocalizationOptions.DecimalPoint_UsePreference">
      <summary>(Value: 1) Use the Station Options localization preferences to determine whether to use the operating system setting.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.DecimalPointLocalizationOptions.DecimalPoint_UseSystemSetting">
      <summary>(Value: 2) Use the operating system setting.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.DecimalPointLocalizationOptions.DecimalPoint_UsePeriod">
      <summary>(Value: 3) Use the period character.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.DecimalPointLocalizationOptions.DecimalPoint_UseComma">
      <summary>(Value: 4) Use the comma character.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.MsgBoxTypes">
      <summary>Use this enumeration to specify the msgBoxType parameter of the Engine.DisplayMessageBox method. These constants specify the icon and default title the message box displays.</summary>
      <seealso cref="Engine.DisplayMessageBox" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.MsgBoxTypes.MsgBox_Warning">
      <summary>(Value: 0) Specifies an icon and default title that indicate a warning message.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.MsgBoxTypes.MsgBox_Information">
      <summary>(Value: 1) Specifies an icon and default title that indicate an informational message.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.MsgBoxTypes.MsgBox_Error">
      <summary>(Value: 2) Specifies an icon and default title that indicate an error has occurred.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.MsgBoxTypes.MsgBox_Custom">
      <summary>(Value: 3) Specifies no icon and no default title. </summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.ToolMenuItemAttributes">
      <summary>Use these constants with the bitwise-AND operator to check the itemAttributes parameter of the Engine.GetToolMenuItemInfoEx and Engine.GetToolMenuItemInfoWithIDEx methods.</summary>
      <seealso cref="Engine.GetToolMenuItemInfoEx" />
      <seealso cref="Engine.GetToolMenuItemInfoWithIDEx" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ToolMenuItemAttributes.ToolMenuItem_SeparatorBefore">
      <summary>(Value: 0x1) Inserts a separator before the Tools menu item if this flag is set.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ToolMenuItemAttributes.ToolMenuItem_Enabled">
      <summary>(Value: 0x2) Disables the Tools menu item if this flag is set.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ToolMenuItemAttributes.ToolMenuItem_EditsSelectedFile">
      <summary>(Value: 0x4) Indicates that the Tools menu item edits the selected file.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.LoadModuleOptions">
      <summary>These constants represent the options you can use with the loadOptions parameter of the SequenceFile.LoadModules, Sequence.LoadModules, and Step.LoadModule methods. Use the bitwise-OR operator to specify more than one option.</summary>
      <seealso cref="GetSeqFileOptions" />
      <seealso cref="Runmodes" />
      <seealso cref="Sequence.LoadModules" />
      <seealso cref="&quot;SequenceCallModule&quot;SequenceCallModule.htm" />
      <seealso cref="SequenceFile.LoadModules" />
      <seealso cref="Step.LoadModule" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.LoadModuleOptions.LoadModule_IgnoreErrors">
      <summary>(Value: 0x1) Ignores errors that occur when loading modules. If this option is not set, each error is reported in a dialog box.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.LoadModuleOptions.LoadModule_LoadModulesInSubSequences">
      <summary>(Value: 0x2) Loads modules in subsequences when their corresponding Sequence Call step is loaded.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.LoadModuleOptions.LoadModule_EvaluateExpressions">
      <summary>(Value: 0x4) Loads modules of Sequence Call steps that specify the module by expression. Pass a sequence context to the method when using this option.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.LoadModuleOptions.LoadModule_IgnoreSkippedSteps">
      <summary>(Value: 0x8) Does not load the modules for steps that have a run mode of anything but RunMode_Normal.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.LoadModuleOptions.LoadModule_NoOptions">
      <summary>(Value: 0x0) No options.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.LoadModuleOptions.LoadModule_DoNotPromptToFindFile">
      <summary>(Value: 0x20) If this option is set and the method cannot find the module file, the method does not launch a file dialog box to find the module file.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.LoadModuleOptions.LoadModule_ThrowExceptionOnError">
      <summary>(Value: 0x10) If this option is set and <c>LoadModule_IgnoreErrors</c> is not set, the method throws an exception if an error occurs loading the module.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.LoadModuleOptions.LoadModule_DoNotRunLoadCallbacks">
      <summary>(Value: 0x40) If this option is set and the module is a SequenceCallModule, the method loads the sequence file without running the SequenceFileLoad callback sequence. Only the SequenceCallModule uses this option.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.PropertyObjectFileTypes">
      <summary>These constants represent the possible values for the PropertyObjectFile.FileType property. The FileType is set when the PropertyObjectFile is created, and you cannot change the value.</summary>
      <seealso cref="Engine.ConfigFile" />
      <seealso cref="Engine.GetSequenceFileEx" />
      <seealso cref="Engine.GetTemplatesFile" />
      <seealso cref="Engine.GetTypePaletteFileList" />
      <seealso cref="Engine.GlobalsFile" />
      <seealso cref="Engine.NewPropertyObjectFile" />
      <seealso cref="Engine.UsersFile" />
      <seealso cref="PropertyObjectFile.FileType" />
      <seealso cref="WorkspaceFile" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyObjectFileTypes.FileType_ConfigFile">
      <summary>(Value: 0) The Engine.ConfigFile file.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyObjectFileTypes.FileType_SequenceFile">
      <summary>(Value: 1) A sequence file.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyObjectFileTypes.FileType_TypePaletteFile">
      <summary>(Value: 2) A type palette file.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyObjectFileTypes.FileType_StationGlobalsFile">
      <summary>(Value: 3) The Engine.GlobalsFile file.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyObjectFileTypes.FileType_UsersFile">
      <summary>(Value: 4) The Engine.UsersFile file.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyObjectFileTypes.FileType_WorkspaceFile">
      <summary>(Value: 5) A WorkspaceFile file.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyObjectFileTypes.FileType_ProjectFile">
      <summary>(Value: 6) A TestStand project file.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyObjectFileTypes.FileType_PropertyObjectFile">
      <summary>(Value: 7) A generic PropertyObjectFile.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyObjectFileTypes.FileType_TemplatesFile">
      <summary>(Value: 8) The Engine.GetTemplatesFile file.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyObjectFileTypes.FileType_GeneralEngineConfigFile">
      <summary>(Value: 9) A general engine configuration file.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyObjectFileTypes.FileType_SearchDirectoriesConfigFile">
      <summary>(Value: 10) A search directories configuration file.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyObjectFileTypes.FileType_AdaptersConfigFile">
      <summary>(Value: 11) An adapters configuration file. </summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyObjectFileTypes.FileType_TypePalettesConfigFile">
      <summary>(Value: 12) A type palettes configuration file.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyObjectFileTypes.FileType_CustomConfigFile">
      <summary>(Value: 13) A custom configuration file. </summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.PropertyObjectFile">
      <summary>Use the PropertyObjectFile class to read and write PropertyObjects to disk. All TestStand files, including sequence files, type palette files, workspace files, configuration files, users file, and globals file, are stored as PropertyObjectFiles. Create new PropertyObjectFiles with the Engine.NewPropertyObjectFile method.</summary>
      <seealso cref="Engine.ConfigFile" />
      <seealso cref="Engine.GlobalsFile" />
      <seealso cref="Engine.NewPropertyObjectFile" />
      <seealso cref="Engine.UsersFile" />
      <seealso cref="SequenceFile.AsPropertyObjectFile" />
      <seealso cref="UsersFile.AsPropertyObjectFile" />
      <seealso cref="WorkspaceFile.AsPropertyObjectFile" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.PropertyObjectFile.Comment">
      <summary>Specifies the comment string associated with the PropertyObjectFile object.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.PropertyObjectFile.Version">
      <summary>Specifies the version string associated with the PropertyObjectFile object.</summary>
      <remarks>You can manually set this value to a valid version string where the numbers from left to right denote the Major, Minor, Revision, and Build version. The TestStand Engine increments the version number each time you save a modified sequence file if you enable the Auto Increment Sequence File Version option on the File tab of the Station Options dialog box. For files that are not sequence files, this property is not used.</remarks>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObjectFile.IncChangeCount">
      <summary>Increments the file change count.</summary>
      <remarks>Increment the change count when making changes to the file to indicate to the sequence editor or user interface that the file was modified.
Calling this method has the same effect as calling the SequenceFile.IncChangeCount method.</remarks>
      <seealso cref="PropertyObjectFile.ChangeCount" />
      <seealso cref="PropertyObjectFile.IsModified" />
      <seealso cref="PropertyObjectFile.SaveFileIfModified" />
      <seealso cref="SequenceFile.ChangeCount" />
      <seealso cref="SequenceFile.IncChangeCount" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObjectFile.ReadFile(NationalInstruments.TestStand.Interop.API.TypeConflictHandlerTypes)">
      <summary>Reads the contents of the file from disk.</summary>
      <remarks>The PropertyObjectFile.Path property determines the pathname of the file to read.</remarks>
      <returns>Returns <c>True</c> if the file is read successfully. Returns <c>False</c> if the file has type conflicts and the user cancelled the operation.</returns>
      <param name="handlerType">Specifies how to handle type conflicts in the file.</param>
      <seealso cref="PropertyObjectFile.IsDiskFileModified" />
      <seealso cref="PropertyObjectFile.Path" />
      <seealso cref="PropertyObjectFile.WriteFile" />
      <seealso cref="TypeConflictHandlerTypes" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObjectFile.WriteFile(NationalInstruments.TestStand.Interop.API.WriteFileFormat)">
      <summary>Writes the contents of the file to disk.</summary>
      <remarks>The PropertyObjectFile.Path property determines the pathname of the file to write.</remarks>
      <param name="writeFormat">Specifies the file format version TestStand uses to write the file.</param>
      <seealso cref="PropertyObjectFile.IsDiskFileReadOnly" />
      <seealso cref="PropertyObjectFile.Path" />
      <seealso cref="PropertyObjectFile.ReadFile" />
      <seealso cref="PropertyObjectFile.SaveFileIfModified" />
      <seealso cref="WriteFileFormat" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObjectFile.AsPropertyObject">
      <summary>Returns the underlying PropertyObject that represents the PropertyObjectFile object. Use the PropertyObject to modify, add, or remove custom properties of the object.</summary>
      <seealso cref="PropertyObject" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObjectFile.HandleTypeConflicts(NationalInstruments.TestStand.Interop.API.TypeConflictHandlerTypes)">
      <summary>Detects and resolves type conflicts that occur after loading a file.</summary>
      <remarks>Typically, the PropertyObjectFile.ReadFile method handles type conflicts.
The engine loads the Engine.UsersFile, Engine.GlobalsFile and Engine.ConfigFile at startup, but does not resolve type conflicts in those files. Therefore, the sequence editor uses this method to resolve type conflicts in those files after it creates the Engine object.</remarks>
      <returns>Returns <c>True</c> if types were resolved successfully.</returns>
      <param name="handlerType">Specifies how type conflicts are handled.</param>
      <seealso cref="Engine" />
      <seealso cref="Engine.ConfigFile" />
      <seealso cref="Engine.GlobalsFile" />
      <seealso cref="Engine.UsersFile" />
      <seealso cref="PropertyObjectFile.ReadFile" />
      <seealso cref="TypeConflictHandlerTypes" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.PropertyObjectFile.ChangeCount">
      <summary>Specifies the number of modifications that have been made to the file since it was loaded into memory.</summary>
      <remarks>The sequence editor and user interfaces use this count to determine when to refresh displays and when to indicate to the user that a file has been modified.</remarks>
      <seealso cref="PropertyObjectFile.IncChangeCount" />
      <seealso cref="PropertyObjectFile.IsModified" />
      <seealso cref="SequenceFile.ChangeCount" />
      <seealso cref="TypeUsageList.ChangeCount" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.PropertyObjectFile.Path">
      <summary>Specifies the pathname of the file.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.PropertyObjectFile.DisplayName">
      <summary>Specifies the name to display for the file.</summary>
      <remarks>This property returns the filename portion of the pathname value of the PropertyObjectFile.Path property unless you set it to a different value.</remarks>
      <seealso cref="PropertyObjectFile.Path" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.PropertyObjectFile.Data">
      <summary>Specifies the data object stored in the file.</summary>
      <remarks>This PropertyObject contains all the data in the file.</remarks>
      <seealso cref="PropertyObject" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.PropertyObjectFile.ContentType">
      <summary>Specifies the type of file content.</summary>
      <remarks>This property is set by the TestStand engine when creating and reading property object files. You should not change this property for predefined types of property object files, such as sequence files, workspace files, project files, type palette files, and the user file and globals file.</remarks>
      <seealso cref="PropertyObjectFile.FileType" />
      <seealso cref="PropertyObjectFile.ReadFile" />
      <seealso cref="PropertyObjectFile.WriteFile" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.PropertyObjectFile.FileTypeDescription">
      <summary>Specifies a description of the type of file.</summary>
      <remarks>This string is localized for display in the local language. You cannot set this property for predefined types of files, such as sequence files.</remarks>
      <seealso cref="Engine.NewPropertyObjectFile" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.PropertyObjectFile.FileSection">
      <summary>Specifies the section name written to the file.</summary>
      <remarks>You generally do not need to use this property.
<para>Note: You cannot set this property for predefined file types.</para></remarks>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.PropertyObjectFile.OpenStatus">
      <summary>Specifies the current status of the file, such as whether the file is open and displayed in a window.</summary>
      <returns>One of the values in FileOpenStatusFlags.</returns>
      <seealso cref="FileOpenStatusFlags" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.PropertyObjectFile.EditPrivilege">
      <summary>Specifies the privilege users must have to edit this file.</summary>
      <remarks>The sequence editor uses this property to determine whether the current user can edit the file.</remarks>
      <seealso cref="UserPrivileges" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.PropertyObjectFile.FileType">
      <summary>Returns the type of file.</summary>
      <seealso cref="PropertyObjectFile.FileTypeDescription" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.PropertyObjectFile.IsDiskFileReadOnly">
      <summary>Returns a value that indicates whether the file on disk is read-only.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.PropertyObjectFile.TypeUsageList">
      <summary>Returns the TypeUsageList associated with the file.</summary>
      <seealso cref="TypeUsageList" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.PropertyObjectFile.IsModified">
      <summary>Returns a value that indicates whether the file has been modified since it was last written to disk.</summary>
      <remarks>This property returns <c>True</c> if the change count has increased since the last time the file was written to disk.
After reading a file, TestStand might perform automatic type conversions and modify the file.  For these files, this property returns <c>True</c> after the file is read from disk. The PropertyObjectFile.IsModifiedByUser property only returns <c>True</c> if the file is modified and TestStand did not perform all the modifications.</remarks>
      <seealso cref="PropertyObjectFile.ChangeCount" />
      <seealso cref="PropertyObjectFile.IncChangeCount" />
      <seealso cref="PropertyObjectFile.IsModifiedByUser" />
      <seealso cref="PropertyObjectFile.SaveFileIfModified" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObjectFile.SaveFileIfModified(System.Boolean)">
      <summary>Writes the contents of the file to disk if the file has been modified.</summary>
      <remarks>This method does nothing if the file has not been modified.  If the file has been modified, it prompts the user with an option to save, then writes the file. The PropertyObjectFile.Path property determines the pathname of the file to write.
<para>Note: If you call this method multiple times and do not save the file or further modify it, the method prompts only once. Unlike the PropertyObjectFile.WriteFile method, if an error occurs while saving the file, the method displays the error and does not throw an exception.</para></remarks>
      <returns>Returns <c>False</c> only if the user clicked Cancel in the Prompt dialog box.</returns>
      <param name="prompt">If this parameter is <c>True</c> and if the file has been modified, a dialog box opens and asks the user whether to save the file.</param>
      <seealso cref="PropertyObjectFile.IsModified" />
      <seealso cref="PropertyObjectFile.Path" />
      <seealso cref="PropertyObjectFile.WriteFile" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.PropertyObjectFile.IsDiskFileModified">
      <summary>Returns a value that indicates whether the file on disk is newer or older than the one stored in memory.</summary>
      <remarks><para><para>&#160;&#160;&#160;&#160;* Returns <c>1</c> if the file on disk is newer than the one stored in memory.</para><para>&#160;&#160;&#160;&#160;* Returns <c>-1</c> if the file on disk is older than the one stored in memory.</para><para>&#160;&#160;&#160;&#160;* Returns <c>0</c> if the file on disk has not changed.</para></para></remarks>
      <seealso cref="PropertyObjectFile.ReadFile" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.PropertyObjectFile.Id">
      <summary>Returns a unique ID number for the file.
<para>Note: The ID number is never zero.</para></summary>
      <remarks>The ID number is unique with respect to all files you might open before you shut down the TestStand Engine.
Use this ID number to compare two PropertyObjectFile object references to determine whether they refer to the same underlying file.</remarks>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObjectFile.CheckForModifiedTypes(System.String,System.String,System.Int32,NationalInstruments.TestStand.Interop.API.TypeVersionAutoIncrement,System.Boolean@,System.Boolean@)">
      <summary>Determines if the <c>PropTypeFlags_IsModifiedType</c> flag is set for any types used within the file.</summary>
      <remarks>If a modified type is found, the options parameter determines the specific action to take. If you pass <c>CheckForModifiedTypes_Prompt</c> to the options parameter, this method launches a warning dialog box in which you can specify the action, if any, that TestStand takes. The sequence editor calls this method before calling the PropertyObjectFile.WriteFile method to save a sequence file.</remarks>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.</param>
      <param name="okButtonText">Pass a string to display text on the OK button or pass an empty string to use the default text.</param>
      <param name="options">Specifies whether the method launches a warning dialog box if a modified type is found, or whether the method performs a specific action if a modified type is found. Pass one of CheckForModifiedTypesOptions constants to this method.</param>
      <param name="versionIncOption">Specifies which version number to increment when you pass <c>CheckForModifiedTypes_AutoIncrementVersions</c> to the options parameter.</param>
      <param name="operationCanceled">Returns <c>True</c> if a user clicks Cancel.</param>
      <param name="foundModifiedTypes">Returns <c>True</c> if modified types were found in the file.</param>
      <seealso cref="CheckForModifiedTypesOptions" />
      <seealso cref="PropertyObject.GetTypeFlags" />
      <seealso cref="PropertyObjectFile.WriteFile" />
      <seealso cref="PropertyObjTypeFlags" />
      <seealso cref="TypeVersionAutoIncrement" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.PropertyObjectFile.IsModifiedByUser">
      <summary>Returns a value that indicates whether the user has modified the file since it was last written to disk.</summary>
      <remarks>After reading a file, TestStand might perform automatic type conversions and modify the file.  For these files, the PropertyObjectFile.IsModified property returns <c>True</c> after the file is read from disk. This property only returns <c>True</c> if the file is modified and TestStand did not perform all the modifications.</remarks>
      <seealso cref="PropertyObjectFile.IsModified" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.PropertyObjectFile.Requirements">
      <summary>Returns the Requirements property for the file. The Links subproperty of the Requirements property is an array of string values that represents the product and unit requirements that the file covers.</summary>
      <remarks>This property is valid for sequence files, project files, and workspace files. This property returns an error for all other file types.
You can use the following pseudocode to add a new element to the list of requirements:
<para><code>PropertyObject links = propertyObjectFile.Requirements.GetPropertyObject(&quot;Links&quot;, 0);</code></para><para><code>int nextAvailableIndex = links.GetNumElements();</code></para><para><code>links.SetValStringByOffset(nextAvailableIndex, PropertyOptions.PropOption_InsertElement, &quot;REQ_ABC&quot;);</code></para></remarks>
      <seealso cref="PropertyObject" />
      <seealso cref="Sequence.Requirements" />
      <seealso cref="Step.Requirements" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.PropertyObjectFile.Protection">
      <summary>Specifies the protection level applied to a locked file in the sequence editor or applications that use the TestStand User Interface (UI) Controls.</summary>
      <remarks>Setting this property on a locked file causes an error. Set this property when files are unlocked. This property applies only to sequence files. Setting this property on other files causes an error.
<para>Note: TestStand supports password protecting sequence files to discourage editing and viewing within the sequence editor and user interfaces that use the TestStand UI Controls. The TestStand API limits access to a file protected from viewing but cannot prevent access to the file content during execution. National Instruments does not recommend using passwords as the only way of protecting intellectual property.</para></remarks>
      <seealso cref="PropertyObjectFile.Lock" />
      <seealso cref="PropertyObjectFile.Locked" />
      <seealso cref="PropertyObjectFile.Unlock" />
      <seealso cref="ProtectedObjectOptions" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.PropertyObjectFile.Locked">
      <summary>Returns a value that indicates whether the file is locked.</summary>
      <remarks>This property returns <c>True</c> if file protection is enabled and the PropertyObjectFile.Lock method was called. After reading a protected file, TestStand automatically locks the file.</remarks>
      <seealso cref="PropertyObjectFile.Lock" />
      <seealso cref="PropertyObjectFile.Protection" />
      <seealso cref="PropertyObjectFile.Unlock" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObjectFile.Lock(System.Object)">
      <summary>Locks the file. The PropertyObjectFile.Protection property specifies the type of protection for the lock. After reading a protected file, TestStand automatically locks the file. Use the PropertyObjectFile.Unlock method to unlock the file.</summary>
      <remarks>This method applies only to sequence files. Using this method on other files causes an error. Locking a file causes an error when the <c>PropertyObjectFile.Protection</c> property is set to ProtectedObjectOption_None.
<para>Note: TestStand supports password protecting sequence files to discourage editing and viewing within the sequence editor and user interfaces that use the TestStand User Interface (UI) Controls. The TestStand API limits access to a file protected from viewing but cannot prevent access to the file content during execution. National Instruments does not recommend using passwords as the only way of protecting intellectual property.</para></remarks>
      <param name="passwordString">Specifies the password for the lock operation. If no passwordString parameter is specified, the previous password is used. If no previous password was specified, the password is an empty string.</param>
      <seealso cref="&quot;Omitting Optional Parameters&quot;javascript:APILink('/InfoTopics/Optional_Parameters.htm')" />
      <seealso cref="PropertyObjectFile.Locked" />
      <seealso cref="PropertyObjectFile.Protection" />
      <seealso cref="PropertyObjectFile.Unlock" />
      <seealso cref="ProtectedObjectOptions" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObjectFile.Unlock(System.String)">
      <summary>Unlocks the file. The PropertyObjectFile.Protection property specifies the type of protection for the lock. Use the PropertyObjectFile.Lock method to lock the file.</summary>
      <remarks>This method applies only to sequence files. Using this method on other files causes an error. 
<para>Note: TestStand supports password protecting sequence files to discourage editing and viewing within the sequence editor and user interfaces that use the TestStand User Interface (UI) Controls. The TestStand API limits access to a file protected from viewing but cannot prevent access to the file content during execution. National Instruments does not recommend using passwords as the only way of protecting intellectual property.</para></remarks>
      <param name="passwordString">Specifies the password for the unlock operation.</param>
      <seealso cref="PropertyObjectFile.Lock" />
      <seealso cref="PropertyObjectFile.Locked" />
      <seealso cref="PropertyObjectFile.Protection" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.PropertyObjectFile.FileWritingFormat">
      <summary>Specifies the format in which TestStand writes the file.</summary>
      <remarks>Attempting to set to INI (or any other unsupported value) will throw an exception.</remarks>
      <seealso cref="StationOptions.DefaultFileWritingFormat" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.PropertyObjectFile.LastSavedChangeCount">
      <summary>Returns the value of the PropertyObjectFile.ChangeCount property at the time the file was last saved. Setting the value of the <c>PropertyObjectFile.ChangeCount</c> property equal to the value of the <c>PropertyObjectFile.LastSavedChangeCount</c> property causes the PropertyObjectFile.IsModified property to return <c>False</c>.</summary>
      <seealso cref="PropertyObjectFile.ChangeCount" />
      <seealso cref="PropertyObjectFile.IsModified" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.TypeConflictHandlerTypes">
      <summary>These constants specify how TestStand responds when encountering two conflicting definitions for the same type. Type conflicts generally occur when TestStand reads a type from a sequence file that has a different structure than the type already loaded.</summary>
      <seealso cref="Engine.GetSequenceFileEx" />
      <seealso cref="Engine.UnserializeObjects" />
      <seealso cref="PropertyObject.ReadEx" />
      <seealso cref="PropertyObject.UnserializeEx" />
      <seealso cref="PropertyObjectFile.HandleTypeConflicts" />
      <seealso cref="PropertyObjectFile.ReadFile" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TypeConflictHandlerTypes.ConflictHandler_Error">
      <summary>(Value: 1) Specifies that the method returns an error if type conflicts exist.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TypeConflictHandlerTypes.ConflictHandler_Prompt">
      <summary>(Value: 3) Specifies that the method prompts the user with a dialog box to resolve each type conflict.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TypeConflictHandlerTypes.ConflictHandler_UseGlobalType">
      <summary>(Value: 4) Specifies that the method converts the conflicting type to the currently loaded (global) type if a type conflict exists.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.Module">
      <summary>Use objects from the module class to specify and obtain information about code modules that steps or step type substeps execute.
Typically, you use this class only when you write a sequence editor.
To obtain a Module object, use the Step.Module property. To access the properties and methods of an adapter-specific module class, query the Module object for the interface of the adapter-specific module interface you want.</summary>
      <seealso cref="&quot;ActiveXModule&quot;ActiveXModule.htm" />
      <seealso cref="&quot;CommonCModule&quot;CommonCModule.htm" />
      <seealso cref="&quot;CVIModule&quot;CVIModule.htm" />
      <seealso cref="&quot;DllModule&quot;DllModule.htm" />
      <seealso cref="&quot;DotNetModule&quot;DotNetModule.htm" />
      <seealso cref="&quot;LabVIEWModule&quot;LabVIEWModule.htm" />
      <seealso cref="&quot;SequenceCallModule&quot;SequenceCallModule.htm" />
      <seealso cref="Step.Module" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Module.AsPropertyObject">
      <summary>Returns the underlying PropertyObject that represents the Module object.</summary>
      <remarks>Use the PropertyObject to modify, add, or remove custom properties of the object.</remarks>
      <seealso cref="PropertyObject" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Module.Adapter">
      <summary>Returns the Adapter object that this module uses.</summary>
      <seealso cref="Adapter" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Module.Step">
      <summary>Returns a reference to the step in which the module resides.</summary>
      <remarks>Steps share their modules between the original steps and the run-time copies of the steps, so this property always returns an original step and never a run-time copy of the step.</remarks>
      <seealso cref="Step" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Module.Load(System.Int32,System.Object)">
      <summary>Loads the underlying code module.</summary>
      <returns>Returns <c>True</c> on success or <c>False</c> if the module fails to load.</returns>
      <param name="loadOptions">Specifies one or more LoadModuleOptions using the bitwise-OR operator to modify the behavior of this method.</param>
      <param name="sequenceContextParam">If you pass <c>LoadModule_EvaluateExpressions</c> to the loadOptions parameter, pass a SequenceContext object for this parameter to use when evaluating expressions. If you call this method from a step in an execution, pass the sequence context of the execution.</param>
      <seealso cref="LoadModuleOptions" />
      <seealso cref="Module.Unload" />
      <seealso cref="&quot;Omitting Optional Parameters&quot;javascript:APILink('/InfoTopics/Optional_Parameters.htm')" />
      <seealso cref="SequenceContext" />
      <seealso cref="Step.LoadModule" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Module.Unload">
      <summary>Unloads the underlying code module.</summary>
      <remarks>The module is not unloaded if it is currently executing.</remarks>
      <returns>Indicates if the module was successfully unloaded.</returns>
      <seealso cref="Engine.UnloadAllModules" />
      <seealso cref="Step.UnloadModule" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Module.CanSpecify">
      <summary>Indicates if the adapter for the module supports the Module.Specify method. Use the Step.CanSpecifyModule property to determine whether a step supports specifying a module.</summary>
      <seealso cref="Module.Specify" />
      <seealso cref="Step.CanSpecifyModule" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Module.Specify(System.Int32)">
      <summary>Opens the Specify Module dialog box for the step, if one exists.</summary>
      <remarks>Use the Module.CanSpecify property to verify that you can call this method. The current version of TestStand does not support all SpecifyModuleOptions constants for all adapters, as the following list indicates:
<para><para>&#160;&#160;&#160;&#160;* LabVIEW Adapter&#8212;Only supports SpecMod_ReadOnly.</para><para>&#160;&#160;&#160;&#160;* LabWindows/CVI Adapter&#8212;Supports all options.</para><para>&#160;&#160;&#160;&#160;* C/C++ DLL Adapter&#8212;Supports all options.</para><para>&#160;&#160;&#160;&#160;* .NET&#8212;Only supports SpecMod_ReadOnly.</para><para>&#160;&#160;&#160;&#160;* ActiveX/COM Adapter&#8212;Only supports SpecMod_ReadOnly.</para><para>&#160;&#160;&#160;&#160;* HTBasic Adapter&#8212;Only supports SpecMod_ReadOnly.</para><para>&#160;&#160;&#160;&#160;* Sequence Adapter&#8212;Supports all options.</para></para></remarks>
      <returns>Returns <c>True</c> if the Specify Module dialog box modifies the module.</returns>
      <param name="specModOptions">Specifies one or more SpecifyModuleOptions constants to modify the behavior of the Specify Module dialog box.</param>
      <seealso cref="Module.CanSpecify" />
      <seealso cref="&quot;Specify Module dialog box&quot;javascript:RefLink('/InfoTopics/DB_EditAutoCall.htm')" />
      <seealso cref="SpecifyModuleOptions" />
      <seealso cref="Step.SpecifyModule" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Module.CanCreateCode">
      <summary>Indicates if the adapter for the module supports the Module.CreateCode method. Use the Step.CanCreateCode property to determine whether a step can create code for the module of the step.</summary>
      <seealso cref="Module.CreateCode" />
      <seealso cref="Step.CanCreateCode" />
      <seealso cref="Step.CreateCode" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Module.CreateCode">
      <summary>Creates code for the module.</summary>
      <remarks>The contents of the code depend on the adapter used to create the module, the settings for the module, and the code templates configured for the step type of the step that contains the module. Use the Module.CanCreateCode property to determine whether this step can create code with this method.
For adapters that use Microsoft Visual Studio, calling this method can result in prompts to the user if any of the following conditions exist:
<para><para>&#160;&#160;&#160;&#160;* Multiple versions of Visual Studio exist on the computer and you select the Always Prompt for Version option from the Version of Visual Studio to Use for Create and Edit Code ring control in the Adapter Configuration dialog box.</para><para>&#160;&#160;&#160;&#160;* Multiple versions of Visual Studio exist on the computer and you select the Use the Version that Matches the Project File option from the Version of Visual Studio to Use for Create and Edit Code ring control in the Adapter Configuration dialog box, and TestStand cannot match the version of the file.</para><para>&#160;&#160;&#160;&#160;* A method already exists with the same name.</para><para>&#160;&#160;&#160;&#160;* The specified solution does not contain the specified project.</para><para>&#160;&#160;&#160;&#160;* The specified project does not contain the specified source file.</para></para>
<para>Note: The ActiveX/COM, Sequence, and HTBasic Adapters do not support this method.</para>
For DotNetModule objects, use the DotNetCall.CreateCode method instead of this method.</remarks>
      <returns>Indicates whether the module was modified.</returns>
      <seealso cref="&quot;Adapter Configuration dialog box&quot;javascript:RefLink('/InfoTopics/DB_AdapterConfig.htm')" />
      <seealso cref="&quot;DotNetCall.CreateCode&quot;DotNetCall_CreateCode_M.htm" />
      <seealso cref="&quot;DotNetModule&quot;DotNetModule.htm" />
      <seealso cref="Module.CanCreateCode" />
      <seealso cref="Module.EditCode" />
      <seealso cref="Step.CanCreateCode" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Module.CanEditCode">
      <summary>Indicates if the adapter for the module supports the Module.EditCode method. Use the Step.CanEditCode property to determine whether a step can edit code for the module of the step.</summary>
      <seealso cref="Module.EditCode" />
      <seealso cref="Step.CanEditCode" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Module.EditCode">
      <summary>Launches an external application in which you can edit the code associated with the module.</summary>
      <remarks>Launches the application associated with the adapter. For example, modules created with the LabVIEW Adapter launch LabVIEW.
For adapters that use Microsoft Visual Studio, calling this method can result in prompts to the user if any of the following conditions exist:
<para><para>&#160;&#160;&#160;&#160;* Multiple versions of Visual Studio exist on the computer and you select the Always Prompt for Version option from the Version of Visual Studio to Use for Create and Edit Code ring control in the Adapter Configuration dialog box.</para><para>&#160;&#160;&#160;&#160;* Multiple versions of Visual Studio exist on the computer and you select the Use the Version that Matches the Project File option from the Version of Visual Studio to Use for Create and Edit Code ring control in the Adapter Configuration dialog box, and TestStand cannot match the version of the file.</para><para>&#160;&#160;&#160;&#160;* The specified solution does not contain the specified project.</para><para>&#160;&#160;&#160;&#160;* The specified project does not contain the specified source file.</para></para></remarks>
      <returns>Indicates if the module was modified.</returns>
      <seealso cref="&quot;Adapter Configuration dialog box&quot;javascript:RefLink('/InfoTopics/DB_AdapterConfig.htm')" />
      <seealso cref="Module.CanEditCode" />
      <seealso cref="Module.CreateCode" />
      <seealso cref="&quot;Step.EditCode&quot;Step_EditCode_M.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Module.GetDescription(System.Int32)">
      <summary>Returns a description string for the module.</summary>
      <remarks>This string can change whenever you modify any of the module settings.</remarks>
      <param name="options">Specifies one or more StepDescriptionOptions constants. Use the bitwise-OR operator to specify multiple sequence file flags.</param>
      <seealso cref="&quot;Step.GetDescriptionEx&quot;Step_GetDescriptionEx_M.htm" />
      <seealso cref="&quot;StepDescriptionOptions&quot;StepDescriptionOptions.htm" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Module.UnmappedArgumentValues">
      <summary>Returns the UnmappedArgumentValues collection, which contains a list of the arguments not used as inputs and outputs of the corresponding module.</summary>
      <remarks>When a module prototype changes, TestStand attempts to map the current module arguments to the new prototype by looking for matching argument names and data types, and by matching argument positions and data types. If TestStand fails to assign an argument to the new prototype, the argument is added to this collection.

TestStand does not clear the collection when you load a new prototype. Use UnmappedArgumentValues.Clear method to clear the collection before calling Module.LoadPrototype.
For DotNetModule objects, use the DotNetCall.UnmappedArgumentValues property instead of this property.</remarks>
      <seealso cref="&quot;DotNetCall.UnmappedArgumentValues&quot;DotNetCall_UnmappedArgumentValues_P.htm" />
      <seealso cref="Module.ClearUnmappedArgumentValues" />
      <seealso cref="Module.LoadPrototype" />
      <seealso cref="UnmappedArgumentValue" />
      <seealso cref="UnmappedArgumentValues" />
      <seealso cref="UnmappedArgumentValues.Clear" />
      <seealso cref="&#xD;&#xA;" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Module.IsPrototypeIncompatible">
      <summary>Indicates whether the module prototype is incompatible with the actual prototype of the external module.</summary>
      <remarks>TestStand can read prototype information from some external modules, such as DLLs, LabVIEW VIs, or ActiveX COM type libraries. This property returns <c>True</c> if TestStand successfully reads prototype information from the external module and the module prototype does not match the prototype the external module specifies.</remarks>
      <seealso cref="Module.LoadPrototype" />
      <seealso cref="Module.UnmappedArgumentValues" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Module.ClearUnmappedArgumentValues">
      <summary><para>Note: This method is obsolete. Use the UnmappedArgumentValues.ClearUnmappedArgumentValues.Clear method instead.</para></summary>
      <remarks>Removes the items in the UnmappedArgumentValues collection.
Clear the items if you do not want them available for the next prototype change.</remarks>
      <seealso cref="UnmappedArgumentValue" />
      <seealso cref="UnmappedArgumentValues" />
      <seealso cref="UnmappedArgumentValues.Clear" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Module.LoadPrototype(System.Int32)">
      <summary>Loads the prototype for the module and sets the module parameters to match the prototype.</summary>
      <remarks>This method replaces the following obsolete methods:
CommonCModule.LoadPrototype
LabVIEWModule.LoadPrototype
ActiveXModule.LoadMemberInfo
SequenceCallModule.LoadParameters
Depending on the type of module, calling this method loads a LabVIEW VI, a sequence file, a DLL, or an ActiveX Automation server to determine the module prototype.
<para>Note: The .NET Adapter does not support this call and returns without taking any action. Use the DotNetCall.LoadPrototypeFromSignature method instead.</para></remarks>
      <returns>Returns a value that indicates whether the step was modified.</returns>
      <param name="options">Specifies one or more LoadPrototypeOptions constants. Use the bitwise-OR operator to specify multiple flags.</param>
      <seealso cref="ActiveXModule.LoadMemberInfo" />
      <seealso cref="CommonCModule.LoadPrototype" />
      <seealso cref="DotNetCall.LoadPrototypeFromSignature" />
      <seealso cref="LabVIEWModule.LoadPrototype" />
      <seealso cref="LoadPrototypeOptions" />
      <seealso cref="Module.IsPrototypeIncompatible" />
      <seealso cref="SequenceCallModule.LoadParameters" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Module.GetLastLoadWarnings">
      <summary>Returns an array of warnings that resulted from the last time you called the Module.Load method in an attempt to load the module.</summary>
      <seealso cref="Module.Load" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.HTBasicStepAdditions">
      <summary><para>Note: Do not use the following constants to access the adapter-specific properties of a step. Use the HTBasicModule interface for the Module object for the step. Use the Step.Module property to acquire a reference to a Module object.</para>
In TestStand 3.0 or later, these string constants are obsolete.
These string constants were previously used to create lookup strings to access the adapter-specific properties of an HTBasic step.</summary>
      <seealso cref="&quot;Lookup Strings&quot;../InfoTopics/API_lookupString.html" />
      <seealso cref="Step.Module" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.HTBasicStepAdditions.HTBasicStep_ModulePathProp">
      <summary>(Value: &quot;ModulePath&quot;) String that contains the pathname of the module that contains the HTBasic subroutine to call.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.HTBasicStepAdditions.HTBasicStep_WorkingDirPathProp">
      <summary>(Value &quot;WorkingDirPath&quot;) String that contains the specific working directory the adapter sets when calling the subroutine. This is used only if <c>HTBasicStep_SetWorkingDirProp</c> is set to the specific value.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.HTBasicStepAdditions.HTBasicStep_FunctionNameProp">
      <summary>(Value: &quot;SubName&quot;) String that contains the name of the HTBasic subroutine to call.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.HTBasicStepAdditions.HTBasicStep_ShowAppProp">
      <summary>(Value: &quot;ShowApp&quot;) Boolean property that determines whether the adapter displays the HTBasic application when calling the subroutine.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.HTBasicStepAdditions.HTBasicStep_SetWorkingDirProp">
      <summary>(Value: &quot;SetWorkingDirType&quot;) Number property that specifies how to set the working directory when calling the subroutine. 
@table(2,5,false,0!Use adapter default!1!Do not set working directory!2!Set to HTBasic server directory!3!Set to subroutine file directory!4!Use specific directory stored in <c>HTBasicStep_WorkingDirPathProp</c>)</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.PropertyObjectFileContentTypes">
      <summary>These constants represent the value of the PropertyObjectFile.ContentType property for predefined types of PropertyObjectFiles. </summary>
      <seealso cref="Engine.ConfigFile" />
      <seealso cref="Engine.GlobalsFile" />
      <seealso cref="Engine.UsersFile" />
      <seealso cref="PropertyObjectFile.ContentType" />
      <seealso cref="SequenceFile.AsPropertyObjectFile" />
      <seealso cref="UsersFile.AsPropertyObjectFile" />
      <seealso cref="WorkspaceFile.AsPropertyObjectFile" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyObjectFileContentTypes.FileContentType_ConfigFile">
      <summary>(Value: &quot;TEConfigFile&quot;) The Engine.ConfigFile file.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyObjectFileContentTypes.FileContentType_SequenceFile">
      <summary>(Value: &quot;SequenceFile&quot;) A sequence file.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyObjectFileContentTypes.FileContentType_TypePaletteFile">
      <summary>(Value: &quot;Types&quot;) A type palette file.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyObjectFileContentTypes.FileContentType_StationGlobalsFile">
      <summary>(Value: &quot;Globals&quot;) The Engine.GlobalsFile file.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyObjectFileContentTypes.FileContentType_UsersFile">
      <summary>(Value: &quot;UserListFile&quot;) The Engine.UsersFile file.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyObjectFileContentTypes.FileContentType_PropertyObjectFile">
      <summary>(Value: &quot;TSPropertyObjectFile&quot;) A generic PropertyObjectFile file.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyObjectFileContentTypes.FileContentType_WorkspaceFile">
      <summary>(Value: &quot;TSWorkspaceFile&quot;) A TestStand workspace file.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyObjectFileContentTypes.FileContentType_ProjectFile">
      <summary>(Value: &quot;TSProjectFile&quot;) A TestStand project file.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyObjectFileContentTypes.FileContentType_GeneralEngineConfigFile">
      <summary>(Value: &quot;GeneralEngineConfigFile&quot;) Specifies most TestStand configuration settings and StationOptions, except those related to search directories, type palettes, and adapters.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyObjectFileContentTypes.FileContentType_SearchDirectoriesConfigFile">
      <summary>(Value: &quot;SearchDirectoriesConfigFile&quot;) Specifies the search directories for the TestStand engine.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyObjectFileContentTypes.FileContentType_AdaptersConfigFile">
      <summary>(Value: &quot;AdaptersConfigFile&quot;) Specifies the configuration settings for the TestStand adapters.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyObjectFileContentTypes.FileContentType_TypePalettesConfigFile">
      <summary>(Value: &quot;TypePalettesConfigFile&quot;) Specifies settings that configure the type palettes loaded by the TestStand engine.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyObjectFileContentTypes.FileContentType_CustomConfigFile">
      <summary>(Value: &quot;CustomConfigFile&quot;) Contains configuration settings added by users via the Engine.GetCustomConfigFile API.</summary>
      <seealso cref="Engine.GetCustomConfigFile" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.SourceControlCommandOptions">
      <summary>These constants represent the options you can use with the options parameter of the WorkspaceObject.DoSourceControlCommand, WorkspaceObject.CanDoSourceControlCommand, and WorkspaceObject.UpdateStatus methods. Use the bitwise-OR operator to specify more than one option.</summary>
      <seealso cref="WorkspaceObject.CanDoSourceControlCommand" />
      <seealso cref="WorkspaceObject.DoSourceControlCommand" />
      <seealso cref="WorkspaceObject.UpdateStatus" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SourceControlCommandOptions.SCCmdOption_DoNotRecurse">
      <summary>(Value: 0x1) Does not apply the operation recursively on items in the container.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SourceControlCommandOptions.SCCmdOption_SkipPromptDialog">
      <summary>(Value: 0x2) Does not launch a dialog box with a list of files before performing the operation on the files. You cannot combine this option with <c>SCCmdOption_ShowPromptDialog</c>. If you do not specify this option or <c>SCCmdOption_ShowPromptDialog</c>, the engine Configuration option determines whether the dialog box is launched.<para>Note: This constant applies only to the <c>SCCmd_CheckOut</c> and <c>SSCmd_GetLatest</c> commands for the <c>WorkspaceObject.DoSourceControlCommand</c> method.</para></summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SourceControlCommandOptions.SCCmdOption_ShowPromptDialog">
      <summary>(Value: 0x4) Launches a dialog box with a list of files before performing the operation on the files. You cannot combine this option with <c>SCCmdOption_SkipPromptDialog</c>. If you do not specify this option or <c>SCCmdOption_SkipPromptDialog</c>, the engine Configuration option determines whether the dialog box is launched.<para>Note: This constant applies only to the <c>SCCmd_CheckOut</c> and <c>SSCmd_GetLatest</c> commands for the WorkspaceObject.DoSourceControlCommand method.</para></summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SourceControlCommandOptions.SCCmdOption_SkipErrorDialog">
      <summary>(Value: 0x8) Does not launch a dialog box for errors.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SourceControlCommandOptions.SCCmdOption_NoOptions">
      <summary>(Value: 0x0) No options.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.ReleaseSeqFileOptions">
      <summary>These constants represent the options you can use with the options parameter of the Engine.ReleaseSequenceFileEx method. Use the bitwise-OR operator to specify more than one option.</summary>
      <seealso cref="Engine.GetSequenceFileEx" />
      <seealso cref="Engine.ReleaseSequenceFileEx" />
      <seealso cref="GetSeqFileOptions" />
      <seealso cref="SequenceFile.UnloadCallbackEnabled" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ReleaseSeqFileOptions.ReleaseSeqFile_DoNotRunUnloadCallback">
      <summary>(Value: 0x2) Use this option to prevent the SequenceFileUnload callback sequence from running if the callback exists and the reference being released is the last reference. If other references exist to the sequence file, TestStand might execute the SequenceFileUnload callback when these references are released using the Engine.ReleaseSequenceFileEx method. Regardless of whether you use this option, TestStand does not execute the SequenceFileUnload callback if the SequenceFileLoad callback was not executed because all references to the sequence file were obtained by passing the GetSeqFile_DoNotRunLoadCallback option to the Engine.GetSequenceFileEx method.
Use the SequenceFile.UnloadCallbackEnabled property to prevent the SequenceFileUnload callback from ever being executed.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ReleaseSeqFileOptions.ReleaseSeqFile_NoOptions">
      <summary>(Value: 0x0) No options.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ReleaseSeqFileOptions.ReleaseSeqFile_UnloadFileIfModified">
      <summary>(Value: 0x1) Use this option to remove a modified sequence file from the internal cache of the engine. If TestStand cannot remove a modified sequence file from the cache, the <c>Engine.ReleaseSequenceFileEx</c> method generates an error. If your development environment requires you to explicitly release COM references, do not release the COM reference to a SequenceFile object until a call to the <c>Engine.ReleaseSequenceFileEx</c> method succeeds.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ReleaseSeqFileOptions.ReleaseSeqFile_UnloadFile">
      <summary>(Value: 0x4) Use this option to request TestStand to remove a sequence file from the internal cache of the engine. When you specify this option, it does not guarantee that TestStand removes the sequence file from the cache because there might be multiple references to it or it might be executing. If TestStand cannot remove a sequence file from the cache, the <c>Engine.ReleaseSequenceFileEx</c> method generates an error. If your development environment requires you to explicitly release COM references, do not release the COM reference to a SequenceFile object until a call to the <c>Engine.ReleaseSequenceFileEx</c> method succeeds. If you do not specify this option, TestStand might remove the sequence file from the cache if TestStand no longer needs the file.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.FileOpenStatusFlags">
      <summary>Use these constants to specify the PropertyObjectFile.OpenStatus property. Generally, only user interfaces need to set this property.</summary>
      <seealso cref="PropertyObjectFile.OpenStatus" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.FileOpenStatusFlags.OpenStatus_InWindow">
      <summary>(Value: 0x1) Specifies that the file is open and displayed in a window.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.PropertyDialogOptions">
      <summary>These constants represent the options you can use with the dlgOptions parameter of the PropertyObject.DisplayPropertiesDialog method. Use the bitwise-OR operator to specify more than one option.</summary>
      <seealso cref="Engine.AppMainHwnd" />
      <seealso cref="PropertyDialogOutputs" />
      <seealso cref="PropertyObject.DisplayPropertiesDialog" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyDialogOptions.PropDlgOption_DisableAdvancedButton">
      <summary>(Value: 0x4) Disables the Advanced button in the dialog box to prevent the user from editing the flag settings for the property.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyDialogOptions.PropDlgOption_DisableNumericFormatButton">
      <summary>(Value: 0x8) Disables the Numeric Format button in the dialog box to prevent the user from changing the format of the property.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyDialogOptions.PropDlgOption_ModalToAppMainWind">
      <summary>(Value: 0x10000) By default, the dialog box is modal to the last active window of the calling thread, or if none exists, to the last active window from AppMainHwnd. If you set this option, the dialog box is modal with respect to the window handle of the Engine.AppMainHwnd property. Typically, you do not need to set this option.</summary>
      <seealso cref="Engine.AppMainHwnd" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyDialogOptions.PropDlgOption_ReadOnly">
      <summary>(Value: 0x20000) Use this option to create a read-only version of the dialog box.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyDialogOptions.PropDlgOption_ShowViewContentsButton">
      <summary>(Value: 0x2) Adds a View Contents button to the bottom of the dialog box. Click the View Contents button to close the dialog box and include the PropDlgOutput_ViewContents flag in the return value of the method that displays the dialog box. The caller of the method that launches the dialog box responds to the View Contents button by displaying the object to which the dialog box applies in the user interface.</summary>
      <seealso cref="PropertyDialogOutputs" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyDialogOptions.PropDlgOption_NoOptions">
      <summary>(Value: 0x0) No option.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyDialogOptions.PropDlgOption_UseVariablesViewDialog">
      <summary>(Value: 0x10) Display the version of the dialog used by the TestStand Sequence Editor Variables View.  Currently applies only to DisplayFlagsDialog.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.PropertyDialogOutputs">
      <summary>These constants represent the return values of the PropertyObject.DisplayPropertiesDialog method. Use the bitwise-AND operator with the return value to determine whether any of these flags are set.</summary>
      <seealso cref="PropertyObject.DisplayPropertiesDialog" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyDialogOutputs.PropDlgOutput_AppliedToAllInstances">
      <summary>(Value: 0x1) For types, indicates that the user selected the Apply Value to All Loaded Instances of the Type option and that all instances were updated.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyDialogOutputs.PropDlgOutput_AppliedChanges">
      <summary>(Value: 0x2) Indicates that the user clicked OK.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyDialogOutputs.PropDlgOutput_ViewContents">
      <summary>(Value: 0x4) Indicates that the user clicked View Contents.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyDialogOutputs.PropDlgOutput_ModifiedObject">
      <summary>(Value: 0x8) Indicates that the dialog box modified the object.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyDialogOutputs.PropDlgOutput_ModifiedFile">
      <summary>(Value: 0x10) Indicates that the dialog box modified the file that contains the object.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.TypeUsageList">
      <summary>The TypeUsageList contains a list of types a PropertyObjectFile object uses. Use this class to insert or delete types from a file.
<para>Note: When you edit a PropertyObjectFile object by inserting named data types or step types in to the file, add any new types to the TypeUsageList object for the file so the types immediately appear in the Types view in the sequence editor for the file. Use the TypeUsageList.AddUsedTypes or TypeUsageList.Union method to add new types.</para></summary>
      <seealso cref="PropertyObjectFile.TypeUsageList" />
      <seealso cref="TypeUsageList.AddUsedTypes" />
      <seealso cref="TypeUsageList.Union" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.TypeUsageList.Union(NationalInstruments.TestStand.Interop.API.TypeUsageList)">
      <summary>Adds all the types from one type usage list to another.</summary>
      <remarks>Does not add types that already exist in both type usage lists.</remarks>
      <returns>Returns <c>True</c> if any types were added. Otherwise, returns <c>False</c>.</returns>
      <param name="unionTypeUsageList">Specifies the type usage list that contains the types to add.</param>
      <seealso cref="Engine.UnserializeObjectsAndTypes" />
      <seealso cref="TypeUsageList" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.TypeUsageList.NumTypes">
      <summary>Returns the number of types in the type usage list.</summary>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.TypeUsageList.GetTypeDefinition(System.Int32)">
      <summary>Returns the type the index parameter specifies.</summary>
      <param name="index">Specifies the zero-based index of the type in the type usage list.</param>
      <seealso cref="PropertyObject" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.TypeUsageList.GetTypeIndex(System.String)">
      <summary>Returns the index of the type the typeNameParam parameter specifies.</summary>
      <returns>The index of the type with the specified name. Returns <c>-1</c> if no type in the list has the specified name.</returns>
      <param name="typeNameParam">Specifies the type name to locate in the list.</param>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.TypeUsageList.InsertType(NationalInstruments.TestStand.Interop.API.PropertyObject,System.Int32,NationalInstruments.TestStand.Interop.API.TypeCategories)">
      <summary>Inserts a type into the type usage list and associates it with a type category.</summary>
      <param name="typeToInsert">Specifies the new type definition to insert.</param>
      <param name="index">Specifies the zero-based index at which to insert the type into the type usage list.</param>
      <param name="typeCategoryParam">Specifies the type category to associate with the type.</param>
      <seealso cref="PropertyObject" />
      <seealso cref="TypeCategories" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.TypeUsageList.RemoveType(System.Int32)">
      <summary>Removes the type the index parameter specifies from the type usage list.</summary>
      <returns>The removed type.</returns>
      <param name="index">Specifies the zero-based index of the type to remove.</param>
      <seealso cref="PropertyObject" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.TypeUsageList.GetIsTypeAttachedToFile(System.Int32)">
      <summary>Returns a value that indicates whether the type the index parameter specifies is attached to the file that contains the type usage list.</summary>
      <remarks>Types that are attached to a file are saved with the file to which the list belongs, even if no instances of the type exist in the file.</remarks>
      <returns>Returns <c>True</c> if the type is attached to the file.</returns>
      <param name="index">Specifies the zero-based index of the type in the type usage list.</param>
      <seealso cref="TypeUsageList.SetIsTypeAttachedToFile" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.TypeUsageList.AddUsedTypes(NationalInstruments.TestStand.Interop.API.PropertyObject)">
      <summary>Adds all the types the specified object uses to the type usage list.</summary>
      <returns>Returns <c>True</c> if any types were added to the type usage list.</returns>
      <param name="propObject">Specifies the object from which to add types to the type usage list.</param>
      <seealso cref="PropertyObject" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.TypeUsageList.ChangeCount">
      <summary>Returns the number of modifications made to the type usage list.</summary>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.TypeUsageList.SetIsTypeAttachedToFile(System.Int32,System.Boolean)">
      <summary>Specifies if the type the index parameter specifies is attached to the file that contains the type usage list.</summary>
      <remarks>Types attached to a file are saved with the file to which the list belongs, even if no instances of the type exist in the file.</remarks>
      <param name="index">Specifies the zero-based index of the type in the type usage list.</param>
      <param name="store">Pass <c>True</c> to attach the type to the file.</param>
      <seealso cref="TypeUsageList.GetIsTypeAttachedToFile" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.TypeUsageList.MoveType(System.Int32,System.Int32)">
      <summary>Moves the type the index parameter specifies to a new index in the type usage list.</summary>
      <param name="index">Specifies the zero-based index of the type to move.</param>
      <param name="newIndex">Specifies the new zero-based index of the type.</param>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.TypeUsageList.ValidateNewTypeName(System.String,System.Boolean,System.Boolean@)">
      <summary>Determines if the specified name is valid for a new type definition.</summary>
      <remarks>Call this method before adding a new type definition to a type usage list to determine whether the name of the new type definition is valid.</remarks>
      <returns>Returns a description of why the name is not valid.</returns>
      <param name="newName">Specifies the new name to validate.</param>
      <param name="allowDuplicates">In addition to validating the name, also check if the name is already in use. If this parameter is <c>False</c>, the method reports that the new name is invalid if it is already in use.</param>
      <param name="isValid">Returns <c>True</c> if the new name is valid.</param>
      <seealso cref="PropertyObject.ValidateNewElementName" />
      <seealso cref="PropertyObject.ValidateNewName" />
      <seealso cref="PropertyObject.ValidateNewSubPropertyName" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.TypeUsageList.CreateAndInsertNewTypeFromExisting(NationalInstruments.TestStand.Interop.API.PropertyObject,System.Int32,NationalInstruments.TestStand.Interop.API.TypeCategories,System.Int32)">
      <summary>Creates a new type with a unique name based on the type you specify in the existingType parameter and inserts and attaches the new type to the type usage list. This method also clears some type-specific settings in the newly created type, such as the flags <c>PropFlags_NotDeletable</c>, <c>PropFlags_NotEditable</c>, and <c>PropFlags_NameNotEditable</c>; the type flags <c>PropTypeFlags_NIInstalledType</c> and <c>PropTypeFlags_PreventEditingType</c>; the <c>TypeMinimumTestStandVersion</c>; and the password protection settings. Using this method is equivalent to copying and pasting a type in the Types window in the TestStand Sequence Editor to create a new type based on an existing type.</summary>
      <returns>Returns the newly created type, which is already inserted into and attached to the type usage list.</returns>
      <param name="existingType">Specifies the existing root type definition on which to base the newly created type.</param>
      <param name="index">Specifies the index in the type usage list at which to insert the new type.</param>
      <param name="typeCategoryParam">Specifies the type category in which to insert the new type.</param>
      <param name="reservedParam">Reserved for future use. Pass <c>0</c> for this parameter.</param>
      <seealso cref="PropertyFlags" />
      <seealso cref="PropertyObject.TypeMinimumTestStandVersion" />
      <seealso cref="PropertyObject.GetTypeDefinitionProtection" />
      <seealso cref="PropertyObjTypeFlags" />
      <seealso cref="TypeCategories" />
      <seealso cref="TypeUsageList.InsertType" />
      <seealso cref="TypeUsageList.SetIsTypeAttachedToFile" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.WorkspaceObject">
      <summary>Objects of the WorkspaceObject class represent nodes for workspace and project files on the Workspace pane. Workspace objects handle all source code control operations on files.</summary>
      <seealso cref="WorkspaceFile.RootWorkspaceObject" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.WorkspaceObject.NewFolder(System.String)">
      <summary>Creates a WorkspaceObject folder.</summary>
      <remarks>Use the WorkspaceObject.InsertObject method to insert the object into the workspace. </remarks>
      <param name="Name">Specifies the name of the folder.</param>
      <seealso cref="WorkspaceObject" />
      <seealso cref="WorkspaceObject.InsertObject" />
      <seealso cref="WorkspaceObject.NewFile" />
      <seealso cref="WorkspaceObject.ObjectType" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.WorkspaceObject.NewFile(System.String)">
      <summary>Creates a new WorkspaceObject associated with the specified pathname.</summary>
      <remarks>Use the WorkspaceObject.InsertObject method to insert the object into the workspace. This method uses the file extension to determine the type of WorkspaceObject.</remarks>
      <param name="path">Specifies the pathname associated with the WorkspaceObject. This pathname can be relative.</param>
      <seealso cref="WorkspaceObject" />
      <seealso cref="WorkspaceObject.InsertObject" />
      <seealso cref="WorkspaceObject.NewFolder" />
      <seealso cref="WorkspaceObject.ObjectType" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.WorkspaceObject.InsertObject(NationalInstruments.TestStand.Interop.API.WorkspaceObject,System.Int32)">
      <summary>Inserts a WorkspaceObject at the specified index under another WorkspaceObject.</summary>
      <remarks>Use the WorkspaceObject.NewFile or WorkspaceObject.NewFolder method to create a new WorkspaceObject.</remarks>
      <param name="obj">Specifies the WorkspaceObject to be insert.</param>
      <param name="index">Specifies the zero-based index specifying the location at which to insert the WorkspaceObject.</param>
      <seealso cref="WorkspaceObject" />
      <seealso cref="WorkspaceObject.NewFile" />
      <seealso cref="WorkspaceObject.NewFolder" />
      <seealso cref="WorkspaceObject.NumContainedObjects" />
      <seealso cref="WorkspaceObject.RemoveObject" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.WorkspaceObject.Path">
      <summary>Returns the pathname associated with the WorkspaceObject.</summary>
      <remarks>Folder objects do not contain a pathname. The pathname can be relative.</remarks>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.WorkspaceObject.DisplayName">
      <summary>Specifies the display name for this WorkspaceObject.</summary>
      <remarks>Generally, the display name is the name of the file, if one exists.</remarks>
      <seealso cref="WorkspaceObject.GetAbsolutePath" />
      <seealso cref="WorkspaceObject.ObjectType" />
      <seealso cref="WorkspaceObject.Path" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.WorkspaceObject.IsCodeModule">
      <summary>Returns a value that indicates whether the WorkspaceObject refers to a code module.</summary>
      <seealso cref="WorkspaceObject.ObjectType" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.WorkspaceObject.CodeModuleSeqFilePath">
      <summary>Specifies the pathname of the sequence file to which this code module belongs.</summary>
      <remarks>This property associates a WorkspaceObject with a particular sequence file. Code modules that are stored in the workspace use the property to determine to which sequence file they belong. </remarks>
      <returns>The pathname of the sequence file. This pathname can be relative.</returns>
      <seealso cref="WorkspaceObject.InsertCodeModules" />
      <seealso cref="WorkspaceObject.IsCodeModule" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.WorkspaceObject.ObjectType">
      <summary>Returns the WorkspaceObject type.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.WorkspaceObject.SourceControlStatus">
      <summary>Returns the current source code control status of this WorkspaceObject.</summary>
      <returns>One of the values in SourceControlStatuses.</returns>
      <seealso cref="SourceControlStatuses" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.WorkspaceObject.DoSourceControlCommand(NationalInstruments.TestStand.Interop.API.SourceControlCommands,System.Boolean@,System.Int32,System.Object)">
      <summary>Performs the specified source code control command on the specified files.</summary>
      <remarks>Call the WorkspaceObject.CanDoSourceControlCommand method before calling this method.</remarks>
      <returns>Returns <c>True</c> if the command was completed successfully for all specified files.</returns>
      <param name="scCommand">Specifies the source code control command to perform.</param>
      <param name="modifiedObject">Returns <c>True</c> if the command modified the workspace file.</param>
      <param name="options">Specifies one or more of the SourceControlCommandOptions constants.</param>
      <param name="itemList">Specifies an array of WorkspaceObjects that specifies the selected files. If you omit this argument, the method uses the file associated with this WorkspaceObject. </param>
      <seealso cref="&quot;Omitting Optional Parameters&quot;javascript:APILink('/InfoTopics/Optional_Parameters.htm')" />
      <seealso cref="SourceControlCommandOptions" />
      <seealso cref=".SourceControlStatus" />
      <seealso cref="WorkspaceObject.CanDoSourceControlCommand" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.WorkspaceObject.AsPropertyObject">
      <summary>Returns the underlying PropertyObject that represents the WorkspaceObject object. Use the PropertyObject to modify, add, or remove custom properties of the object.</summary>
      <seealso cref="PropertyObject" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.WorkspaceObject.GetAbsolutePath">
      <summary>Returns the absolute pathname of the file associated with this WorkspaceObject.</summary>
      <seealso cref="WorkspaceObject.Path" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.WorkspaceObject.RemoveObject(System.Int32)">
      <summary>Removes the WorkspaceObject at the specified index.</summary>
      <returns>Returns the removed object.</returns>
      <param name="index">Specifies the zero-based index of the object to remove.</param>
      <seealso cref="WorkspaceObject.InsertObject" />
      <seealso cref="WorkspaceObject.NumContainedObjects" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.WorkspaceObject.ProjectFile">
      <summary>Returns the project file to which this object belongs.</summary>
      <remarks>All WorkspaceObjects belong to a single project file in the workspace.</remarks>
      <seealso cref="PropertyObjectFile" />
      <seealso cref="WorkspaceObject.GetAbsolutePath" />
      <seealso cref="WorkspaceObject.ObjectType" />
      <seealso cref="WorkspaceObject.Path" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.WorkspaceObject.InsertCodeModules(System.Object)">
      <summary>Inserts WorkspaceObjects for the code modules of the specified sequence files.</summary>
      <remarks>This method traverses the WorkspaceObject hierarchy searching for sequence files. For each sequence file it finds, this method finds all the code modules in the sequence file and adds a WorkspaceObject for each one to the workspace.
<para>Note: Code modules are a static representation of the current WorkspaceObject hierarchy. If you change the hierarchy or any elements in the hierarchy, you must delete the code module WorkspaceObjects and call this method again.</para></remarks>
      <returns>Returns an array of WorkspaceObjects that were added to the workspace.</returns>
      <param name="itemList">Specifies an array of WorkspaceObjects that specifies the selected files. If you omit this argument, the method uses this WorkspaceObject.</param>
      <seealso cref="&quot;Omitting Optional Parameters&quot;javascript:APILink('/InfoTopics/Optional_Parameters.htm')" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.WorkspaceObject.UpdateStatus(System.Int32)">
      <summary>Updates the source code control status of the specified WorkspaceObjects.</summary>
      <param name="options">Pass SCCmdOption_DoNotRecurse to specify only this WorkspaceObject. Otherwise, this method updates the status of all contained objects as well.</param>
      <seealso cref="SourceControlCommandOptions" />
      <seealso cref=".SourceControlStatus" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.WorkspaceObject.FileExists">
      <summary>Returns a value that indicates whether the file associated with the WorkspaceObject exists.</summary>
      <remarks>This method is valid only on WorkspaceObjects that contain a pathname.</remarks>
      <seealso cref="WorkspaceObject.GetAbsolutePath" />
      <seealso cref="WorkspaceObject.ObjectType" />
      <seealso cref="WorkspaceObject.Path" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.WorkspaceObject.LastSourceControlMessages">
      <summary>Returns the most recent information and error messages the source code control provider reports.</summary>
      <remarks>Call this method after calling the WorkspaceObject.DoSourceControlCommand method to obtain any messages the SCC provider reports.</remarks>
      <seealso cref="WorkspaceObject.DoSourceControlCommand" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.WorkspaceObject.CanDoSourceControlCommand(NationalInstruments.TestStand.Interop.API.SourceControlCommands,System.Int32,System.Object)">
      <summary>Indicates if the provider supports the specified source code control command for the specified files.</summary>
      <remarks>Call this function to determine whether you can call the WorkspaceObject.DoSourceControlCommand method on the selected files.</remarks>
      <returns>Returns <c>True</c> if the command is supported.</returns>
      <param name="scCommand">Specifies the command to check.</param>
      <param name="options">Specifies one or more of the SourceControlCommandOptions constants.</param>
      <param name="itemList">Specifies an array of WorkspaceObjects that specifies the selected files. If you omit this argument, the method uses the file associated with this WorkspaceObject. </param>
      <seealso cref="&quot;Omitting Optional Parameters&quot;javascript:APILink('/InfoTopics/Optional_Parameters.htm')" />
      <seealso cref="SourceControlCommandOptions" />
      <seealso cref="WorkspaceObject.DoSourceControlCommand" />
      <seealso cref="WorkspaceObject.SourceControlStatus" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.WorkspaceObject.GetParentContainer">
      <summary>Returns the parent WorkspaceObject that contains this WorkspaceObject.</summary>
      <remarks>This method returns a <c>NULL</c> reference for the parent WorkspaceObject.</remarks>
      <seealso cref="WorkspaceFile.RootWorkspaceObject" />
      <seealso cref="WorkspaceObject" />
      <seealso cref="WorkspaceObject.GetContainedObject" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.WorkspaceObject.NumContainedObjects">
      <summary>Returns the number of objects that this WorkspaceObject contains.</summary>
      <seealso cref="WorkspaceObject.InsertObject" />
      <seealso cref="WorkspaceObject.ObjectType" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.WorkspaceObject.GetContainedObject(System.Int32)">
      <summary>Returns the WorkspaceObject the index specifies.</summary>
      <param name="index">Specifies the zero-based index of the object contained by this WorkspaceObject.</param>
      <seealso cref="WorkspaceObject" />
      <seealso cref="WorkspaceObject.GetParentContainer" />
      <seealso cref="WorkspaceObject.NumContainedObjects" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.WorkspaceFile">
      <summary>Objects of the WorkspaceFile class represent workspace files that can contain projects. A workspace file contains a list of project files and source code control provider information. Each project file contains lists of sequence files, code modules, and other files required by a particular test system.
To perform read or write operations for objects from the WorkspaceFile class, obtain a reference to the PropertyObjectFile interface by using the WorkspaceFile.AsPropertyObjectFile method, then use the PropertyObjectFile.ReadFile and PropertyObjectFile.WriteFile methods, respectively.</summary>
      <seealso cref=".AsPropertyObjectFile" />
      <seealso cref="Engine.CurrentWorkspaceFile" />
      <seealso cref="PropertyObjectFile.ReadFile" />
      <seealso cref="PropertyObjectFile.WriteFile" />
      <seealso cref="WorkspaceObject" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.WorkspaceFile.RootWorkspaceObject">
      <summary>Returns the root WorkspaceObject.</summary>
      <remarks>This object contains all the projects the workspace file contains. </remarks>
      <seealso cref="WorkspaceObject" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.WorkspaceFile.IsConnectedToSCProvider">
      <summary>Returns a value that indicates whether the workspace file is connected to a source code control (SCC) provider.</summary>
      <remarks>TestStand connects a workspace file to an SCC provider when you set the Engine.CurrentWorkspaceFile property. The WorkspaceFile.ProviderName property specifies the associated provider. If the workspace file does not have a provider associated with it, TestStand connects to the default provider specified in the registry at <c>HKEY_LOCAL_MACHINE\SOFTWARE\SourceCodeControlProvider</c>. (Platform: (32-bit TestStand)) On 64-bit operating systems, this registry key appears only in the 32-bit registry. Use the path <c>HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\SourceCodeControlProvider</c> to access the key in the registry editor.</remarks>
      <seealso cref="Engine.CurrentWorkspaceFile" />
      <seealso cref="StationOptions.SystemDefaultSourceCodeControlProvider" />
      <seealso cref="WorkspaceFile.ProviderName" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.WorkspaceFile.ProviderName">
      <summary>Specifies the name of the source code control provider. The registry key entries located in <c>HKEY_LOCAL_MACHINE\Software\SourceCodeControlProvider\InstalledSCCProviders</c> define the name for a provider. (Platform: (32-bit TestStand)) On 64-bit operating systems, this registry key appears only in the 32-bit registry. Use the path <c>HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\SourceCodeControlProvider\InstalledSCCProviders</c> to access the key in the registry editor.
</summary>
      <remarks>This property returns <c>&lt;None&gt;</c> if the workspace does not specify any provider. An empty value specifies to use the default provider specified by the system.</remarks>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.WorkspaceFile.AsPropertyObjectFile">
      <summary>Returns the underlying PropertyObjectFile that represents the WorkspaceFile object. </summary>
      <seealso cref="PropertyObjectFile" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.WorkspaceFile.FindWorkspaceObject(System.String)">
      <summary>Finds a WorkspaceObject for the specified pathname.</summary>
      <returns>Returns the first WorkspaceObject in the workspace that corresponds to the specified pathname. Returns a <c>NULL</c> reference if no object is found.</returns>
      <param name="fullPath">Specifies ss the absolute pathname of the file to find.</param>
      <seealso cref="WorkspaceObject" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.WorkspaceFile.RunSourceControlProvider">
      <summary>Launches the user interface of the source code control provider.</summary>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.WorkspaceFile.DisplayAddFileToWorkspaceDialog(NationalInstruments.TestStand.Interop.API.WorkspaceObject,System.String)">
      <summary>Launches the Add File To Workspace dialog box, in which you can add a file to the workspace file at the location you select.</summary>
      <returns>Returns <c>True</c> if the file was added to the workspace.</returns>
      <param name="selectedProject">Specifies the currently selected project in the workspace. Pass a <c>NULL</c> reference if nothing is selected.</param>
      <param name="fullPath">Specifies the absolute pathname of the file to add it to the workspace.</param>
      <seealso cref="&quot;Add File To Workspace dialog box&quot;javascript:RefLink('/InfoTopics/DB_Add_File_to_Wksp.htm')" />
      <seealso cref="WorkspaceObject" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.WorkspaceFile.OptionsFile">
      <summary>Returns the workspace options file.</summary>
      <remarks>The workspace options file is a file with the same base name as the workspace file, but with the <c>.tso</c> extension. TestStand saves information in this file to preserve certain user settings, such as window positions, source code control information, and the expansion state of the Workspace pane.
<para>Note: National Instruments recommends that you do not put the options file in source code control or share it with other users.</para></remarks>
      <seealso cref="PropertyObjectFile" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.WorkspaceFile.SaveWorkspaceAndProjectFiles(System.Int32)">
      <summary>Writes the contents of the workspace file and the projects to disk if the files have been modified.</summary>
      <remarks>This method does nothing if the workspace and project files have not been modified. If the files have been modified, this method prompts the user with the option to save and then writes the files. PropertyObjectFile.Path determines the pathname of the file to write. If an error occurs while saving any of the files, an exception is thrown containing all the files that could not be saved.</remarks>
      <returns>Returns <c>False</c> if you click Cancel in the Prompt dialog box.</returns>
      <param name="options">Specifies one or more SaveWorkspaceFileOptions constants. Use the bitwise-OR operator to specify more than one options.</param>
      <seealso cref="PropertyObjectFile.IsModified" />
      <seealso cref="PropertyObjectFile.Path" />
      <seealso cref="PropertyObjectFile.WriteFile" />
      <seealso cref="SaveWorkspaceFileOptions" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.StepType">
      <summary>Objects of the StepType class represent step types in TestStand files. Every step is an instance of a step type. You create new step types with the Engine.NewStepType method.</summary>
      <seealso cref="Engine.NewStepType" />
      <seealso cref="Step" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StepType.AdditionalResultsHints">
      <summary>Returns a list of additional result hints associated with a step type.</summary>
      <remarks>The combined members of <c>StepType.AdditionalResultsHints</c> and Step.AdditionalResultsHints define a list of preconfigured custom additional results you can choose to log when you edit the additional results of a step in a user interface.</remarks>
      <seealso cref="AdditionalResults" />
      <seealso cref="Step.AdditionalResultsHints" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StepType.LoopType">
      <summary>Specifies the type of looping for the step.</summary>
      <remarks>Use the StepLoopTypes constants to specify the value of the property.</remarks>
      <seealso cref="StepLoopTypes" />
      <seealso cref="StepType.LoopIncExpression" />
      <seealso cref="StepType.LoopInitExpression" />
      <seealso cref="StepType.LoopStatusExpression" />
      <seealso cref="StepType.LoopWhileExpression" />
      <seealso cref="StepType.RecordLoopIterationResults" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StepType.LoopWhileExpression">
      <summary>Specifies the While Loop expression for the step.</summary>
      <seealso cref="StepType.LoopIncExpression" />
      <seealso cref="StepType.LoopInitExpression" />
      <seealso cref="StepType.LoopStatusExpression" />
      <seealso cref="StepType.LoopType" />
      <seealso cref="StepType.RecordLoopIterationResults" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StepType.LoopStatusExpression">
      <summary>Specifies the loop status result expression for the step.</summary>
      <seealso cref="StepType.LoopIncExpression" />
      <seealso cref="StepType.LoopInitExpression" />
      <seealso cref="StepType.LoopType" />
      <seealso cref="StepType.LoopWhileExpression" />
      <seealso cref="StepType.RecordLoopIterationResults" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StepType.LoopInitExpression">
      <summary>Specifies the loop initialization expression for the step.</summary>
      <seealso cref="StepType.LoopIncExpression" />
      <seealso cref="StepType.LoopStatusExpression" />
      <seealso cref="StepType.LoopType" />
      <seealso cref="StepType.LoopWhileExpression" />
      <seealso cref="StepType.RecordLoopIterationResults" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StepType.LoopIncExpression">
      <summary>Specifies the loop increment expression for the step.</summary>
      <seealso cref="StepType.LoopInitExpression" />
      <seealso cref="StepType.LoopStatusExpression" />
      <seealso cref="StepType.LoopType" />
      <seealso cref="StepType.LoopWhileExpression" />
      <seealso cref="StepType.RecordLoopIterationResults" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StepType.RecordLoopIterationResults">
      <summary>Specifies whether to add the step results to the sequence results list after each loop iteration.</summary>
      <remarks>TestStand also adds the final result it computes for the step loop as a whole if you enable the StepType.ResultRecordingOption property for the step.</remarks>
      <seealso cref="StepType.LoopIncExpression" />
      <seealso cref="StepType.LoopInitExpression" />
      <seealso cref="StepType.LoopStatusExpression" />
      <seealso cref="StepType.LoopType" />
      <seealso cref="StepType.LoopWhileExpression" />
      <seealso cref="StepType.ResultRecordingOption" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StepType.UseMutex">
      <summary>Specifies that the step acquires the a lock before it executes and releases the lock after it completes.</summary>
      <remarks>Use the StepType.MutexNameOrRefExpr property to specify which lock the step uses.</remarks>
      <seealso cref="StepType.BatchSyncOption" />
      <seealso cref="StepType.MutexNameOrRefExpr" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StepType.MutexNameOrRefExpr">
      <summary>Specifies which lock the step acquires and releases. TestStand ignores this property when the StepType.UseMutex property is <c>False</c>.</summary>
      <remarks>Enter a string expression to specify the name of an existing lock. You can also enter an expression that evaluates an ActiveX reference to an existing Lock object. Pass an empty string to specify that TestStand uses a lock unique to the step.</remarks>
      <seealso cref="StepType.BatchSyncOption" />
      <seealso cref="StepType.UseMutex" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StepType.BatchSyncOption">
      <summary>Specifies the Batch Synchronization operation the step enters before it executes and exits after it completes.</summary>
      <seealso cref="StepType.MutexNameOrRefExpr" />
      <seealso cref="StepType.UseMutex" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StepType.PreExpression">
      <summary>Specifies the pre-expression for the step.</summary>
      <remarks>TestStand evaluates the pre-expression before it calls the Pre-Step substep and code module for the step.</remarks>
      <seealso cref="StepType.PostExpression" />
      <seealso cref="StepType.StatusExpression" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StepType.PostExpression">
      <summary>Specifies the post-expression for the step.</summary>
      <remarks>TestStand evaluates the post-expression after calling the code module and Post-Step substep for the step type.</remarks>
      <seealso cref="StepType.PreExpression" />
      <seealso cref="StepType.StatusExpression" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StepType.StatusExpression">
      <summary>Specifies the status expression for the step.</summary>
      <remarks>Use this expression to set the ResultStatus property of the step. TestStand executes this expression after executing all other substeps and expressions for the step. The expression must evaluate to a string.</remarks>
      <seealso cref="StepType.PostExpression" />
      <seealso cref="StepType.PreExpression" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StepType.DesignatedAdapter">
      <summary>Returns the module adapter for the step type. The module adapter for any instance created from this type defaults to this setting.</summary>
      <remarks>Use the StepType.ChangeDesignatedAdapter method to change this setting. If the step type does not specify a default module adapter, this property returns an empty string.</remarks>
      <seealso cref="AdapterKeyNames" />
      <seealso cref="Engine.DefaultAdapter" />
      <seealso cref="Engine.NewStep" />
      <seealso cref="StepType.CanSpecifyModule" />
      <seealso cref="StepType.ChangeDesignatedAdapter" />
      <seealso cref="StepType.SpecifyModule" />
      <seealso cref="StepType.Module" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StepType.DimmablePropertyKeyNames">
      <summary>Returns the key names from the step type-modifiable properties.
These properties are disabled to prevent you from modifying the settings of built-in instance properties in individual steps. In this way, the settings specified for the step type remain permanent for all step instances.</summary>
      <remarks>A key name is an internal name assigned to a specific property. To obtain the property display name, use the StepType.GetDimmablePropertyDisplayName method.</remarks>
      <seealso cref="StepType.DimProperty" />
      <seealso cref="StepType.GetDimmablePropertyDisplayName" />
      <seealso cref="StepType.IsPropertyDimmed" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.StepType.GetDimmablePropertyDisplayName(System.String)">
      <summary>Obtains the display name for the key name.</summary>
      <remarks>The display name depends on localization.</remarks>
      <param name="propertyKeyName">Specifies a property key name.</param>
      <seealso cref="StepType.DimmablePropertyKeyNames" />
      <seealso cref="StepType.DimProperty" />
      <seealso cref="StepType.IsPropertyDimmed" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.StepType.IsPropertyDimmed(System.String)">
      <summary>Indicates whether the control for the specified property is dimmed in the Step Properties dialog box.</summary>
      <param name="propertyKeyName">Specifies the corresponding property key name.</param>
      <seealso cref="&quot;Step Properties dialog box&quot;javascript:RefLink('/InfoTopics/DB_Step_Prop.htm')" />
      <seealso cref="StepType.DimmablePropertyKeyNames" />
      <seealso cref="StepType.DimProperty" />
      <seealso cref="StepType.GetDimmablePropertyDisplayName" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.StepType.DimProperty(System.String,System.Boolean)">
      <summary>Specifies if the control(s) for the specified property are disabled in the Step Properties dialog box.</summary>
      <param name="propertyKeyName">Specifies the corresponding property key name.</param>
      <param name="newValue">If this parameter is <c>True</c>, the control for the corresponding property is disabled.</param>
      <seealso cref="&quot;Step Properties dialog box&quot;javascript:RefLink('/InfoTopics/DB_Step_Prop.htm')" />
      <seealso cref="StepType.DimmablePropertyKeyNames" />
      <seealso cref="StepType.GetDimmablePropertyDisplayName" />
      <seealso cref="StepType.IsPropertyDimmed" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.StepType.AddSubstep(NationalInstruments.TestStand.Interop.API.Step)">
      <summary>Adds a new substep to the step type. </summary>
      <remarks>Use substeps to define standard actions, other than calling the step module, TestStand performs for all instances of the step type. You can specify one of the following four categories for a step type:
<para><para>&#160;&#160;&#160;&#160;* Pre-Step substeps&#8212;TestStand calls the Pre-Step substeps before calling the step module. You can implement a Pre-Step substep to retrieve and store measurement configuration parameters into custom step properties the step module can access.</para><para>&#160;&#160;&#160;&#160;* Post-Step substeps&#8212;TestStand calls the Post-Step substeps after calling the step module. You can implement a Post-Step substep to compare the values the step module stores in custom step properties against limit values the Edit substep stores in other custom step properties.</para><para>&#160;&#160;&#160;&#160;* Edit substeps&#8212;An Edit substep launches a dialog box in which you can edit the values of custom step properties. For example, an Edit substep can launch a dialog box in which you specify the high and low limits for a test. The Edit substep can then store the high and low limit values as step properties. Dialog boxes that the specified Edit substep code module launch must be modal. For all dialog boxes except the Microsoft Foundation Classes dialog boxes, use the Engine.NotifyStartOfModalDialogEx and Engine.NotifyEndOfModalDialog methods of the TestStand API. Refer to the examples in the <c>&lt;TestStand Public&gt;\Examples\Fundamentals\Launching a Modal Dialog</c> directory for more information about how to use modal dialog boxes.</para><para>&#160;&#160;&#160;&#160;* Custom substeps&#8212;TestStand does not call Custom substeps. You can use the TestStand API to invoke a Custom substep from a test module, user interface, or other code module.</para></para></remarks>
      <param name="newSubstep">Specifies the new step to be added as a substep for the current step type. Create a new step to pass for this parameter by calling the Engine.NewStep method and specifying <c>Substep</c>, <c>EditSubstep</c>, <c>PreSubstep</c>, or <c>PostSubstep</c> as the value for the stepTypeName parameter of the <c>Engine.NewStep</c> method.</param>
      <seealso cref="Engine.NewStep" />
      <seealso cref="Engine.NotifyEndOfModalDialog" />
      <seealso cref="Engine.NotifyStartOfModalDialogEx" />
      <seealso cref="Step" />
      <seealso cref="StepType.GetSubstep" />
      <seealso cref="StepType.NumSubsteps" />
      <seealso cref="StepType.RemoveSubstep" />
      <seealso cref="StepType.SwapSubsteps" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.StepType.RemoveSubstep(System.Int32)">
      <summary>Removes the substep specified for the zero-based index passed as an input parameter.</summary>
      <param name="substepIndex">Specifies the zero-based index of the substep to remove.</param>
      <seealso cref="StepType.AddSubstep" />
      <seealso cref="StepType.GetSubstep" />
      <seealso cref="StepType.NumSubsteps" />
      <seealso cref="StepType.SwapSubsteps" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.StepType.SwapSubsteps(System.Int32,System.Int32)">
      <summary>Swaps the position of the substeps located in the indexes passed as input parameters.</summary>
      <remarks>To swap the position of the substeps, both substeps must be of the same type. The following types are available: Pre-, Post-, Edit, and Custom. The order of the substeps in the list defines the order in which the Pre- and Post-Step substeps execute and the order in which the menu items for the Edit substep appear in the context menu of the Sequence view in the Sequence File window.</remarks>
      <param name="Index1">Specifies the zero-based index related to one of the substeps to be swapped.</param>
      <param name="index2">Specifies the zero-based index related to one of the substeps to be swapped.</param>
      <seealso cref="StepType.AddSubstep" />
      <seealso cref="StepType.GetSubstep" />
      <seealso cref="StepType.NumSubsteps" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.StepType.AsPropertyObject">
      <summary>Returns the underlying PropertyObject that represents the StepType object. Use the PropertyObject to modify, add, or remove custom properties of the object.</summary>
      <seealso cref="PropertyObject" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StepType.Name">
      <summary>Specifies the name of the step type.</summary>
      <remarks><para>Note: TestStand does not validate step type names you create programmatically for invalid characters, such as spaces, which can result in errors when you use them. Use the TypeUsageList.ValidateNewTypeName method to validate step type names. TestStand require step type names to be strings that contain only letters, numbers, and underscores. Step type names cannot contain spaces, start with a number, or be empty. Additionally, the step type name cannot duplicate step type names already in memory.</para></remarks>
      <seealso cref="StepType.DescriptionExpr" />
      <seealso cref="StepType.GetDefaultName" />
      <seealso cref="TypeUsageList.ValidateNewTypeName" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.StepType.SpecifyModule(System.Int32)">
      <summary>Launches the Specify Module dialog box for the step type, if one exists.</summary>
      <remarks>Check the CanSpecifyModule property to verify that you can call this method.
The current version of TestStand does not support all SpecifyModuleOptions options for all adapters, as the following list indicates:
<para><para>&#160;&#160;&#160;&#160;* LabVIEW Adapter&#8212;Supports only <c>SpecMod_ReadOnly</c>.</para><para>&#160;&#160;&#160;&#160;* LabWindows/CVI Adapter&#8212;Supports all options.</para><para>&#160;&#160;&#160;&#160;* C/C++ DLL Adapter&#8212;Supports all options.</para><para>&#160;&#160;&#160;&#160;* ActiveX/COM Adapter&#8212;Supports only <c>SpecMod_ReadOnly</c>.</para><para>&#160;&#160;&#160;&#160;* Sequence Adapter&#8212;Supports all options.</para><para>&#160;&#160;&#160;&#160;* HTBasic Adapter&#8212;Supports only <c>SpecMod_ReadOnly</c>.</para></para></remarks>
      <returns>Returns <c>True</c> if the Specify Module dialog box modifies the step type.</returns>
      <param name="specModOptions">Specifies one or more SpecifyModuleOptions to modify the behavior of the dialog box.</param>
      <seealso cref="&quot;Specify Module dialog box&quot;javascript:RefLink('/InfoTopics/DB_EditAutoCall.htm')" />
      <seealso cref="&quot;SpecifyModuleOptions&quot;SpecifyModuleOptions.htm" />
      <seealso cref="StepType.CanSpecifyModule" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StepType.CanSpecifyModule">
      <summary>Returns a value that indicates whether the adapter for the default module of the step type supports the StepType.SpecifyModule method.</summary>
      <seealso cref="StepType.SpecifyModule" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StepType.MenuIcon">
      <summary>Returns the icon TestStand displays in the context menu for new steps.</summary>
      <seealso cref="StepType.IconName" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StepType.MenuIconIndex">
      <summary>Returns the icon index in the small image list of the engine to display in menus for creating new steps of this type.</summary>
      <seealso cref="Engine.SmallImageListEx" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.StepType.GetDefaultName">
      <summary>Returns the default step name to use when creating new steps of this type.</summary>
      <seealso cref="StepType.DescriptionExpr" />
      <seealso cref="StepType.Name" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.StepType.ChangeDesignatedAdapter(System.String)">
      <summary>Specifies the module adapter assigned to the step type. </summary>
      <remarks>To obtain the current designated adapter, use the StepType.DesignatedAdapter property.</remarks>
      <param name="adapterName">Corresponds to the key name of the adapter assigned to the specific step type. If the Step Type does not require a module adapter, set this parameter to an empty string.</param>
      <seealso cref="AdapterKeyNames" />
      <seealso cref="&quot;Module.Adapter&quot;Module_Adapter_P.htm" />
      <seealso cref="StepType.CanSpecifyModule" />
      <seealso cref="StepType.DesignatedAdapter" />
      <seealso cref="StepType.Module" />
      <seealso cref="StepType.SpecifyModule" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StepType.Module">
      <summary>Returns a reference to the Module object related to the current step type.</summary>
      <remarks>You must acquire the module interface for the specific adapter from the object this property returns to specify the code module name, location and parameters for the Module object.</remarks>
      <seealso cref="&quot;Module&quot;Module.htm" />
      <seealso cref="&quot;Module.Adapter&quot;Module_Adapter_P.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.StepType.CreateCombinedStepType(NationalInstruments.TestStand.Interop.API.StepType)">
      <summary>Combines two step types to create a new step type.</summary>
      <remarks>If both step types have the same properties but have different values, the values associated with the step type you invoke this method upon take precedence.</remarks>
      <returns>Returns the new combined step type.</returns>
      <param name="combineWith">Specifies the step type to combine with this one.</param>
      <seealso cref="StepType" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StepType.NumSubsteps">
      <summary>Returns the number of substeps for this step type.</summary>
      <seealso cref="StepType.AddSubstep" />
      <seealso cref="StepType.GetSubstep" />
      <seealso cref="StepType.RemoveSubstep" />
      <seealso cref="Step.CanExecuteSubstep" />
      <seealso cref="Step.ExecuteSubstep" />
      <seealso cref="StepType.SwapSubsteps" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.StepType.GetSubstep(System.Int32)">
      <summary>Returns the specified substep.</summary>
      <param name="substepIndex">Specifies the zero-based index of the substep.</param>
      <seealso cref="Step" />
      <seealso cref="Step.CanExecuteSubstep" />
      <seealso cref="Step.ExecuteSubstep" />
      <seealso cref="StepType.AddSubstep" />
      <seealso cref="StepType.NumSubsteps" />
      <seealso cref="StepType.RemoveSubstep" />
      <seealso cref="StepType.SwapSubsteps" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StepType.IconName">
      <summary>Specifies the icon filename assigned to the step type.</summary>
      <remarks>The engine maintains a list of images that contain all the icons located in the <c>&lt;TestStand&gt;\Components\Icons</c> and <c>&lt;TestStand&#160;Public&gt;\Components\Icons</c> directories and images you add using the Engine.AddImage method.
TestStand displays the icon next to the names of the steps that use the step type. If you assign an empty string to this property or assign the name of an icon that is not part of the engine images list, TestStand displays the icon of the module adapter the step uses next to the name of the step.</remarks>
      <seealso cref="Engine.AddImage" />
      <seealso cref="Engine.GetImageIndex" />
      <seealso cref="Engine.GetImageName" />
      <seealso cref="Engine.LargeImageListEx" />
      <seealso cref="Engine.NumImages" />
      <seealso cref="Engine.SmallImageListEx" />
      <seealso cref="StepType.MenuIcon" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StepType.DefaultNameExpr">
      <summary>Specifies a string expression TestStand evaluates and uses as the name of the step when you create a new step with the step type.</summary>
      <remarks>If a step with the same name already exists in the sequence and the Make step names unique when inserting steps sequence editor option is enabled, TestStand appends an underscore followed by a number to the step name to make it unique.
If you want to store the name in a string resource file, use the <c>Restr</c> expression function to retrieve the name from the file. Storing the name in a string resource file is useful when you want to display the name in different languages.</remarks>
      <seealso cref="StepType.DescriptionExpr" />
      <seealso cref="StepType.DesignatedAdapter" />
      <seealso cref="StepType.IconName" />
      <seealso cref="StepType.Precondition" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StepType.DescriptionExpr">
      <summary>Specifies a string expression TestStand evaluates and uses as the contents of the Description field for a step of the step type.</summary>
      <remarks>If you include the <c>%ModuleDescription</c> macro in a string you surround with double quotes, TestStand replaces the <c>%ModuleDescription</c> macro text with text the module adapter provides, which describes the code module the step uses.</remarks>
      <seealso cref="StepType.DefaultNameExpr" />
      <seealso cref="StepType.DesignatedAdapter" />
      <seealso cref="StepType.Precondition" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StepType.Precondition">
      <summary>Specifies an expression that must evaluate to <c>True</c> or be empty to execute a step of the step type.</summary>
      <seealso cref="StepType.EvalPrecondForInteractiveExecution" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StepType.MenuItemNameExpr">
      <summary>Specifies an expression for the step type name that appears in the Insert Step submenu.</summary>
      <remarks>This property corresponds to the Item Name Expression control on the Menu tab of the Step Type Properties dialog box. TestStand uses this expression for the display name of the step type in the Insertion Palette or the Insert Step submenu of the Steps pane context menu.
<para>Note: If you specify a literal string in this expression control, you must enclose it in double quotation marks. If you want to use a name from a string resource file, use the <c>Restr</c> expression function to retrieve the name from the file.</para></remarks>
      <seealso cref="&quot;Insert Step submenu&quot;javascript:RefLink('/InfoTopics/SeqFileWin_Step_GroupCM.htm')" />
      <seealso cref="&quot;Insertion Palette&quot;javascript:RefLink('/InfoTopics/Insertion_Pane.htm')" />
      <seealso cref="&quot;Menu tab&quot;javascript:RefLink('/InfoTopics/DB_Step_Type_Prop_Menu_Tab.htm')" />
      <seealso cref="&quot;Step Type Properties&quot;javascript:RefLink('/InfoTopics/DB_Step_Type_Prop.htm')" />
      <seealso cref="StepType.MenuGroupName" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StepType.MenuGroupName">
      <summary><para>Note: This property is obsolete.</para></summary>
      <remarks>Specifies the step type menu group to which the step type belongs.
This property corresponds to the default group name of the step type in the Groups and Step Types control of the Step Type Menu Editor dialog box. Instead of using this property, use the Step Type Menu Editor dialog box and save the step type in a type palette file. TestStand uses this value for the initial group for a step type if no Step Type menu data for the step type exists in TestExec.ini or in a type palette file. TestStand saves Step Type menu data with type palette files automatically and also saves the current configuration in TestExec.ini. When you redistribute a type palette file, TestStand merges the Step Type menu data with the current Step Type menu data stored in the TestExec.ini file of the station. Sequence files do not store Step Type menu data. However, because TestStand stores data for step types stored in sequence files in the TestExec.ini of the station on which the step types have been loaded, you can configure the location of those step types.</remarks>
      <seealso cref="&quot;Step Type Menu Editor&quot;javascript:RefLink('/InfoTopics/DB_Step_Type_Menu_Editor.htm')" />
      <seealso cref="StepType.MenuItemNameExpr" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StepType.ModuleLoadOption">
      <summary>Specifies the option that determines when TestStand loads the code module for the steps of this type.</summary>
      <remarks>The <c>SequenceFile.ModuleLoadOption</c> property takes precedence over this property, unless the value of the <c>SequenceFile.ModuleLoadOption</c> property is <c>LoadOption_UseStepLoadOption</c>.</remarks>
      <seealso cref="SequenceFile.ModuleLoadOption" />
      <seealso cref=" Step.ModuleLoadOption" />
      <seealso cref="StepType.ModuleUnloadOption" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StepType.ModuleUnloadOption">
      <summary>Specifies the option that determines when TestStand unloads the code module for the steps of this type.</summary>
      <remarks>The <c>SequenceFile.ModuleUnloadOption</c> property takes precedence over this property unless the value of the <c>SequenceFile.ModuleUnloadOption</c> property is <c>UnloadOption_UseStepUnloadOption</c>.</remarks>
      <seealso cref="SequenceFile.ModuleUnloadOption" />
      <seealso cref="StepType.ModuleUnloadOption" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StepType.RunMode">
      <summary>Specifies the run mode of the step.</summary>
      <remarks>This property is the run mode TestStand stores for steps of this type in the sequence file.</remarks>
      <seealso cref="RunModes" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StepType.EvalPrecondForInteractiveExecution">
      <summary>Specifies whether TestStand evaluates the step precondition when you run the step interactively.</summary>
      <seealso cref="&quot;Execution tab&quot;javascript:RefLink('/InfoTopics/DB_Station_Opt_Exe_Tab.htm')" />
      <seealso cref="&quot;Station Options dialog box&quot;javascript:RefLink('/InfoTopics/DB_Station_Opt.htm')" />
      <seealso cref="StepType.Precondition" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StepType.WindowActivation">
      <summary>Specifies whether the TestStand application activates its window when the step completes.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StepType.RecordResult">
      <summary><para>Note: This property is obsolete. Use the StepType.ResultRecordingOption property instead.</para></summary>
      <remarks>Specifies whether to record the Result properties of the step. If you set this property to <c>True</c>, TestStand records the result of the step unless the Engine.DisableResults property is <c>True</c> or the Sequence.DisableResults property is <c>True</c>.
You can override this setting with the StationOptions.DisableResults and <c>Sequence.DisableResults</c> properties.
For steps that loop, use the StepType.RecordLoopIterationResults property to specify whether to add step results to the sequence result list after each loop iteration.</remarks>
      <seealso cref="Engine.DisableResults" />
      <seealso cref="Sequence.DisableResults" />
      <seealso cref="StationOptions.DisableResults" />
      <seealso cref="StepType.RecordLoopIterationResults" />
      <seealso cref="StepType.ResultRecordingOption" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StepType.StepFailCausesSequenceFail">
      <summary>Specifies whether failure of the step causes the sequence to fail.</summary>
      <remarks>If this property is <c>True</c> and the step fails, TestStand sets the internal status property of the sequence that contains the step to <c>Failure</c>. If the Sequence.FailureAction property is <c>True</c> for the sequence, the execution jumps to the Cleanup step group of the sequence.</remarks>
      <seealso cref="Sequence.FailureAction" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StepType.IgnoreRTE">
      <summary>Specifies to prevent the step from reporting a run-time error to the sequence.</summary>
      <remarks>When a step causes a run-time error, the step stops executing and TestStand sets the status of the step to <c>Error</c>. If you set this property to <c>False</c>, TestStand also sets the internal status of the sequence to <c>Error</c>, and execution branches to the Cleanup step group for the sequence.
If you set this property to <c>True</c>, TestStand does not set the internal status of the sequence to <c>Error</c>. Instead, TestStand resets the <c>Error.Occurred</c> property of the step to <c>False</c> and execution continues normally with the next step.
The value for the <c>Result.Status</c> property remains set to <c>Error</c> for the step.</remarks>
      <seealso cref="StationOptions.RTEOption" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StepType.PassAction">
      <summary>Specifies the type of post action you want to occur if the step passes.</summary>
      <remarks>Assign a PostActionValues string constant to the property to specify the type of post action to perform.</remarks>
      <seealso cref="PostActionValues" />
      <seealso cref="StepType.FailAction" />
      <seealso cref="StepType.PassActionTargetByExpr" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StepType.PassActionTargetByExpr">
      <summary>Specifies the target for the post action the StepType.PassAction property specifies.</summary>
      <remarks><para><para>&#160;&#160;&#160;&#160;* If the <c>StepType.PassAction</c> property is <c>PostAction_GotoStep</c>, the target is the name of the step.</para><para>&#160;&#160;&#160;&#160;* If the <c>StepType.PassAction</c> property is <c>PostAction_CallCallback</c>, the target is the name of the callback sequence.</para><para>&#160;&#160;&#160;&#160;* For all other types of post actions, the target property is not used.</para></para>
This value is an expression. You can set the value with the name of the property that stores the target or with a string constant. A string constant is the name of the target enclosed in double quotation marks.</remarks>
      <seealso cref="StepType.FailAction" />
      <seealso cref="StepType.FailActionTargetByExpr" />
      <seealso cref="StepType.PassAction" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StepType.FailAction">
      <summary>Specifies the type of post action you want to occur if the step fails.</summary>
      <remarks>Assign a PostActionValues string constant to the property to specify the type of post action to perform.</remarks>
      <seealso cref="PostActionValues" />
      <seealso cref="StepType.FailActionTargetByExpr" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StepType.FailActionTargetByExpr">
      <summary>Specifies the target for the post action the StepType.FailAction property specifies.</summary>
      <remarks><para><para>&#160;&#160;&#160;&#160;* If the <c>StepType.FailAction</c> is <c>PostAction_GotoStep</c>, the target is the name of the step.</para><para>&#160;&#160;&#160;&#160;* If the <c>StepType.FailAction</c> is <c>PostAction_CallCallback</c>, the target is the name of the callback sequence.</para><para>&#160;&#160;&#160;&#160;* For all other types of post actions, the target property is not used.</para></para>
This value is an expression. You can set the value with the name of the property that stores the name of the target or with a string constant. A string constant is the name of the target enclosed in double quotation marks.</remarks>
      <seealso cref="StepType.FailAction" />
      <seealso cref="StepType.PassAction" />
      <seealso cref="StepType.PassActionTargetByExpr" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StepType.CustomTrueAction">
      <summary>Specifies the type of action you want to occur when the custom post action expression evaluates to <c>True</c>.</summary>
      <remarks>Assign a PostActionValues string constant to the property to specify the type of post action to perform.</remarks>
      <seealso cref="PostActionValues" />
      <seealso cref="StepType.CustomActionExpression" />
      <seealso cref="StepType.CustomFalseAction" />
      <seealso cref="StepType.CustomFalseActionTargetByExpr" />
      <seealso cref="StepType.CustomTrueActionTargetByExpr" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StepType.CustomTrueActionTargetByExpr">
      <summary>Specifies the target for the post action the StepType.CustomTrueAction property specifies.</summary>
      <remarks><para><para>&#160;&#160;&#160;&#160;* If the <c>StepType.CustomTrueAction</c> property is PostAction_GotoStep, the target is the name of the step or the ID of the step. If you specify the target by name, the target step must reside in the same step group. If you specify the target by ID, the target step can reside in any step group in the sequence.</para><para>&#160;&#160;&#160;&#160;* If the <c>StepType.CustomTrueAction</c> is PostAction_CallCallback, the target is the name of the callback sequence.</para><para>&#160;&#160;&#160;&#160;* For all other types of post actions, the target property is not used.</para></para>
This value is an expression. You can set the value with the name of the property that stores the name of the target or with a string constant. A string constant is the name of the target enclosed in double quotation marks.</remarks>
      <seealso cref="PostActionValues" />
      <seealso cref="StepType.CustomActionExpression" />
      <seealso cref="StepType.CustomFalseAction" />
      <seealso cref="StepType.CustomFalseActionTargetByExpr" />
      <seealso cref="StepType.CustomTrueAction" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StepType.CustomFalseAction">
      <summary>Specifies the type of action you want to occur when the custom post action expression evaluates to <c>False</c>.</summary>
      <remarks>Assign a PostActionValues string constant to the property to specify the type of post action to perform.</remarks>
      <seealso cref="PostActionValues" />
      <seealso cref="StepType.CustomActionExpression" />
      <seealso cref="StepType.CustomFalseActionTargetByExpr" />
      <seealso cref="StepType.CustomTrueAction" />
      <seealso cref="StepType.CustomTrueActionTargetByExpr" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StepType.CustomFalseActionTargetByExpr">
      <summary>Specifies the target for the post action the StepType.CustomFalseAction property specifies.</summary>
      <remarks><para><para>&#160;&#160;&#160;&#160;* If the <c>StepType.CustomFalseAction</c> property is PostAction_GotoStep, the target is the name of the step or the ID of the step. If you specify the target by name, the target step must reside in the same step group. If you specify the target by ID, the target step can reside in any step group in the sequence.</para><para>&#160;&#160;&#160;&#160;* If the <c>StepType.CustomFalseAction</c> property is PostAction_CallCallback, the target is the name of the callback sequence.</para><para>&#160;&#160;&#160;&#160;* For all other types of post actions, the target property is not used.</para></para>
This value is an expression. You can set the value with the name of the property that stores the name of the target or with a string constant. A string constant is the name of the target enclosed in double quotation marks.</remarks>
      <seealso cref="PostActionValues" />
      <seealso cref="StepType.CustomActionExpression" />
      <seealso cref="StepType.CustomFalseAction" />
      <seealso cref="StepType.CustomTrueAction" />
      <seealso cref="StepType.CustomTrueActionTargetByExpr" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StepType.CustomActionExpression">
      <summary>Specifies the custom post action condition expression for the step.</summary>
      <seealso cref="StepType.CustomFalseAction" />
      <seealso cref="StepType.CustomFalseActionTargetByExpr" />
      <seealso cref="StepType.CustomTrueAction" />
      <seealso cref="StepType.CustomTrueActionTargetByExpr" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StepType.AppliesToBlockStructure">
      <summary>Specifies whether this step defines or operates according to the block structure of the sequence. If this property is not set, the step type ignores the values of the StepType.BlockStartTypes and StepType.BlockEndTypes properties.</summary>
      <seealso cref="StepType.BlockEndTypes" />
      <seealso cref="StepType.BlockStartTypes" />
      <seealso cref="StepType.CanEncapsulate" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StepType.BlockStartTypes">
      <summary>Specifies a comma-separated list of step type names. Steps of this type end blocks started by steps of any type in the list.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StepType.BlockEndTypes">
      <summary>Specifies a comma-separated list of step type names. Steps of any type in the list end blocks started by steps of this type.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StepType.SwitchExecEnabled">
      <summary>Specifies whether to perform a switching operation for the step. The step performs the switching operation the StepType.SwitchExecOperation property specifies for the virtual device the StepType.SwitchExecVirtualDevice property specifies. 
<para>Note: This feature is available only when you install NI Switch Executive software.</para></summary>
      <seealso cref="StepType.SwitchExecOperation" />
      <seealso cref="StepType.SwitchExecVirtualDevice" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StepType.SwitchExecVirtualDevice">
      <summary>Specifies an expression TestStand evaluates at run time to determine the virtual device name on which to perform the switching operation.</summary>
      <remarks><para>Note: The NI Switch Executive software in Measurement &amp; Automation Explorer defines the virtual device name.</para></remarks>
      <seealso cref="StepType.SwitchExecEnabled" />
      <seealso cref="StepType.SwitchExecOperation" />
      <seealso cref="&#xD;&#xA;" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StepType.SwitchExecOperation">
      <summary>Specifies whether to connect or disconnect the routes the <c>StepType.SwitchExecRoutesToConnect</c> and <c>StepType.SwitchExecRoutesToDisconnect</c> properties specify, or disconnect all previously connected routes for a virtual device.
<para>Note: This operation returns as soon as the instrument is ready for another operation, which might be before or after the switches involved settle. Enable SwitchExecWaitForDebounce if you want to wait until all switches have debounced.</para></summary>
      <seealso cref="Step.SwitchExecOperationOrder" />
      <seealso cref="StepType.SwitchExecRoutesToConnect" />
      <seealso cref="StepType.SwitchExecRoutesToDisconnect" />
      <seealso cref="StepType.SwitchExecVirtualDevice" />
      <seealso cref="StepType.SwitchExecWaitForDebounce" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StepType.SwitchExecRoutesToConnect">
      <summary>Specifies an expression TestStand evaluates at run time to determine the routes to connect when the value of the StepType.SwitchExecOperation property is Connect or ConnectDisconnect.
<para>Note: The expression must be a valid route specification string the NI Switch Executive configuration defines for the virtual device name specified by StepType.SwitchExecVirtualDevice. The string can be a combination of route group alias names, route names, and physical route paths. You can use the SwitchFindRoute expression function to dynamically determine a physical route path at run time.</para></summary>
      <seealso cref="&quot;Route Specification String&quot;javascript:RefLink('/InfoTopics/Route_Spec_String.htm')" />
      <seealso cref="StepType.SwitchExecOperation" />
      <seealso cref="StepType.SwitchExecVirtualDevice" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StepType.SwitchExecRoutesToDisconnect">
      <summary>Specifies an expression TestStand evaluates at run time to determine the routes to disconnect when the value of the StepType.SwitchExecOperation property is Disconnect or ConnectDisconnect.
<para>Note: The expression must be a valid route specification string the NI Switch Executive configuration defines for the virtual device name the  StepType.SwitchExecVirtualDevice property specifies. The string can be a combination of route group alias names, route names, and physical route paths. You can use the SwitchFindRoute expression function to dynamically determine a physical route path at run time.</para></summary>
      <seealso cref="&quot;Route Specification String&quot;javascript:RefLink('/InfoTopics/Route_Spec_String.htm')" />
      <seealso cref="StepType.SwitchExecOperation" />
      <seealso cref="StepType.SwitchExecVirtualDevice" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StepType.SwitchExecMulticonnectMode">
      <summary>Specifies the behavior when more than one connection operation occurs on a specific route.
<para>Note: If the value of this property is Multiconnect, a route can exist longer if another step specifies a lifetime for the same route.</para></summary>
      <seealso cref="StepType.SwitchExecOperation" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StepType.SwitchExecOperationOrder">
      <summary>Specifies whether the Disconnect operation occurs before or after the Connect operation when the value of the StepType.SwitchExecOperation property is <c>ConnectDisconnect</c>.</summary>
      <seealso cref="StepType.SwitchExecOperation" />
      <seealso cref="StepType.SwitchExecVirtualDevice" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StepType.SwitchExecConnectionLifetime">
      <summary>Specifies the lifetime TestStand applies to routes when the value of the StepType.SwitchExecOperation property is <c>Connect</c> or <c>ConnectDisconnect</c>. You can specify whether you want the route to exist until manually disconnected later or until the step, sequence, thread, or execution completes.
<para>Note: If the value of the StepType.SwitchExecMulticonnectMode property is <c>Multiconnect</c>, a route can exist longer if another step specifies a lifetime for the same route. Selecting a lifetime other than <c>Manual</c> guarantees that the route stays connected as long as the step, sequence, thread, or execution in which you connect is executing. If you manually disconnect a previously connected route using a non-manual lifetime setting, TestStand releases the reference to the route for the last step that performed a connect action for the route.</para></summary>
      <seealso cref="StepType.SwitchExecOperation" />
      <seealso cref="StepType.SwitchExecMulticonnectMode" />
      <seealso cref="&#xD;&#xA;" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StepType.SwitchExecWaitForDebounce">
      <summary>Specifies if the operation the StepType.SwitchExecOperation property specifies waits for all switches to debounce before returning to TestStand.
<para>Note: The wait for debounce occurs after both the Connect and Disconnect operations are complete.</para></summary>
      <seealso cref="StepType.SwitchExecOperation" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StepType.CodeTemplates">
      <summary>Returns the code templates for this step type.</summary>
      <seealso cref="CodeTemplate" />
      <seealso cref="CodeTemplates" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StepType.ResultRecordingOption">
      <summary>Specifies whether to record the result properties of the step.</summary>
      <remarks>For steps that loop, use the Step.RecordLoopIterationResults property to specify to add step results to the sequence result list after each loop iteration.</remarks>
      <seealso cref="Step.RecordLoopIterationResults" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StepType.CanEncapsulate">
      <summary>Specifies whether this step and a corresponding end step can surround a block of contiguous steps.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StepType.Category">
      <summary></summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.MenuItemProperties">
      <summary>Use these property names with the property objects the Engine.GetInsertStepMenuStructure, Engine.GetInsertVariableMenuStructure, and Step.GetEditSubstepMenuStructure methods return to access information about menu structures.</summary>
      <seealso cref="Engine.GetInsertStepMenuStructure" />
      <seealso cref="Engine.GetInsertVariableMenuStructure" />
      <seealso cref="Engine.GetToolMenuStructure" />
      <seealso cref="Step.EditAsReadOnly" />
      <seealso cref="Step.GetEditSubstepMenuStructure" />
      <seealso cref="StepType.GetSubstep" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.MenuItemProperties.Menu_NameProp">
      <summary>(Value: &quot;Name&quot;) String value that specifies the text to display for the menu item.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.MenuItemProperties.Menu_IsSubmenuProp">
      <summary>(Value: &quot;IsSubMenu&quot;) Boolean value that specifies if the menu item is a submenu. Use the <c>Menu_MenuItemsProp</c> to access the submenu items.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.MenuItemProperties.Menu_SeparatorAboveProp">
      <summary>(Value: &quot;SeparatorAbove&quot;) Boolean value that specifies if a separator exists above the menu item.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.MenuItemProperties.Menu_IsDimmedProp">
      <summary>(Value: &quot;IsDimmed&quot;) Boolean value that specifies if the menu item is disabled.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.MenuItemProperties.Menu_SubstepIndexProp">
      <summary>(Value: &quot;SubstepIndex&quot;) Number value that is the index of the substep for this menu item. Only the StepType.GetSubstep method sets this property.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.MenuItemProperties.Menu_MenuItemsProp">
      <summary>(Value: &quot;MenuItems&quot;) Array of property objects that represent the menu items in a submenu.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.MenuItemProperties.Menu_ToolIDProp">
      <summary>(Value: &quot;ToolMenuId&quot;) Number value that specifies the Tools menu ID for the menu item. Only  the Engine.GetToolMenuStructure method sets this property.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.MenuItemProperties.Menu_EditsSelectedFileProp">
      <summary>(Value: &quot;EditsSelectedFile&quot;) Boolean value that specifies whether a Tools menu item edits the selected file. Only the Engine.GetToolMenuStructure method set this property.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.MenuItemProperties.Menu_SupportsReadOnlyProp">
      <summary>(Value: &quot;SupportsReadOnly&quot;) Boolean value that specifies if an Edit substep menu item supports launching a dialog box as read-only when the Step.EditAsReadOnly property is <c>True</c>.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.MenuItemProperties.Menu_HasEditPanelProp">
      <summary>(Value: &quot;HasEditPanel&quot;) Boolean value that specifies whether an Edit substep menu item has a corresponding edit panel that displays in the Step Settings pane of the sequence editor. The sequence editor does not invoke an edit substep if the substep has an edit panel.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.FrontEndCallbacks">
      <summary>This constant represents the name of a Front-End callback sequence. Use this constant to specify the sequenceName parameter of the Engine.CallFrontEndCallbackEx method. </summary>
      <seealso cref="DefaultModelCallbacks" />
      <seealso cref="Engine.CallFrontEndCallbackEx" />
      <seealso cref="SeqFileCallbacks" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.FrontEndCallbacks.FrontEndCback_LoginLogout">
      <summary>(Value: &quot;LoginLogout&quot;) Specifies the callback used to log in and log out the current user.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.WindowsFileDialogFlags">
      <summary>These constants represent the options you can use with the win32Flags parameter of the Engine.DisplayFileDialog method. Use the bitwise-OR operator to specify more than one option.
These flags are the same ones you pass to the Microsoft Windows Software Development Kit functions GetOpenFileName and GetSaveFileName.</summary>
      <seealso cref="Engine.DisplayFileDialog" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.WindowsFileDialogFlags.WinFileDlg_READONLY">
      <summary>(Value: 0x1) Causes the Read Only option to be selected initially when the dialog box is created. This flag indicates the state of the Read Only option when the dialog box is closed.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.WindowsFileDialogFlags.WinFileDlg_OVERWRITEPROMPT">
      <summary>(Value: 0x2) Causes the dialog box to generate a message box if the selected file already exists. The user must confirm whether to overwrite the file.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.WindowsFileDialogFlags.WinFileDlg_HIDEREADONLY">
      <summary>(Value: 0x4) Hides the Read Only option.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.WindowsFileDialogFlags.WinFileDlg_NOCHANGEDIR">
      <summary>(Value: 0x8) Restores the current directory to the original value if the user changed the directory while searching for files.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.WindowsFileDialogFlags.WinFileDlg_SHOWHELP">
      <summary>(Value: 0x10) Do not use this flag because it has no effect. The Help button is always visible.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.WindowsFileDialogFlags.WinFileDlg_ENABLEHOOK">
      <summary>(Value: 0x20) Do not use this flag because it has no effect.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.WindowsFileDialogFlags.WinFileDlg_ENABLETEMPLATE">
      <summary>(Value: 0x40) Do not use this flag because it has no effect.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.WindowsFileDialogFlags.WinFileDlg_ENABLETEMPLATEHANDLE">
      <summary>(Value: 0x80) Do not use this flag because it has no effect.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.WindowsFileDialogFlags.WinFileDlg_NOVALIDATE">
      <summary>(Value: 0x100) Specifies that the dialog box allow invalid characters in the returned filename.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.WindowsFileDialogFlags.WinFileDlg_ALLOWMULTISELECT">
      <summary>(Value: 0x200) Specifies that the file list allows multiple selections. </summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.WindowsFileDialogFlags.WinFileDlg_EXTENSIONDIFFERENT">
      <summary>(Value: 0x400) Do not use this flag because it has no effect.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.WindowsFileDialogFlags.WinFileDlg_PATHMUSTEXIST">
      <summary>(Value: 0x800) Specifies that you can type only valid paths and filenames. If this flag is used and the you type an invalid path, the dialog box displays a warning.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.WindowsFileDialogFlags.WinFileDlg_FILEMUSTEXIST">
      <summary>(Value: 0x1000) Specifies that you can select only existing files. If you enter a file that does not exist, the dialog box displays a warning message. If this flag is specified, the <c>WinFileDlg_PATHMUSTEXIST</c> flag is also used.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.WindowsFileDialogFlags.WinFileDlg_CREATEPROMPT">
      <summary>(Value: 0x2000) If the user specifies a file that does not exist, this flag causes the dialog box to prompt the user for permission to create the file.  If the user chooses to create the file, the dialog box closes, and the function returns the specified name. Otherwise, the dialog box remains open. This option does not actually create the file. If you use this flag with the <c>WinFileDlg_ALLOWMULTISELECT</c> flag, the dialog box allows the user to specify only one non-existent file.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.WindowsFileDialogFlags.WinFileDlg_SHAREAWARE">
      <summary>(Value: 0x4000) Do not use this flag because it has no effect.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.WindowsFileDialogFlags.WinFileDlg_NOREADONLYRETURN">
      <summary>(Value: 0x8000) Do not use this flag because it has no effect.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.WindowsFileDialogFlags.WinFileDlg_NOTESTFILECREATE">
      <summary>(Value: 0x10000) Do not use this flag because it has no effect.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.WindowsFileDialogFlags.WinFileDlg_NONETWORKBUTTON">
      <summary>(Value: 0x20000) Hides and disables the Network option.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.WindowsFileDialogFlags.WinFileDlg_NOLONGNAMES">
      <summary>(Value: 0x40000) Do not use this flag because it has no effect.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.WindowsFileDialogFlags.WinFileDlg_EXPLORER">
      <summary>(Value: 0x80000) Do not use this flag because it has no effect.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.WindowsFileDialogFlags.WinFileDlg_NODEREFERENCELINKS">
      <summary>(Value: 100000) Directs the dialog box to return the path and filename of the selected shortcut (<c>.LNK</c>) file. If this value is not specified, the dialog box returns the path and filename of the file the shortcut references.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.WindowsFileDialogFlags.WinFileDlg_LONGNAMES">
      <summary>(Value: 0x200000) Do not use this flag because it has no effect.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.WindowsFileDialogFlags.WinFileDlg_ENABLEINCLUDENOTIFY">
      <summary>(Value: 0x400000) Do not use this flag because it has no effect.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.WindowsFileDialogFlags.WinFileDlg_ENABLESIZING">
      <summary>(Value: 0x800000) Do not use this flag because it has no effect.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.WindowsFileDialogFlags.WinFileDlg_DONTADDTORECENT">
      <summary>(Value: 0x2000000) Prevents the system from adding a link to the selected file in the file system directory that contains the most recently used documents for the user.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.WindowsFileDialogFlags.WinFileDlg_FORCESHOWHIDDEN">
      <summary>(Value: 0x10000000) Forces the showing of system and hidden files, thus overriding the user setting to show or not show hidden files. However, a file marked both system and hidden is not shown.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.CommonDialogOptions">
      <summary>These constants represent the values you can use with the dlgOptions parameter of several methods that display dialog boxes. Use the bitwise-OR operator to specify more than one option.</summary>
      <seealso cref="Engine.AppMainHwnd" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.CommonDialogOptions.CommonDlgOption_ModalToAppMainWind">
      <summary>(Value: 0x10000) By default, the dialog box is modal to the last active window of the calling thread, or if none exists, to the last active window from AppMainHwnd. If you enable this option, the dialog box is modal with respect to the window handle the Engine.AppMainHwnd property returns. Typically, you do not need to set this option.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.CommonDialogOptions.CommonDlgOption_ReadOnly">
      <summary>(Value: 0x20000) Use this option to create a read-only version of the dialog box.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.CommonDialogOptions.CommonDlgOption_NoOptions">
      <summary>(Value: 0x0) No options.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.CommonDialogOptions.CommonDlgOption_DisableGotoLocation">
      <summary>(Value: 0x80000) Use this option to specify that if the error message contains location information, the dialog does not offer the user the option to go to the location. </summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.ArrayBoundsDialogOptions">
      <summary>These constants represent the options you can use with the dlgOptions parameter of the PropertyObject.DisplayArrayBoundsDialog method. Use the bitwise-OR operator to specify more than one option.</summary>
      <seealso cref="&quot;Array Bounds dialog box&quot;javascript:RefLink('/InfoTopics/DB_Array_Bounds.htm')" />
      <seealso cref="PropertyObject.DisplayArrayBoundsDialog" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ArrayBoundsDialogOptions.ArrayBounds_InitializeArray">
      <summary>(Value: 0x1) Initializes the array bounds to a default value ([0..9]) before launching the Array Bounds dialog box.</summary>
      <seealso cref="&quot;Array Bounds dialog box&quot;javascript:RefLink('/InfoTopics/DB_Array_Bounds.htm')" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ArrayBoundsDialogOptions.ArrayBounds_NoOptions">
      <summary>(Value: 0x0) No options.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ArrayBoundsDialogOptions.ArrayBounds_ReturnOkCancel">
      <summary>(Value: 0x2) Forces the dialog box to return <c>True</c> if you click OK and <c>False</c> if you click Cancel. </summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.BrowseExprDialogOptions">
      <summary>These constants represent the options you can use with the dlgOptions parameter of the Engine.DisplayBrowseExprDialogEx method and the ExpressionEdit.BrowseExprDialogOptions property. Use the bitwise-OR operator to specify more than one option.

</summary>
      <seealso cref="Engine.AppMainHwnd" />
      <seealso cref="Engine.DisplayBrowseExprDialogEx" />
      <seealso cref="&quot;Expression Browser dialog box&quot;javascript:RefLink('/InfoTopics/DB_Exp_Browser.htm')" />
      <seealso cref="&quot;ExpressionEdit.BrowseExprDialogOptions&quot;javascript:UILink('/RefTopics/ExpressionEdit_BrowseExprDialogOptions_P.htm')" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.BrowseExprDialogOptions.BrowseExpr_UsesCRLF">
      <summary>(Value: 0x1) Use this option to specify that the initial expression string and the output expression string uses a carriage return/linefeed combination (&quot;\r\n&quot;) instead of a simple linefeed (&quot;\n&quot;) to indicate the end of a line of text. This option applies only to the  Engine.DisplayBrowseExprDialogEx method.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.BrowseExprDialogOptions.BrowseExpr_ModalToAppMainWind">
      <summary>(Value: 0x10000) By default, the dialog box is modal to the last active window of the calling thread, or if none exists, to the last active window from AppMainHwnd. If you set this option, the dialog box is modal with respect to the window handle of the Engine.AppMainHwnd property. Typically, you do not need to set this option.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.BrowseExprDialogOptions.BrowseExpr_NoContextMenus">
      <summary>(Value: 0x2) Use this option to disable the right-click context menus in the list control that allow users to insert, rename, and delete.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.BrowseExprDialogOptions.BrowseExpr_NoOptions">
      <summary>(Value: 0x0) No options.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.BrowseExprDialogOptions.BrowseExpr_ForViewingTypes">
      <summary>(Value: 0x4) Use this option to specify that the Expression Browser dialog box show properties hidden in an instance of the type.</summary>
      <seealso cref="&quot;Expression Browser dialog box&quot;javascript:RefLink('/InfoTopics/DB_Exp_Browser.htm')" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.StepDescriptionOptions">
      <summary>These constants represent the options you can use with the options parameter of the Step.GetDescriptionEx and Step.GetStepSettingsString methods.</summary>
      <seealso cref="Step.GetDescriptionEx" />
      <seealso cref="Step.GetExecutionFlowString" />
      <seealso cref="Step.GetStepSettingsString" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.StepDescriptionOptions.StepDescOption_Long">
      <summary>(Value: 0x1) Returns the longest description available for the step. If you do not specify this option, the adapter settings determine whether to return a long description.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.StepDescriptionOptions.StepDescOption_NoOptions">
      <summary>(Value: 0x0) No options.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.StepDescriptionOptions.StepDescOption_IncludeBreakpoint">
      <summary>(Value: 0x02) Returns the available breakpoint description with the step description. Use this option with the Step.GetExecutionFlowString method. <para>Note: Only conditional breakpoints provide a description.</para></summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.SaveAllSeqFileOptions">
      <summary>These constants represent the options you can use with the options parameter of the Engine.SaveAllModifiedSeqFiles method. Use the bitwise-OR operator to specify more than one option.</summary>
      <seealso cref="Engine.SaveAllModifiedSeqFiles" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SaveAllSeqFileOptions.SaveAllSeqFiles_PromptUser">
      <summary>(Value: 0x1) Prompts the user with a dialog box containing Yes, No, and Cancel buttons before saving the file. </summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SaveAllSeqFileOptions.SaveAllSeqFiles_NoOptions">
      <summary>(Value: 0x0) No options.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.UsersFile">
      <summary>The UsersFile class represents the file that contains a list of TestStand users and user profiles. Use this class to add or delete users and user profiles. You can obtain a reference to the users file TestStand loads at startup with the Engine.UsersFile property. 
To perform read or write operations for objects from the UsersFile class, obtain a reference to the PropertyObjectFile interface by using the AsPropertyObjectFile methods, then use the PropertyObjectFile.ReadFile and PropertyObjectFile.WriteFile methods.</summary>
      <seealso cref=".AsPropertyObjectFile" />
      <seealso cref="Engine.UsersFile" />
      <seealso cref="PropertyObjectFile.ReadFile" />
      <seealso cref="PropertyObjectFile.WriteFile" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.UsersFile.UserList">
      <summary>Specifies the array of users.</summary>
      <remarks>Use the methods of the PropertyObject class to add or remove users from this object to change the TestStand user list, and to access the subproperties of each element in the array of User objects. Refer to User Data Type Subproperties for the default subproperties that TestStand defines.</remarks>
      <returns>Returns a property object that is an array of User objects.</returns>
      <seealso cref="PropertyObject" />
      <seealso cref="User" />
      <seealso cref="&quot;User Data Type Subproperties&quot;javascript:RefLink('/InfoTopics/UserManWin_User_Data_Type_Subproperties.htm')" />
      <seealso cref="UserPrivileges" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.UsersFile.UserProfileList">
      <summary>Specifies the array of user profiles.
<para>Note: This property is obsolete. Use UserGroupList instead.</para></summary>
      <remarks>Use the methods of the PropertyObject class to add or remove user profiles from this object to change the TestStand user list, and to access the subproperties of each element in the array of User objects.</remarks>
      <returns>Returns a property object that is an array of User objects.</returns>
      <seealso cref="PropertyObject" />
      <seealso cref="User" />
      <seealso cref="&quot;User Data Type Subproperties&quot;javascript:RefLink('/InfoTopics/UserManWin_User_Data_Type_Subproperties.htm')" />
      <seealso cref="UserPrivileges" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.UsersFile.ReloadFromDisk">
      <summary>Reloads the users file from disk.</summary>
      <remarks><para>Note: After reloading the user file, any references to the UsersFile.UserList property and other users will be out of date.</para></remarks>
      <seealso cref="UsersFile.UserList" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.UsersFile.AsPropertyObjectFile">
      <summary>Returns the underlying PropertyObjectFile that represents the UsersFile object. </summary>
      <seealso cref="PropertyObjectFile" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.UsersFile.UserGroupList">
      <summary>Specifies the array of User objects.</summary>
      <remarks>Use the methods of the PropertyObject class to add or remove user groups from this object to change the TestStand user group list, and to access the subproperties of each element in the array of group objects. Use the User.Members property to edit the user names that are members of the group. Refer to User Data Type Subproperties for the default subproperties TestStand defines.</remarks>
      <returns>Returns a property object that is an array of User objects.</returns>
      <seealso cref="PropertyObject" />
      <seealso cref="User" />
      <seealso cref="&quot;User Data Type Subproperties&quot;javascript:RefLink('/InfoTopics/UserManWin_User_Data_Type_Subproperties.htm')" />
      <seealso cref="User.Members" />
      <seealso cref="UserPrivileges" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.EvaluationOptions">
      <summary>These constants represent the options you can use with the evaluationOptions parameter of the PropertyObject.EvaluateEx, Expression.Evaluate,  Expression.Validate, ExpressionEdit.Evaluate, and Engine.CheckExpression methods. Use the bitwise-OR operator to specify more than one option.</summary>
      <seealso cref="Engine.CheckExpression" />
      <seealso cref="Expression.Evaluate" />
      <seealso cref="Expression.Validate" />
      <seealso cref="&quot;ExpressionEdit.Evaluate&quot;javascript:UILink('/RefTopics/ExpressionEdit_Evaluate_M.htm')" />
      <seealso cref="PropertyObject.EvaluateEx" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.EvaluationOptions.EvalOption_AllowEmptyExpression">
      <summary>(Value: 0x2) Use this option to prevent TestStand from treating empty expressions as syntax errors.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.EvaluationOptions.EvalOption_NoOptions">
      <summary>(Value: 0x0) No options.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.EvaluationOptions.EvalOption_DoNotAlterValues">
      <summary>(Value: 0x1) Use this option to prevent TestStand from altering the value of any variable or property the expression contains. The Expression.Validate and Engine.CheckExpression methods do not use this value because these methods never alter values.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.EvaluationOptions.EvalOption_AllowIndexingEmptyArrays">
      <summary>(Value: 0x4) Use this option to direct TestStand to return a value with a type that is the array element type for empty arrays with subscripts. If you do not specify this option, TestStand treats an empty array with subscripts as an error.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.EvaluationOptions.EvalOption_CreateNonExistentVariables">
      <summary>(Value: 0x8) Use this option to have TestStand create temporary objects for variables that do not exist in an expression. This option is useful when evaluating an expression for error checking if the expression might contain dynamically created variables.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.EvaluationOptions.EvalOption_ForErrorChecking">
      <summary>(Value: 0x10) Use this option to direct TestStand to evaluate the expression in order to check the expression for errors. This option makes errors reported at edit time more closely match errors that might occur at run time. For example, when using this option, expressions do not use short-circuit evaluation, ensuring that TestStand checks the entire expression for errors. This option also enables the behavior of the <c>#NoValidation</c> directive. Expression validation methods, such as Engine.CheckExpression and Expression.ValidateEvaluationType, automatically include this option.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.EvaluationOptions.EvalOption_IgnoreNoValidationDirective">
      <summary>(Value: 0x20) This option disables the behavior of the <c>#NoValidation</c> directive when checking an expression for errors. Use this option to find errors the <c>#NoValidation</c> directive normally suppresses.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.TypeCategories">
      <summary>The following constants represent the categories to which a type can belong:</summary>
      <seealso cref="PropertyObject.TypeCategory" />
      <seealso cref="TypeUsageList" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TypeCategories.TypeCategory_None">
      <summary>(Value: 0) Specifies no data type.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TypeCategories.TypeCategory_StepTypes">
      <summary>(Value: 1) Specifies a step type.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TypeCategories.TypeCategory_CustomDataTypes">
      <summary>(Value: 2) Specifies a custom data type.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TypeCategories.TypeCategory_BuiltinDataTypes">
      <summary>(Value: 3) Specifies a built-in data type.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.WorkspaceObjectTypes">
      <summary>This data type contains values that specify the type of a workspace object. Use the values of this enumeration with the WorkspaceObject.ObjectType property.
</summary>
      <seealso cref="WorkspaceObject.ObjectType" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.WorkspaceObjectTypes.WorkspaceObjType_WorkspaceFile">
      <summary>(Value: 1) Specifies a workspace file object.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.WorkspaceObjectTypes.WorkspaceObjType_ProjectFile">
      <summary>(Value: 2) Specifies a project file object.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.WorkspaceObjectTypes.WorkspaceObjType_Folder">
      <summary>(Value: 3) Specifies a folder object. Folders do not have a pathname associated with them.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.WorkspaceObjectTypes.WorkspaceObjType_SequenceFile">
      <summary>(Value: 4) Specifies a sequence file object.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.WorkspaceObjectTypes.WorkspaceObjType_OtherFile">
      <summary>(Value: 5) Specifies a file other than a sequence file, workspace file, or project file, such as a code module. This type of object cannot contain other objects.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.SourceControlCommands">
      <summary>This data type contains values that specify source code control commands. Use one of these values to specify the scCommand parameter of the WorkspaceObject.DoSourceControlCommand and WorkspaceObject.CanDoSourceControlCommand methods. </summary>
      <seealso cref="WorkspaceObject.CanDoSourceControlCommand" />
      <seealso cref="WorkspaceObject.DoSourceControlCommand" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SourceControlCommands.SCCmd_AddToSC">
      <summary>(Value: 1) Adds the specified files to source code control.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SourceControlCommands.SCCmd_RemoveFromSC">
      <summary>(Value: 2) Removes the specified files from source code control.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SourceControlCommands.SCCmd_CheckOut">
      <summary>(Value: 3) Checks out the specified files from source code control.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SourceControlCommands.SCCmd_CheckIn">
      <summary>(Value: 4) Checks in the specified files to source code control.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SourceControlCommands.SCCmd_GetLatest">
      <summary>(Value: 5) Obtains the latest version of the specified files from source code control.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SourceControlCommands.SCCmd_UndoCheckOut">
      <summary>(Value: 6) Undoes the check out of the specified files from source code control.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SourceControlCommands.SCCmd_ShowDifferences">
      <summary>(Value: 7) Shows the differences between the latest version in source code control and the local version of the specified file.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SourceControlCommands.SCCmd_ShowHistory">
      <summary>(Value: 8) Shows the source code control history of the specified file.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SourceControlCommands.SCCmd_ShowProperties">
      <summary>(Value: 9) Shows the source code control properties of the specified file.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SourceControlCommands.SCCmd_ShowProviderOptions">
      <summary>(Value: 10) Launches the source code control provider options dialog box.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.SequenceFileTypes">
      <summary>This data type contains values that specify the type of a sequence file. The constants represent the possible values for the SequenceFile.SequenceFileType property.</summary>
      <seealso cref="SequenceFile.SequenceFileType" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SequenceFileTypes.SeqFileType_Normal">
      <summary>(Value: 0) A normal sequence file.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SequenceFileTypes.SeqFileType_Model">
      <summary>(Value: 1) A process model sequence file.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SequenceFileTypes.SeqFileType_FrontEndCBacks">
      <summary>(Value: 2) The sequence file containing Front-End callbacks.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SequenceFileTypes.SeqFileType_StationCBacks">
      <summary>(Value: 3) The sequence file containing the Test Station callbacks.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SequenceFileTypes.SeqFileType_Template">
      <summary>(Value: 4) The sequence file containing the templates for callback sequences.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.PropertyObjTypeFlags">
      <summary>These constants represent the flags you can set and get on PropertyObject type definitions. Get and set type flags only on PropertyObject objects that are the root objects of type definitions. Use the bitwise-OR operator to specify more than one flag for a particular PropertyObject object.</summary>
      <seealso cref="PropertyFlags" />
      <seealso cref="PropertyObject.GetTypeFlags" />
      <seealso cref="PropertyObject.IsModifiedType" />
      <seealso cref="PropertyObject.IsTypeDefinition" />
      <seealso cref="PropertyObject.SetTypeFlags" />
      <seealso cref="&quot;Type Conflict In File dialog box&quot;javascript:RefLink('/InfoTopics/DB_Type_Conflict_File.htm')" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyObjTypeFlags.PropTypeFlags_NoFlags">
      <summary>(Value: 0x0) No flags.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyObjTypeFlags.PropTypeFlags_NoAutoConvertVersions">
      <summary>(Value: 0x1) If TestStand opens a file containing an already-loaded type and the versions of the type are not the same, it converts the older version to newer version without launching a Type Conflict dialog box or returning an error. If one or both versions of the type has <c>PropTypeFlags_NoAutoConvertVersions</c> set, TestStand does not perform this automatic type conversion.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyObjTypeFlags.PropTypeFlags_NIInstalledType">
      <summary>(Value: 0x2000000) Indicates that the type is an installed TestStand type provided by National Instruments. Do not set this flag.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyObjTypeFlags.PropTypeFlags_IsModifiedType">
      <summary>(Value: 0x4000000) TestStand sets this flag in a type definition object when the user edits the property sheet of the type definition object, adds properties to it, changes a property value, or performs any other action that modifies the type. TestStand does not automatically convert an older version of a type to a newer version if one of them has <c>PropTypeFlags_IsModifiedType</c> set. Instead, TestStand launches a Type Conflict In File dialog box or returns an error. Update the version of the modified type to clear this flag. You can also update and obtain this flag using the PropertyObject.IsModifiedType property.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyObjTypeFlags.PropTypeFlags_DisableEditingInstanceFlags">
      <summary>(Value: 0x10) Set this flag in a type definition to indicate that users are not allowed to change the property flags in instances of the type.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyObjTypeFlags.PropTypeFlags_PreventEditingType">
      <summary>(Value: 0x4) Specifies whether you can edit the type in the sequence editor.
<para>Note: This option applies only to NI-installed types.</para></summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.RestartOptions">
      <summary>These constants represent the options you can use with the options parameter of the Execution.RestartEx method. Use the bitwise-OR operator to specify more than one option.</summary>
      <seealso cref="Execution.RestartEx" />
      <seealso cref="ExecutionTypeMask" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.RestartOptions.RestartOption_BreakOnEntry">
      <summary>(Value: 0x1) Use this option to suspend execution before executing the first step.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.RestartOptions.RestartOption_OverrideNotRestartable">
      <summary>(Value: 0x2) Use this option to restart an execution created with the ExecutionTypeMask.ExecTypeMask_NotRestartable option.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.RestartOptions.RestartOption_NoOptions">
      <summary>(Value: 0x0) No options.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.RestartOptions.RestartOption_BreakOnStepFailure">
      <summary>(Value: 0x4) Specifies if the sequence editor and user interfaces suspend when a step fails. TestStand does not suspend an execution on a failing Sequence Call step if the step that caused the sequence failure already suspended execution.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.RestartOptions.RestartOption_BreakOnSequenceFailure">
      <summary>(Value: 0x8) Specifies if the sequence editor and user interfaces suspend when a failing step causes a sequence failure to first occur. TestStand does not suspend on failing Sequence Call steps already in the stack. If the sequence failure setting is reset, TestStand suspends when the next failing step causes sequence failure.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.ResetTypeInstanceOptions">
      <summary>These constants represent the options you can use with the options parameter of the Engine.ResetTypeInstances method. Use the bitwise-OR operator to specify more than one option.
<para>Note: Avoid using the <c>ResetTypeInst_ResetFlags</c> flag because it might result in unexpected behavior. In most cases, you should not reset certain flags on type instances. For example, the <c>PropFlags_PassByReference</c> flag is set on parameters of Sequence Call steps. Calling the Engine.ResetTypeInstances method on a type can change whether TestStand passes a sequence parameter that is an instance of the type by reference.</para></summary>
      <seealso cref="Engine.ResetTypeInstances" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ResetTypeInstanceOptions.ResetTypeInst_NoOptions">
      <summary>(Value: 0x0) No options.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ResetTypeInstanceOptions.ResetTypeInst_ResetValues">
      <summary>(Value: 0x1) Resets the property values of type instances to the value of the type definition.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ResetTypeInstanceOptions.ResetTypeInst_ResetFlags">
      <summary>(Value: 0x2) Resets the property flags of type instances to the flags of the type definition.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ResetTypeInstanceOptions.ResetTypeInst_RecurseSubProperties">
      <summary>(Value: 0x4) Resets flags or values of subproperties of type instances in addition to the top level object.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.WriteFileFormat">
      <summary>These constants specify the file format version TestStand uses to write a file.
If you save a sequence file in a previous format and the file contains step types not present in the previous version of TestStand or if the file uses features the previous version of TestStand does not support, the sequence file you save will not function correctly.
<para>Note: TestStand does not warn you if the file you save cannot load or run in a previous version of TestStand.</para></summary>
      <seealso cref="PropertyObjectFile.WriteFile" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.WriteFileFormat.WriteFileFormat_TestStand41">
      <summary>(Value: 9) Specifies that TestStand writes out the file using the TestStand 4.1 file format. Save the file in this format to enable TestStand version 4.1 to load the file.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.WriteFileFormat.WriteFileFormat_Current">
      <summary>(Value: 1) Specifies that TestStand writes out the file using the current TestStand file format.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.WriteFileFormat.WriteFileFormat_TestStand4">
      <summary>(Value: 8) Specifies that TestStand writes out the file using the TestStand 4.0 file format. Save the file in this format to enable TestStand version 4.0 to load the file. </summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.WriteFileFormat.WriteFileFormat_TestStand42">
      <summary>(Value: 10) Specifies that TestStand writes out the file using the TestStand 4.2 file format. Save the file in this format to enable TestStand version 4.2 to load the file.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.WriteFileFormat.WriteFileFormat_TestStand45">
      <summary>(Value: 11) Specifies that TestStand writes out the file using the TestStand 2010 file format. Save the file in this format to enable TestStand version 2010 to load the file. TestStand 4.5 is the internal version number for TestStand 2010.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.WriteFileFormat.WriteFileFormat_TestStand50">
      <summary>(Value: 12) Specifies that TestStand writes out the file using the TestStand 2012 file format. Save the file in this format to enable TestStand version 2012 to load the file. TestStand 5.0 is the internal version number for TestStand 2012.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.WriteFileFormat.WriteFileFormat_TestStand_14_0">
      <summary>(Value: 14) Specifies that TestStand writes out the file using the TestStand 2014 file format. Save the file in this format to enable TestStand version 2014 to load the file. TestStand 14.0 is the internal version number for TestStand 2014.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.WriteFileFormat.WriteFileFormat_TestStand51">
      <summary>(Value: 13) Specifies that TestStand writes out the file using the TestStand 2013 file format. Save the file in this format to enable TestStand version 2013 to load the file. TestStand 5.1 is the internal version number for TestStand 2013.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.WriteFileFormat.WriteFileFormat_TestStand_19">
      <summary>(Value: 17) Specifies that TestStand writes out the file using the TestStand 2019 file format. Save the file in this format to enable TestStand version 2019 to load the file. TestStand 19.0 is the internal version number for TestStand 2019.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.WriteFileFormat.WriteFileFormat_TestStand_16_0">
      <summary>(Value: 15) Specifies that TestStand writes out the file using the TestStand 2016 file format. Save the file in this format to enable TestStand version 2016 to load the file. TestStand 16.0 is the internal version number for TestStand 2016.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.WriteFileFormat.WriteFileFormat_TestStand_17">
      <summary>(Value: 16) Specifies that TestStand writes out the file using the TestStand 2017 file format. Save the file in this format to enable TestStand version 2017 to load the file. TestStand 17.0 is the internal version number for TestStand 2017.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.WriteFileFormat.WriteFileFormat_TestStand_20">
      <summary>(Value: 18) Specifies that TestStand writes out the file using the TestStand 2020 file format. Save the file in this format to enable TestStand version 2020 to load the file. TestStand 20.0 is the internal version number for TestStand 2020.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.WriteFileFormat.WriteFileFormat_TestStand_21">
      <summary>(Value: 19) Specifies that TestStand writes out the file using the TestStand 2021 file format. Save the file in this format to enable TestStand version 2021 to load the file. TestStand 21.0 is the internal version number for TestStand 2021.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.WriteFileFormat.WriteFileFormat_TestStand_22">
      <summary>(Value: 20) Specifies that TestStand writes out the file using the TestStand 2022 file format. Save the file in this format to enable TestStand version 2022 to load the file. TestStand 22.0 is the internal version number for TestStand 2022.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.FileVersionAutoIncrement">
      <summary>Use these constants with the StationOptions.SeqFileVersionAutoIncrementOpt property to specify whether to automatically increment a component of the sequence file version when the file is saved. Versions have four components: Major, Minor, Revision and Build. TestStand displays versions using decimal points to separate the components, such as &quot;1.2.3.4&quot;.  </summary>
      <seealso cref="StationOptions.SeqFileVersionAutoIncrementOpt" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.FileVersionAutoIncrement.FileVersionInc_None">
      <summary>(Value: 0) Specifies that sequence file versions are not automatically incremented.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.FileVersionAutoIncrement.FileVersionInc_Major">
      <summary>(Value: 1) Specifies that the major version number is incremented.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.FileVersionAutoIncrement.FileVersionInc_Revision">
      <summary>(Value: 3) Specifies that the revision version number is incremented.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.FileVersionAutoIncrement.FileVersionInc_Minor">
      <summary>(Value: 2) Specifies that the minor version number is incremented.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.FileVersionAutoIncrement.FileVersionInc_Build">
      <summary>(Value: 4) Specifies that the build version number is incremented.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.HierarchicalExecutionFlags">
      <summary>Use these constants to specify the hierarchicalExecutionFlags parameter of the Engine.NewHierarchicalExecution method.</summary>
      <seealso cref="Engine.NewHierarchicalExecution" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.HierarchicalExecutionFlags.HierarchicalExecMask_DontRunSetupAndCleanup">
      <summary>(Value: 0x2) Specifies that a hierarchical execution does not run setup or Cleanup steps when it generates a call stack. This flag applies to the sequences that contain the Sequence Call steps you pass to the sequenceCallSteps parameter of the Engine.NewHierarchicalExecution method.</summary>
      <seealso cref="Engine.NewHierarchicalExecution" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.HierarchicalExecutionFlags.HierarchicalExecMask_RunRemainingSequence">
      <summary>(Value: 0x4) Specifies that the execution continues normally when the call stack unwinds. When the Sequence Call steps return from the call stack the execution generates, the remaining steps execute normally in the sequences that contain the calls.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.HierarchicalExecutionFlags.HierarchicalExecMask_IgnorePreconditions">
      <summary>(Value: 0x8): Specifies that when <c>Engine.NewHierarchicalExecution</c> creates the call stack the arguments specify, it does not check the preconditions of the Sequence Call steps that comprise the call stack.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.EditNumericFormatOptions">
      <summary>These constants represent the options you can use with the evaluationOptions parameter of the Engine.DisplayEditNumericFormatDialogEx method. Use the bitwise-OR operator to specify more than one option.</summary>
      <seealso cref="Engine.AppMainHwnd" />
      <seealso cref="Engine.DisplayEditNumericFormatDialogEx" />
      <seealso cref="&quot;Numeric Format dialog box&quot;javascript:RefLink('/InfoTopics/DB_Numeric_Format.htm')" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.EditNumericFormatOptions.EditNumFormat_NoOptions">
      <summary>(Value: 0) No options.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.EditNumericFormatOptions.EditNumFormat_AllowDefaultFormat">
      <summary>(Value: 0x1) Use this option to allow the user to set the numeric format to the default value in the Numeric Format dialog box.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.EditNumericFormatOptions.EditNumFormat_ModalToAppMainWind">
      <summary>(Value: 0x10000) By default, the dialog box is modal to the last active window of the calling thread, or if none exists, to the last active window from AppMainHwnd. If you set this option, the dialog box is modal with respect to the window handle of the Engine.AppMainHwnd property. Typically, you do not need to set this option.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.SourceControlStatuses">
      <summary>These constants represent the return values of the WorkspaceObject.SourceControlStatus property. Use the bitwise-AND operator with the return value to determine whether any of these flags are set.</summary>
      <seealso cref="WorkspaceObject.SourceControlStatus" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SourceControlStatuses.SCStatus_NotInSC">
      <summary>(Value: 0x0) Specifies that the file is not under source code control.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SourceControlStatuses.SCStatus_InSC">
      <summary>(Value: 0x1) Specifies that the file is under source code control.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SourceControlStatuses.SCStatus_CheckedOut">
      <summary>(Value: 0x2) Specifies that the file is checked out by you to a directory where TestStand expects the file to be. The <c>SCStatus_CheckedOutByUser</c> flag must also be on for this flag to be on. If <c>SCStatus_CheckedOutByUser</c> is on but <c>SCStatus_CheckedOut</c> is off, the file is checked out to a different directory.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SourceControlStatuses.SCStatus_CheckedOutOther">
      <summary>(Value: 0x4) Specifies that the file is checked out by a user other than you. If this flag is on and <c>SCStatus_CheckedOutMultiple</c> and <c>SCStatus_CheckedOutByUser</c> are also on, both the current user and some other user have the file checked out. If this flag and <c>SCStatus_CheckedOutMultiple</c> are on but <c>SCStatus_CheckedOutByUser</c> is off, the current user does not have the file checked out, but several other users do.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SourceControlStatuses.SCStatus_CheckedOutMultiple">
      <summary>(Value: 0x10) Specifies that the file is checked out by multiple users. The file might or might not be checked out by you.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SourceControlStatuses.SCStatus_CheckedOutByUser">
      <summary>(Value: 0x1000) Specifies that the file is checked out by you independent of the directory location. </summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SourceControlStatuses.SCStatus_Deleted">
      <summary>(Value: 0x40) Specifies that the file has been deleted from the project under source code control. </summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SourceControlStatuses.SCStatus_OutOfDate">
      <summary>(Value: 0x20) Specifies that the version you have is not the latest version of the file.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.SearchOptions">
      <summary>These constants represent the options you can use with the searchOptions parameter of the PropertyObject.Search and Engine.SearchFiles methods. Use the bitwise-OR operator to specify more than one option.</summary>
      <seealso cref="Engine.SearchFiles" />
      <seealso cref="PropertyObject.Search" />
      <seealso cref="&quot;Regular Expressions&quot;javascript:RefLink('/InfoTopics/Find_Regular_Expressions.htm')" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SearchOptions.SearchOptions_MatchCase">
      <summary>(Value: 0x1) If this option is set, TestStand finds only those instances in which the capitalization matches the text you specify. For example, if <c>CHR</c> is the specified text, this option finds <c>CHR</c> but not <c>Chr</c>.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SearchOptions.SearchOptions_WholeWordOnly">
      <summary>(Value: 0x2) If this option is set, TestStand searches for occurrences of the specified text only where the text that surrounds the occurrence is a space, punctuation mark, or other character not considered as part of a word. TestStand treats the characters A through Z, a through z, 0 through 9, and the underscore (_) as parts of a word.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SearchOptions.SearchOptions_RegExpr">
      <summary>(Value: 0x4) If this option is set, TestStand treats certain characters in the search text as regular expression characters instead of literal characters.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SearchOptions.SearchOptions_IncludeSubsequenceFiles">
      <summary>(Value: 0x8) If this option is set, TestStand searches all the sequence files the Sequence Call steps specify.
<para>Note: This option applies only to the Engine.SearchFiles method.</para></summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.SearchFilterOptions">
      <summary>These constants represent the options you can use with the filterOptions parameter of the PropertyObject.Search and Engine.SearchFiles methods. Use the bitwise-OR operator to specify more than one option.</summary>
      <seealso cref="Engine.SearchFiles" />
      <seealso cref="PropertyObject.Search" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SearchFilterOptions.SearchFilterOptions_Locals">
      <summary>(Value: 0x1) If this option is set, TestStand searches sequence local variables. This option applies only to the <c>Engine.SearchFiles</c> method.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SearchFilterOptions.SearchFilterOptions_Parameters">
      <summary>(Value: 0x2) If this option is set, TestStand searches sequence parameter variables. This option applies only to the <c>Engine.SearchFiles</c> method.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SearchFilterOptions.SearchFilterOptions_FileGlobals">
      <summary>(Value: 0x4) If this option is set, TestStand searches sequence file global variables. This option applies only to the <c>Engine.SearchFiles</c> method.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SearchFilterOptions.SearchFilterOptions_Steps">
      <summary>(Value: 0x8) If this option is set, TestStand searches steps. This option applies only to the Engine.SearchFiles method.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SearchFilterOptions.SearchFilterOptions_CustomStepProps">
      <summary>(Value: 0x10) If this option is set, TestStand searches custom step properties. You must use <c>SearchFilterOptions_Steps</c> in combination with this option.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SearchFilterOptions.SearchFilterOptions_BuiltinStepProps">
      <summary>(Value: 0x20) If this option is set, TestStand searches built-in step properties. You must use <c>SearchFilterOptions_Steps</c> in combination with this option.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SearchFilterOptions.SearchFilterOptions_ModuleStepProps">
      <summary>(Value: 0x40) If this option is set, TestStand searches module step properties. You must use <c>SearchFilterOptions_Steps</c> in combination with this option.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SearchFilterOptions.SearchFilterOptions_StepTypes">
      <summary>(Value: 0x80) If this option is set, TestStand searches step types. This option applies only to the <c>Engine.SearchFiles</c> method.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SearchFilterOptions.SearchFilterOptions_CustomDataTypes">
      <summary>(Value: 0x100) If this option is set, TestStand searches custom data types. This option applies only to the <c>Engine.SearchFiles</c> method.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SearchFilterOptions.SearchFilterOptions_StandardDataTypes">
      <summary>(Value: 0x200) If this option is set, TestStand searches standard data types. This option applies only to the <c>Engine.SearchFiles</c> method.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SearchFilterOptions.SearchFilterOptions_BuiltinSeqAndSeqFileProps">
      <summary>(Value: 0x400) If this option is set, TestStand searches built-in sequence and sequence file properties. These properties contain the settings associated with sequences and sequence files. This option applies only to the Engine.SearchFiles method.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SearchFilterOptions.SearchFilterOptions_All">
      <summary>(Value: 0x00ffffff) If this options is set, TestStand searches all parts of files.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SearchFilterOptions.SearchFilterOptions_TypesOnly">
      <summary>(Value: 0x01000000) If this option is set, TestStand searches only types. You must specify which category of types to search by setting one or more of the following options: <c>SearchFilterOptions_StepTypes</c>, <c>SearchFilterOptions_CustomDataTypes</c>, or <c>SearchFilterOptions_StandardDataTypes</c>. This option applies only to the <c>Engine.SearchFiles</c> method.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.SearchElements">
      <summary>These constants represent the options you can use with the elementsToSearch parameter of the PropertyObject.Search and Engine.SearchFiles methods. Use the bitwise-OR operator to specify more than one option.</summary>
      <seealso cref="Engine.SearchFiles" />
      <seealso cref="PropertyObject.Search" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SearchElements.SearchElement_Name">
      <summary>(Value: 0x1) TestStand searches the property name.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SearchElements.SearchElement_Comment">
      <summary>(Value: 0x2) TestStand searches the property comment.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SearchElements.SearchElement_StringValue">
      <summary>(Value: 0x4) TestStand searches the value of string properties.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SearchElements.SearchElement_NumericValue">
      <summary>(Value: 0x8) TestStand searches the value of numeric properties.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SearchElements.SearchElement_BooleanValue">
      <summary>(Value: 0x10) TestStand searches the value of Boolean properties.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SearchElements.SearchElement_AllValues">
      <summary>(Value: 0x1c) A combination of the following SearchElements options: <c>SearchElement_StringValue</c>, <c>SearchElement_NumericValue</c>, and <c>SearchElement_BooleanValue</c>. </summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SearchElements.SearchElement_All">
      <summary>(Value: 0xffffffff) A combination of all the SearchElement options.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SearchElements.SearchElement_Attributes">
      <summary>(Value: 0x20) TestStand searches through the attributes and type attributes of properties.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SearchElements.SearchElement_TypeName">
      <summary>(Value: 0x40) TestStand searches the type name of root type instance properties. Enable this option to find all the instances of a particular type definition.
</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SearchElements.SearchElement_Enumerators">
      <summary>(Value: 0x80) TestStand searches the enumerators of enumeration data types.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.XMLOptions">
      <summary>Use these constants to specify the GenerationOptions parameter of the PropertyObject.GetXML method.</summary>
      <seealso cref="PropertyObject.GetXML" />
      <seealso cref="PropertyObject.IsAliasObject" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.XMLOptions.XMLOption_ExcludeEmptyObjects">
      <summary>(Value: 0x8) Excludes objects without values from the generated XML.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.XMLOptions.XMLOption_UseValueFormatIfDefined">
      <summary>(Value: 0x10) Instructs TestStand to use the formatString of each numeric object when the formatString parameter is not empty.  If this flag is not set or the format string of the numeric object is empty, the <c>PropertyObject.GetXML</c> method uses the formatString parameter for the formatting, or <c>&quot;%.17g&quot;</c> if the formatString parameter is empty. The default for double-precision, 64-bit floating-point values is <c>&#37;.17g</c>, <c>&#37;d</c> for signed 64-bit integer values, and <c>&#37;u</c> for unsigned 64-bit integer values. </summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.XMLOptions.XMLOption_NoIndentation">
      <summary>(Value: 0x20) Instructs TestStand to not automatically format the generated XML by indenting new lines with tab characters.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.XMLOptions.XMLOption_NoCRLF">
      <summary>(Value: 0x40) Instructs TestStand to not automatically format the generated XML by adding LF or CRLF characters.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.XMLOptions.XMLOption_NoOptions">
      <summary>(Value: 0x0) No options.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.XMLOptions.XMLOption_ExcludeComments">
      <summary>(Value: 0x1) Excludes PropertyObject comments from the generated XML.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.XMLOptions.XMLOption_ExcludeFlags">
      <summary>(Value: 0x2) Excludes the flag related attributes from the generated XML.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.XMLOptions.XMLOption_ExcludeVersionInfo">
      <summary>(Value: 0x4) Excludes version information from the header of the generated XML.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.XMLOptions.XMLOption_UseCRLFInsteadOfLF">
      <summary>(Value: 0x80) Instructs TestStand to use CRLF characters instead of adding LF characters when automatically formatting generated XML.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.XMLOptions.XMLOption_ExcludeAliasObjects">
      <summary>(Value: 0x100) Instructs TestStand to exclude alias subproperty objects in the XML stream. By default, the PropertyObject.GetXML method includes alias subproperty objects in the XML stream.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.XMLOptions.XMLOption_ExcludeArrayPrototypes">
      <summary>(Value: 0x200) Excludes the default prototype definition for array element properties.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.XMLOptions.XMLOption_ExcludeAttributes">
      <summary>(Value: 0x400 | 0x800) Excludes PropertyObject attributes and type attributes from the generated XML.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.XMLOptions.XMLOption_AllowInvalidObjects">
      <summary>(Value 0x1000) Pass this option to PropertyObject.GetXML to allow serialization of invalid instances of TestStand enumerator data types.  Pass this option to PropertyObject.SetXML to allow deserialization of invalid instances of TestStand enumerator data types.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.SearchMatch">
      <summary>The SearchResults object return objects of the SearchMatch class. SearchResults objects contain details about a match found as a result of a call to the PropertyObject.Search or Engine.SearchFiles methods.</summary>
      <seealso cref="Engine.SearchFiles" />
      <seealso cref="PropertyObject.Search" />
      <seealso cref="SearchResults" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.SearchMatch.GetLocation(System.Int32@,System.Int32@,System.Int32@)">
      <summary>Returns the element of the property where the match was found and the location of the match within the property when the value is coerced to a string.</summary>
      <remarks>Use the SearchMatch.MatchedText property to obtain the entire element value as a coerced string in which the match was found.</remarks>
      <param name="matchElement">Returns the element of the property in which the match was found. The value of this parameter is one of the SearchElements constants.</param>
      <param name="matchStart">Returns the zero-based index within the string of the starting character location of the match. Use the SearchMatch.MatchedText property to obtain the entire string in which the match was found.</param>
      <param name="matchLength">Returns the number of characters of the text that are part of the match.</param>
      <seealso cref="SearchElements" />
      <seealso cref="SearchMatch.MatchedText" />
      <seealso cref="SearchResults" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.SearchMatch.GetPropertyPath(System.Boolean)">
      <summary>Call this method to obtain the lookup string that indicates the location of the property that contains the match.</summary>
      <remarks>If the match is from a SearchResults object that the Engine.SearchFiles method returns and the SearchMatch.TypeCategoryOfMatch property is <c>TypeCategory_None</c>, the <c>SearchMatch.GetPropertyPath</c> method returns a lookup string relative to the PropertyObjectFile.Data property. Prepend <c>Data.</c> to use this lookup string relative to the root of the PropertyObjectFile object.</remarks>
      <param name="useNamesForIndices">Pass <c>True</c> to obtain a property path that uses property names for array indexes when possible. The name of an object element in an array is not guaranteed to be unique within the array. If you pass <c>True</c> for this parameter, do not use the returned property path with methods that have a lookupString parameter, such as the PropertyObject.GetPropertyObject method and the PropertyObject.Exists method.</param>
      <seealso cref="Engine.SearchFiles" />
      <seealso cref="PropertyObject.Exists" />
      <seealso cref="PropertyObject.GetPropertyObject" />
      <seealso cref="SearchMatch.TypeCategoryOfMatch" />
      <seealso cref="SearchResults" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SearchMatch.MatchedText">
      <summary>Returns the text string which contains the match. Use the SearchMatch.GetLocation method to determine which element of the property the string is from.</summary>
      <remarks>Use the SearchMatch.UpdateForReplace method to alter the matched text. Use the SearchMatch.UpdateForReplaceValue method to alter the value of the property in which the match was found.</remarks>
      <seealso cref="SearchMatch.GetLocation" />
      <seealso cref="SearchMatch.UpdateForReplace" />
      <seealso cref="SearchMatch.UpdateForReplaceValue" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SearchMatch.FileDisplayName">
      <summary>Returns the display name of the file in which the match was found.</summary>
      <seealso cref="PropertyObjectFile.DisplayName" />
      <seealso cref="SearchResults" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SearchMatch.FilePath">
      <summary>Returns the absolute file path of the file in which the match was found.</summary>
      <remarks>Returns an empty string for unsaved files. Use the SearchMatch.FileDisplayName property to obtain a unique name for unsaved files.</remarks>
      <seealso cref="PropertyObjectFile.Path" />
      <seealso cref="SearchMatch.FileDisplayName" />
      <seealso cref="SearchResults" />
      <seealso cref="SequenceFile.Path" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SearchMatch.FileId">
      <summary>Returns the unique file ID of the file in which the match was found. This value is the same as the value the PropertyObjectFile.Id property returns.</summary>
      <remarks>ID numbers change when a file is closed and reopened. Therefore, even if a file has a different ID than what this property contains, it might be the same file. Check the SearchMatch.FilePath property against the absolute path of the file, if one is available, to determine whether the file is the same.</remarks>
      <seealso cref="PropertyObjectFile.Id" />
      <seealso cref="SearchMatch.FilePath" />
      <seealso cref="SearchResults" />
      <seealso cref="SequenceFile.Id" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.SearchMatch.UpdateForReplace(System.String)">
      <summary>Updates all the SearchMatch objects a replace operation affects. This method updates all the property paths and match locations of the current and neighboring SearchMatch objects as needed to make them consistent with the replace operation the replacementString parameter specifies.</summary>
      <remarks>This method does not perform the actual replace operation. Use PropertyObject objects to edit the file or property before calling this method.</remarks>
      <param name="replacementString">Specifies the string with which the matched item was replaced.</param>
      <seealso cref="PropertyObject" />
      <seealso cref="SearchResults" />
      <seealso cref="TypeCategories" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SearchMatch.TypeCategoryOfMatch">
      <summary>Returns the TypeCategories constant that corresponds to the category of the type in which the match was found. If the match was not found in a type, this property returns <c>TypeCategory_None</c>.</summary>
      <remarks>This property always returns <c>TypeCategory_None</c> when you create the search using the PropertyObject.Search method. The value is valid only when you create the search with the Engine.SearchFiles method.</remarks>
      <seealso cref="Engine.SearchFiles" />
      <seealso cref="PropertyObject.Search" />
      <seealso cref="SearchResults" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SearchMatch.UserData">
      <summary>Use this property to store any additional data you want to associate with the SearchMatch object. The value of this property is initially <c>0</c>.</summary>
      <seealso cref="SearchResults" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SearchMatch.PropertyValueAsString">
      <summary>Returns a string that describes the value of the property that contains the match. This string is equivalent to the string the PropertyObject.GetFormattedValue method returns. If the property that contains the match does not have a value, this property returns an empty string.</summary>
      <seealso cref="PropertyObject.GetFormattedValue" />
      <seealso cref="SearchResults" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SearchMatch.PropertyValueType">
      <summary>Returns the data type of the property that contains the match.</summary>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.SearchMatch.UpdateForReplaceValue(System.String)">
      <summary>Updates the value of the property the SearchMatch object references. This method sets the SearchMatch.MatchIsValid property to <c>False</c> for the current and neighboring SearchMatch objects as needed if the location of their match is the value.</summary>
      <remarks>This method does not perform the actual replace operation. Use PropertyObject objects to edit the file or property before calling this method.</remarks>
      <param name="newValue">Specifies the string with which the value was replaced.</param>
      <seealso cref="PropertyObject" />
      <seealso cref="SearchMatch.MatchIsValid" />
      <seealso cref="SearchResults" />
      <seealso cref="TypeCategories" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SearchMatch.MatchIsValid">
      <summary>Returns a value that indicates whether the match is valid. When this property is <c>False</c>, do not call the SearchMatch.UpdateForReplace method.</summary>
      <remarks>This property is set to <c>False</c> when a call to the SearchMatch.UpdateForReplaceValue method invalidates or replaces the text that the match found.</remarks>
      <seealso cref="SearchMatch.UpdateForReplace" />
      <seealso cref="SearchMatch.UpdateForReplaceValue" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.SearchResults">
      <summary>Objects in the SearchResult class are both a handle to a search in progress and a container for the results of that search. When you call the PropertyObject.Search or Engine.SearchFiles method, TestStand returns a SearchResults object. The search runs asynchronously, which means you obtain the SearchResults object before the search finishes. To wait for the search to complete, call the SearchResults.IsComplete method. Alternatively, you can access the results as they accumulate asynchronously by using the SearchResults.NumMatches property to obtain the number of matches and then accessing only the SearchMatch objects up to that number. TestStand always appends new SearchMatch objects to the end of the result list.</summary>
      <seealso cref="Engine.SearchFiles" />
      <seealso cref=".IsComplete" />
      <seealso cref=".NumMatches" />
      <seealso cref="PropertyObject.Search" />
      <seealso cref="SearchMatch" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.SearchResults.Cancel(System.Boolean,System.Boolean)">
      <summary>Cancels a search in progress. Calling this method after the search completes does nothing.</summary>
      <param name="waitForComplete">Pass <c>True</c> if you want the method to wait until the search finishes canceling before returning. Otherwise, the cancel operation is asynchronous.</param>
      <param name="processWindowsMsgsWhileWaiting">Pass <c>True</c> if you want TestStand to process window messages while waiting for the search to complete. TestStand ignores this parameter if you do not pass <c>True</c> for the waitForComplete parameter.</param>
      <seealso cref="Engine.SearchFiles" />
      <seealso cref="PropertyObject.Search" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.SearchResults.IsComplete(System.Boolean,System.Boolean)">
      <summary>Returns a value that indicates whether a search is complete or waits until the search is complete.</summary>
      <param name="waitForComplete">Pass <c>True</c> if you want the method to wait until the search is complete before it returns.</param>
      <param name="processWindowsMsgsWhileWaiting">Pass <c>True</c> if you want TestStand to process window messages while waiting for the search to complete. TestStand ignores this parameter if you do not pass <c>True</c> for the waitForComplete parameter.</param>
      <seealso cref="Engine.SearchFiles" />
      <seealso cref="PropertyObject.Search" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SearchResults.NumMatches">
      <summary>Returns the number of matches found up to a certain point. If the search is not yet complete, this number can continue to increase as TestStand finds new matches.</summary>
      <remarks>You can access the SearchMatch objects even as they accumulate asynchronously by using this property to obtain the number of matches and then accessing only the SearchMatch objects up to that number using the SearchResults.GetMatch method. TestStand always appends new SearchMatch objects to the end of the result list.</remarks>
      <seealso cref="Engine.SearchFiles" />
      <seealso cref="PropertyObject.Search" />
      <seealso cref="SearchMatch" />
      <seealso cref="SearchResults.GetMatch" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.SearchResults.GetMatch(System.Int32)">
      <summary>Returns the SearchMatch object you specify.</summary>
      <remarks>You can access the SearchMatch objects even as they accumulate asynchronously by using the SearchResults.NumMatches property to obtain the number of matches and then using this method to access only the SearchMatch objects up to that number. TestStand always appends new SearchMatch objects to the end.</remarks>
      <param name="index">Specifies the zero-based index of the SearchMatch object you want the method to return.</param>
      <seealso cref="Engine.SearchFiles" />
      <seealso cref="PropertyObject.Search" />
      <seealso cref="SearchMatch" />
      <seealso cref="SearchResults.NumMatches" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SearchResults.NumWarnings">
      <summary>Returns the number of warnings. If the search is not yet complete, this number can increase in the future as TestStand adds new warning messages. TestStand adds warning messages when it encounters an error while performing a search. A common error that can occur is when TestStand cannot load a file because of type conflicts.</summary>
      <remarks>You can access the warnings even as they accumulate asynchronously by using the SearchResults.GetWarning method to obtain the number of warnings and then using this method to access only the SearchMatch objects up to that number. TestStand always appends new warnings to the end of the result list.</remarks>
      <seealso cref="Engine.SearchFiles" />
      <seealso cref="PropertyObject.Search" />
      <seealso cref="SearchResults.GetWarning" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.SearchResults.GetWarning(System.Int32)">
      <summary>Returns the warning message you specify by index.</summary>
      <remarks>You can access the warnings even as they accumulate asynchronously by using the SearchResults.NumWarnings property to obtain the number of matches and then using this method to access only the SearchMatch objects up to that number. TestStand always appends new warnings to the end of the result list.</remarks>
      <param name="index">Specifies the zero-based index of the SearchMatch object you want the method to return.</param>
      <seealso cref="Engine.SearchFiles" />
      <seealso cref="PropertyObject.Search" />
      <seealso cref="SearchResults.NumWarnings" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SearchResults.StatusMessage">
      <summary>Returns a real-time description of what the search is doing while in progress. The status message describes the file TestStand is currently loading or searching as well as other activities that relate to the search, such as building the list of files to search.</summary>
      <seealso cref="Engine.SearchFiles" />
      <seealso cref="PropertyObject.Search" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.SearchDirectory">
      <summary>A SearchDirectory object specifies a directory in which TestStand searches for finding files. An object of this class specifies a path to an explicit directory or specifies a predefined directory, such as the <c>TestStand</c> directory or the Microsoft <c>Windows</c> directory. An object specifies any file extension restrictions and whether to search subdirectories.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SearchDirectory.Type">
      <summary>Several types of search directories exist. This property returns the type of search directory. </summary>
      <seealso cref="SearchDirectoryTypes" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SearchDirectory.Path">
      <summary>Specifies the path used to find files.</summary>
      <remarks>Specifies the directory path when the value of the SearchDirectory.Type property is <c>SearchDirectory_ExplicitDir</c>. This property is read-only for all other directory types, and TestStand returns the path of the non-explicit directory. TestStand returns an empty string when the directory type is <c>SearchDirectoryType_ContainingProjectDir</c> or <c>SearchDirectoryType_CurrentSequenceFileDir</c>. TestStand returns an empty string if the directory type is <c>SearchDirectoryType_CurrentWorkspaceDir</c> when no workspace is loaded.</remarks>
      <seealso cref="SearchDirectory.Type" />
      <seealso cref="SearchDirectoryTypes" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SearchDirectory.SearchSubdirectories">
      <summary>Specifies whether to include all subdirectories within the selected path in the overall search directory path.</summary>
      <seealso cref="SearchDirectory.ExcludeHiddenSubdirectories" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SearchDirectory.FileExtensionRestrictions">
      <summary>Specifies the specific file extensions that restrict which files apply to the search directory. If the SearchDirectory.ExcludeFileExtension property is <c>False</c>, TestStand searches only for files in the directory with the specified extension. If the exclude parameter is <c>True</c>, TestStand searches only for files in the directory that does not have the specified file extensions. For example, to search only for DLLs and executable files, enter <c>&quot;DLL, EXE&quot;</c> and set the <c>SearchDirectory.ExcludeFileExtension</c> property to <c>False</c>.</summary>
      <seealso cref="SearchDirectory.ExcludeFileExtension" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SearchDirectory.ExcludeFileExtension">
      <summary>Set this property to <c>False</c> if you want TestStand to search only for files with the file extensions you specify in the SearchDirectory.FileExtensionRestrictions property. Set this property to <c>True</c> if you want TestStand to search only for files that do not have the file extensions specified in the <c>SearchDirectory.FileExtensionRestrictions</c> property.</summary>
      <seealso cref="SearchDirectory.FileExtensionRestrictions" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SearchDirectory.Disabled">
      <summary>If you want the search directory to be included in the overall search path, set this property to <c>False</c>. If you set this property to <c>True</c>, the search directory is disabled but is included in the search directories list.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SearchDirectory.ExcludeHiddenSubdirectories">
      <summary>Specifies to exclude search directory subdirectories that specify the Hidden attribute in the Microsoft Windows file system. This property is <c>False</c> by default and has no effect unless the SearchDirectory.SearchSubdirectories property is <c>True</c>.</summary>
      <seealso cref="SearchDirectory.SearchSubdirectories" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.InternalOptions">
      <summary>Specifies the internal options you can access through the Engine.GetInternalOption and Engine.SetInternalOption methods.</summary>
      <seealso cref="Engine.GetInternalOption" />
      <seealso cref="Engine.SetInternalOption" />
      <seealso cref="&quot;Version Selector dialog box&quot;javascript:RefLink('/InfoTopics/VersionSelector.htm')" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.InternalOptions.InternalOption_WarnOnAPICallThroughDispatchInterface">
      <summary>(Value: 1) Specifies a Boolean value that determines whether TestStand launches a warning dialog box for each TestStand API call you make through a dispatch interface. If you intend to use only the vtable interface for the TestStand API, use this property to determine whether the code unintentionally uses a dispatch interface to the TestStand API. The default value of this property is <c>False</c>. This option does not apply to the Engine object. TestStand does not warn you for calls you make through a dispatch interface to the <c>Engine</c> object.</summary>
      <remarks>National Instruments recommends that you only use this property for testing and debugging purposes.</remarks>
      <seealso cref="Engine" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.InternalOptions.InternalOption_AutomationAdapterUsesDispatchForDualInterfaces">
      <summary>(Value: 2) Specifies a Boolean value that determines whether the ActiveX/COM Adapter calls the dispatch portion of a dual interface instead of the vtable portion of the interface. Use this property to exercise both the vtable and dispatch portions of a dual server interface when you perform software testing on a server. The default value of this property is <c>False</c>.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.InternalOptions.InternalOption_UpdateExternalEnvironments">
      <summary>(Value: 3) Specifies a Boolean value that determines whether TestStand installs development support items at engine start up. Development support items include TestStand palettes and toolbox items for application development environments (ADEs) that support them, such as LabVIEW and Microsoft Visual Studio. Although the TestStand installer also installs these items, this option ensures that the items are installed to an ADE if the ADE is installed or upgraded after TestStand is installed. At startup, TestStand checks whether it has already installed the support items for a particular ADE so startup time does not increase unnecessarily. If you disable this option, you can manually update the support items for a particular ADE by running the TestStand Version Selector and specifying <c>&quot;/ver current&quot;</c> on the command line or by switching to the current version in the Version Selector dialog box. The default value of the option is <c>True</c>.
TestStand persists the setting for this option between invocations of the TestStand Engine.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.InternalOptions.InternalOption_ApplicationManager">
      <summary>(Value: 5) Returns an IUnknown interface to the Application Manager user interface control for the current process. Returns a <c>NULL</c> interface if no Application Manager user interface control exists in the current process.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.InternalOptions.InternalOption_DisableFloatingWindowsForModalDialogs">
      <summary>(Value: 10) Specifies a Boolean value that determines whether TestStand disables all windows in the same thread as the thread that launches an engine dialog box. This is useful for applications that have multiple modeless windows to disable while a modal dialog box launches. The default value of the option is <c>True</c>.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.ModelOptions">
      <summary>Use these constants with the SequenceFile.ModelOption property.</summary>
      <seealso cref="&quot;Model tab&quot;javascript:RefLink('/InfoTopics/DB_Station_Opt_Mod_Tab.htm')" />
      <seealso cref="SequenceFile.ModelOption" />
      <seealso cref="SequenceFile.ModelPath" />
      <seealso cref="&quot;Station Options dialog box&quot;javascript:RefLink('/InfoTopics/DB_Station_Opt.htm')" />
      <seealso cref="StationOptions.AllowOtherModels" />
      <seealso cref="StationOptions.StationModelSequenceFilePath" />
      <seealso cref="StationOptions.UseStationModel" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ModelOptions.ModelOption_UseStationModel">
      <summary>(Value: 0) Instructs TestStand to use the process model file the Station Model option on the Model tab of the Station Options dialog box specifies.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ModelOptions.ModelOption_NoModel">
      <summary>(Value: 1) Specifies that the sequence file does not use a process model.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ModelOptions.ModelOption_RequireSpecificModel">
      <summary>(Value: 2) Specifies a particular process model file. If you select this value, you must use the SequenceFile.ModelPath property to specify the location of the process model file.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.EvalPrecondOptions">
      <summary>Use these constants to specify the EvalPrecondOptions parameter of the Step.EvalPrecondForInteractiveExecution and StepType.EvalPrecondForInteractiveExecution properties.</summary>
      <seealso cref="&quot;Execution tab&quot;javascript:RefLink('/InfoTopics/DB_Station_Opt_Exe_Tab.htm')" />
      <seealso cref="ExecutionMask" />
      <seealso cref="&quot;Station Options dialog box&quot;javascript:RefLink('/InfoTopics/DB_Station_Opt.htm')" />
      <seealso cref="StationOptions.ExecutionMask" />
      <seealso cref="Step.EvalPrecondForInteractiveExecution" />
      <seealso cref="StepType.EvalPrecondForInteractiveExecution" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.EvalPrecondOptions.EvalPrecondOption_UseStationOption">
      <summary>(Value: 0) Uses the Evaluate Preconditions in Interactive Mode option on the Execution tab of the Station Options dialog box.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.EvalPrecondOptions.EvalPrecondOption_EvaluatePrecond">
      <summary>(Value: 1) Evaluates the precondition.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.EvalPrecondOptions.EvalPrecondOption_NoEvaluatePrecond">
      <summary>(Value: 2) Does not evaluate the precondition.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.WindowActivationOptions">
      <summary>Use these constants as the values of the Step.WindowActivation and StepType.WindowActivation properties.</summary>
      <seealso cref="Step.WindowActivation" />
      <seealso cref="StepType.WindowActivation" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.WindowActivationOptions.WinActOption_None">
      <summary>(Value: 1) No activation.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.WindowActivationOptions.WinActOption_ActivateWhenStepCompletes">
      <summary>(Value: 2) Activate when the step completes.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.WindowActivationOptions.WinActOption_IfActiveReactivateWhenStepCompletes">
      <summary>(Value: 3) If initially active, reactivate when the step completes.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.BatchSynchronizationOptions">
      <summary>Use these constants with the Step.BatchSyncOption and StepType.BatchSyncOption properties.</summary>
      <seealso cref="Step.BatchSyncOption" />
      <seealso cref="StepType.BatchSyncOption" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.BatchSynchronizationOptions.BatchSyncOption_UseSeqFileSetting">
      <summary>(Value: 0) Uses the same option the sequence file is using.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.BatchSynchronizationOptions.BatchSyncOption_UseModelSetting">
      <summary>(Value: 1) Uses the same option the model is using.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.BatchSynchronizationOptions.BatchSyncOption_NoSync">
      <summary>(Value: 2) No batch synchronization is used on this step.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.BatchSynchronizationOptions.BatchSyncOption_Serial">
      <summary>(Value: 3) Use a Serial section to ensure that each thread in the batch executes a single step sequentially or the steps in a section sequentially and in the order you specified when you created the batch. When all threads in a batch arrive at their respective instances of a single step or an Enter step for a Serial section, TestStand releases one thread at a time in ascending order according to the order number you assign to threads when you added them to the batch using the Batch Specification step type. As each thread executes the single step or reaches the Exit step for the section, the next thread in the batch executes the single step or proceeds from the Enter step. After all threads in the batch execute the single step or arrive at the Exit step, they continue and exit the section together.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.BatchSynchronizationOptions.BatchSyncOption_Parallel">
      <summary>(Value: 4) When all threads in the batch arrive at their respective instances of a single step or an Enter step for a Parallel section, TestStand releases all the threads at once. Each thread blocks after executing the single step or after reaching the Exit step for the section until all threads can continue and exit the section together.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.BatchSynchronizationOptions.BatchSyncOption_OneThreadOnly">
      <summary>(Value: 5) Use a One Thread Only section to specify that only one thread in the batch executes the single step or the steps in the section. Typically, you use this type of section to perform an operation that applies to the batch as a whole, such as raising the temperature in a test chamber. When all threads in a batch arrive at their respective instances of the single step or an Enter step for a One Thread Only section, TestStand releases only the thread with the lowest order number. When that thread executes the single step or arrives at the Exit step for the section, all remaining threads in the batch skip the single step or jump from the Enter step to the Exit step, skipping steps within the section. The threads in the batch then continue and exit the section together.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.CallbackTypes">
      <summary>Use these constants with the Execution.EnableCallback and Execution.IsCallbackEnabled methods to specify on which callback sequence to operate.</summary>
      <seealso cref="Execution.EnableCallback" />
      <seealso cref="Execution.IsCallbackEnabled" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.CallbackTypes.CallbackType_ModelPostError">
      <summary>(Value: 0x0) ProcessModelPostError callback</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.CallbackTypes.CallbackType_ModelPostFail">
      <summary>(Value: 0x1) ProcessModelPostFail callback</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.CallbackTypes.CallbackType_ModelPostInteractive">
      <summary>(Value: 0x2) ProcessModelPostInteractive callback</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.CallbackTypes.CallbackType_ModelPostResult">
      <summary>(Value: 0x3) ProcessModelPostResult callback</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.CallbackTypes.CallbackType_ModelPostStep">
      <summary>(Value: 0x4) ProcessModelPostStep callback</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.CallbackTypes.CallbackType_ModelPreInteractive">
      <summary>(Value: 0x5) ProcessModelPreInteractive callback</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.CallbackTypes.CallbackType_ModelPreStep">
      <summary>(Value: 0x6) ProcessModelPreStep callback</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.CallbackTypes.CallbackType_SeqFilePostError">
      <summary>(Value: 0x7) SequenceFilePostError callback</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.CallbackTypes.CallbackType_SeqFilePostFail">
      <summary>(Value: 0x8) SequenceFilePostFail callback</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.CallbackTypes.CallbackType_SeqFilePostInteractive">
      <summary>(Value: 0x9) SequenceFilePostInteractive callback</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.CallbackTypes.CallbackType_SeqFilePostResult">
      <summary>(Value: 0xA) SequenceFilePostResult callback</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.CallbackTypes.CallbackType_SeqFilePostStep">
      <summary>(Value: 0xB) SequenceFilePostStep callback</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.CallbackTypes.CallbackType_SeqFilePreInteractive">
      <summary>(Value: 0xC) SequenceFilePreInteractive callback</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.CallbackTypes.CallbackType_SeqFilePreStep">
      <summary>(Value: 0xD) SequenceFilePreStep callback</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.CallbackTypes.CallbackType_StationPostError">
      <summary>(Value: 0xE) StationPostError callback</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.CallbackTypes.CallbackType_StationPostFail">
      <summary>(Value: 0xF) StationPostFail callback</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.CallbackTypes.CallbackType_StationPostInteractive">
      <summary>(Value: 0x10) StationPostInteractive callback</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.CallbackTypes.CallbackType_StationPostResult">
      <summary>(Value: 0x11) StationPostResult callback</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.CallbackTypes.CallbackType_StationPostStep">
      <summary>(Value: 0x12) StationPostStep callback</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.CallbackTypes.CallbackType_StationPreInteractive">
      <summary>(Value: 0x13) StationPreInteractive callback</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.CallbackTypes.CallbackType_StationPreStep">
      <summary>(Value: 0x14) StationPreStep callback</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.CallbackTypes.CallbackType_ModelPostResults">
      <summary>(Value: 0x15) ProcessModelPostResults callback</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.CallbackTypes.CallbackType_SeqFilePostResults">
      <summary>(Value: 0x16) SequenceFilePostResults callback</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.CallbackTypes.CallbackType_StationPostResults">
      <summary>(Value: 0x17) StationPostResults callback</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.CustomPostStepUIMsgOptions">
      <summary>These constants represent the values you can use with the CustomUIMessageOptions parameter of the Execution.AddPostStepCustomUIMessage method. Use the bitwise-OR operator to specify more than one option.</summary>
      <seealso cref="Execution.AddPostStepCustomUIMessage" />
      <seealso cref="Execution.RemovePostStepCustomUIMessage" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.CustomPostStepUIMsgOptions.CustomUIMsgOptions_NoOptions">
      <summary>(Value: 0) No options.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.CustomPostStepUIMsgOptions.CustomUIMsgOptions_SuppressIfTraceSent">
      <summary>(Value: 1) When this flag is set, TestStand does not send a user interface message if a <c>UIMsg_Trace</c> message is sent. Do not use this option if you want the UIMessage sent even when tracing is disabled.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.CustomPostStepUIMsgOptions.CustomUIMsgOptions_AppliesToAllThreads">
      <summary>(Value: 2) Use this flag to send custom user interface message to all threads this execution creates. Otherwise, only the foreground thread of the execution sends this message.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.TimeLimitTypes">
      <summary>Use these constants for the value of the StationOptions.SetTimeLimitAction and StationOptions.GetTimeLimitAction methods.</summary>
      <seealso cref="StationOptions.GetTimeLimitAction" />
      <seealso cref="StationOptions.SetTimeLimitAction" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TimeLimitTypes.TimeLimitType_NormalExecution">
      <summary>(Value: 0) Time limits for normal execution.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TimeLimitTypes.TimeLimitType_Exiting">
      <summary>(Value: 1) Time limits for executions that run while the engine is exiting.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.TimeLimitOperations">
      <summary>Use these constants for the value of the StationOptions.SetTimeLimitAction and StationOptions.GetTimeLimitAction methods.</summary>
      <seealso cref="StationOptions.GetTimeLimitAction" />
      <seealso cref="StationOptions.SetTimeLimitAction" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TimeLimitOperations.TimeLimitOperation_Executing">
      <summary>(Value: 0) Applies to an execution from start to completion.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TimeLimitOperations.TimeLimitOperation_Terminating">
      <summary>(Value: 1) Applies to an execution from a termination request to completion.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TimeLimitOperations.TimeLimitOperation_Aborting">
      <summary>(Value: 2) Applies to an execution from an abort request to completion.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.TimeLimitActions">
      <summary>Use these constants for the value of the StationOptions.SetTimeLimitAction and StationOptions.GetTimeLimitAction methods.</summary>
      <seealso cref="StationOptions.GetTimeLimitAction" />
      <seealso cref="StationOptions.SetTimeLimitAction" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TimeLimitActions.TimeLimitAction_Abort">
      <summary>(Value: 0) Initiates an abort of a running execution.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TimeLimitActions.TimeLimitAction_KillThreads">
      <summary>(Value: 1) Ends the thread for a running, terminating, or aborting execution.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TimeLimitActions.TimeLimitAction_Prompt">
      <summary>(Value: 2) Launches a dialog box with the option to terminate, abort, or kill the execution.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TimeLimitActions.TimeLimitAction_Terminate">
      <summary>(Value: 3) Initiates a termination of a running execution.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.SearchDirectoryTypes">
      <summary>Use these constants with the SearchDirectoryTypes parameter of the SearchDirectories.Insert method and the SearchDirectory.Type property.</summary>
      <seealso cref="Engine.DisplayFileDialog" />
      <seealso cref="PropertyObjectFile" />
      <seealso cref="SearchDirectories.Insert" />
      <seealso cref="SearchDirectory.Type" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SearchDirectoryTypes.SearchDirectoryType_PublicComponentsDir">
      <summary>(Value: 11) Public components directory.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SearchDirectoryTypes.SearchDirectoryType_TestStandPublicDir">
      <summary>(Value: 16) Public directory.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SearchDirectoryTypes.SearchDirectoryType_TestStandBinDir">
      <summary>(Value: 2) TestStand Bin directory.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SearchDirectoryTypes.SearchDirectoryType_AdapterSupportDir">
      <summary>(Value: 3) Adapter support directory.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SearchDirectoryTypes.SearchDirectoryType_ApplicationDir">
      <summary>(Value: 4) Application directory.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SearchDirectoryTypes.SearchDirectoryType_InitialWorkingDir">
      <summary>(Value: 5) Initial working directory.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SearchDirectoryTypes.SearchDirectoryType_WindowsSystemDir">
      <summary>(Value: 6) Windows system directory.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SearchDirectoryTypes.SearchDirectoryType_WindowsDir">
      <summary>(Value: 7) Microsoft Windows directory.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SearchDirectoryTypes.SearchDirectoryType_PathEnvironmentVarDir">
      <summary>(Value: 8) Path environment variable.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SearchDirectoryTypes.SearchDirectoryType_CurrentSequenceFileDir">
      <summary>(Value: 9) Current sequence file directory.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SearchDirectoryTypes.SearchDirectoryType_UserComponentsDir">
      <summary>(Value: 11) User components directory. This option is obsolete. Use SearchDirectoryType_PublicComponentsDir instead. </summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SearchDirectoryTypes.SearchDirectoryType_NIComponentsDir">
      <summary>(Value: 12) NI components directory.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SearchDirectoryTypes.SearchDirectoryType_CurrentWorkspaceDir">
      <summary>(Value: 13) Current workspace directory.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SearchDirectoryTypes.SearchDirectoryType_ContainingProjectDir">
      <summary>(Value: 14) Containing project directory. <para>Note: This constant is obsolete. To allow a user to select a file relative to a containing project directory, pass the PropertyObjectFile object for the project to the currentFile parameter of the Engine.DisplayFileDialog method.</para></summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SearchDirectoryTypes.SearchDirectoryType_ExplicitDir">
      <summary>(Value: 15) Explicit directory.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SearchDirectoryTypes.SearchDirectoryType_TestStandDir">
      <summary>(Value:1) TestStand directory.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.SearchDirectories">
      <summary>This collection class contains elements using the SearchDirectory type. The collection specifies the directories TestStand searches for finding files. The directories listed first in the collection take precedence over those listed later in the collection. When you run TestStand for the first time, the collection contains a default set of search directory paths.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SearchDirectories.Item(System.Object)">
      <summary>Returns a reference to an item at the specified index in the collection.</summary>
      <param name="index">Specifies the zero-based index of the item to retrieve.</param>
      <seealso cref="SearchDirectory" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SearchDirectories.Count">
      <summary>Returns the number of items in the collection.</summary>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.SearchDirectories.Insert(System.String,System.Int32,System.Boolean,System.String,System.Boolean,System.Boolean)">
      <summary>Adds a new item to the collection.</summary>
      <remarks>A search directory is a search path for finding files.</remarks>
      <param name="path">Specifies the path used to find files.</param>
      <param name="index">TestStand maintains an internal list of search directories in which the lower index paths take precedence over the higher index paths. The index parameter specifies the index where the new search directory must be inserted. If you pass a value of -1, the new directory is inserted at the end of the list.</param>
      <param name="searchSubDirs">Specifies whether to include all subdirectories within the selected path in the overall search path.</param>
      <param name="fileExtRestrict">Specifies the specific file extensions that restrict which files apply to the search directory. If the exclude parameter is <c>False</c>, TestStand searches in the directories only for files with the specified extensions. If the exclude parameter is <c>True</c>, TestStand searches in the directories for files that do not have the specified file extensions. For example, to search for only DLLs and executable files, pass <c>&quot;DLL,EXE&quot;</c> for this parameter and <c>False</c> for the exclude parameter.</param>
      <param name="exclude">If you pass <c>False</c>, TestStand searches only for files with the specific file extensions specified in the fileExtRestrict parameter. If you pass <c>True</c>, TestStand searches for files without the specific extension.</param>
      <param name="disabled">Set this parameter to <c>False</c> if you want the search directory to be included in the overall search path. This setting allows the user to disable the search directory without deleting it from the list.</param>
      <seealso cref="SearchDirectoryTypes" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.SearchDirectories.Remove(System.Int32)">
      <summary>Removes the specified item from this collection, if it exists.</summary>
      <remarks>You cannot delete predefined search directories.</remarks>
      <param name="index">Specifies the zero-based index of the item to remove.</param>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.SearchDirectories.MoveSearchDirectory(System.Int32,System.Int32)">
      <summary>Moves a search directory within the collection.</summary>
      <remarks>TestStand maintains an internal list of search directories in which the lower index paths take precedence over the higher index paths.</remarks>
      <param name="index">Specifies a zero-based index indicating the new position of the search directory to move.</param>
      <param name="newIndex">Specifies a zero-based index indicating the new position of the search directory to move.</param>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.SearchDirectories.Reload">
      <summary>Instructs TestStand to discard the current search directory list and reload the list from disk. </summary>
      <remarks><para>Note: TestStand immediately updates the <c>TestExec.ini</c> configuration file when you make changes to the search directories programmatically or by using a user interface. Use the <c>SearchDirectories.Reload</c> method to update the search directories after an external application, such as a source code control application, modifies the <c>TestExec.ini</c> configuration file.</para></remarks>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.ExternalReportViewer">
      <summary>An ExternalReportViewer represents relationships between a specific report format and the application used to open it. TestStand keeps a list of report viewers. If you do not specify an external viewer for a format, the file opens in the application Microsoft Windows associates with the file extension of the report file.</summary>
      <seealso cref="ExternalReportViewers" />
      <seealso cref="Report" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.ExternalReportViewer.Format">
      <summary>Specifies the report format for the external report viewer to display. For example, <c>txt</c> for text files or <c>HTML</c> for HTML files.</summary>
      <seealso cref="Report.Format" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.ExternalReportViewer.Arguments">
      <summary>Specifies optional arguments that indicate to the external viewer which file to open and how to open it. For example, <c>&quot;%filename&quot;</c> indicates to the external viewer the name of the file to open.</summary>
      <seealso cref="ExternalReportViewer.Path" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.ExternalReportViewer.Path">
      <summary>Specifies the filename the external report viewer executes.</summary>
      <seealso cref="ExternalReportViewer.Arguments" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.ExternalReportViewer.AutoLaunch">
      <summary>Specifies the external report viewer to launch automatically when the report is generated.
Set this property to <c>True</c> to automatically launch the external report viewer and show the report.</summary>
      <seealso cref="ExternalReportViewers.AutoLaunchDefaultExternalViewers" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.ExternalReportViewers">
      <summary>Collection that contains elements using the ExternalReportViewer type.
Represents the list of external report viewers used to open the different report file types TestStand supports.</summary>
      <seealso cref="Engine.ExternalReportViewers" />
      <seealso cref="ExternalReportViewer" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.ExternalReportViewers.Item(System.Object)">
      <summary>Returns a reference to an item at the specified index in the collection.</summary>
      <param name="index">Specifies the zero-based index of the item to retrieve.</param>
      <seealso cref="ExternalReportViewer" />
      <seealso cref="ExternalReportViewers.Count" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.ExternalReportViewers.Count">
      <summary>Returns the number of items in the collection.</summary>
      <seealso cref="ExternalReportViewers.Item" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.ExternalReportViewers.Add(System.String,System.String,System.String,System.Boolean)">
      <summary>Adds a new external report viewer to the collection.</summary>
      <param name="format">When you specify an external report viewer, you must indicate the external report viewer name and the report format, such as Microsoft Notepad (<c>txt</c>) or Google Chrome (<c>html</c>).</param>
      <param name="path">Specifies the name for the external report viewer to launch.</param>
      <param name="arguments">Specifies the optional command-line arguments required to launch the external report viewer.</param>
      <param name="autoLaunch">Specifies the external report viewer to automatically launch when the report is generated. Pass <c>True</c> to automatically launch the external report viewer and show the report.</param>
      <seealso cref="ExternalReportViewers.Remove" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.ExternalReportViewers.Remove(System.Int32)">
      <summary>Removes the specified item from this collection, if it exists.</summary>
      <param name="index">Specifies the zero-based index of the item to remove.</param>
      <seealso cref="ExternalReportViewers.Add" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.ExternalReportViewers.AutoLaunchDefaultExternalViewers">
      <summary>Specifies whether TestStand launches default external viewers Microsoft Windows associates with file extensions.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.Expression">
      <summary>An Expression object holds an expression string. You can check the validity of the expression string or you can evaluate the expression string to obtain the result of the expression.
The Expression object provides the same functionality as the PropertyObject.EvaluateEx, Engine.CheckExpression, and Engine.CheckExprSyntax methods. However, if you are repeatedly evaluating the same expression, it is more efficient to use an Expression object because it only parses the expression string when you first evaluate the expression. Because the Expression object retains the parsed form of the expression, it does not re-parse the expression when you reevaluate the same string.
The Expression object also provides the NumTokens property and the Tokenize and GetToken methods, which you can use to identify the operators, identifiers, and constants that comprise an expression. The capability to parse the expression into component tokens is useful for specialized purposes, such as implementing expression syntax coloring. Because TestStand provides an ActiveX Expression control that features syntax coloring, you typically do not need to identify the tokens in an expression.</summary>
      <seealso cref="Engine.CheckExpression" />
      <seealso cref="Engine.CheckExprSyntax" />
      <seealso cref="Expression.GetToken" />
      <seealso cref="Expression.NumTokens" />
      <seealso cref="Expression.Tokenize" />
      <seealso cref="PropertyObject.EvaluateEx" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Expression.Text">
      <summary>Specifies the text of the expression the <c>Expression</c> object evaluates. The following are example expressions:
<c>Local.frequency / 2</c>
<c>&quot;DMM&quot; + Str(RunState.TestSockets.MyIndex)</c></summary>
      <seealso cref=".Evaluate" />
      <seealso cref=".NumTokens" />
      <seealso cref=".Validate" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Expression.NumTokens">
      <summary>Returns the number of tokens the expression contains. A token is a set of contiguous characters in the expression text that represent an identifier, operator, or constant. A token does not include surrounding white space characters.
<para>Note: You must call the Expression.Tokenize method before you access this property for the first time and after changing the value of the Expression.Text property.</para></summary>
      <seealso cref="Expression.GetToken" />
      <seealso cref="Expression.Text" />
      <seealso cref="Expression.Tokenize" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Expression.GetToken(System.Int32,NationalInstruments.TestStand.Interop.API.TokenCode@,System.Int32@,System.Int32@,System.String@)">
      <summary>This method returns information about the token you specify by index. You must call the Expression.Tokenize method before you call this method for the first time and before you call this method after changing the value the Expression.Text property.</summary>
      <param name="tokenIndex">Specifies the zero-based index of a token in the expression.</param>
      <param name="tokenCode">Returns a code that specifies which expression element the token represents.</param>
      <param name="charIndex">Returns the zero-based index within the expression string of the first character in the token.</param>
      <param name="numChars">Returns the number of characters in the token.</param>
      <param name="tokenText">Returns the characters in the token.</param>
      <seealso cref="Expression.NumTokens" />
      <seealso cref="Expression.Text" />
      <seealso cref="Expression.Tokenize" />
      <seealso cref="TokenCode" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Expression.Tokenize(System.Int32,System.Int32)">
      <summary>This method parses the expression text to identify the tokens that represent operators, identifiers, and constants. The capability to parse the expression into component tokens is useful for specialized purposes, such as implementing expression syntax coloring. Typically, you do not call this method.
<para>Note: You must call this method before you call the Expression.GetToken method or access the Expression.NumTokens property.</para></summary>
      <returns>The return value represents the parsing state at the end of the expression.
If you individually tokenize each displayed line of an expression wrapped to multiple lines by a user interface control, pass this value to the initialParseState parameter of this method when you tokenize the next visible line.</returns>
      <param name="options">Pass <c>TokenizeOptions_NoOptions</c> to specify the default behavior, or pass one or more TokenizeOptions constants. Use the bitwise-OR operator to specify multiple options. The Expression object retains the options you specify to use whenever it must tokenize the expression in the Expression.Validate and Expression.Evaluate methods.</param>
      <param name="initialParseState">Pass <c>0</c> if you are tokenizing a complete expression. Typically, you pass <c>0</c> to this parameter.
If you separately tokenize each visible line in an expression, pass <c>0</c> to tokenize the first visible line and pass the return value of this method from tokenizing the previous line to tokenize a subsequent line.
<para>Note: Tokenizing a multiline expression line-by-line is more efficient or convenient for certain specific applications, such as syntax-coloring text that displays in a control when the control wraps the text across multiple lines to fit within the control. In this case, you can resume tokenizing a logical line the control splits into multiple visible lines. Tokenize line-by-line to account for virtual new lines a control creates when wrapping expression text. If the expression contains actual new line characters, you can tokenize the entire expression with a single call to this method.</para></param>
      <seealso cref="Expression.Evaluate" />
      <seealso cref="Expression.GetToken" />
      <seealso cref="Expression.NumTokens" />
      <seealso cref="Expression.Validate" />
      <seealso cref="TokenizeOptions" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Expression.Validate(NationalInstruments.TestStand.Interop.API.PropertyObject,System.Boolean,System.Int32,System.String@,System.Int32@,System.Int32@)">
      <summary>Checks the validity of an expression and returns error information.</summary>
      <returns>Returns <c>True</c> if the expression is valid. Returns <c>False</c> if the expression contains an error.</returns>
      <param name="evaluationContext">Specifies the context in which to evaluate the expression. This method uses this object to determine whether the variables in the expression are valid.</param>
      <param name="checkSyntaxOnly">Pass <c>True</c> to check the expression syntax only. Pass <c>False</c> to also verify that the variables in the expression are valid.</param>
      <param name="evaluationOptions">Pass <c>0</c> to specify the default behavior, or pass one or more EvaluationOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <param name="errMsg">If the expression is invalid, this parameter returns a description of the error.</param>
      <param name="errorCharIndex">If the expression is invalid, this parameter returns the character index of the start of the invalid portion of the expression.</param>
      <param name="errorEndCharIndex">If the expression is invalid, this parameter returns the character index of the end of the invalid portion of the expression.</param>
      <seealso cref="Engine.CheckExpression" />
      <seealso cref="Engine.CheckExprSyntax" />
      <seealso cref="EvaluationOptions" />
      <seealso cref="Expression.Evaluate" />
      <seealso cref="Expression.ValidateEvaluationType" />
      <seealso cref="PropertyObject" />
      <seealso cref="PropertyObject.EvaluateEx" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Expression.Evaluate(NationalInstruments.TestStand.Interop.API.PropertyObject,System.Int32)">
      <summary>Evaluates an expression and returns the result.</summary>
      <returns>Returns the result of the expression in the form of a PropertyObject. The PropertyObject can contain a value of any type depending on the expression. Release the result when you finish using it. If the expression is empty and you pass <c>EvalOption_AllowEmptyExpression</c>, this method returns a <c>NULL</c> dispatch pointer or object reference.</returns>
      <param name="evaluationContext">Specifies the context in which to evaluate the expression. This method uses this object to locate variables the expression specifies.</param>
      <param name="evaluationOptions">Pass <c>0</c> to specify the default behavior, or pass one or more EvaluationOptions constants. Use the bitwise-OR operator to specify multiple options.</param>
      <seealso cref="Engine.CheckExpression" />
      <seealso cref="Engine.CheckExprSyntax" />
      <seealso cref="EvaluationOptions" />
      <seealso cref="Expression.Validate" />
      <seealso cref="Expression.ValidateEvaluationType" />
      <seealso cref="PropertyObject" />
      <seealso cref="PropertyObject.EvaluateEx" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Expression.ValidateEvaluationType(NationalInstruments.TestStand.Interop.API.EvaluationTypes,System.Object[],NationalInstruments.TestStand.Interop.API.PropertyObject,System.Int32,System.String@,System.Int32@,System.Int32@)">
      <summary>Checks that the expression evaluates to a specified type and returns error information if the expression does not.</summary>
      <remarks>This method returns <c>TS_Err_NoError</c> if the expression evaluates to a type the validEvaluationTypes parameter specifies. This method returns the corresponding TSError if the expression has a syntax or evaluation error. This method returns <c>TS_Err_UnexpectedType</c> if the expression evaluates without an error, but does not evaluate to a type the validEvaluationTypes parameter specifies.</remarks>
      <param name="validEvaluationTypes">Specifies the type(s) to which you expect the expression to evaluate.</param>
      <param name="additionalConstants">Specifies additional variables the expression might contain that are not part of the evaluationContext. This parameter is useful if the expression can contain a constant from an enumeration, such as a parameter value of a module call when the parameter type is an enumeration. You can pass <c>NULL</c> for this parameter if there are no additional constants you want to use when evaluating the expression.</param>
      <param name="evaluationContext">Specifies the context in which to evaluate the expression. This method uses this object to locate variables the expression specifies.</param>
      <param name="evaluationOptions">Specifies any combination of the EvaluationOptions constants. It is not necessary to pass the <c>EvalOption_DoNotAlterValues</c> constant because this method never alters values.</param>
      <param name="errMsg">If the expression does not evaluate to the specified type, this parameter returns a description of the error.</param>
      <param name="errorStartIndex">If the expression does not evaluate to the specified type, this parameter returns the character index of the start of the invalid portion of the expression.</param>
      <param name="errorEndIndex">If the expression does not evaluate to the specified type, this parameter returns the character index of the end of the invalid portion of the expression.</param>
      <seealso cref="EvaluationOptions" />
      <seealso cref="EvaluationTypes" />
      <seealso cref="Expression.Evaluate" />
      <seealso cref="Expression.Validate" />
      <seealso cref="PropertyObject" />
      <seealso cref="TSError" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Expression.GetConstantValue">
      <summary>If the expression is a constant, the method returns the result of the expression in the form of a PropertyObject, otherwise the method returns <c>NULL</c>.</summary>
      <remarks>This method evaluates the expression without a context and without altering values.</remarks>
      <seealso cref="Engine.CheckExpression" />
      <seealso cref="Engine.CheckExprSyntax" />
      <seealso cref="Expression.Evaluate" />
      <seealso cref="Expression.Validate" />
      <seealso cref="PropertyObject" />
      <seealso cref="PropertyObject.EvaluateEx" />
      <seealso cref="&#xD;&#xA;" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.StationOptions">
      <summary>Use the StationOptions class to set preferences for TestStand. The settings affect all sequence editor and user interface sessions. Use the Engine.DisplayOptionsDialog method to launch the Station Options dialog box.</summary>
      <seealso cref="Engine.DisplayOptionsDialog" />
      <seealso cref="Engine.StationOptions" />
      <seealso cref="&quot;Station Options dialog box&quot;javascript:RefLink('/InfoTopics/DB_Station_Opt.htm')" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StationOptions.UserFilePath">
      <summary>Specifies the location of the current user manager file.
</summary>
      <remarks>Pass an empty path to this property to instruct TestStand to use the default user manager file.
A change to this property does not take effect until you restart the engine.</remarks>
      <seealso cref="Engine.CurrentUserHasPrivilege" />
      <seealso cref="StationOptions.AutoLoginSystemUser" />
      <seealso cref="StationOptions.EnableUserPrivilegeChecking" />
      <seealso cref="StationOptions.RequireUserLogin" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StationOptions.EnableUserPrivilegeChecking">
      <summary>Specifies whether the sequence editor or user interface verify user privileges.</summary>
      <remarks>When this property is <c>False</c>, the sequence editor or user interface do not verify that the user has the privileges necessary for performing specific operations. Instead, all operations that depend on user privileges are always available.</remarks>
      <seealso cref="Engine.CurrentUserHasPrivilege" />
      <seealso cref="StationOptions.AutoLoginSystemUser" />
      <seealso cref="StationOptions.RequireUserLogin" />
      <seealso cref="StationOptions.UserFilePath" />
      <seealso cref="User.HasPrivilege" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StationOptions.AutoLoginSystemUser">
      <summary>Specifies if the LoginLogout callback sequence uses the current user login for the operating system as the login for TestStand when first launching a user interface or sequence editor.
</summary>
      <remarks>If the user login for the operating system does not exist in TestStand, the Login dialog box launches. If the user login for the operating system exists in TestStand, TestStand automatically logs in the user using the operating system login.
<para>Note: TestStand does not perform password authentication for an automatic login.</para></remarks>
      <seealso cref="Engine.CallFrontEndCallbackEx" />
      <seealso cref="StationOptions.EnableUserPrivilegeChecking" />
      <seealso cref="StationOptions.RequireUserLogin" />
      <seealso cref="StationOptions.UserFilePath" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StationOptions.RequireUserLogin">
      <summary>Specifies if the sequence editor or user interfaces require that a user be logged in.
</summary>
      <remarks>TestStand only uses this property when the StationOptions.EnableUserPrivilegeChecking property is <c>False</c>. When this property is <c>True</c>, the user interfaces are disabled until a user successfully logs in.</remarks>
      <seealso cref="StationOptions.AutoLoginSystemUser" />
      <seealso cref="StationOptions.EnableUserPrivilegeChecking" />
      <seealso cref="StationOptions.UserFilePath" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StationOptions.RTEOption">
      <summary>Specifies the default behavior of TestStand when a run-time error occurs in an execution.
</summary>
      <remarks>This property replaced the more limited property <c>Engine.BreakOnRTE</c> and offers a superset of the functionality.</remarks>
      <seealso cref="Engine.DisplayRunTimeErrorDialogEx" />
      <seealso cref="Execution.RTEOptionForThisExecution" />
      <seealso cref="&quot;Run-Time Error dialog box&quot;javascript:RefLink('/InfoTopics/DB_Run_Time_Error.htm')" />
      <seealso cref="StationOptions.RTEOption" />
      <seealso cref="Thread.SetBatchRTEOption" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StationOptions.TracingEnabled">
      <summary>Specifies if tracing is enabled for the sequence editor and user interfaces.</summary>
      <seealso cref="Execution.TracingDisabled" />
      <seealso cref="SequenceContext.CanTrace" />
      <seealso cref="StationOptions.BreakpointsEnabled" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StationOptions.BreakpointsEnabled">
      <summary>Specifies whether to stop on breakpoints in all executions.
</summary>
      <remarks>Set this property to <c>True</c> to stop on breakpoints. Set this property to <c>False</c> to ignore breakpoints.</remarks>
      <seealso cref="StationOptions.TracingEnabled" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StationOptions.DisableResults">
      <summary>Specifies whether to disable recording of results for all steps.</summary>
      <remarks>When this property is <c>True</c>, TestStand does not record results for steps. When this property is <c>False</c>, TestStand records results based on the setting of the Step.ResultRecordingOption property of each individual step or based on the Sequence.DisableResults property and the Execution.DisableResults property.
<para>Note: TestStand might not honor changes to this property in a running sequence until the sequence completes the current step group.</para></remarks>
      <seealso cref="Execution.DisableResults" />
      <seealso cref="Sequence.DisableResults" />
      <seealso cref="Step.ResultRecordingOption" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StationOptions.AlwaysGotoCleanupOnFailure">
      <summary>Overrides the Sequence.FailureAction property setting when this property is <c>True</c>.</summary>
      <seealso cref="Sequence.FailureAction" />
      <seealso cref="SequenceContext.GotoCleanup" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StationOptions.ExecutionMask">
      <summary>Specifies execution options.</summary>
      <remarks>Specifies the execution options using ExecutionMask constants. To specify multiple execution options, use the bitwise-OR operator.</remarks>
      <seealso cref="Engine.NewExecution" />
      <seealso cref="ExecutionMask" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StationOptions.InteractiveBranchMode">
      <summary>Specifies the action TestStand takes when executing a Goto step or evaluating a post action that specifies a new destination step while running in an interactive execution.</summary>
      <seealso cref="&quot;Run-Time Error dialog box&quot;javascript:RefLink('/InfoTopics/DB_Run_Time_Error.htm')" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.StationOptions.GetTimeLimitEnabled(NationalInstruments.TestStand.Interop.API.TimeLimitTypes,NationalInstruments.TestStand.Interop.API.TimeLimitOperations)">
      <summary>Returns a value that indicates whether a time limit for an execution is enabled for a specific type of time limit and operation.</summary>
      <remarks>TestStand maintains a set of time limit settings that determine whether TestStand takes an action when an execution state does not change for a specified amount of time. For example, TestStand could attempt to abort an execution if, while TestStand is attempting to shut down, a terminating execution takes longer than 10 seconds.
TestStand maintains unique time limit settings for normal executions and for executions that run while the engine is exiting. For each type of execution, TestStand maintains different time limit settings for when an execution is aborting, executing, and terminating.</remarks>
      <returns>Returns a value that indicates whether the time limit is enabled.</returns>
      <param name="type">Specifies the type of time limit for the setting the method returns.</param>
      <param name="operation">Specifies the operation type for the setting the method returns.</param>
      <seealso cref="StationOptions.GetTimeLimit" />
      <seealso cref="StationOptions.GetTimeLimitAction" />
      <seealso cref="StationOptions.SetTimeLimitEnabled" />
      <seealso cref="TimeLimitOperations" />
      <seealso cref="TimeLimitTypes" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.StationOptions.GetTimeLimit(NationalInstruments.TestStand.Interop.API.TimeLimitTypes,NationalInstruments.TestStand.Interop.API.TimeLimitOperations)">
      <summary>Returns the time limit value in seconds for a specific type of time limit and operation.</summary>
      <remarks>TestStand maintains a set of time limit settings that determine whether TestStand takes an action when an execution state does not change for a specified amount of time. For example, TestStand could attempt to abort an execution if a terminating execution takes longer than 10 seconds to shut down.
TestStand maintains unique time limit settings for normal executions and for executions that run while the engine is exiting. For each type of execution, TestStand maintains different time limit settings for aborting, executing, and terminating executions.</remarks>
      <returns>Returns the time limit in seconds.</returns>
      <param name="type">Specifies the type of time limit for the setting the method returns.</param>
      <param name="operation">Specifies the operation type for the setting that the method returns.</param>
      <seealso cref="StationOptions.GetTimeLimitAction" />
      <seealso cref="StationOptions.GetTimeLimitEnabled" />
      <seealso cref="StationOptions.SetTimeLimit" />
      <seealso cref="TimeLimitOperations" />
      <seealso cref="TimeLimitTypes" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.StationOptions.SetTimeLimitAction(NationalInstruments.TestStand.Interop.API.TimeLimitTypes,NationalInstruments.TestStand.Interop.API.TimeLimitOperations,NationalInstruments.TestStand.Interop.API.TimeLimitActions)">
      <summary>Specifies an action for a specific type of time limit and operation TestStand takes if the time limit expires.</summary>
      <remarks>TestStand maintains a set of time limit settings that determine whether TestStand takes an action when an execution state does not change for a specified amount of time. For example, TestStand could attempt to abort an execution if, while TestStand is attempting to shut down, a terminating execution takes longer than 10 seconds.
TestStand maintains unique time limit settings for normal executions and for executions that run while the engine is exiting. For each type of execution, TestStand maintains different time limit settings for when an execution is aborting, executing, and terminating.
<para>Note: You must enable the corresponding time limit with the  StationOptions.SetTimeLimitEnabled method before calling this method. Otherwise, the method does not have any effect. If a time limit is disabled, the time limit action is set to <c>TimeLimitAction_Prompt</c> as default.</para></remarks>
      <param name="type">Specifies the type of time limit for the setting the method sets.</param>
      <param name="operation">Specifies the operation type for the setting the method sets.</param>
      <param name="action">Specifies the action TestStand takes when the time limit expires.</param>
      <seealso cref="StationOptions.GetTimeLimitAction" />
      <seealso cref="StationOptions.SetTimeLimit" />
      <seealso cref="StationOptions.SetTimeLimitEnabled" />
      <seealso cref="TimeLimitActions" />
      <seealso cref="TimeLimitOperations" />
      <seealso cref="TimeLimitTypes" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StationOptions.ShowHiddenProperties">
      <summary>Specifies whether to display in user interfaces properties marked as hidden.
</summary>
      <remarks>When this property is <c>True</c>, TestStand applications display all the subproperties of property objects in dialog boxes and variables views. When this property is <c>False</c>, TestStand applications do not display the subproperties marked with the PropFlags_Hidden flag.</remarks>
      <seealso cref="PropertyFlags" />
      <seealso cref="PropertyObject.GetFlags" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StationOptions.PromptToFindFiles">
      <summary>Specifies if TestStand launches a File dialog box when it cannot find the necessary files in the current search directory paths.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StationOptions.SeqFileVersionAutoIncrementOpt">
      <summary>Specifies if sequence file versions are automatically incremented when the file is saved.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StationOptions.TypeVersionAutoIncrementOpt">
      <summary>Specifies if the sequence editor automatically increments type versions before saving modified types. </summary>
      <remarks>The type version number is composed of the following four things in this format: <c>Major.Minor.Revision.Build</c>.</remarks>
      <seealso cref="PropertyObject.TypeVersion" />
      <seealso cref="PropertyObjectFile.CheckForModifiedTypes" />
      <seealso cref="StationOptions.TypeVersionAutoIncrementPromptOpt" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StationOptions.TypeVersionAutoIncrementPromptOpt">
      <summary>Specifies if the sequence editor prompts the user to increment the type version before saving the modified types.</summary>
      <seealso cref="PropertyObject.TypeVersion" />
      <seealso cref="PropertyObjectFile.CheckForModifiedTypes" />
      <seealso cref="StationOptions.TypeVersionAutoIncrementOpt" />
      <seealso cref="TypeVersionAutoIncrement" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StationOptions.ReloadDocsWhenOpeningWorkspace">
      <summary>Specifies if the sequence editor opens the documents that were open when the workspace was unloaded.
</summary>
      <remarks>When this property is <c>True</c> and you open a workspace file, the sequence editor opens the documents that were open when the workspace file was last closed.</remarks>
      <seealso cref="Engine.CurrentWorkspaceFile" />
      <seealso cref="StationOptions.ReloadWorkspaceAtStartup" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StationOptions.ReloadWorkspaceAtStartup">
      <summary>Specifies if the sequence editor opens the last workspace file loaded when it launches.
</summary>
      <remarks>If this option is <c>True</c> when the sequence editor launches, the sequence editor loads the workspace file the Engine.LastWorkspacePath property specifies.</remarks>
      <seealso cref="Engine.CurrentWorkspaceFile" />
      <seealso cref="Engine.LastWorkspacePath" />
      <seealso cref="StationOptions.ReloadDocsWhenOpeningWorkspace" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StationOptions.StationID">
      <summary>Specifies a test station identification string for this instance of the TestStand Engine.
This property never returns an empty string. If you set this property to an empty string, this property returns the same value as the Engine.ComputerName property.
</summary>
      <seealso cref="Engine.ComputerName" />
      <seealso cref="Engine.UniqueEngineId" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StationOptions.SpecifyStepsByUniqueIdInExpressions">
      <summary>Specifies how the Expression Browser dialog box specifies steps in expressions.</summary>
      <remarks>TestStand uses this option to determine whether to replace the step name with the step ID when you construct an expression in the Expression Browser dialog box, as follows: <c>Sequence.Main[&quot;step name&quot;].Property</c>.</remarks>
      <seealso cref="Engine.DisplayBrowseExprDialogEx" />
      <seealso cref="&quot;Expression Browser dialog box&quot;javascript:RefLink('/InfoTopics/DB_Exp_Browser.htm')" />
      <seealso cref="Step.UniqueStepId" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StationOptions.UseStationModel">
      <summary>Specifies if client sequence files use the station model.</summary>
      <remarks>When you set this property to <c>True</c>, the station model specified by StationModelSequenceFilePath is used when the model option for a client sequence file specifies to use the station model.
When you set this property to <c>False</c>, sequence files only have a process model file associated with them if they explicitly specify one. Typically, sequence files do not explicitly specify a process model file.</remarks>
      <seealso cref=".AllowOtherModels" />
      <seealso cref="SequenceFile.ModelOption" />
      <seealso cref=".StationModelSequenceFilePath" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StationOptions.AllowOtherModels">
      <summary>Specifies if sequence files can specify a process model file other than the current station model file.
</summary>
      <remarks>When you set this property to <c>False</c>, you can only load the following sequence files:
<para><para>&#160;&#160;&#160;&#160;* Sequence files that do not specify a process model file</para><para>&#160;&#160;&#160;&#160;* Sequence files that specify the current station model as their process model file</para></para></remarks>
      <seealso cref="SequenceFile.ModelOption" />
      <seealso cref="StationOptions.StationModelSequenceFilePath" />
      <seealso cref="StationOptions.UseStationModel" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StationOptions.StationModelSequenceFilePath">
      <summary>Specifies the pathname of the station model sequence file.
</summary>
      <remarks>If this property is a relative pathname, TestStand uses the Engine.FindFileEx method to determine the absolute pathname of the station model sequence file.</remarks>
      <seealso cref="Engine.FindFileEx" />
      <seealso cref="StationOptions.AllowOtherModels" />
      <seealso cref="StationOptions.UseStationModel" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StationOptions.Language">
      <summary>Specifies the language TestStand uses to display text.</summary>
      <remarks>Changes to this property do not take effect until the next time you start the engine or call the Engine.ReloadStringResourceFiles method.</remarks>
      <seealso cref="Engine.ReloadStringResourceFiles" />
      <seealso cref="StationOptions.GetLanguages" />
      <seealso cref="StationOptions.RecognizeMBChars" />
      <seealso cref="StationOptions.UseLocalizedDecimalPoint" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StationOptions.UseLocalizedDecimalPoint">
      <summary>Specifies whether to use the operating system setting to determine the character used as a decimal point.
</summary>
      <remarks>When this property is <c>True</c>, TestStand uses the operating system setting to determine the character it uses as the localized decimal point. When this property is <c>False</c>, TestStand uses the period character to represent decimal points.</remarks>
      <seealso cref="StationOptions.GetLanguages" />
      <seealso cref="StationOptions.Language" />
      <seealso cref="StationOptions.RecognizeMBChars" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StationOptions.RecognizeMBChars">
      <summary>Indicates whether TestStand recognizes extended character code sequences when it compares and processes strings.</summary>
      <remarks>The TestStand Engine determines this based on the current system code page at launch. 
<para>Note: As of TestStand 2019, this property is read-only. Attempting to set it results in a run-time error. Assigning to the current value is ignored.</para></remarks>
      <seealso cref="StationOptions.GetLanguages" />
      <seealso cref="StationOptions.Language" />
      <seealso cref="StationOptions.UseLocalizedDecimalPoint" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.StationOptions.GetLanguages">
      <summary>Obtains a list of languages TestStand supports.
</summary>
      <remarks>This method obtains an array of strings containing the list of directories that correspond to the possible language configurations supported.</remarks>
      <seealso cref="StationOptions.Language" />
      <seealso cref="StationOptions.RecognizeMBChars" />
      <seealso cref="StationOptions.UseLocalizedDecimalPoint" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StationOptions.AllowSequenceCallsFromRemoteMachine">
      <summary>Specifies if a remote computer can run a sequence on the current station.</summary>
      <seealso cref="Engine.IsRemote" />
      <seealso cref="StationOptions.AllowAllUsersAccessFromRemoteMachine" />
      <seealso cref="StationOptions.ShowEngineTrayIconOnRemoteStations" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StationOptions.AllowAllUsersAccessFromRemoteMachine">
      <summary>Specifies whether all users from remote machines can call sequences on this computer.
</summary>
      <remarks>If you set this property to <c>True</c>, you do not have to configure the remote TestStand server using the dcomcnfg application. When you set this property, TestStand modifies the registry in the same manner as dcomcnfg.
<para>Note: TestStand does not use this setting unless you set the <c>StationOptions.AllowSequenceCallFromRemoteMachine</c> property to <c>True</c>.</para></remarks>
      <seealso cref="Engine.IsRemote" />
      <seealso cref="StationOptions.AllowSequenceCallsFromRemoteMachine" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StationOptions.ShowEngineTrayIconOnRemoteStations">
      <summary>Specifies whether to show the system tray icon when the TestStand remote engine is active on this computer.</summary>
      <seealso cref="Engine.MasterEngine" />
      <seealso cref="StationOptions.AllowAllUsersAccessFromRemoteMachine" />
      <seealso cref="StationOptions.AllowSequenceCallsFromRemoteMachine" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StationOptions.CheckOutFilesWhenEdited">
      <summary>Specifies if the sequence editor checks a file out from source code control when you attempt to modify the file in the sequence editor.
</summary>
      <remarks>The default value is <c>True</c>. If this property is <c>True</c> and a current workspace is specified when you attempt to edit a checked-in file, the sequence editor prompts you to check the file out from source code control. If this property is <c>False</c>, you can edit a read-only file in the sequence editor only when you enable the Allow Editing of Read-Only Files option in the sequence editor.</remarks>
      <seealso cref="Engine.CurrentWorkspaceFile" />
      <seealso cref="StationOptions.CheckOutOnlySelectedFiles" />
      <seealso cref="StationOptions.PromptWhenAddingFilesToSC" />
      <seealso cref="StationOptions.UseDialogForCheckOut" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StationOptions.PromptWhenAddingFilesToSC">
      <summary>Specifies if the sequence editor prompts you to add files to source code control when you add files to a workspace.
</summary>
      <remarks>When this option is <c>True</c> and a current workspace file is specified, the sequence editor launches a dialog box, in which you can add files to source code control whenever you add them to a workspace file. When this option is <c>False</c>, the sequence editor does not launch a dialog box.</remarks>
      <seealso cref="Engine.CurrentWorkspaceFile" />
      <seealso cref="StationOptions.CheckOutFilesWhenEdited" />
      <seealso cref="StationOptions.CheckOutOnlySelectedFiles" />
      <seealso cref="StationOptions.UseDialogForCheckOut" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StationOptions.UseDialogForCheckOut">
      <summary>Specifies if the sequence editor launches a dialog box to check out files from source code control.
</summary>
      <remarks>When this property is <c>True</c>, the sequence editor always launches a dialog box when you check out files from source code control. When this property is <c>False</c>, the sequence editor checks out the files without launching the dialog box.</remarks>
      <seealso cref="Engine.CurrentWorkspaceFile" />
      <seealso cref="StationOptions.CheckOutFilesWhenEdited" />
      <seealso cref="StationOptions.PromptWhenAddingFilesToSC" />
      <seealso cref="StationOptions.UseDialogForCheckOut" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StationOptions.CheckOutOnlySelectedFiles">
      <summary>Specifies if the sequence editor checks out only selected files in the workspace from source code control.
</summary>
      <remarks>A workspace file contains a list of project files, each project file contains a lists of sequence files, and a sequence file can contain lists of code modules and other files. When you set this option to <c>True</c>, the sequence editor only displays the selected file, such as a project file, in the source code control dialog boxes. When this property is <c>False</c>, the sequence editor displays the selected item and all the items it contains in the source code control dialog boxes.</remarks>
      <seealso cref="Engine.CurrentWorkspaceFile" />
      <seealso cref="StationOptions.CheckOutFilesWhenEdited" />
      <seealso cref="StationOptions.PromptWhenAddingFilesToSC" />
      <seealso cref="StationOptions.UseDialogForCheckOut" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StationOptions.SystemDefaultSourceCodeControlProvider">
      <summary>Specifies the default system source code control provider. 
If you do not want to specify a default source code control provider, pass an empty string as the value of this property.
</summary>
      <remarks><para>Note: This is a system property. Changes to this property affect all Microsoft Windows applications using source code control integration.</para>
<para>Note: Setting StationOptions.SystemDefaultSourceCodeControlProvider fails silently if TestStand does not have sufficient privileges to modify the Windows registry.</para>
This property reflects the value stored in the Windows registry for the system source code control settings located in the string key <c>HKEY_LOCAL_MACHINE\Software\SourceCodeControlProvider\ProviderRegKey</c>. The key specifies the name of the <c>HKEY_LOCAL_MACHINE\Software</c> registry key that contains the source code control provider server name and path. (Platform: (32-bit TestStand)) On 64-bit operating systems, this registry key appears only in the 32-bit registry. Use the path <c>HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\SourceCodeControlProvider\ProviderRegKey</c> to access the key in the registry editor.
If the Engine.CurrentWorkspaceFile property is not empty and the WorkspaceFile.ProviderName property for the current workspace is empty, TestStand connects to the system default source code control provider to perform source code control operations.
If the value of this property is empty, TestStand only connects to a source code control provider if the <c>WorkspaceFile.ProviderName</c> property for the current workspace is not empty.</remarks>
      <seealso cref="Engine.CurrentWorkspaceFile" />
      <seealso cref="StationOptions.CheckOutFilesWhenEdited" />
      <seealso cref="StationOptions.CheckOutOnlySelectedFiles" />
      <seealso cref="StationOptions.PromptWhenAddingFilesToSC" />
      <seealso cref="StationOptions.UseDialogForCheckout" />
      <seealso cref="WorkspaceFile.ProviderName" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StationOptions.UIMessageDelay">
      <summary>Specifies how many milliseconds must pass between postings of <c>UIMsg_Trace</c> events.</summary>
      <remarks>Set this property to specify how many milliseconds must pass before you receive the next <c>UIMsg_Trace</c> event. This property is useful for slowing down the posting of trace messages to the user interface or sequence editor to allow time for processing mouse events and/or to display the trace of an execution more slowly. 
<para>Note: The value of this property can never be less than the value of the StationOptions.UIMessageMinDelay property. If set to a lesser value, UIMessageDelay is automatically reset to the value of the <c>StationOptions.UIMessageMinDelay</c> property.</para></remarks>
      <seealso cref="StationOptions.UIMessageMinDelay" />
      <seealso cref="UIMessageCodes" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StationOptions.UIMessageMinDelay">
      <summary>Specifies the minimum value allowed for the StationOptions.UIMessageDelay property. This setting is not persisted like most StationOptions. The setting lasts only for the lifetime of the Engine.</summary>
      <remarks>Default value is 0. 
Use this property to specify the minimum value allowed for the <c>StationOptions.UIMessageDelay</c> property for the sequence editor or user interface.
</remarks>
      <seealso cref="StationOptions.UIMessageDelay" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StationOptions.InteractiveExePropagateStatus">
      <summary>Specifies if TestStand allows sequence failure, Goto cleanup, and error settings from a nested interactive execution to propagate to the invoking execution.</summary>
      <remarks>When this property is <c>False</c>, TestStand saves the values of the SequenceContext.SequenceFailed, SequenceContext.GotoCleanup, and SequenceContext.SequenceErrorOccurred properties before executing a nested interactive execution, and restores the values after executing a nested interactive execution. When this property is <c>True</c>, TestStand allows the nested interactive execution changes to affect the execution that invokes the nested interactive execution.</remarks>
      <seealso cref="SequenceContext.GotoCleanup" />
      <seealso cref="SequenceContext.SequenceErrorOccurred" />
      <seealso cref="SequenceContext.SequenceFailed" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.StationOptions.SetTimeLimit(NationalInstruments.TestStand.Interop.API.TimeLimitTypes,NationalInstruments.TestStand.Interop.API.TimeLimitOperations,System.Double)">
      <summary>Specifies the time limit value in seconds for a specific type of time limit operation.</summary>
      <remarks>TestStand maintains a set of time limit settings that determine whether TestStand takes an action when an execution state does not change for a specified amount of time. For example, TestStand could attempt to abort an execution if, while TestStand is attempting to shut down, a terminating execution takes longer than 10 seconds.
TestStand maintains unique time limit settings for normal executions and for executions that run while the engine is exiting. For each type of execution, TestStand maintains different time limit settings for when an execution is aborting, executing, and terminating.</remarks>
      <param name="type">Specifies the type of time limit for the setting the method sets.</param>
      <param name="operation">Specifies the operation type for the setting the method sets.</param>
      <param name="timeLimit">Specifies the time limit in seconds.</param>
      <seealso cref="StationOptions.GetTimeLimit" />
      <seealso cref="StationOptions.SetTimeLimitAction" />
      <seealso cref="StationOptions.SetTimeLimitEnabled" />
      <seealso cref="TimeLimitOperations" />
      <seealso cref="TimeLimitTypes" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.StationOptions.GetTimeLimitAction(NationalInstruments.TestStand.Interop.API.TimeLimitTypes,NationalInstruments.TestStand.Interop.API.TimeLimitOperations)">
      <summary>Returns the action for a specific type of time limit and operation TestStand takes if the time limit expires.</summary>
      <remarks>TestStand maintains a set of time limit settings that determine whether TestStand takes an action when an execution state does not change for a specified amount of time. For example, TestStand could attempt to abort an execution if, while TestStand is attempting to shut down, a terminating execution takes longer than 10 seconds.
TestStand maintains unique time limit settings for normal executions and for executions that run while the engine is exiting. For each type of execution, TestStand maintains different time limit settings for when an execution is aborting, executing, and terminating.
<para>Note: If a time limit is disabled, the time limit action is set to <c>TimeLimitAction_Prompt</c> as default.</para></remarks>
      <returns>Returns the action TestStand takes when the time limit expires.</returns>
      <param name="type">Specifies the type of time limit for the setting the method returns.</param>
      <param name="operation">Specifies the operation type for the setting the method returns.</param>
      <seealso cref="StationOptions.GetTimeLimit" />
      <seealso cref="StationOptions.GetTimeLimitEnabled" />
      <seealso cref="StationOptions.SetTimeLimitAction" />
      <seealso cref="TimeLimitOperations" />
      <seealso cref="TimeLimitTypes" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.StationOptions.SetTimeLimitEnabled(NationalInstruments.TestStand.Interop.API.TimeLimitTypes,NationalInstruments.TestStand.Interop.API.TimeLimitOperations,System.Boolean)">
      <summary>Specifies whether a time limit for an execution is enabled for a specific type of time limit and operation.</summary>
      <remarks>TestStand maintains a set of time limit settings that determine whether TestStand takes an action when an execution state does not change for a specified amount of time. For example, TestStand could attempt to abort an execution if, while TestStand is attempting to shut down, a terminating execution takes longer than 10 seconds.
TestStand maintains unique time limit settings for normal executions and for executions that run while the engine is exiting. For each type of execution, TestStand maintains different time limit settings for when an execution is aborting, executing, and terminating.</remarks>
      <param name="type">Specifies the type of time limit for the setting the method sets.</param>
      <param name="operation">Specifies the operation type for the setting the method sets.</param>
      <param name="enabled">Specifies if the time limit is enabled.</param>
      <seealso cref="StationOptions.GetTimeLimitEnabled" />
      <seealso cref="StationOptions.SetTimeLimit" />
      <seealso cref="StationOptions.SetTimeLimitAction" />
      <seealso cref="TimeLimitOperations" />
      <seealso cref="TimeLimitTypes" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StationOptions.BreakOnStepFailure">
      <summary>If this property is <c>True</c>, TestStand suspends an execution for any step that fails. If this property is <c>False</c>, TestStand suspends execution based on whether the <c>ExecTypeMask_BreakOnStepFailure</c> option is enabled for the execution.</summary>
      <remarks>If a step in a process model sequence file fails, TestStand only suspends the execution if tracing is enabled for the sequence or if a previous suspend occurred within the sequence context.</remarks>
      <seealso cref="ExecutionTypeMask" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StationOptions.BreakOnSequenceFailure">
      <summary>If this property is <c>True</c>, TestStand suspends an execution on sequence failure. If this property is <c>False</c>, TestStand suspends execution based on whether the ExecTypeMask_BreakOnSequenceFailure option is enabled for the execution.</summary>
      <remarks>If a step in a process model sequence file causes the sequence to fail, TestStand only suspends the execution if tracing is enabled for the sequence or if a previous suspend occurred within the sequence context. TestStand also suspends an execution if the SequenceContext.SequenceFailed property is set during the execution of a step even when the step does not fail.</remarks>
      <seealso cref="ExecutionTypeMask" />
      <seealso cref="SequenceContext.SequenceFailed" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StationOptions.DebugOptions">
      <summary>Specifies the type of debug features that TestStand performs. Specify one or more DebugOptions constants. Use the bitwise-OR operator to specify multiple options.</summary>
      <seealso cref="DebugOptions" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StationOptions.DefaultFileWritingFormat">
      <summary>Specifies the format in which TestStand writes new files.</summary>
      <remarks>Attempting to set to INI (or any other unsupported value) will throw an exception.</remarks>
      <seealso cref="PropertyObjectFile.FileWritingFormat" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StationOptions.DefaultCPUAffinityForThreadsEx">
      <summary>Specifies which CPUs to use for threads TestStand creates and the user interface thread.</summary>
      <remarks>This property is a number in which each bit represents a CPU. The lowest-order bit represents the first CPU. For example, a value of <c>12</c>, which is <c>1100</c> in binary, represents CPUs 3 and 4 on a quad-core computer. A value of <c>-1</c> specifies to use all CPUs available to the process.
TestStand does not update the CPU affinity of threads for currently executing sequences when you change this property.
Refer to Using TestStand on SMP Systems for more information about optimizing TestStand performance on symmetric multiprocessing (SMP) systems for multithreaded applications.</remarks>
      <seealso cref="SequenceCallModule.CPUAffinityForNewThreadOption" />
      <seealso cref="&quot;Using TestStand on SMP Systems&quot;javascript:TSFundLink('/InfoTopics/SMP_Clarification.htm')" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StationOptions.AllowAutomaticTypeConflictResolution">
      <summary>Specifies how TestStand automatically resolves type conflicts. TestStand normally resolves type conflicts when TestStand loads a file with a version of a type that differs from the version of the type currently in memory and when the Use the definition that has the highest version number option on the Version tab of the Type Properties dialog box or on the Version tab of the Step Type Properties dialog box is enabled for both versions of the type. In this case, TestStand updates the file with the lower version of the type to use the higher version.</summary>
      <seealso cref="&quot;Step Type Properties dialog box&quot;javascript:RefLink('/InfoTopics/DB_Step_Type_Prop.htm')" />
      <seealso cref="&quot;Type Properties dialog box&quot;javascript:RefLink('/InfoTopics/DB_DataTypeProp.htm')" />
      <seealso cref="&quot;Version tab of Step Type Properties dialog box&quot;javascript:RefLink('/InfoTopics/DB_Step_Type_Prop_Version_Tab.htm')" />
      <seealso cref="&quot;Version tab of Type Properties dialog box&quot;javascript:RefLink('/InfoTopics/DB_DataTypeProp_Ver_Tab.htm')" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StationOptions.FileModificationIndicatorPolicy">
      <summary>Specifies the policy for when to indicate that a file being opened is modified. When you open a file, TestStand must modify the file in memory when a version of a type defined in the file is updated as a result of an automatic type conflict resolution, or if the data format of the file changes as a result of opening the file in a newer version of TestStand. In such cases, TestStand modifies the file in memory even if the policy specifies not to indicate that the file is modified.
Specify one or more FileModificationIndicatorPolicies constants. Use the bitwise-OR operator to specify multiple policies.</summary>
      <seealso cref="FileModificationIndicatorPolicies" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StationOptions.DefaultCPUAffinityForThreads">
      <summary><para>Note: This property is obsolete. Use the StationOptions.DefaultCPUAffinityForThreadsEx property instead. Getting this property on a 64-bit instance of the TestStand Engine results in an error. Setting this property on 32-bit architectures does not result in an error, but only the first 32 CPUs can be specified.</para></summary>
      <remarks>Specifies which CPUs to use for threads TestStand creates and the user interface thread.
This property is a number in which each bit represents a CPU. The lowest-order bit represents the first CPU. For example, a value of <c>12</c>, which is <c>1100</c> in binary, represents CPUs 3 and 4 on a quad-core computer. A value of <c>-1</c> specifies to use all CPUs available to the process.
TestStand does not update the CPU affinity of threads for currently executing sequences when you change this property.
Refer to Using TestStand on SMP Systems for more information about optimizing TestStand performance on symmetric multiprocessing (SMP) systems for multithreaded applications.</remarks>
      <seealso cref="SequenceCallModule.CPUAffinityForNewThreadOption" />
      <seealso cref="&quot;Using TestStand on SMP Systems&quot;javascript:TSFundLink('/InfoTopics/SMP_Clarification.htm')" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StationOptions.AllowCancellingPreloadExpression">
      <summary>When this Boolean expression is empty or evaluates to <c>True</c>, the Preload Progress dialog box includes a Cancel button so users can cancel preloading files. When this property evaluates to <c>False</c>, the dialog box does not contain a Cancel button to prevent users from cancelling preloading files.  </summary>
      <remarks>If you cancel preloading a file when you open a sequence file, the sequence file opens without preloading the code modules. If you cancel preloading files when you execute a sequence file, the execution does not initiate.
You can use the CurrentUserHasPrivilege expression function to allow users to cancel preloading files based on privileges. For example, set this property to <c>CurrentUserHasPrivilege(Priv_Terminate) || CurrentUserHasPrivilege(Priv_Abort)</c> to allow users to cancel preloading files only when the user has terminate or abort privileges.
This property only affects cancelling preloading files directly from the Preload Progress dialog box. If TestStand cannot find a file during preloading and launches a Find File dialog box, you can cancel the Find File dialog box to cancel preloading files regardless of the value of this property.</remarks>
      <seealso cref="StationOptions.PreloadProgressDelay" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StationOptions.LoginOnStart">
      <summary>When this property is <c>True</c> and the ApplicationMgr.LoginOnStart property is <c>True</c>, the LoginLogout Front-End callback sequence runs when you call the ApplicationMgr.Start method.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StationOptions.PreloadProgressDelay">
      <summary>Specifies the delay in seconds before the Preload Progress dialog box launches while preloading code modules. Specify a negative value to disable the Preload Progress dialog box but continue to preload code modules.</summary>
      <seealso cref="ExecutionTypeMask" />
      <seealso cref="GetSeqFileOptions" />
      <seealso cref="&quot;Preload Progress dialog box&quot;javascript:RefLink('/InfoTopics/DB_Preload_Progress.htm')" />
      <seealso cref="StationOptions.AllowCancellingPreloadExpression" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StationOptions.AutoCreateVariableLocation">
      <summary>Specifies the location where automatically generated variables are created.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.TokenizeOptions">
      <summary>These constants represent options you can use with the tokenizeOptions parameter of the Expression.Tokenize method. Use the bitwise-OR operator to specify more than one option.</summary>
      <seealso cref="Expression.Tokenize" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TokenizeOptions.TokenizeOption_NoOptions">
      <summary>(Value: 0x0) No options.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TokenizeOptions.TokenizeOption_PreserveComments">
      <summary>(Value: 0x1) Use this option to prevent the Expression object from removing comment tokens during tokenization.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TokenizeOptions.TokenizeOption_RecognizeIncompleteExpression">
      <summary>(Value: 0x3) Use this option to separately tokenize each line of an expression. If you specify this option, string constants and comments that are incomplete at the end of an expression are identified with the codes <c>TokenCode_UnterminatedString</c> or <c>TokenCode_UnterminatedMultiLineComment</c> instead of the <c>TokenCode_Bad</c> code. Also, a dot not followed by a letter or underscore is identified with the code <c>TokenCode_FieldSpecifier</c> instead of the <c>TokenCode_Bad</c>.
<para>Note: Specifying this option automatically specifies the <c>TokenizeOption_PreserveComments</c> option.</para></summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TokenizeOptions.TokenizeOption_RecognizeCPPIdentifiers">
      <summary>(Value: 0x4) Use this option to specify that the Expression.Tokenize method recognizes C++ scope resolution and template operators when determining if a token is a valid identifier.<para>Note: This option is only for parsing. You cannot use C++ scope resolution and template operators in identifiers in an expression you evaluate.</para></summary>
      <seealso cref="Expression.Tokenize" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.TokenCode">
      <summary>These constants represent the operator, constant, and identifier tokens an expression can contain. The tokenCode parameter of the Expression.GetToken method returns these constants to identify the type of token you specify.</summary>
      <seealso cref="Expression.GetToken" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TokenCode.TokenCode_NotAToken">
      <summary>(Value: 0)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TokenCode.TokenCode_MultiLineComment">
      <summary>(Value: 1)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TokenCode.TokenCode_UnterminatedMultiLineComment">
      <summary>(Value: 2)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TokenCode.TokenCode_SingleLineComment">
      <summary>(Value: 3)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TokenCode.TokenCode_Bad">
      <summary>(Value: 4)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TokenCode.TokenCode_Plus">
      <summary>(Value: 5)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TokenCode.TokenCode_Minus">
      <summary>(Value: 6)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TokenCode.TokenCode_Multiply">
      <summary>(Value: 7)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TokenCode.TokenCode_Divide">
      <summary>(Value: 8)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TokenCode.TokenCode_Modulus">
      <summary>(Value: 9)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TokenCode.TokenCode_PlusPlus">
      <summary>(Value: 10)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TokenCode.TokenCode_MinusMinus">
      <summary>(Value: 11)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TokenCode.TokenCode_GreaterThan">
      <summary>(Value: 12)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TokenCode.TokenCode_GreaterThanEqual">
      <summary>(Value: 13)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TokenCode.TokenCode_LessThan">
      <summary>(Value: 14)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TokenCode.TokenCode_LessThanEqual">
      <summary>(Value: 15)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TokenCode.TokenCode_Equal">
      <summary>(Value: 16)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TokenCode.TokenCode_NotEqual">
      <summary>(Value: 17)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TokenCode.TokenCode_LogicalAnd">
      <summary>(Value: 18)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TokenCode.TokenCode_LogicalOr">
      <summary>(Value: 19)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TokenCode.TokenCode_LogicalNot">
      <summary>(Value: 20)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TokenCode.TokenCode_BitwiseAnd">
      <summary>(Value: 21)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TokenCode.TokenCode_BitwiseOr">
      <summary>(Value: 22</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TokenCode.TokenCode_BitwiseNot">
      <summary>(Value: 24)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TokenCode.TokenCode_ExclusiveOr">
      <summary>(Value: 23)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TokenCode.TokenCode_RightShift">
      <summary>(Value: 25)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TokenCode.TokenCode_LeftShift">
      <summary>(Value: 26)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TokenCode.TokenCode_Assignment(System.Boolean)">
      <summary>(Value: 27)</summary>
      <param name="New Param"></param>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TokenCode.TokenCode_PlusAssignment">
      <summary>(Value: 28)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TokenCode.TokenCode_MinusAssignment">
      <summary>(Value: 29)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TokenCode.TokenCode_MultAssignment">
      <summary>(Value: 30)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TokenCode.TokenCode_DivAssignment">
      <summary>(Value: 31)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TokenCode.TokenCode_BitwiseAndAssignment">
      <summary>(Value: 32)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TokenCode.TokenCode_BitwiseOrAssignment">
      <summary>(Value: 33)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TokenCode.TokenCode_ExclusiveOrAssignment">
      <summary>(Value: 34)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TokenCode.TokenCode_RightShiftAssignment">
      <summary>(Value: 35)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TokenCode.TokenCode_LeftShiftAssignment">
      <summary>(Value: 36)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TokenCode.TokenCode_ModAssignment">
      <summary>(Value: 37)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TokenCode.TokenCode_LeftParenthesis">
      <summary>(Value: 38)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TokenCode.TokenCode_RightParenthesis">
      <summary>(Value: 39)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TokenCode.TokenCode_FieldSpecifier">
      <summary>(Value: 40)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TokenCode.TokenCode_LeftBracket">
      <summary>(Value: 41)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TokenCode.TokenCode_RightBracket">
      <summary>(Value: 42)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TokenCode.TokenCode_Separator">
      <summary>(Value: 43)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TokenCode.TokenCode_Conditional">
      <summary>(Value: 44)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TokenCode.TokenCode_Colon">
      <summary>(Value: 45)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TokenCode.TokenCode_Real">
      <summary>(Value: 46)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TokenCode.TokenCode_Integer">
      <summary>(Value: 47)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TokenCode.TokenCode_BinaryInteger">
      <summary>(Value: 48)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TokenCode.TokenCode_HexInteger">
      <summary>(Value: 49)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TokenCode.TokenCode_String">
      <summary>(Value: 50)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TokenCode.TokenCode_UnterminatedString">
      <summary>(Value: 51)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TokenCode.TokenCode_Identifier">
      <summary>(Value: 52)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TokenCode.TokenCode_LeftBrace">
      <summary>(Value: 53)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TokenCode.TokenCode_RightBrace">
      <summary>(Value: 54)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TokenCode.TokenCode_SymbolicConstant">
      <summary>(Value: 55)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TokenCode.TokenCode_OctalInteger">
      <summary>(Value: 56)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TokenCode.TokenCode_TemporaryVariable">
      <summary>(Value: 57)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TokenCode.TokenCode_Integer64">
      <summary>(Value: 58)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TokenCode.TokenCode_UnsignedInteger64">
      <summary>(Value: 59)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TokenCode.TokenCode_ReferenceFieldSpecifier">
      <summary>(Value: 60)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TokenCode.TokenCode_UnescapedString">
      <summary>(Value: 61)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TokenCode.TokenCode_DotDot">
      <summary>(Value: 62)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TokenCode.TokenCode_Directive">
      <summary>(Value: 63)</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.InteractiveBranchModes">
      <summary>Use these constants with StationOptions.InteractiveBranchMode property.</summary>
      <seealso cref="&quot;Run-Time Error dialog box&quot;javascript:RefLink('/InfoTopics/DB_Run_Time_Error.htm')" />
      <seealso cref="StationOptions.InteractiveBranchMode" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.InteractiveBranchModes.InteractiveBranchMode_None">
      <summary>(Value: 0) The interactive execution ignores all branches and executes selected steps in the order the sequence editor or user interface specifies.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.InteractiveBranchModes.InteractiveBranchMode_Ignore">
      <summary>(Value: 1) The interactive execution allows branching within the selected steps, and all branching to non-selected steps is ignored.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.InteractiveBranchModes.InteractiveBranchMode_GotoEnd">
      <summary>(Value: 2) The interactive execution allows branching within selected steps. All branches to non-selected steps automatically go to the end step and start the next interactive loop iteration, if specified.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.InteractiveBranchModes.InteractiveBranchMode_RaiseRTE">
      <summary>(Value: 3) The interactive execution allows branching within selected steps. All branches to non-selected steps cause a run-time error. If enabled, the Run-Time Error dialog box launches.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.InteractiveBranchModes.InteractiveBranchMode_AllowAll">
      <summary>(Value: 4) The interactive execution allows branching to selected and non-selected steps. When TestStand executes a selected step and no branch occurs, the next step is the next selected step. When TestStand executes a non-selected step and no branch occurs, the next step is the step after the non-selected step.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.TypeVersionAutoIncrement">
      <summary>Use the following constants with the StationOptions.TypeVersionAutoIncrementOpt property or with the versionIncOption parameter of PropertyObjectFile.CheckForModifiedTypes method.</summary>
      <seealso cref="PropertyObjectFile.CheckForModifiedTypes" />
      <seealso cref="StationOptions.TypeVersionAutoIncrementOpt" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TypeVersionAutoIncrement.TypeVersionInc_None">
      <summary>(Value: 0) Do not increment type versions.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TypeVersionAutoIncrement.TypeVersionInc_Major">
      <summary>(Value: 1) Auto-increment major version number.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TypeVersionAutoIncrement.TypeVersionInc_Minor">
      <summary>(Value: 2) Auto-increment minor version number.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TypeVersionAutoIncrement.TypeVersionInc_Revision">
      <summary>(Value: 3) Auto-increment revision version number.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TypeVersionAutoIncrement.TypeVersionInc_Build">
      <summary>(Value: 4) Auto-increment build version number.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.SpecifyStepsByUniqueIdOptions">
      <summary>Use the following constants with the StationOptions.SpecifyStepsByUniqueIdInExpressions property.</summary>
      <seealso cref="StationOptions.SpecifyStepsByUniqueIdInExpressions" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SpecifyStepsByUniqueIdOptions.SpecifyStepsByUniqueIdOption_Ask">
      <summary>(Value: 1) TestStand prompts you to use a unique step ID.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SpecifyStepsByUniqueIdOptions.SpecifyStepsByUniqueIdOption_Yes">
      <summary>(Value: 2) Use unique step IDs.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SpecifyStepsByUniqueIdOptions.SpecifyStepsByUniqueIdOption_No">
      <summary>(Value: 3) Use step names.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.WatchExpressionBreakType">
      <summary>Use these constants to specify the breakpoint type value of the WatchExpression.BreakpointType property.</summary>
      <seealso cref="WatchExpression.BreakpointType" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.WatchExpressionBreakType.WatchExpressionBreakType_None">
      <summary>(Value: 0x0) Specifies no breakpoint.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.WatchExpressionBreakType.WatchExpressionBreakType_OnChange">
      <summary>(Value: 0x1) Specifies to suspend the execution when the evaluated value of the watch expression changes.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.WatchExpressionBreakType.WatchExpressionBreakType_OnExpressionTrue">
      <summary>(Value: 0x2) Specifies to suspend the execution whenever the coerced value of the watch expression evaluates to <c>True</c>. This option has no effect on arrays or containers.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.ToolMenuTypes">
      <summary>This data type contains values that specify a type of menu item. The constants represent the possible values for the EditTimeMenuItem.Type property.</summary>
      <seealso cref="EditTimeMenuItem.Type" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ToolMenuTypes.ToolMenuType_Command">
      <summary>(Value: 1) Invokes a Microsoft Windows executable or command with optional arguments.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ToolMenuTypes.ToolMenuType_Sequence">
      <summary>(Value: 2) Initiates an execution on a sequence in a sequence file.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ToolMenuTypes.ToolMenuType_SubMenu">
      <summary>(Value: 3) Contains additional menu items in a submenu.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ToolMenuTypes.ToolMenuType_SequenceFile">
      <summary>(Value: 4) Creates a submenu that lists all sequences in a sequence file as menu items.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.SeqFileCallbacks">
      <summary>Use these string constants to specify the callbackName parameter of the SequenceFile.CreateCallbackOverrideSequence method.</summary>
      <seealso cref="DefaultModelCallbacks" />
      <seealso cref="FrontEndCallbacks" />
      <seealso cref="SequenceFile.CreateCallbackOverrideSequence" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SeqFileCallbacks.SeqFileCback_PreStep">
      <summary>(Value: &quot;SequenceFilePreStep&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SeqFileCallbacks.SeqFileCback_PostStep">
      <summary>(Value: &quot;SequenceFilePostStep&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SeqFileCallbacks.SeqFileCback_PreInteractive">
      <summary>(Value: &quot;SequenceFilePreInteractive&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SeqFileCallbacks.SeqFileCback_PostInteractive">
      <summary>(Value: &quot;SequenceFilePostInteractive&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SeqFileCallbacks.SeqFileCback_Load">
      <summary>(Value: &quot;SequenceFileLoad&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SeqFileCallbacks.SeqFileCback_Unload">
      <summary>(Value: &quot;SequenceFileUnload&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SeqFileCallbacks.SeqFileCback_PostResultListEntry">
      <summary>(Value: &quot;SequenceFilePostResultListEntry&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SeqFileCallbacks.SeqFileCback_PostStepRuntimeError">
      <summary>(Value: &quot;SequenceFilePostStepRuntimeError&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SeqFileCallbacks.SeqFileCback_PostStepFailure">
      <summary>(Value: &quot;SequenceFilePostStepFailure&quot;)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SeqFileCallbacks.SeqFileCback_PostResults">
      <summary>(Value: &quot;SequenceFilePostResults&quot;)</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.SpecifyModuleOptions">
      <summary>These constants represent the options you can use with the Step.SpecifyModule method. Use the bitwise-OR operator to specify more than one option.</summary>
      <seealso cref="&quot;Specify Module dialog box&quot;javascript:RefLink('/InfoTopics/DB_EditAutoCall.htm')" />
      <seealso cref="&quot;Step.SpecifyModule&quot;Step_SpecifyModule_M.htm" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SpecifyModuleOptions.SpecMod_NoOptions">
      <summary>(Value: 0x0) No options.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SpecifyModuleOptions.SpecMod_AllowPrototypeChanges">
      <summary>(Value: 0x4) Use this option to change the function prototype of the module.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SpecifyModuleOptions.SpecMod_NoSyntaxChecking">
      <summary>(Value: 0x2) Use this option to disable expression syntax checking when closing the Specify Module dialog box.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SpecifyModuleOptions.SpecMod_ReadOnly">
      <summary>(Value: 0x1) Use this option to create a read-only version of the Specify Module dialog box.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SpecifyModuleOptions.SpecMod_NoParameterLogging">
      <summary>(Value: 0x10) Use this option to prevent specifying parameters to log as additional results in the Specify Module dialog box. When you use this option, the parameters control does not include a Log column and does not include an Advanced Logging menu item in the context menu.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.StepGroups">
      <summary>This data type contains values that specify the step group of a sequence.</summary>
      <seealso cref="Sequence.GetStep" />
      <seealso cref="Sequence.InsertStep" />
      <seealso cref="SequenceContext.StepGroup" />
      <seealso cref="Step.StepGroup" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.StepGroups.StepGroup_Cleanup">
      <summary>(Value: 2) Specifies the Cleanup step group.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.StepGroups.StepGroup_Main">
      <summary>(Value: 1) Specifies the Main step group.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.StepGroups.StepGroup_Setup">
      <summary>(Value: 0) Specifies the Setup step group.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.EditPathsDialogOptions">
      <summary>These constants represent the options you can use with the dlgOptions parameter of the Engine.DisplayEditPathsInFilesDialog method. Use the bitwise-OR operator to specify more than one option.</summary>
      <seealso cref="Engine.AppMainHwnd" />
      <seealso cref="Engine.DisplayEditPathsInFilesDialog" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.EditPathsDialogOptions.EditPaths_AllowEditOfReadOnlyFiles">
      <summary>(Value: 0x1) Allows modifications to paths in read-only files in the dialog box.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.EditPathsDialogOptions.EditPaths_NoOptions">
      <summary>(Value: 0x0) No options.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.EditPathsDialogOptions.EditPaths_ReadOnly">
      <summary>(Value: 0x20000) Creates a read-only version of the dialog box.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.EditPathsDialogOptions.EditPaths_ModalToAppMainWind">
      <summary>(Value: 0x10000) By default, the dialog box is modal to the last active window of the calling thread, or if none exists, to the last active window from AppMainHwnd. If you set this option, the dialog box is modal with respect to the window handle of the Engine.AppMainHwnd property. Typically, you do not need to set this option.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.WatchExpression">
      <summary>Use objects of the WatchExpression class to monitor the values of properties and variables using expressions. Typically, you use WatchExpression objects to display run-time values in a Watch View pane in a user interface. A WatchExpression object defines an expression TestStand evaluates during sequence execution. 
You can configure a conditional breakpoint on a watch expression. The breakpoint suspends execution when a value of the watch expression changes, or whenever the coerced value of the watch expression evaluates to <c>True</c>. The TestStand Engine maintains a list of watch expressions and evaluates conditional breakpoints during execution.
You can also specify the scope of the watch expression, which specifies whether the expression applies to all executions of the client sequence file or only the current execution, and whether to evaluate the watch expression only when executing within a specific sequence file or sequence.
Use the collection object the Engine.GetWatchExpressions method returns to manage a watch expression list. You can create new watch expressions by using the WatchExpressions.Insert method, which adds a new watch expression to the collection and returns the new object. To add a watch expression to the list the engine maintains and monitors, pass <c>True</c> for the insertInEngine parameter.</summary>
      <seealso cref="Engine.GetWatchExpressions" />
      <seealso cref="WatchExpressions.Insert" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.WatchExpression.Evaluate(NationalInstruments.TestStand.Interop.API.SequenceContext,System.Int32)">
      <summary>Evaluates the watch expression and returns the result.</summary>
      <remarks>TestStand evaluates the watch expression within the context of the PropertyObject on which you call this method. This means that the expression can reference the subproperties of the PropertyObject as variables. This method modifies the context if the expression contains operators or method calls that change property values. This method throws an exception if the evaluation of the watch expression fails.</remarks>
      <returns>Result of the expression, in the form of PropertyObject. The PropertyObject can contain a value of any type depending on the expression. The returned PropertyObject is the actual object and not a copy.</returns>
      <param name="seqContext">Specifies the SequenceContext to use while evaluating the watch expression. This context must be associated with a currently running execution.</param>
      <param name="reserved">Pass <c>0</c> for this parameter.</param>
      <seealso cref="Execution" />
      <seealso cref="PropertyObject" />
      <seealso cref="PropertyObject.EvaluateEx" />
      <seealso cref="SequenceContext" />
      <seealso cref="WatchExpression.Expression" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.WatchExpression.ClientSequenceFile">
      <summary>Specifies the name of the client sequence file associated with the watch expression.</summary>
      <remarks>Every watch expression created in the sequence editor Watch View pane is associated with a client sequence file, and is visible only within executions that use the specified client sequence file. By default, a watch expression is associated with the client sequence file that was executing when the watch expression was created. The watch expression is valid throughout the execution of the specified client sequence file, unless it is restricted by other scope properties, such as sequence filename or sequence. All scoping properties have the suffix <c>Scope</c> attached to their name.
A watch expression without an associated client sequence file is called a global watch expression. Global watch expressions are visible in executions for all client sequence files, unless restricted by other scope properties. You can create Global watch expressions using the Watch Expressions tab of the Edit Breakpoints/Watch Expressions dialog box.</remarks>
      <seealso cref="&quot;Edit Breakpoints/Watch Expressions dialog box&quot;javascript:RefLink('/InfoTopics/DB_Break_Watch.htm')" />
      <seealso cref="Engine.DisplayEditBreakAndWatchDialog" />
      <seealso cref=".ExecutionScope" />
      <seealso cref=".SequenceFileScope" />
      <seealso cref=".SequenceScope" />
      <seealso cref="&quot;Watch Expressions tab&quot;javascript:RefLink('/InfoTopics/DB_Break_Watch_Watch_Tab.htm')" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.WatchExpression.SequenceFileScope">
      <summary>Specifies the sequence file to which the watch expression applies. </summary>
      <remarks>Limits the scope of a watch expression by associating the object with a particular sequence file. The TestStand Engine only evaluates a watch expression when a sequence in the specified sequence file is executing. Set this property to an empty string to instruct TestStand to evaluate the watch expression for all sequence files. You can specify a sequence filename or an absolute path name.
Use the WatchExpression.SequenceScope property to limit the scope of the watch expression to sequences with a particular name.</remarks>
      <seealso cref="WatchExpression.ClientSequenceFile" />
      <seealso cref="WatchExpression.ExecutionScope" />
      <seealso cref="WatchExpression.SequenceScope" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.WatchExpression.SequenceScope">
      <summary>Specifies the name of the sequence to which the watch expression applies.</summary>
      <remarks>Limits the scope of the watch expression by associating the object with a particular sequence name. The TestStand Engine evaluates a watch expression only when the specified sequence executes. Set this property to an empty string to evaluate the watch expression for all sequences.</remarks>
      <seealso cref="WatchExpression.ClientSequenceFile" />
      <seealso cref="WatchExpression.ExecutionScope" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.WatchExpression.ExecutionScope">
      <summary>Specifies the execution to which the watch expression applies.</summary>
      <remarks>Limits the scope of the watch expression by associating the object with a particular execution. The TestStand Engine only evaluates a watch expression for the specified execution. Watch expressions that apply to a specific execution are discarded when you release the execution. Set this property to <c>NULL</c> to associate the watch expression with all executions for the specified client sequence file. Watch expressions that apply to all executions are automatically saved and reloaded if the Engine.PersistWatchExpressions property is set to <c>True</c>.</remarks>
      <seealso cref="Engine.PersistWatchExpressions" />
      <seealso cref="Execution" />
      <seealso cref="WatchExpression.ClientSequenceFile" />
      <seealso cref="WatchExpression.SequenceFileScope" />
      <seealso cref="WatchExpression.SequenceScope" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.WatchExpression.Expression">
      <summary>Specifies the expression for the watch expression.</summary>
      <remarks>Set this property to a variable name, property name, or expression. Call the WatchExpression.Evaluate method to evaluate the expression against a specific context.</remarks>
      <seealso cref="WatchExpression.Evaluate" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.WatchExpression.NumericFormat">
      <summary>Specifies the numeric format to use when displaying the value the WatchExpression.Evaluate method returns.</summary>
      <remarks>This property applies only to watch expressions that evaluate to numeric, container, or array values. For arrays and containers, the numeric format applies to all the subproperties of an array or container. The syntax of the numeric format string is identical to the format string the C printf function accepts, with the following exceptions:
<para><para>&#160;&#160;&#160;&#160;* Place a <c>$</c> character after the <c>%</c> character in the format string to remove trailing zeros after the decimal point.</para><para>&#160;&#160;&#160;&#160;* Use a format code of <c>%b</c> to format a number in binary.</para><para>&#160;&#160;&#160;&#160;* Specify an empty string to set the format to the default numeric format.</para></para></remarks>
      <seealso cref="Engine.DisplayEditNumericFormatDialog" />
      <seealso cref="PropertyObject.GetFormattedValue" />
      <seealso cref="PropertyObject.NumericFormat" />
      <seealso cref="WatchExpression.Evaluate" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.WatchExpression.BreakpointType">
      <summary>Specifies the type of the conditional breakpoint settings for the watch expression.</summary>
      <remarks>The TestStand Engine maintains and monitors a list of watch expressions and evaluates conditional breakpoint settings during execution. You can add a watch expression to the list that the engine maintains and monitors by passing <c>True</c> to the insertInEngine parameter of the WatchExpressions.Insert method. Breakpoints are ignored if you disable them using the StationOptions.BreakpointsEnabled property.</remarks>
      <seealso cref="StationOptions.BreakpointsEnabled" />
      <seealso cref="WatchExpressions.Insert" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.WatchExpression.BreakpointTriggered(NationalInstruments.TestStand.Interop.API.SequenceContext)">
      <summary>Returns a value that indicates whether the suspension of the execution was a result of the breakpoint condition being met for the watch expression.</summary>
      <remarks>Call this method after the TestStand Engine suspends an execution. Multiple watch expressions can return <c>True</c> for this method simultaneously if their breakpoint conditions are satisfied. This method returns the same value until the engine evaluates the watch expression again.</remarks>
      <returns>Returns <c>True</c> if the breakpoint condition has been met. Otherwise, returns <c>False</c>.</returns>
      <param name="seqContext">Specifies the sequence context for the suspended execution.</param>
      <seealso cref="Engine.GetWatchExpressions" />
      <seealso cref="SequenceContext" />
      <seealso cref="WatchExpression.BreakpointType" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.WatchExpression.DisplayConfigurationDialog(System.String,NationalInstruments.TestStand.Interop.API.SequenceContext,System.Int32)">
      <summary>Launches the Watch Expression Settings dialog box, in which you can edit the settings of the watch expression.</summary>
      <returns>Returns <c>True</c> if the user clicks OK. Otherwise, returns <c>False</c>.</returns>
      <param name="dlgTitle">Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.</param>
      <param name="context">Specifies the sequence context the dialog box uses to evaluate expressions specified for the watch expression. You can use the  Engine.NewEditContext method to obtain an edit-time sequence context.</param>
      <param name="dlgOptions">Specifies any combination of the CommonDialogOptions constants</param>
      <seealso cref="CommonDialogOptions" />
      <seealso cref="Engine.AppMainHwnd" />
      <seealso cref="Engine.NewEditContext" />
      <seealso cref="SequenceContext" />
      <seealso cref="&quot;Watch Expression Settings dialog box&quot;javascript:RefLink('/InfoTopics/DB_Watch_Expr_Set.htm')" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.WatchExpression.UniqueWatchId">
      <summary>Returns an identification string unique to this watch expression in all instances of the TestStand Engine.</summary>
      <remarks>The unique ID of a watch expression persists if the watch expression persists.</remarks>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.WatchExpression.UseScopingContext">
      <summary>Specifies if TestStand attaches a watch expression to a sequence context that matches the scoping properties of the watch expression. While the attached sequence context is valid, the watch expression uses the sequence context to evaluate the watch expression, even if the thread adds additional call stack levels by invoking subsequences.</summary>
      <remarks>If this property is set, TestStand automatically caches the scoping context when a thread enters a specified scope. Otherwise, use the active context to evaluate the watch expression. 
This property defaults to <c>False</c>.</remarks>
      <seealso cref="WatchExpression.ExecutionScope" />
      <seealso cref="WatchExpression.GetScopingContext" />
      <seealso cref="WatchExpression.SequenceFileScope" />
      <seealso cref="WatchExpression.SequenceScope" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.WatchExpression.GetScopingContext(NationalInstruments.TestStand.Interop.API.SequenceContext)">
      <summary>Returns the scoping context, if any, associated with the watch expression.</summary>
      <remarks>The scoping context is stored when the <c>WatchExpression.UseScopingContext</c> property is <c>True</c> and a thread enters the specified scope. The context is released if the UseScopingContext property is <c>False</c> or if the specified scope is changed.</remarks>
      <returns>The sequence context associated with the specified scope. Returns <c>NULL</c> if a sequence context is not associated with the scope or if the WatchExpressionUseScopingContext property is <c>False</c>.</returns>
      <param name="currentSeqContext">Specifies a reference to the sequence context from the current execution. </param>
      <seealso cref="SequenceContext" />
      <seealso cref="WatchExpression.ExecutionScope" />
      <seealso cref="WatchExpression.SequenceFileScope" />
      <seealso cref="WatchExpression.SequenceScope" />
      <seealso cref="WatchExpression.UseScopingContext" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.WatchExpressions">
      <summary>Objects of the WatchExpressions class are collections of objects of the WatchExpression class.</summary>
      <seealso cref="WatchExpression" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.WatchExpressions.Item(System.Object)">
      <summary>Returns a reference to an item at the specified index in the collection.</summary>
      <returns>The item at the specified index.</returns>
      <param name="index">Specifies the index of the item to retrieve within the collection.</param>
      <seealso cref="Engine.GetWatchExpressions" />
      <seealso cref="WatchExpression" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.WatchExpressions.Count">
      <summary>Returns the number of items in the collection.</summary>
      <seealso cref="Engine.GetWatchExpressions" />
      <seealso cref="WatchExpression" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.WatchExpressions.Insert(NationalInstruments.TestStand.Interop.API.WatchExpression,System.Object,System.Object)">
      <summary>Adds a new item to the collection and inserts it into the watch expression list.</summary>
      <remarks>The TestStand Engine maintains a list of watch expressions. The engine automatically evaluates watch expressions with conditional break settings during execution. The engine only monitors for value changes in watch expressions for which the current sequence context matches the scope the WatchExpression.ClientSequenceFile, WatchExpression.ExecutionScope and WatchExpression.SequenceScope properties define. To add the newly created watch expression to the watch expression list the engine maintains, pass <c>True</c> for the insertInEngine parameter.
If the Engine.PersistWatchExpressions property is <c>True</c>, the engine associates the list of watch expressions with the current workspace. When you change the current workspace, the engine automatically saves the current watch expression list associated with the new workspace. The engine saves the watch expression list every time TestStand saves the workspace or sequence files in it.</remarks>
      <returns>The newly created watch expression.</returns>
      <param name="beforePos">Specifies a reference to a WatchExpression object already in the list to specify the object before which TestStand inserts the new WatchExpression object. Pass <c>NULL</c> to insert the new object at the end of the list.</param>
      <param name="clientSequenceFileParam">Specifies the client sequence file to associate with the newly created WatchExpression object. Pass <c>NULL</c> to create a global watch expression, a watch expression associated with no client sequence file. If this parameter is not specified, the parameter defaults to <c>NULL</c>.</param>
      <param name="insertInEngine">Specifies whether to insert the new WatchExpression object in the watch expression list the engine maintains. Pass <c>True</c> to add the watch expression to the collection and to the watch expression list the engine maintains. Pass <c>False</c> to add only the new watch expression to the collection. If no value is specified, the behavior is the same as passing <c>True</c>.</param>
      <seealso cref="Engine.GetWatchExpressions" />
      <seealso cref="Engine.PersistWatchExpressions" />
      <seealso cref="&quot;Omitting Optional Parameters&quot;javascript:APILink('/InfoTopics/Optional_Parameters.htm')" />
      <seealso cref="WatchExpression" />
      <seealso cref="WatchExpression.ClientSequenceFile" />
      <seealso cref="WatchExpression.ExecutionScope" />
      <seealso cref="WatchExpression.SequenceScope" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.WatchExpressions.Remove(NationalInstruments.TestStand.Interop.API.WatchExpression)">
      <summary>Removes a watch expression from the collection and the watch expression list that the engine maintains.</summary>
      <remarks>This method removes only the watch expression from the collection and the watch expression list that the engine maintains. To delete the WatchExpression object itself, you must release any references to the object after calling this method. This method does not return an error if the WatchExpression object is not in the collection or in the watch expression list that the engine maintains.</remarks>
      <param name="WatchExpression">Specifies a reference to the WatchExpression object to remove from the collection.</param>
      <seealso cref="Engine.GetWatchExpressions" />
      <seealso cref="WatchExpression" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.WatchExpressions.Clear">
      <summary>Removes all WatchExpression objects from both the collection and the watch expression list the engine maintains.</summary>
      <remarks>This method releases only the references to the WatchExpression objects the collection and the engine hold. To delete the WatchExpression objects, you must release any other references to the WatchExpression objects.</remarks>
      <seealso cref="Engine.GetWatchExpressions" />
      <seealso cref="WatchExpression" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.WatchExpressions.Clone(System.Object)">
      <summary>Clones the WatchExpression objects in the collection and returns the cloned objects in a new collection.</summary>
      <returns>A WatchExpression object collection that contains clones of the WatchExpression objects in the original collection.</returns>
      <param name="insertInEngine">Specifies if TestStand adds the new WatchExpression objects to the watch expression list the engine maintains. Pass <c>True</c> to add the watch expressions to the cloned collection and to the watch expression list the engine maintains. Pass <c>False</c> to add only the new watch expression to the cloned collection. If no value is specified, the behavior is the same as passing <c>True</c>.</param>
      <seealso cref="&quot;Omitting Optional Parameters&quot;javascript:APILink('/InfoTopics/Optional_Parameters.htm')" />
      <seealso cref="WatchExpressions" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.WatchExpressionFilterOptions">
      <summary>Use these constants to specify filtering options for the Engine.GetWatchExpressions method. To be included in the returned list, a watch expression must meet all the specified filters.</summary>
      <seealso cref="Engine.GetWatchExpressions" />
      <seealso cref="WatchExpression.ClientSequenceFile" />
      <seealso cref="WatchExpression.ExecutionScope" />
      <seealso cref="WatchExpression.SequenceFileScope" />
      <seealso cref="WatchExpression.SequenceScope" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.WatchExpressionFilterOptions.WatchExpressionFilter_NoOptions">
      <summary>(Value: 0x0) Specifies that only the clientSequenceFile parameter of the <c>Engine.GetWatchExpressions</c> method filters the returned list. This returns all watch expressions if the clientSequenceFile parameter is empty or only the watch expressions that specify a WatchExpression.ClientSequenceFile property that matches the clientSequenceFile parameter.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.WatchExpressionFilterOptions.WatchExpressionFilter_IncludeGlobals">
      <summary>(Value: 0x1) Specifies that global watch expressions that do not specify a client sequence file pass through the client sequence file filter. The global watch expressions included are in addition to the watch expressions that match the clientSequenceFile parameter of the <c>Engine.GetWatchExpressions</c> method.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.WatchExpressionFilterOptions.WatchExpressionFilter_FilterByExecution">
      <summary>(Value: 0x2) Specifies that only watch expressions associated with the execution the scopingSeqContext parameter of the Engine.GetWatchExpressions method specifies pass through this filter. Watch expressions that are not associated with any execution pass through this filter.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.WatchExpressionFilterOptions.WatchExpressionFilter_FilterBySequenceFile">
      <summary>(Value: 0x4) Specifies that only watch expressions that specify a WatchExpression.SequenceFileScope property that matches the currently executing sequence file the seqContext parameter of the <c>Engine.GetWatchExpressions</c> method specifies pass through this filter. Watch expressions that do not specify a sequence file scope pass through this filter.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.WatchExpressionFilterOptions.WatchExpressionFilter_FilterBySequence">
      <summary>(Value: 0x8) Specifies that only watch expressions that specify a WatchExpression.SequenceScope property that matches the currently executing sequence the seqContext parameter of the <c>Engine.GetWatchExpressions</c> method specifies pass through this filter. Watch expressions that do not specify a sequence scope pass through this filter.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.SaveWorkspaceFileOptions">
      <summary>These constants represent the options you can use with the options parameter of the WorkspaceFile.SaveWorkspaceAndProjectFiles method. Use the bitwise-OR operator to specify more than one option.</summary>
      <seealso cref="WorkspaceFile.SaveWorkspaceAndProjectFiles" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SaveWorkspaceFileOptions.SaveWorkspaceFile_NoOptions">
      <summary>(Value: 0x0) No options.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SaveWorkspaceFileOptions.SaveWorkspaceFile_PromptUser">
      <summary>(Value: 0x1) If this flag is set, TestStand prompts the user to save all modified files.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SaveWorkspaceFileOptions.SaveWorkspaceFile_SkipWorkspaceFile">
      <summary>(Value: 0x2) If this flag is set, TestStand skips the workspace file.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SaveWorkspaceFileOptions.SaveWorkspaceFile_SkipReadOnlyFiles">
      <summary>(Value: 0x4) If this flag is set, TestStand skips all read-only files.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.EditBreakAndWatchOptions">
      <summary>These constants represent the options you can use with the dlgOptions parameter of the Engine.DisplayEditBreakAndWatchDialog method. Use the bitwise-OR operator to specify more than one option. 
By default, TestStand displays both the Breakpoints and Watch Expression tabs.</summary>
      <seealso cref="&quot;Breakpoints tab&quot;javascript:RefLink('/InfoTopics/DB_Break_Watch_Break_Tab.htm')" />
      <seealso cref="&quot;Edit Breakpoints/Watch Expressions dialog box&quot;javascript:RefLink('/InfoTopics/DB_Break_Watch.htm')" />
      <seealso cref="Engine.AppMainHwnd" />
      <seealso cref="Engine.DisplayEditBreakAndWatchDialog" />
      <seealso cref="&quot;Watch Expressions tab&quot;javascript:RefLink('/InfoTopics/DB_Break_Watch_Watch_Tab.htm')" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.EditBreakAndWatchOptions.EditBreakAndWatch_NoOptions">
      <summary>(Value: 0x0) Specifies no options. TestStand displays both the Breakpoints and Watch Expressions tabs.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.EditBreakAndWatchOptions.EditBreakAndWatch_ModalToAppMainWind">
      <summary>(Value : 0x10000) By default, the Edit Breakpoints/Watch Expressions dialog box is modal to the last active window of the calling thread, or if none exists, to the last active window from AppMainHwnd. If you set this option, the Edit Breakpoints/Watch Expressions dialog box is modal with respect to the window handle of the Engine.AppMainHwnd property. Typically, you do not need to set this option.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.EditBreakAndWatchOptions.EditBreakAndWatch_DisplayBreakpointTab">
      <summary>(Value: 0x1) Use this option to display only the Breakpoints tab of the Edit Breakpoints/Watch Expressions dialog box.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.EditBreakAndWatchOptions.EditBreakAndWatch_DisplayWatchExpressionTab">
      <summary>( Value: 0x2) Use this option to display only the Watch Expressions tab of the Edit Breakpoints/Watch Expressions dialog box.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.EditBreakAndWatchOptions.EditBreakAndWatch_ReadOnly">
      <summary>(Value: 0x20000) Use this option to create a read-only version of the Edit Breakpoints/Watch Expressions dialog box.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.Images">
      <summary>This collection class contains objects of the Picture data type. Use the Engine.Images property to acquire the collection object. The collection specifies the images TestStand loads from the <c>&lt;TestStand&gt;\Components\Icons</c> and <c>&lt;TestStand&#160;Public&gt;\Components\Icons</c> directories and images you add using the Engine.AddImage method. Use the Images.FindImage method to find an image using an image name.
Use the <c>Images</c> collection as an alternative to using the Engine.LargeImageListEx and Engine.SmallImageListEx properties.</summary>
      <seealso cref="Engine.AddImage" />
      <seealso cref="Engine.Images" />
      <seealso cref="Engine.LargeImageListEx" />
      <seealso cref="Engine.SmallImageListEx" />
      <seealso cref="Images.FindImage" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Images.Item(System.Int32)">
      <summary>Returns a reference to an item at the specified index in the collection.</summary>
      <param name="imageIndex">Specifies a zero-based index.</param>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Images.Count">
      <summary>Returns the number of items in the collection.</summary>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Images.FindImage(System.String,System.Int32,System.Int32)">
      <summary>Searches the collection for an image with a specific name.</summary>
      <remarks>Returns the image in a Picture object. This method errors if the image is not found.</remarks>
      <param name="iconName">Specifies the name of the image to find. Typically, the name includes the filename and file extension. Icon files are located in the <c>&lt;TestStand&gt;\Components\Icons</c> and <c>&lt;TestStand&#160;Public&gt;\Components\Icons</c> directories.</param>
      <param name="desiredWidth">Specifies the width, in pixels, of the image to return.</param>
      <param name="desiredHeight">Specifies the height, in pixels, of the image to return.</param>
      <seealso cref="Adapter.IconName" />
      <seealso cref="&quot;ApplicationMgr.GetImageName&quot;javascript:UILink('/RefTopics/ApplicationMgr_GetImageName_M.htm')" />
      <seealso cref="&quot;ExecutionViewMgr.GetImageName&quot;javascript:UILink('/RefTopics/ExecutionViewMgr_GetImageName_M.htm')" />
      <seealso cref="&quot;ListBarPageItem.IconName&quot;javascript:UILink('/RefTopics/ListBarPageItem_IconName_P.htm')" />
      <seealso cref="&quot;SequenceFileViewMgr.GetImageName&quot;javascript:UILink('/RefTopics/SequenceFileViewMgr_GetImageName_M.htm')" />
      <seealso cref="&quot;StatusBarPane.IconName&quot;javascript:UILink('/RefTopics/StatusBarPane_IconName_P.htm')" />
      <seealso cref="Step.IconName" />
      <seealso cref="StepType.IconName" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.EditTimeMenuItem">
      <summary>Objects of the EditTimeMenuItem class represent menu items in the sequence editor or user interface. A menu item is a command, a call to a sequence, a submenu, or a submenu of calls to sequences in a sequence file. EditTimeMenuItem objects specify the menu item type, which includes paths and arguments for commands, paths for sequence files, and names of sequences. Each object specifies an expression for evaluating item text at run time, and expressions that determine whether the item is enabled or visible at run time.
Use the Engine.GetEditTimeToolMenuItems method to obtain a reference to a collection of EditTimeMenuItem objects for the TestStand Tools menu. Use this collection to customize the contents of the Tools menu.
Use the Engine.GetRunTimeToolMenuItems method to obtain a reference to a collection of RunTimeMenuItem objects, which represent an evaluated version of the Tools menu. Use this collection to determine what is displayed in the Tools menu at run time.</summary>
      <seealso cref="Engine.GetEditTimeToolMenuItems" />
      <seealso cref="Engine.GetRunTimeToolMenuItems" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EditTimeMenuItem.Type">
      <summary>Specifies the type of Tools menu item.</summary>
      <remarks>If you set this property to <c>ToolMenuType_SubMenu</c>, TestStand assigns an EditTimeMenuItems collection object to SubMenuItems.</remarks>
      <seealso cref="EditTimeMenuItems" />
      <seealso cref=".SubMenuItems" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EditTimeMenuItem.ItemTextExpression">
      <summary>Specifies the expression TestStand uses to determine the menu item text at run time.</summary>
      <seealso cref="EditTimeMenuItem.EnabledExpression" />
      <seealso cref="EditTimeMenuItem.HiddenExpression" />
      <seealso cref="RunTimeMenuItem.Text" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EditTimeMenuItem.EnabledExpression">
      <summary>Specifies the expression TestStand uses to determine whether the menu item is enabled at run time.</summary>
      <seealso cref="EditTimeMenuItem.HiddenExpression" />
      <seealso cref="EditTimeMenuItem.ItemTextExpression" />
      <seealso cref="RunTimeMenuItem.ItemEnabled" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EditTimeMenuItem.HiddenExpression">
      <summary>Specifies the expression TestStand uses to determine whether the menu item is visible at run time.</summary>
      <remarks>TestStand excludes any edit-time menu items with hidden expressions that evaluate to <c>False</c> from the run-time collection.</remarks>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EditTimeMenuItem.SeparatorBefore">
      <summary>Specifies that a menu separator precedes the Tools menu item.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EditTimeMenuItem.SequenceFilePath">
      <summary>Specifies the path to the sequence file for sequence and sequence file menu types.</summary>
      <remarks>This property applies only when the EditTimeMenuItem.Type property is set to <c>ToolMenuType_SequenceFile</c> or <c>ToolMenuType_Sequence</c>.
The run-time copy of the Tools menu automatically expands submenus for menu items using the <c>ToolMenuType_SequenceFile</c> type, where each submenu item is a menu item using the <c>ToolMenuType_Sequence</c> type.</remarks>
      <seealso cref="EditTimeMenuItem.SequenceName" />
      <seealso cref="EditTimeMenuItem.Type" />
      <seealso cref="RunTimeMenuItem.InvokeItem" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EditTimeMenuItem.SequenceName">
      <summary>Specifies the name of the sequence that TestStand launches in an execution for sequence menu item types.</summary>
      <seealso cref="EditTimeMenuItem.SequenceFilePath" />
      <seealso cref="RunTimeMenuItem.InvokeItem" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EditTimeMenuItem.CommandPath">
      <summary>Specifies the path to the executable or system command the menu item invokes.</summary>
      <seealso cref="EditTimeMenuItem.CommandArguments" />
      <seealso cref="EditTimeMenuItem.CommandInitialDirectory" />
      <seealso cref="RunTimeMenuItem.InvokeItem" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EditTimeMenuItem.CommandArguments">
      <summary>Specifies the command-line arguments to pass to the command the EditTimeMenuItem.CommandPath property specifies.</summary>
      <remarks>This property applies only when the EditTimeMenuItem.Type property is set to <c>ToolMenuType_Command</c>.</remarks>
      <seealso cref="EditTimeMenuItem.CommandInitialDirectory" />
      <seealso cref="EditTimeMenuItem.CommandPath" />
      <seealso cref="EditTimeMenuItem.Type" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EditTimeMenuItem.CommandInitialDirectory">
      <summary>Specifies the initial working directory when invoking the command the EditTimeMenuItem.CommandPath property specifies.</summary>
      <seealso cref="EditTimeMenuItem.CommandArguments" />
      <seealso cref="EditTimeMenuItem.CommandPath" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EditTimeMenuItem.Editable">
      <summary>Specifies whether the properties of the menu item display as read-only.</summary>
      <seealso cref="EditTimeMenuItem.ItemTextExpression" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EditTimeMenuItem.SubMenuItems">
      <summary>Returns a collection of Tools menu items that represent the submenu for the menu item.</summary>
      <remarks>The collection exists only when the EditTimeMenuItem.Type property is set to <c>ToolMenuType_SubMenu</c>. Otherwise, this property returns <c>NULL</c>.</remarks>
      <seealso cref="EditTimeMenuItem.Type" />
      <seealso cref="EditTimeMenuItems" />
      <seealso cref="RunTimeMenuItem.SubMenuItems" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EditTimeMenuItem.EditsSelectedFile">
      <summary>Specifies if the Tools menu item edits the selected sequence file.</summary>
      <remarks>This property applies only to sequence and sequence file item types. The sequence editor uses this option to determine whether to prompt the user to check out the selected file from source control if it is not already checked out.</remarks>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EditTimeMenuItem.CommandArgumentsExpression">
      <summary>Specifies an expression defining the command-line arguments to pass to the command that the EditTimeMenuItem.CommandPath property specifies.</summary>
      <remarks>This property applies only when the EditTimeMenuItem.Type property is set to ToolMenuType_Command.</remarks>
      <seealso cref=".CommandPath" />
      <seealso cref=".CommandArguments" />
      <seealso cref=".Type" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.EditTimeMenuItems">
      <summary>The EditTimeMenuItems class specifies a collection of EditTimeMenuItem objects. An EditTimeMenuItem object represents a menu item such as a command, a call to a sequence, a submenu, or a submenu of calls to sequence in a sequence file. Each object in the collection specifies the menu item type and the expressions which determine the item text, hidden state, and enabled state. A submenu item specifies a collection of menu items in the submenu.
Use the Engine.GetEditTimeToolMenuItems method to obtain a reference to a collection of this class for the Tools menu. Use this collection to customize the contents of the Tools menu.</summary>
      <seealso cref="Engine.GetEditTimeToolMenuItems" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EditTimeMenuItems.Item(System.Object)">
      <summary>Returns a reference to an item at the specified index in the collection.</summary>
      <param name="index">Specifies the zero-based index of the item to retrieve.</param>
      <seealso cref="EditTimeMenuItem" />
      <seealso cref="EditTimeMenuItems.Count" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EditTimeMenuItems.Count">
      <summary>Returns the number of items in the collection.</summary>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EditTimeMenuItems.Insert(NationalInstruments.TestStand.Interop.API.ToolMenuTypes,System.Int32)">
      <summary>Adds a new item to the collection.</summary>
      <param name="type">Specifies the type of menu item to insert.</param>
      <param name="index">Specifies the index where the new menu item is inserted. If you pass -1, the new item is inserted at the end of the list.</param>
      <seealso cref="EditTimeMenuItem" />
      <seealso cref="EditTimeMenuItems.Count" />
      <seealso cref="EditTimeMenuItems.Remove" />
      <seealso cref="ToolMenuTypes" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EditTimeMenuItems.Remove(System.Int32)">
      <summary>Removes the menu item at the specified index.</summary>
      <param name="index">Specifies the zero-based index of the item to remove.</param>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.EditTimeMenuItems.MoveItem(System.Int32,System.Int32)">
      <summary>Moves the menu item specified by a specific index to a new index within the list.</summary>
      <param name="index">Specifies the zero-based index of the item to move.</param>
      <param name="newIndex">Specifies a zero-based index determining where to move the menu item to.</param>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.RunTimeMenuItem">
      <summary>Objects of the <c>RunTimeMenuItem</c> class represent an evaluated version of a EditTimeMenuItem object. The properties of the <c>RunTimeMenuItem</c> object specify the item text, if the menu item is disabled, and if a separator appears before it. You can use the RunTimeMenuItem.InvokeItem method to execute the item, which launches a sequence in a new execution or an executable.
Use the Engine.GetRunTimeToolMenuItems method to obtain a reference to a collection of this class for the Tools menu. Use this collection to determine what to display in the Tools menu at run time.</summary>
      <seealso cref="EditTimeMenuItem" />
      <seealso cref="Engine.GetRunTimeToolMenuItems" />
      <seealso cref="RunTimeMenuItem.InvokeItem" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.RunTimeMenuItem.InvokeItem(System.Object,System.Int32)">
      <summary>Executes the action the menu item specifies.</summary>
      <remarks>This method has no effect when called on a menu item that represents a submenu.</remarks>
      <param name="editArgsParam">Specifies which items in the user interface are currently selected.</param>
      <param name="reserved">Pass <c>0</c> for this parameter.</param>
      <seealso cref="EditTimeMenuItem.CommandPath" />
      <seealso cref="EditTimeMenuItem.SequenceFilePath" />
      <seealso cref="EditTimeMenuItem.SequenceName" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.RunTimeMenuItem.SubMenuItems">
      <summary>Returns a collection of Tools menu items that represent the submenu for the menu item.</summary>
      <remarks>This property only exists when the value of the EditTimeMenuItem.Type property is <c>ToolMenuType_SubMenu</c> or <c>ToolMenuType_SequenceFile</c>.</remarks>
      <seealso cref="EditTimeMenuItem.Type" />
      <seealso cref="RunTimeMenuItems" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.RunTimeMenuItem.Text">
      <summary>Returns from the EditTimeMenuItem.ItemTextExpression property the menu item text the expression defines.</summary>
      <seealso cref="EditTimeMenuItem.ItemTextExpression" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.RunTimeMenuItem.ItemEnabled">
      <summary>Returns a value that indicates whether the expression the EditTimeMenuItem.EnabledExpression property defines returned <c>True</c> or <c>False</c>.</summary>
      <seealso cref="EditTimeMenuItem.EnabledExpression" />
      <seealso cref="EditTimeMenuItem.ItemTextExpression" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.RunTimeMenuItem.SeparatorBefore">
      <summary>Returns a value that indicates whether a menu separator precedes the Tools menu item.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.RunTimeMenuItem.EditsSelectedFile">
      <summary>Returns a value that indicates whether the tools menu item edits the selected sequence file.</summary>
      <remarks>This property applies only to sequence and sequence file item types. The sequence editor uses this option to determine whether to prompt the user to check out the selected file from source code control, if it is not already checked out.</remarks>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.RunTimeMenuItems">
      <summary>The RunTimeMenuItems class specifies a collection of RunTimeMenuItem objects, which represent an evaluated version of a EditTimeMenuItem object. The properties of the RunTimeMenuItem object specify the item text and if the menu item is disabled. You can use the RunTimeMenuItem.InvokeItem method to execute the item, which launches an executable or a sequence in a new execution.
Use this collection to determine what to display in the Tools menu at run time. Use the Engine.GetRunTimeToolMenuItems method to obtain a reference to a collection of this class for the Tools menu.</summary>
      <seealso cref="Engine.GetRunTimeToolMenuItems" />
      <seealso cref="RunTimeMenuItem.InvokeItem" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.RunTimeMenuItems.Item(System.Object)">
      <summary>Returns a reference to an item at the specified index in the collection.</summary>
      <param name="index">Specifies the zero-based index of the item to retrieve.</param>
      <seealso cref="RunTimeMenuItem" />
      <seealso cref="RunTimeMenuItems.Count" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.RunTimeMenuItems.Count">
      <summary>Returns the number of items in the collection.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.CheckForModifiedTypesOptions">
      <summary>These constants represent the options you can use with the options parameter of the PropertyObjectFile.CheckForModifiedTypes method.</summary>
      <seealso cref="&quot;File tab&quot;javascript:RefLink('/InfoTopics/DB_Station_Opt_File_Tab.htm')" />
      <seealso cref="PropertyObjectFile.CheckForModifiedTypes" />
      <seealso cref="&quot;Station Options dialog box&quot;javascript:RefLink('/InfoTopics/DB_Station_Opt.htm')" />
      <seealso cref="StationOptions.TypeVersionAutoIncrementPromptOpt" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.CheckForModifiedTypesOptions.CheckForModifiedTypes_UseStationOptions">
      <summary>(Value: 0x0) Specifies to use the Before Saving Modified Types option on the File tab of the Station Options dialog box.</summary>
      <seealso cref="&quot;File tab&quot;javascript:RefLink('/InfoTopics/DB_Station_Opt_File_Tab.htm')" />
      <seealso cref="&quot;Station Options dialog box&quot;javascript:RefLink('/InfoTopics/DB_Station_Opt.htm')" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.CheckForModifiedTypesOptions.CheckForModifiedTypes_AutoIncrementVersions">
      <summary>(Value: 0x1) Specifies to disable the <c>PropTypeFlags_IsModifiedType</c> flag for a modified type and increment the version number of the type.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.CheckForModifiedTypesOptions.CheckForModifiedTypes_Prompt">
      <summary>(Value: 0x2) Specifies to launch a warning dialog box if a modified type is found.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.CheckForModifiedTypesOptions.CheckForModifiedTypes_NoAction">
      <summary>(Value: 0x4) Specifies to perform no action if a modified type is found.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.CheckForModifiedTypesOptions.CheckForModifiedTypes_RemoveTypesModifiedMark">
      <summary>(Value: 0xC) Specifies to disable the <c>PropTypeFlags_IsModifiedType</c> flag for a modified type.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.LoadTypePaletteFilesOptions">
      <summary>These constants represent the options you use with the options parameter of the Engine.LoadTypePaletteFilesEx method.</summary>
      <seealso cref="Engine.LoadTypePaletteFilesEx" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.LoadTypePaletteFilesOptions.LoadTypePaletteOptions_NoOptions">
      <summary>(Value: 0x0) Specifies the default behavior, which is to return an error to the caller of the method.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.LoadTypePaletteFilesOptions.LoadTypePaletteOptions_DisplayErrors">
      <summary>(Value: 0x1) Specifies to not return an error and to launch a warning dialog box that contains a description of all errors that occurred while loading the type palette files.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.SelectedBreakpointItem">
      <summary>A SelectedBreakpointItem object specifies a breakpoint in a sequence file. Use this object for the selectedItemParam parameter of the Engine.DisplayEditBreakAndWatchDialog method, which returns the last selected item on the Breakpoints tab of the Edit Breakpoints/Watch Expressions dialog box when the user clicks the Goto button. The selected item can be a sequence file, sequence, or step.</summary>
      <seealso cref="&quot;Breakpoints tab&quot;javascript:RefLink('/InfoTopics/DB_Break_Watch_Break_Tab.htm')" />
      <seealso cref="&quot;Edit Breakpoints/Watch Expressions dialog box&quot;javascript:RefLink('/InfoTopics/DB_Break_Watch.htm')" />
      <seealso cref="Engine.DisplayEditBreakAndWatchDialog" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SelectedBreakpointItem.SequenceFile">
      <summary>Returns the selected sequence file. TestStand returns an empty reference if no item was selected.</summary>
      <seealso cref="Engine.DisplayEditBreakAndWatchDialog" />
      <seealso cref="SequenceFile" />
      <seealso cref="&#xD;&#xA;" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SelectedBreakpointItem.SequenceName">
      <summary>Returns the name of the selected sequence. TestStand returns an empty string if only the sequence file of a breakpoint was selected.</summary>
      <seealso cref="Engine.DisplayEditBreakAndWatchDialog" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SelectedBreakpointItem.StepGroup">
      <summary>Returns the step group that contains the selected breakpoint. The return value for this parameter is meaningless if only the sequence file or sequence of a breakpoint was selected.</summary>
      <seealso cref="Engine.DisplayEditBreakAndWatchDialog" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.SelectedBreakpointItem.StepId">
      <summary>Returns the ID of the step that has the selected breakpoint. TestStand returns an empty string if only a sequence file or sequence was selected.</summary>
      <seealso cref="Engine.DisplayEditBreakAndWatchDialog" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.SelectedBreakpointItem.IsEndSelected">
      <summary>Returns a value that indicates whether the selected breakpoint was on the End marker in the sequence.</summary>
      <returns>Returns <c>True</c> if the selected breakpoint is on the End marker. Otherwise, returns <c>False</c>.</returns>
      <seealso cref="Engine.DisplayEditBreakAndWatchDialog " />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.SeqFileBatchSynchronizationOptions">
      <summary>This data type contains values that specify the type of batch synchronization. The constants represent the possible values for the SequenceFile.BatchSyncOption property.</summary>
      <seealso cref="SequenceFile.BatchSyncOption" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SeqFileBatchSynchronizationOptions.SeqFileBatchSyncOption_UseModelSetting">
      <summary>(Value: 1) Uses the same option the model uses.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SeqFileBatchSynchronizationOptions.SeqFileBatchSyncOption_NoSync">
      <summary>(Value: 2) Batch synchronization is not used on this step.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SeqFileBatchSynchronizationOptions.SeqFileBatchSyncOption_Serial">
      <summary>(Value: 3) Use a Serial section to ensure that each thread in the batch executes the steps in the section sequentially and in the order you specify when you create the batch. When all threads in a batch arrive at their respective instances of an Enter step for a Serial section, TestStand releases one thread at a time in ascending order according to the order number you assign to the threads when you add them to the batch using the Batch Specification step. As each thread reaches the Exit step for the section, the next thread in the batch proceeds from the Enter step. After all the threads in the batch arrive at the Exit step, they exit the section together.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SeqFileBatchSynchronizationOptions.SeqFileBatchSyncOption_Parallel">
      <summary>(Value: 4) When all threads in a batch arrive at their respective instances of an Enter step for a Parallel section, TestStand releases all the threads at once. Each thread waits at the Exit step for the section until all threads in the batch reach that step.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SeqFileBatchSynchronizationOptions.SeqFileBatchSyncOption_OneThreadOnly">
      <summary>(Value: 5) Use a One Thread Only section to specify that only one thread in the batch executes the step in the section. Typically, you use this type of section to perform an operation that applies to the batch as a whole, such as raising the temperature in a test chamber. When all threads in a batch arrive at their respective instances of an Enter step for a One Thread Only section, TestStand releases only the thread with the lowest Order Number. When that thread arrives at Exit step for the section, all remaining threads in the batch jump from the Enter step to the Exit step, skipping the steps within the section. The threads in the batch then exit the section together.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.LicenseTypes">
      <summary>Use these constants with the Engine.LicenseType property to determine the type of license the TestStand Engine is using.</summary>
      <seealso cref="Engine.LicenseType" />
      <seealso cref="&quot;TestStand Licensing Options&quot;javascript:TSHelpLink('/InfoTopics/Licensing_Options.html')" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.LicenseTypes.LicenseType_DevelopmentSystem">
      <summary>(Value: 1) Indicates that TestStand is using a TestStand Development System License.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.LicenseTypes.LicenseType_DebugDeploymentEnv">
      <summary>(Value: 2) Indicates that TestStand is using a TestStand Debug Deployment Environment License.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.LicenseTypes.LicenseType_BaseDeploymentEngine">
      <summary>(Value: 3) Indicates that TestStand is using a TestStand Base Deployment Engine License.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.LicenseTypes.LicenseType_OEM">
      <summary>(Value: 4) Indicates that TestStand is using an OEM license.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.LicenseTypes.LicenseType_Evaluation">
      <summary>(Value: 5) Indicates that TestStand is using an Evaluation license.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.LicenseTypes.LicenseType_NoLicense">
      <summary>(Value: 6) Indicates that TestStand is using no license.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.LicenseTypes.LicenseType_Temporary">
      <summary>(Value: 7) Indicates that TestStand is using a temporary license. TestStand acquires a temporary license when NI License Manager cannot access the Volume License server.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.LicenseTypes.LicenseType_Other">
      <summary>(Value: 8) Indicates that TestStand cannot determine the type of license.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.LicenseTypes.LicenseType_CustomEditorDeployment">
      <summary>(Value: 9) Indicates that TestStand is using a TestStand Custom Sequence Editor License.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.SequenceDefaultValueScopes">
      <summary>Use these constants with the Execution.GetSequenceDefaultValues, Execution.SetSequenceDefaultValues, and Execution.ClearSequenceDefaultValues methods to specify whether the method operates on the list of default value sequences for the execution or hierarchy of executions with which the execution is associated.
You can associate default value sequences with either a specific execution or the hierarchy of executions with which this execution is associated. For example, setting a default value sequence on the hierarchy of executions associated with a Batch model applies the default value sequence to the controlling batch execution and all test socket executions. If an execution and the execution hierarchy both specify a default value sequence, TestStand uses the default value sequence the execution specifies.</summary>
      <seealso cref="Execution.ClearSequenceDefaultValues" />
      <seealso cref="Execution.GetSequenceDefaultValues" />
      <seealso cref="Execution.SetSequenceDefaultValues" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SequenceDefaultValueScopes.SeqDefValueScope_Execution">
      <summary>(Value: 1) Specifies to operate on the list of default value sequences for the execution.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SequenceDefaultValueScopes.SeqDefValueScope_ExecutionTree">
      <summary>(Value: 2) Specifies to operate on the list of default value sequences for the hierarchy of executions with which the execution is associated.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.BlockFlags">
      <summary>Flags that indicate how a step affects the block structure of the sequence.</summary>
      <seealso cref="Step.BlockFlags" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.BlockFlags.BlockFlag_None">
      <summary>(Value: 0) No BlockFlags are present.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.BlockFlags.BlockFlag_Open">
      <summary>(Value: 1) The step opens a block, matched or unmatched. The step is not within the block.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.BlockFlags.BlockFlag_Close">
      <summary>(Value: 2) The step closes a block. The step is not within the block.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.BlockFlags.BlockFlag_Start">
      <summary>(Value: 4) The step is the first step within the block.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.BlockFlags.BlockFlag_End">
      <summary>(Value: 8) The step is the last step within the block.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.BlockFlags.BlockFlag_Unmatched">
      <summary>(Value: 16) The step opens or closes a block, but the matching step does not exist.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.BlockFlags.BlockFlag_AppliesToBlockStructure">
      <summary>(Value: 32) The step defines or operates according to the block structure of the sequence.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.ProtectedObjectOptions">
      <summary>Use these constants with the PropertyObjectFile.Protection property or the PropertyObject.SetTypeDefinitionProtection method. These constants specify the protection level applied to the file or type definition.</summary>
      <seealso cref="PropertyObject.GetTypeDefinitionProtection" />
      <seealso cref="PropertyObject.SetTypeDefinitionProtection" />
      <seealso cref="PropertyObjectFile.IsDiskFileReadOnly" />
      <seealso cref="PropertyObjectFile.Protection" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ProtectedObjectOptions.ProtectedObjectOption_None">
      <summary>(Value: 0) Specifies a normal file or type definition with no protection.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ProtectedObjectOptions.ProtectedObjectOption_NotEditable">
      <summary>(Value: 1) Specifies that the file or type definition is not editable in the sequence editor or applications that use the TestStand User Interface (UI) Controls. This option does not prevent editing or access to the contents of the file or type definition using the TestStand API. </summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ProtectedObjectOptions.ProtectedObjectOption_NotViewable">
      <summary>(Value: 2) Specifies that the file is not viewable in the sequence editor or applications that use the TestStand UI Controls. This option does not prevent editing or access to the contents of the file using the TestStand API. The PropertyObject.SetTypeDefinitionProtection method does not support this option.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.LockUnlockDialogOptions">
      <summary>These constants represent the options you can use with the options parameter of the Engine.DisplayLockUnlockDialog method. Use the bitwise-OR operator to specify more than one option. </summary>
      <seealso cref="Engine.AppMainHwnd" />
      <seealso cref="Engine.DisplayLockUnlockDialog" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.LockUnlockDialogOptions.LockUnlockDialogOption_None">
      <summary>(Value: 0) Specifies to lock or unlock the object depending on the locked state of the object.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.LockUnlockDialogOptions.LockUnlockDialogOption_Lock">
      <summary>(Value: 1) Specifies to launch a dialog box that prompts for a password to perform a lock operation. This option is ignored if you are attempting to lock a specific object.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.LockUnlockDialogOptions.LockUnlockDialogOption_Unlock">
      <summary>(Value: 2) Specifies to launch a dialog box that prompts for a password to perform an unlock operation. This option is ignored if you are attempting to unlock a specific object.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.LockUnlockDialogOptions.LockUnlockDialogOption_ModalToAppMainWind">
      <summary>(Value: 0x10000) By default, the dialog box is modal to the last active window of the calling thread, or if none exists, to the last active window from AppMainHwnd. If you enable this option, the dialog box is modal with respect to the window handle of the Engine.AppMainHwnd property. Typically, you do not need to set this option.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.LockUnlockDialogOptions.LockUnlockDialogOption_HideRememberPasswordControls">
      <summary>(Value: 4) Specifies that the dialog box does not display the control that provides the option to remember the password when unlocking a file.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.DebugOptions">
      <summary>Use these constants to specify the type of debug operations TestStand performs.</summary>
      <seealso cref="OutputMessage.Post" />
      <seealso cref="StationOptions.DebugOptions" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.DebugOptions.DebugOptions_ReportKnownOSandComponentProblems">
      <summary>(Value: 0x10) During shut down of the TestStand Engine, TestStand launches a dialog box that contains a list of any operating system issues or component-related issues that can cause leaks in memory, Graphics Device Interface, and User object resources in TestStand.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.DebugOptions.DebugOptions_None">
      <summary>(Value: 0x0) Disables all debugging features. </summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.DebugOptions.DebugOptions_StackChecking">
      <summary>(Value: 0x1) The LabWindows/CVI (in-process), C/C++ DLL, and ActiveX Adapters verify that the content of a thread stack does not change while calling code modules.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.DebugOptions.DebugOptions_BufferChecking(System.Boolean)">
      <summary>(Value: 0x2) The LabWindows/CVI and C/C++ DLL Adapters verify that the code module does not modify the memory that surrounds the buffer parameters passed to code modules. The adapters also verify that code modules do not modify const string parameters.</summary>
      <param name="New Param1"></param>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.DebugOptions.DebugOptions_ReportObjectLeaks">
      <summary>(Value: 0x4) During shutdown of the engine, TestStand launches a dialog box that contains a list of any top-level Property Objects with unreleased references.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.DebugOptions.DebugOptions_SendOutputMessagesToDebugger">
      <summary>(Value: 0x8) Instructs TestStand to send output messages to the debugger when you call the OutputMessage.Post method.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.Location">
      <summary>The properties of a Location object contain enough information for a user interface to find a specific piece of data the user interface displays.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Location.ThreadDisplayName">
      <summary>For an execution location, specifies the display name of the thread.</summary>
      <seealso cref="Location.ThreadId" />
      <seealso cref="SequenceContext.Thread" />
      <seealso cref="Thread.DisplayName" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Location.Kind">
      <summary>Specifies whether the location is a file, execution, or type location.</summary>
      <seealso cref="SequenceContext" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Location.FilePath">
      <summary>For a file location, this property specifies the absolute path of the file of which the Location.PropertyPath property is a subproperty. For an execution location, this property specifies the absolute path of the sequence file of the executing sequence. For a type location, this property specifies the absolute path of the file in which the type is saved.</summary>
      <seealso cref="Location.PropertyPath" />
      <seealso cref="PropertyObjectFile.Path" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Location.FileId">
      <summary>For a file location, this property specifies the ID of the file of which the Location.PropertyPath property is a subproperty. For an execution location, this property specifies the ID of the sequence file of the executing sequence. For a type location, this property specifies the ID of the file in which the type is saved.</summary>
      <seealso cref="Location.PropertyPath" />
      <seealso cref="PropertyObjectFile.Id" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Location.PropertyPath">
      <summary>Specifies the lookup string for this location.</summary>
      <remarks>For a file location, this property is relative to the file the Location.FileId and Location.FilePath properties specify. For an execution location, this property is relative to the sequence context the Location.ContextId property specifies. For a type location, this property is relative to the type the Location.TypeName property specifies. For a workspace file location, this property is relative to the WorkspaceObject the WorkspaceFile.RootWorkspaceObject property returns.</remarks>
      <seealso cref="Location.ContextId" />
      <seealso cref="Location.FileId" />
      <seealso cref="Location.FilePath" />
      <seealso cref="Location.Kind" />
      <seealso cref="Location.TypeName" />
      <seealso cref="WorkspaceFile.RootWorkspaceObject" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Location.SequenceName">
      <summary>For a file location, this property specifies the name of the sequence of which the Location.PropertyPath property is a subproperty. This property is empty if the <c>Location.PropertyPath</c> property is not a subproperty of a sequence. For an execution location, this property specifies the name of the executing sequence.</summary>
      <seealso cref="Location.PropertyPath" />
      <seealso cref="Sequence.Name" />
      <seealso cref="SequenceContext.Sequence" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Location.StepGroup">
      <summary>For a file location, this property specifies the step group of which the Location.PropertyPath property is a subproperty. The value is <c>-1</c> if the <c>Location.PropertyPath</c> property is not a subproperty of a step group. For an execution location, this property specifies the step group of the executing step.</summary>
      <seealso cref="Location.PropertyPath" />
      <seealso cref="SequenceContext.StepGroup" />
      <seealso cref="Step.StepGroup" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Location.StepName">
      <summary>For a file location, this property specifies the name of the step of which the Location.PropertyPath property is a subproperty. This property is empty if the <c>Location.PropertyPath</c> property is not a subproperty of a step. For an execution location, this property specifies the step name of the executing step.</summary>
      <seealso cref="Location.PropertyPath" />
      <seealso cref="SequenceContext.Step" />
      <seealso cref="Step.Name" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Location.StepId">
      <summary>For a file location, this property specifies the unique step ID of the step of which the Location.PropertyPath property is a subproperty. This property is empty if the <c>Location.PropertyPath</c> property is not a subproperty of a step. For an execution location, this property specifies the unique step ID of the executing step.</summary>
      <seealso cref="Location.PropertyPath" />
      <seealso cref="SequenceContext.Step" />
      <seealso cref="Step.UniqueStepId" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Location.StepIndex">
      <summary>For a file location, this property specifies the index of the step of which the Location.PropertyPath property is a subproperty. This property is -1 if the <c>Location.PropertyPath</c> property is not a subproperty of a step. For an execution location, this property specifies the step index of the executing step.</summary>
      <seealso cref="Location.PropertyPath" />
      <seealso cref="SequenceContext.StepIndex" />
      <seealso cref="Step.StepIndex" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Location.ExecutionId">
      <summary>For an execution location, specifies the ID of the execution.</summary>
      <seealso cref="Execution.Id" />
      <seealso cref="Location.ExecutionDisplayName" />
      <seealso cref="SequenceContext.Execution" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Location.ThreadId">
      <summary>For an execution location, specifies the ID of the executing thread.</summary>
      <seealso cref="SequenceContext.Thread" />
      <seealso cref="Thread.Id" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Location.ContextId">
      <summary>For an execution location, this property specifies the ID of the sequence context to which the Location.PropertyPath property is relative. For a file location, this property specifies the ID of the sequence context which has properties that correspond to properties of this location.</summary>
      <seealso cref="Location.PropertyPath" />
      <seealso cref="SequenceContext.Id" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Location.TypeName">
      <summary>For a type location, this property specifies the name of a root type definition. Location.PropertyPath specifies a subproperty of the root type definition this property specifies.</summary>
      <seealso cref="Location.PropertyPath" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Location.TypeCategory">
      <summary>For a type location, specifies the type category of the root type definition the Location.TypeName property specifies.</summary>
      <seealso cref="Location.TypeName" />
      <seealso cref="PropertyObject.TypeCategory" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Location.Element">
      <summary>Specifies a part of the property object which the Location.PropertyPath property specifies.</summary>
      <seealso cref="Location.PropertyPath" />
      <seealso cref="PropertyObject.Comment" />
      <seealso cref="PropertyObject.GetFlags" />
      <seealso cref="PropertyObject.Name" />
      <seealso cref="PropertyObject.NumericFormat" />
      <seealso cref="PropertyObject.SetFlags" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Location.SelStart">
      <summary>Specifies the zero-based starting index of the selection of the text that the Location.Element property refers to.</summary>
      <remarks>A user interface only uses this property if Element specifies a value, name, comment, or numeric format.</remarks>
      <seealso cref="Location.Element" />
      <seealso cref="Location.SelLength" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Location.SelLength">
      <summary>Specifies the number of selected characters of the text that the Location.Element property refers to.</summary>
      <remarks>A user interface only uses this property if Element specifies a value, name, comment, or numeric format.</remarks>
      <seealso cref="Location.Element" />
      <seealso cref="Location.SelStart" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Location.FileDisplayName">
      <summary>For a file location, specifies the display name of the file of which the Location.PropertyPath property is a subproperty. For an execution location, specifies the display name of the sequence file of the executing sequence. For a type location, specifies the display name of the file in which you saved the type.</summary>
      <seealso cref="Location.PropertyPath" />
      <seealso cref="PropertyObjectFile.DisplayName" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Location.PropertyPathWithNames">
      <summary>Specifies the lookup string for this location. The lookup string includes names instead of a numeric index for elements of object arrays if the name is not empty.</summary>
      <remarks>The name of an object element in an array is not guaranteed to be unique within the array. Do not use this property with methods that have a lookup string parameter, such as the PropertyObject.GetPropertyObject method and the PropertyObject.Exists method. Use the Location.PropertyPath property if you want an unambiguous lookup string.
For a file location, this property is relative to the file the Location.FileId and the Location.FilePath properties specify. For an execution location, this property is relative to the sequence context the Location.ContextId property specifies. For a type location, this property is relative to the type the Location.TypeName property specifies. For a workspace file location, this property is relative to the WorkspaceObject the WorkspaceFile.RootWorkspaceObject property returns.</remarks>
      <seealso cref="Location.ContextId" />
      <seealso cref="Location.FileId" />
      <seealso cref="Location.FilePath" />
      <seealso cref="Location.Kind" />
      <seealso cref="Location.PropertyPath" />
      <seealso cref="Location.TypeName" />
      <seealso cref="PropertyObject.Exists" />
      <seealso cref="PropertyObject.GetPropertyObject" />
      <seealso cref="WorkspaceFile.RootWorkspaceObject" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Location.ExecutionDisplayName">
      <summary>For an execution location, specifies the display name of the execution.</summary>
      <seealso cref="Execution.DisplayName" />
      <seealso cref="Location.ExecutionId" />
      <seealso cref="SequenceContext.Execution" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Location.BaseAttributesPath">
      <summary>Specifies the portion of Location.PropertyPath before any top-level attribute or top-level type attribute.</summary>
      <remarks>If the Location.PropertyPath property does not specify an attribute location, this property has the same value as the <c>Location.PropertyPath</c> property.</remarks>
      <seealso cref="Location.AttributesPath" />
      <seealso cref="Location.PropertyPath" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Location.AttributesPath">
      <summary>Specifies the portion of the Location.PropertyPath property value that starts with the top-level attribute or top-level type attribute.</summary>
      <remarks>If the <c>Location.PropertyPath</c> property does not specify an attribute location, this property is an empty string. If the <c>Location.PropertyPath</c> property specifies an attribute location, this property always starts with <c>Attributes</c> or <c>TypeAttributes</c>.</remarks>
      <seealso cref="Location.BaseAttributesPath" />
      <seealso cref="Location.PropertyPath" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Location.IOConfigurationName">
      <summary></summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.Locations">
      <summary>Locations is a collection of Location objects. Use Locations to instruct the user interface to update the selection. Follow these steps to set the selection in a user interface:<para><para>&#160;&#160;&#160;&#160;* Call the Engine.NewLocations method to create a Locations object.</para><para>&#160;&#160;&#160;&#160;* Call the Locations.AddFileLocation, Locations.AddExecutionLocation, or Locations.AddTypeLocation method on a Locations object to specify data for the user interface to select.</para><para>&#160;&#160;&#160;&#160;* Call the Locations.GotoLocation method on the Locations object to send the Locations object to the user interface.</para><para>&#160;&#160;&#160;&#160;* The user interface receives the Locations object through the UIMessage.ActiveXData property of a UIMsg_GotoLocation UIMessage.</para><para>&#160;&#160;&#160;&#160;* If the user interface supports the Goto location action, it updates the selection to correspond to the Locations object.</para></para>
</summary>
      <seealso cref=".AddExecutionLocation" />
      <seealso cref=".AddFileLocation" />
      <seealso cref=".AddTypeLocation" />
      <seealso cref="Engine.NewLocations" />
      <seealso cref=".GotoLocation" />
      <seealso cref="Location" />
      <seealso cref="UIMessage.ActiveXData" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Locations.Item(System.Int32)">
      <summary>Returns a reference to an item at the specified index in the collection.</summary>
      <param name="index">Specifies the zero-based index of the item to retrieve.</param>
      <seealso cref="Location" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Locations.Count">
      <summary>Returns the number of items in the collection.</summary>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Locations.AddFileLocation(NationalInstruments.TestStand.Interop.API.PropertyObjectFile,System.String,NationalInstruments.TestStand.Interop.API.PropertyObjectElements,System.Int32,System.Int32)">
      <summary>Adds a new file location to the collection.</summary>
      <returns>The Location added to the collection.</returns>
      <param name="file">Specifies ss the file to initialize the Location.FileDisplayName, Location.FileId, and Location.FilePath properties.</param>
      <param name="lookupString">Specifies a subproperty of the file parameter. This method sets the Location.PropertyPath property of the new Location to the lookup string to lookupString from file. This method also sets as many properties of the new Location as this method can obtain from the object you pass. This method specifies the lookupString parameter relative to the root of the PropertyObjectFile object. For example, if the location is underneath the <c>PropertyObjectFile.Data</c> element, the lookup string must use the <c>Data.</c> prefix.</param>
      <param name="elem">Specifies the value of the Location.Element property of the new location.</param>
      <param name="selectionStart">Specifies the value of the Location.SelStart property of the new location.</param>
      <param name="selectionLength">Specifies the value of the Location.SelLength property of the new location.</param>
      <seealso cref="Location" />
      <seealso cref="Location.Element" />
      <seealso cref="Location.FileDisplayName" />
      <seealso cref="Location.FileId" />
      <seealso cref="Location.FilePath" />
      <seealso cref="Location.Kind" />
      <seealso cref="Location.PropertyPath" />
      <seealso cref="Location.SelLength" />
      <seealso cref="Location.SelStart" />
      <seealso cref="Locations.AddExecutionLocation" />
      <seealso cref="Locations.AddTypeLocation" />
      <seealso cref="PropertyObjectElements" />
      <seealso cref="PropertyObjectFile" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Locations.AddExecutionLocation(NationalInstruments.TestStand.Interop.API.SequenceContext,System.String,NationalInstruments.TestStand.Interop.API.PropertyObjectElements,System.Int32,System.Int32)">
      <summary>Adds a new execution location to the collection.</summary>
      <returns>The Location added to the collection.</returns>
      <param name="seqContext">Specifies the sequence context to initialize the Location.ContextId, Location.ExecutionId, and Location.ThreadId properties.</param>
      <param name="lookupString">Specifies the path to a subproperty of the seqContext parameter. This method sets the Location.PropertyPath property of the new Location using the lookup string you pass. This method also sets as many properties of the new Location as this method can obtain from the subproperty this parameter specifies.</param>
      <param name="elem">Specifies the value of the Location.Element property of the new location.</param>
      <param name="selectionStart">Specifies the value of the Location.SelStart property of the new location.</param>
      <param name="selectionLength">Specifies the value of the Location.SelLength property of the new location.</param>
      <seealso cref="Location" />
      <seealso cref="Location.ContextId" />
      <seealso cref="Location.Element" />
      <seealso cref="Location.ExecutionId" />
      <seealso cref="Location.Kind" />
      <seealso cref="Location.PropertyPath" />
      <seealso cref="Location.SelLength" />
      <seealso cref="Location.SelStart" />
      <seealso cref="Location.ThreadId" />
      <seealso cref="Locations.AddExecutionLocation" />
      <seealso cref="Locations.AddTypeLocation" />
      <seealso cref="PropertyObjectElements" />
      <seealso cref="SequenceContext" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Locations.AddTypeLocation(NationalInstruments.TestStand.Interop.API.PropertyObjectFile,NationalInstruments.TestStand.Interop.API.PropertyObject,System.String,NationalInstruments.TestStand.Interop.API.PropertyObjectElements,System.Int32,System.Int32)">
      <summary>Adds a new type location to the collection.</summary>
      <returns>The Location added to the collection.</returns>
      <param name="file">Specifies the file in which the type you pass to the rootTypeDef parameter is saved.
</param>
      <param name="rootTypeDef">Specifies a type definition. This method sets the Location.TypeName and Location.TypeCategory properties of the new Location from the root type definition this parameter specifies. This method also sets the Location.PropertyPath property of the new Location using the lookupString parameter.</param>
      <param name="lookupString">Specifies the path to a subproperty of the rootTypeDef parameter. This method sets the Location.PropertyPath property of the new Location using the lookup string you pass. This method also sets as many properties of the new Location as this method can obtain from the subproperty this parameter specifies.</param>
      <param name="elem">Specifies the value of the Location.Element property of the new location.</param>
      <param name="selectionStart">Specifies the value of the Location.SelStart property of the new location.</param>
      <param name="selectionLength">Specifies the value of the Location.SelLength property of the new location.</param>
      <seealso cref="Location" />
      <seealso cref="Location.Element" />
      <seealso cref="Location.Kind" />
      <seealso cref="Location.PropertyPath" />
      <seealso cref="Location.SelLength" />
      <seealso cref="Location.SelStart" />
      <seealso cref="Location.ThreadId" />
      <seealso cref="Location.TypeCategory" />
      <seealso cref="Location.TypeName" />
      <seealso cref="Locations.AddExecutionLocation" />
      <seealso cref="Locations.AddTypeLocation" />
      <seealso cref="PropertyObject" />
      <seealso cref="PropertyObject.IsRootTypeDefinition" />
      <seealso cref="PropertyObject.IsTypeDefinition" />
      <seealso cref="PropertyObjectElements" />
      <seealso cref="PropertyObjectFile" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Locations.AddLocations(NationalInstruments.TestStand.Interop.API.Locations,NationalInstruments.TestStand.Interop.API.CopyLocationsOptions)">
      <summary>Adds the Location objects from a specified Locations to the end of this Locations.</summary>
      <param name="locationsToAdd">Specifies Locations to append to this Locations.</param>
      <param name="copyLocationOption">Specifies whether this method copies locationsToAdd before adding them to the collection.</param>
      <seealso cref="CopyLocationsOptions" />
      <seealso cref="Location" />
      <seealso cref="Locations" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Locations.Remove(System.Int32)">
      <summary>Removes the specified item from this collection, if it exists.</summary>
      <param name="index">Specifies the zero-based index of the item to remove.</param>
      <seealso cref="Locations.Clear" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Locations.Clear">
      <summary>Removes all items from this collection.</summary>
      <seealso cref="Locations.Remove" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Locations.GotoLocation(System.Int32)">
      <summary>This method sends this Locations collection to the user interface in a synchronous <c>UIMsg_GotoLocation</c> user interface message. If the user interface supports GotoLocation, the user interface displays this location by updating which controls are visible and active and by updating the selected state of controls.</summary>
      <remarks>After you call this method, you can use the Locations.LocationFound property to see if the user interface successfully went to the location. If the <c>Locations.LocationFound</c> property is <c>False</c>, you can use the Locations.LocationNotFoundMessage property to obtain a description of why the user interface could not go to the location.</remarks>
      <param name="options">Specifies any combination of GotoLocationOptions.</param>
      <seealso cref="GotoLocationOptions" />
      <seealso cref="Locations.LocationFound" />
      <seealso cref="Locations.LocationNotFoundMessage" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Locations.UserData">
      <summary>Holds a data item you associate with the Locations object.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Locations.ApplicationSite">
      <summary>Specifies where to display a location in a user interface when the user interface can display the location in more than one place.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Locations.LocationFound">
      <summary>When you handle the <c>UIMsg_GotoLocation</c> user interface message, set this property to <c>True</c> to indicate that the user interface selected the Locations collection. If you do not set this property to <c>True</c>, the Locations.GotoLocation method displays an error to indicate that the user interface could not go to the Locations.</summary>
      <seealso cref="Locations" />
      <seealso cref="Locations.GotoLocation" />
      <seealso cref="Locations.LocationNotFoundMessage" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Locations.LocationNotFoundMessage">
      <summary>When you handle the <c>UIMsg_GotoLocation</c> user interface message and do not set the Locations.LocationFound property to <c>True</c>, set this property to a message to explain why the user interface could not go to the Locations. The Locations.GotoLocation method includes this message in the error it displays when LocationFound is <c>False</c>.</summary>
      <seealso cref="Locations" />
      <seealso cref="Locations.GotoLocation" />
      <seealso cref="Locations.LocationFound" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Locations.AddFileLocationByObject(NationalInstruments.TestStand.Interop.API.PropertyObject,NationalInstruments.TestStand.Interop.API.PropertyObjectElements,System.Int32,System.Int32)">
      <summary>Adds a new file location to the collection.</summary>
      <returns>The Location added to the collection.</returns>
      <param name="obj">Specifies any PropertyObject, such as step, sequence, variable, or sequence context. This method sets as many properties of the new Location object as this method can obtain from the object you pass.</param>
      <param name="elem">Specifies the value of the Location.Element property of the new location.</param>
      <param name="selectionStart">Specifies the value of the Location.SelStart property of the new location.</param>
      <param name="selectionLength">Specifies the value of the Location.SelLength property of the new location.</param>
      <seealso cref="Location" />
      <seealso cref="Location.Element" />
      <seealso cref="Location.Kind" />
      <seealso cref="Location.PropertyPath" />
      <seealso cref="Location.SelLength" />
      <seealso cref="Location.SelStart" />
      <seealso cref="Locations.AddExecutionLocation" />
      <seealso cref="Locations.AddTypeLocation" />
      <seealso cref="PropertyObject" />
      <seealso cref="PropertyObjectElements" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Locations.AddExecutionLocationByObject(NationalInstruments.TestStand.Interop.API.SequenceContext,NationalInstruments.TestStand.Interop.API.PropertyObject,NationalInstruments.TestStand.Interop.API.PropertyObjectElements,System.Int32,System.Int32)">
      <summary>Adds a new execution location to the collection.</summary>
      <returns>The Location added to the collection.</returns>
      <param name="seqContext">Specifies the sequence context to initialize the Location.ContextId, Location.ExecutionId, and Location.ThreadId properties.</param>
      <param name="obj">Specifies a subproperty of the seqContext parameter. This method sets the  Location.PropertyPath property of the new Location to the lookup string to obj from seqContext. This method also sets as many properties of the new Location as this method can obtain from the object which you pass.</param>
      <param name="elem">Specifies the value of the Location.Element property of the new location.</param>
      <param name="selectionStart">Specifies the value of the Location.SelStart property of the new location.</param>
      <param name="selectionLength">Specifies the value of the Location.SelLength property of the new location.</param>
      <seealso cref="Location" />
      <seealso cref="Location.ContextId" />
      <seealso cref="Location.Element" />
      <seealso cref="Location.ExecutionId" />
      <seealso cref="Location.Kind" />
      <seealso cref="Location.PropertyPath" />
      <seealso cref="Location.SelLength" />
      <seealso cref="Location.SelStart" />
      <seealso cref="Location.ThreadId" />
      <seealso cref="Locations.AddExecutionLocation" />
      <seealso cref="Locations.AddTypeLocation" />
      <seealso cref="PropertyObject" />
      <seealso cref="SequenceContext" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Locations.AddTypeLocationByObject(NationalInstruments.TestStand.Interop.API.PropertyObjectFile,NationalInstruments.TestStand.Interop.API.PropertyObject,NationalInstruments.TestStand.Interop.API.PropertyObjectElements,System.Int32,System.Int32)">
      <summary>Adds a new type location to the collection.</summary>
      <returns>The Location added to the collection.</returns>
      <param name="file">Specifies the file in which the type you pass to the obj parameter is saved.</param>
      <param name="obj">Specifies a type definition. This method sets the Location.TypeName and Location.TypeCategory properties of the new Location from the root type definition that contains the type definition you pass. This method sets the Location.PropertyPath property of the new Location to the lookup string to obj from the root type definition of obj.</param>
      <param name="elem">Specifies the value of the Location.Element property of the new location.</param>
      <param name="selectionStart">Specifies the value of the Location.SelStart property of the new location.</param>
      <param name="selectionLength">Specifies the value of the Location.SelLength property of the new location.</param>
      <seealso cref="Location" />
      <seealso cref="Location.Element" />
      <seealso cref="Location.Kind" />
      <seealso cref="Location.PropertyPath" />
      <seealso cref="Location.SelLength" />
      <seealso cref="Location.SelStart" />
      <seealso cref="Location.ThreadId" />
      <seealso cref="Location.TypeCategory" />
      <seealso cref="Location.TypeName" />
      <seealso cref="Locations.AddExecutionLocation" />
      <seealso cref="Locations.AddTypeLocation" />
      <seealso cref="PropertyObject" />
      <seealso cref="PropertyObject.IsRootTypeDefinition" />
      <seealso cref="PropertyObject.IsTypeDefinition" />
      <seealso cref="PropertyObjectElements" />
      <seealso cref="PropertyObjectFile" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.Locations.CanDisplayDialog">
      <summary>This property specifies if calling the Locations.GotoLocation method can display the location in a dialog box. If you handle the <c>UIMsg_GotoLocation</c> user interface message, check the value of this property before displaying a location in a dialog box. The default value of this property is <c>True</c>.</summary>
      <remarks>If the user interface cannot go to the location, the <c>Locations.GotoLocation</c> method uses the options parameter to determine whether to launch a dialog box to inform the user that the user interface could not go to the location.</remarks>
      <seealso cref="Locations.GotoLocation" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Locations.AddAPILocation(NationalInstruments.TestStand.Interop.API.PropertyObject,NationalInstruments.TestStand.Interop.API.APILocations,NationalInstruments.TestStand.Interop.API.PropertyObjectFile)">
      <summary>Use this method to add a new file location from an API call to the collection.</summary>
      <param name="baseObj">Specifies the base object to use with the apiLocation parameter as the location to add.</param>
      <param name="apiLocation">Pass the APILocations enumeration to use as the location to add.</param>
      <param name="objFile">Specifies the file associated with the base object. Use this parameter only if the baseObj parameter is a type definition. TestStand ignores this parameter if the baseObj parameter is not a type definition.</param>
      <seealso cref="Locations.AddExecutionLocation" />
      <seealso cref="Locations.AddExecutionLocationByObject" />
      <seealso cref="Locations.AddFileLocation" />
      <seealso cref="Locations.AddFileLocationByObject" />
      <seealso cref="Locations.AddTypeLocation" />
      <seealso cref="Locations.AddTypeLocationByObject" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Locations.ToPropertyObject">
      <summary>Returns a PropertyObject representation of the Locations collection. You can use the <c>PropertyObject</c> to persist the collection.
<para>Note: The <c>PropertyObject</c> representation does not store the value of the Locations.UserData property.</para></summary>
      <seealso cref="Locations" />
      <seealso cref="Locations.FromPropertyObject" />
      <seealso cref="Locations.UserData" />
      <seealso cref="PropertyObject" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Locations.FromPropertyObject(NationalInstruments.TestStand.Interop.API.PropertyObject)">
      <summary>Restores the Locations state the Locations.ToPropertyObject method stores in the PropertyObject.</summary>
      <param name="val">Specifies the <c>PropertyObject</c>.</param>
      <seealso cref="Locations" />
      <seealso cref="Locations.ToPropertyObject" />
      <seealso cref="PropertyObject" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Locations.GotoLocationInApplication(System.String,System.Int32)">
      <summary>Sends the Locations collection to the user interface the applicationPath parameter specifies. If the user interface supports the Locations.GotoLocation method, the user interface displays the location by updating which controls are visible and active and by updating the selected state of controls.</summary>
      <remarks>If the applicationPath parameter specifies the path of the currently executing user interface, this method behaves the same as the <c>Locations.GotoLocation</c> method. Otherwise, this method differs from the <c>Locations.GotoLocation</c> method in the following ways:
<para><para>&#160;&#160;&#160;&#160;* This method supports only <c>Locations</c> of LocationKind_File type.</para><para>&#160;&#160;&#160;&#160;* If the applicationPath parameter specifies the path of a user interface that is currently executing, this method attempts to go to the location in that instance of the user interface. Otherwise, this method starts a new instance of the user interface and attempts to go to the location in that instance.</para><para>&#160;&#160;&#160;&#160;* This method does not set the Locations.LocationFound property and does not use the Locations.LocationNotFoundMessage property when the applicationPath parameter specifies an external user interface.</para></para></remarks>
      <param name="applicationPath">Specifies the absolute path of the user interface application.</param>
      <param name="options">Specifies any combination of GotoLocationOptions. This method does not use the <c>GotoLocationOption_DoNotDisplayMessageIfLocationNotFound</c> option unless the applicationPath parameter specifies the path of the currently executing user interface.</param>
      <seealso cref="GotoLocationOptions" />
      <seealso cref="LocationKinds" />
      <seealso cref="Locations" />
      <seealso cref="Locations.GotoLocation" />
      <seealso cref="Locations.LocationFound" />
      <seealso cref="Locations.LocationNotFoundMessage" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Locations.AddIOConfiguraionLocation(System.String)">
      <summary></summary>
      <param name="ioConfigurationName"></param>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.UndoItem">
      <summary>A user interface receives objects that implement the UndoItem interface through the UIMessage.ActiveXData property of a <c>UIMsg_PushUndoItem</c> UI Message. A user interface uses the UndoItem.EditedFile property to find an appropriate UndoStack to push the undo item onto.

You can also use the UndoItem interface to make an edit to a TestStand file undoable if the UndoItemCreator does not provide enough functionality to undo an edit. To do this, create a COM object that implements the UndoItem interface and send an instance of the object to the sequence editor using a <c>UIMsg_PushUndoItem</c> UI Message.
<para>Note: LabVIEW and LabWindows/CVI do not support implementing custom objects for this interface.</para></summary>
      <seealso cref=".EditedFile" />
      <seealso cref="UIMessage.ActiveXData" />
      <seealso cref="UIMessageCodes" />
      <seealso cref="UndoItemCreator" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.UndoItem.EditedFile">
      <summary>Returns the file the UndoItem.Undo and UndoItem.Redo methods modify. Use this property to associate an undo item with an UndoStack object.</summary>
      <seealso cref="PropertyObjectFile" />
      <seealso cref="UndoItem.Redo" />
      <seealso cref="UndoItem.Undo" />
      <seealso cref="UndoStack" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.UndoItem.EditedObjects">
      <summary>Returns the objects the UndoItem.Undo and UndoItem.Redo methods modify.</summary>
      <remarks>Calling this property returns all objects that <c>UndoItem2.TopObjects[i].GetPropertyObject(UndoItem2.LookupStrings[i])</c> references. If one of the objects does not exist, this property fails and returns an error explaining that the property the lookupstring parameter specifies does not exist.</remarks>
      <seealso cref="UndoItem.Redo" />
      <seealso cref="UndoItem.Undo" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.UndoItem.UndoDescription">
      <summary>Returns the edit the UndoItem.Undo method reverts.</summary>
      <remarks>This text normally appears in a menu item and is usually the same as the UndoItem.RedoDescription property text.</remarks>
      <seealso cref="UndoItem.RedoDescription" />
      <seealso cref="UndoItem.Undo" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.UndoItem.RedoDescription">
      <summary>Returns the edit that the UndoItem.Redo method performs.</summary>
      <remarks>This text normally appears in a menu item and is usually the same as the UndoItem.UndoDescription property text.</remarks>
      <seealso cref="UndoItem.Redo" />
      <seealso cref="UndoItem.UndoDescription" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.UndoItem.CanUndo">
      <summary>If this property is <c>False</c>, do not call the UndoItem.Undo method.</summary>
      <seealso cref="UndoItem.CanRedo" />
      <seealso cref="UndoItem.Undo" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.UndoItem.CanRedo">
      <summary>If this property is <c>False</c>, do not call the UndoItem.Redo method.</summary>
      <seealso cref="UndoItem.CanUndo" />
      <seealso cref="UndoItem.Redo" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.UndoItem.UndoEditKind">
      <summary>Returns the kind of edit the UndoItem.Undo method performs.</summary>
      <seealso cref="EditKinds" />
      <seealso cref="UndoItem.RedoEditKind" />
      <seealso cref="UndoItem.Undo" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.UndoItem.RedoEditKind">
      <summary>Returns the kind of edit the UndoItem.Redo method performs.</summary>
      <seealso cref="EditKinds" />
      <seealso cref="UndoItem.Redo" />
      <seealso cref="UndoItem.UndoEditKind" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.UndoItem.UndoStack">
      <summary>Returns the UndoStack object that this undo item is on.</summary>
      <remarks>The UndoStack object sets this property when you call UndoStack.Push.</remarks>
      <seealso cref="UndoStack" />
      <seealso cref="UndoStack.Push" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.UndoItem.RefreshEnabled">
      <summary>If this property is <c>True</c>, the UndoItem.Undo and UndoItem.Redo methods send a <c>UIMsg_RefreshWindows</c> user interface message to refresh the UndoItem.EditedFile property and a <c>UIMsg_GotoLocation</c> user interface message to go to the location of the edit.</summary>
      <seealso cref="UIMessageCodes" />
      <seealso cref="UndoItem.EditedFile" />
      <seealso cref="UndoItem.Redo" />
      <seealso cref="UndoItem.Undo" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.UndoItem.PreEditLocations">
      <summary>If the UndoItem.RefreshEnabled property is <c>True</c>, the UndoItem.Redo method calls the Locations.GotoLocation method on this property before making any edits, and the UndoItem.Undo method calls the <c>Locations.GotoLocation</c> method on this property after making all edits. </summary>
      <seealso cref="Locations" />
      <seealso cref="Locations.GotoLocation" />
      <seealso cref="UndoItem.PostEditLocations" />
      <seealso cref="UndoItem.Redo" />
      <seealso cref="UndoItem.RefreshEnabled" />
      <seealso cref="UndoItem.Undo" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.UndoItem.PostEditLocations">
      <summary>If the UndoItem.RefreshEnabled property is <c>True</c>, the UndoItem.Redo method calls the Locations.GotoLocation method on this property after making all edits, and the UndoItem.Undo method calls the <c>Locations.GotoLocation</c> method on this property before making any edits. </summary>
      <seealso cref="Locations" />
      <seealso cref="Locations.GotoLocation" />
      <seealso cref="UndoItem.PreEditLocations" />
      <seealso cref="UndoItem.Redo" />
      <seealso cref="UndoItem.RefreshEnabled" />
      <seealso cref="UndoItem.Undo" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.UndoItem.Undo">
      <summary>Reverts an edit to the UndoItem.EditedFile.</summary>
      <remarks>This method returns a <c>TS_Err_UnexpectedChangeCount</c> error if the change count of <c>UndoItem.EditedFile</c> is not equal to the value it was after the user made the edit this undo item reverts.
Calling this method also restores the change count of the EditedFile to the value it was before the user made the edit this undo item reverts, sends a <c>UIMsg_RefreshWindows</c> user interface message to the sequence editor if UndoItem.RefreshEnabled is <c>True</c>, and sends a <c>UIMsg_GotoLocation</c> user interface message to the sequence editor to go to the location of the edit if RefreshEnabled is <c>True</c>.</remarks>
      <seealso cref="PropertyObjectFile.ChangeCount" />
      <seealso cref="UIMessageCodes" />
      <seealso cref="UndoItem.CanUndo" />
      <seealso cref="UndoItem.EditedFile" />
      <seealso cref="UndoItem.Redo" />
      <seealso cref="UndoItem.RefreshEnabled" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.UndoItem.Redo">
      <summary>Redoes an edit to the UndoItem.EditedFile property that the UndoItem.Undo method reverted.</summary>
      <remarks>This method returns a <c>TS_Err_UnexpectedChangeCount</c> error if the change count of the UndoItem.EditedFile property is not equal to the value it was before the user made the edit that this undo item reverts.
Calling this method also restores the change count of the <c>UndoItem.EditedFile</c> property to the value it was after the user made the edit that this undo item reverts, sends a <c>UIMsg_RefreshWindows</c> user interface message to the sequence editor if the UndoItem.RefreshEnabled property is <c>True</c>, and sends a <c>UIMsg_GotoLocation</c> user interface message to the sequence editor to go to the location of the edit if the <c>UndoItem.RefreshEnabled</c> property is <c>True</c>.</remarks>
      <seealso cref="PropertyObjectFile.ChangeCount" />
      <seealso cref="UIMessageCodes" />
      <seealso cref="UndoItem.CanRedo" />
      <seealso cref="UndoItem.EditedFile" />
      <seealso cref="UndoItem.RefreshEnabled" />
      <seealso cref="UndoItem.Undo" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.UndoItem.PreEditChangeCount">
      <summary>Returns the change count of the UndoItem.EditedFile property before the user made the edit this undo item reverts.</summary>
      <remarks>The UndoItem.Redo method returns a <c>TS_Err_UnexpectedChangeCount</c> error if <c>EditedFile.ChangeCount</c> does not equal the value of this property. The UndoItem.Undo method restores <c>EditedFile.ChangeCount</c> to the value of this property after undoing the edit.</remarks>
      <seealso cref="UndoItem.EditedFile" />
      <seealso cref="UndoItem.PostEditChangeCount" />
      <seealso cref="UndoItem.Redo" />
      <seealso cref="UndoItem.Undo" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.UndoItem.PostEditChangeCount">
      <summary>Returns the change count of the UndoItem.EditedFile property after the user made the edit this undo item reverts.</summary>
      <remarks>The UndoItem.Undo method returns a <c>TS_Err_UnexpectedChangeCount</c> error if <c>EditedFile.ChangeCount</c> does not equal the value of this property. The UndoItem.Redo method restores <c>EditedFile.ChangeCount</c> to the value of this property after redoing the edit.</remarks>
      <seealso cref="UndoItem.EditedFile" />
      <seealso cref="UndoItem.PreEditChangeCount" />
      <seealso cref="UndoItem.Redo" />
      <seealso cref="UndoItem.Undo" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.UndoItems">
      <summary>You can obtain a collection of UndoItem objects from the UndoStack.UndoItems property.</summary>
      <seealso cref="UndoItem" />
      <seealso cref="UndoStack.UndoItems" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.UndoItems.Item(System.Int32)">
      <summary>Returns a reference to an item at the specified index in the collection.</summary>
      <param name="index">Specifies the zero-based index of the item to retrieve.</param>
      <seealso cref="UndoItem" />
      <seealso cref="UndoItems.TopItem" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.UndoItems.Count">
      <summary>Returns the number of items in the collection.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.UndoItems.TopItem">
      <summary>Returns the item at the highest index in the collection. This property is <c>NULL</c> if the collection is empty.</summary>
      <seealso cref="UndoItem" />
      <seealso cref="UndoItems.Item" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.UndoItems.Remove(NationalInstruments.TestStand.Interop.API.UndoItem)">
      <summary>Removes the specified item from this collection, if it exists.</summary>
      <returns>Specifies the zero-based index of the item to remove.</returns>
      <param name=""></param>
      <seealso cref="UndoItem" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.UndoStack">
      <summary>An UndoStack manages a stack of undo items and a stack of redo items. Normally, you create an UndoStack for every document in a sequence editor in which you can undo edits to a TestStand file. You receive undo items to push onto an undo stack through the UIMessage.ActiveXData property of a <c>UIMsg_PushUndoItem</c> UI Message. You use the UndoItem.EditedFile property of the undo item to determine onto which document undo stack to push the undo item.
Use the Engine.NewUndoStack method to create an UndoStack object. You typically use UndoStack objects with the ApplicationMgr.UndoStack and SequenceFileViewMgr.UndoStack properties.</summary>
      <seealso cref="&quot;ApplicationMgr.UndoStack&quot;javascript:UILink('/RefTopics/ApplicationMgr_UndoStack_P.htm')" />
      <seealso cref="Engine.NewUndoStack" />
      <seealso cref="&quot;SequenceFileViewMgr.UndoStack&quot;javascript:UILink('/RefTopics/SequenceFileViewMgr_UndoStack_P.htm')" />
      <seealso cref="UIMessage.ActiveXData" />
      <seealso cref="UIMessageCodes" />
      <seealso cref="UndoItem.EditedFile" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.UndoStack.GetUndoDescription(System.String)">
      <summary>Returns the menu item text describing the next undo operation.</summary>
      <param name="acceleratorPrefix">Specifies the character(s) you want to precede the accelerator character, if one exists, in the description the method returns. The accelerator prefix for menu items and button labels varies according to the programming environment. For example, LabVIEW uses &quot;_&quot;, LabWindows/CVI uses &quot;__&quot;, and Microsoft Visual C++/Visual Basic use &quot;&amp;&quot;.</param>
      <seealso cref="UndoStack.GetRedoDescription" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.UndoStack.GetRedoDescription(System.String)">
      <summary>Returns the menu item text describing the next redo operation.</summary>
      <param name="acceleratorPrefix">Specifies the character(s) you want to precede the accelerator character, if one exists, in the description the method returns. The accelerator prefix for menu items and button labels varies according to the programming environment. For example, LabVIEW uses &quot;_&quot;, LabWindows/CVI uses &quot;__&quot;, and Microsoft Visual C++/Visual Basic use &quot;&amp;&quot;.</param>
      <seealso cref="UndoStack.GetUndoDescription" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.UndoStack.CanUndo">
      <summary>If this property is <c>False</c>, do not call the UndoStack.Undo method.</summary>
      <seealso cref="UndoStack.CanRedo" />
      <seealso cref="UndoStack.Undo" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.UndoStack.CanRedo">
      <summary>If this property is <c>False</c>, do not call the UndoStack.Redo method.</summary>
      <seealso cref="UndoStack.CanUndo" />
      <seealso cref="UndoStack.Redo" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.UndoStack.Undo">
      <summary>Calls UndoItem.Undo on the top undo item and then moves the item from the top of the undo stack to the top of the redo stack.</summary>
      <seealso cref="UndoItem.Redo" />
      <seealso cref="UndoItem.Undo" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.UndoStack.Redo">
      <summary>Calls the UndoItem.Redo method on the top redo item and then moves the item from the top of the redo stack to the top of the undo stack.</summary>
      <seealso cref="UndoItem.Redo" />
      <seealso cref="UndoStack.Undo" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.UndoStack.Push(NationalInstruments.TestStand.Interop.API.UndoItem)">
      <summary>Adds an item at the top of the undo stack and clears the redo stack.</summary>
      <param name="item">Specifies the item to add to the undo stack.</param>
      <seealso cref="UndoItem" />
      <seealso cref="UndoItem.UndoStack" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.UndoStack.Clear">
      <summary>Removes all items from the undo and redo stacks.</summary>
      <seealso cref="UndoItems.Remove" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.UndoStack.AggregateTopUndoItems(System.Int32,System.String,NationalInstruments.TestStand.Interop.API.Locations,NationalInstruments.TestStand.Interop.API.Locations)">
      <summary>Combines a specified number of items on the top of the undo stack into one item.</summary>
      <param name="numItemsToAggregate">Specifies the number of items to combine into one item.</param>
      <param name="aggregateItemDescription">Specifies the UndoItem.UndoDescription and UndoItem.RedoDescription properties of the aggregate item. If you pass an empty string, the aggregate item uses the <c>UndoItem.UndoDescription</c> and <c>UndoItem.RedoDescription</c> properties of the lowest undo item on the stack this method aggregates.</param>
      <param name="aggregatePreEditLocations">Specifies the UndoItem.PreEditLocations property of the aggregate undo item. If you pass <c>NULL</c>, the aggregate undo item computes the <c>UndoItem.PreEditLocations</c> property from the <c>UndoItem.PreEditLocations</c> of the aggregated undo items.</param>
      <param name="aggregatePostEditLocations">Specifies the UndoItem.PostEditLocations property of the aggregate undo item. If you pass <c>NULL</c>, the aggregate undo item computes the <c>UndoItem.PostEditLocations</c> from the <c>UndoItem.PostEditLocations</c> of the aggregated undo items.</param>
      <seealso cref="Locations" />
      <seealso cref="UndoItem.RedoDescription" />
      <seealso cref="UndoItem.PostEditLocations" />
      <seealso cref="UndoItem.PreEditLocations" />
      <seealso cref="UndoItem.UndoDescription" />
      <seealso cref="UndoStack.Redo" />
      <seealso cref="UndoStack.Undo" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.UndoStack.UndoItems">
      <summary>The items on the undo stack.</summary>
      <seealso cref="UndoItems" />
      <seealso cref="UndoStack.RedoItems" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.UndoStack.RedoItems">
      <summary>Returns the items on the redo stack.</summary>
      <seealso cref="UndoItems" />
      <seealso cref="UndoStack.UndoItems" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.UndoStack.InUndo">
      <summary>Indicates whether the <c>UndoStack</c> is currently performing an Undo operation. Read this property when handling refresh or focus change events to determine if the event was triggered by an Undo operation.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.UndoStack.InRedo">
      <summary>Indicates whether the <c>UndoStack</c> is currently performing a Redo operation. Read this property when handling refresh or focus change events to determine if the event was triggered by a Redo operation.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.UndoItemCreator">
      <summary>Use UndoItemCreator to make edits to TestStand files undoable. To use UndoItemCreator, first create an UndoItemCreator object using the Engine.NewUndoItemCreator method. Then call the BeginEdit method, make an edit to a TestStand object, and call the EndEdit method. You can call BeginEdit and EndEdit more than once to edit more than one TestStand object. Then call the CreateAndPostUndoItem method to create an undo item for all the edits you made.</summary>
      <seealso cref=".BeginEdit" />
      <seealso cref=".CreateAndPostUndoItem" />
      <seealso cref=".EndEdit" />
      <seealso cref="Engine.NewUndoItemCreator" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.UndoItemCreator.HaveEditsBeenMade">
      <summary>This property is <c>True</c> if you modify a TestStand object between calls to the UndoItemCreator.BeginEdit method and UndoItemCreator.EndEdit method or between calls to the UndoItemCreator.BeginBatchEdit method and UndoItemCreator.EndBatchEdit method. If this property is <c>False</c>, do not increment the change count of the edited file or call the UndoItemCreator.CreateAndPostUndoItem method.</summary>
      <seealso cref="UndoItemCreator.BeginBatchEdit" />
      <seealso cref="UndoItemCreator.BeginEdit" />
      <seealso cref="UndoItemCreator.CreateAndPostUndoItem" />
      <seealso cref="UndoItemCreator.EndBatchEdit" />
      <seealso cref="UndoItemCreator.EndEdit" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.UndoItemCreator.BeginEdit(NationalInstruments.TestStand.Interop.API.PropertyObject)">
      <summary><para>Note: This method is obsolete. Use the UndoItemCreator.BeginEditEx method instead.</para></summary>
      <remarks>Call this method before you modify a TestStand object.</remarks>
      <param name="obj">Specifies the object you are about to edit. The object you pass depends on which EditKinds you passed to the Engine.NewUndoItemCreator method. For each of the following EditKinds, pass the specified object.

<para><para>&#160;&#160;&#160;&#160;* EditKind_ChangeNumericFormat&#8211;Pass the property object with the numeric format you are changing to this method.</para><para>&#160;&#160;&#160;&#160;* EditKind_ChangeObject&#8211;Pass the object you are modifying to this method. For this EditKind, an UndoItemCreator creates an undo item that restores all subproperties of the property object you pass in.</para><para>&#160;&#160;&#160;&#160;* EditKind_ChangeRunMode&#8211;Pass the step you are changing the run mode of to this method. Call Step.SetRunModeEx to change the run mode of a step.</para><para>&#160;&#160;&#160;&#160;* EditKind_ChangeSequenceFileProperties&#8211;Pass the sequence file you are modifying through the Sequence File Properties Dialog Box to this method.</para><para>&#160;&#160;&#160;&#160;* EditKind_ChangeSequenceProperties&#8211;Pass the sequence you are modifying through the Sequence Properties Dialog Box to this method.</para><para>&#160;&#160;&#160;&#160;* EditKind_ChangeStep&#8211;Pass the step with the properties you are changing to this method. For example, you could pass a step you are modifying through the Step Properties Dialog Box to this method.</para><para>&#160;&#160;&#160;&#160;* EditKind_ChangeValue&#8211;Pass the property object with the value you are changing to this method. Call a <c>PropertyObject.SetVal</c> method to change the value of a property object.</para><para>&#160;&#160;&#160;&#160;* EditKind_DeleteProperty&#8211;Pass the property object you are deleting to this method. Call the  PropertyObject.DeleteSubProperty method to delete a property object.</para><para>&#160;&#160;&#160;&#160;* EditKind_DeleteSequence&#8211;Pass the sequence you are deleting to this method. Call the  SequenceFile.DeleteSequence or SequenceFile.RemoveSequence method to delete a sequence.</para><para>&#160;&#160;&#160;&#160;* EditKind_DeleteStep&#8211;Pass the step you are deleting to this method. Call the Sequence.DeleteStep method to delete a step.</para><para>&#160;&#160;&#160;&#160;* EditKind_InsertProperty&#8211;Pass the property object you are inserting to this method. Call the PropertyObject.InsertSubProperty method to insert a property object.</para><para>&#160;&#160;&#160;&#160;* EditKind_InsertSequence&#8211;Pass the sequence you are inserting to this method. Call the SequenceFile.InsertSequenceEx method to insert a sequence.</para><para>&#160;&#160;&#160;&#160;* EditKind_InsertStep&#8211;Pass the step you are inserting to this method. Call the Sequence.InsertStep method to insert a step.</para><para>&#160;&#160;&#160;&#160;* EditKind_InsertType&#8211;Pass the type you are inserting to this method. Call the TypeUsageList.InsertType method to insert a type.</para><para>&#160;&#160;&#160;&#160;* EditKind_ModifyComment&#8211;Pass the property object with the comment you are changing to this method.</para><para>&#160;&#160;&#160;&#160;* EditKind_ModifyFlags&#8211;Pass the property object with the flags you are changing to this method.</para><para>&#160;&#160;&#160;&#160;* EditKind_MoveProperty&#8211;Pass the property object you are moving to this method. Call the <c>PropertyObject.DeleteSubProperty</c> method and then the <c>PropertyObject.InsertSubProperty</c> method to move a property object.</para><para>&#160;&#160;&#160;&#160;* EditKind_MoveSequence&#8211;Pass the sequence you are moving to this method. Call the <c>SequenceFile.DeleteSequence</c> or <c>SequenceFile.RemoveSequence</c> method and then the <c>SequenceFile.InsertSequenceEx</c> method to move a sequence.</para><para>&#160;&#160;&#160;&#160;* EditKind_MoveStep&#8211;Pass the step you are moving to this method. Call the <c>Sequence.DeleteStep</c> method and then the <c>Sequence.InsertStep</c> method to move a step.</para><para>&#160;&#160;&#160;&#160;* EditKind_Rename&#8211;Pass the property object you are renaming to this method.</para><para>&#160;&#160;&#160;&#160;* EditKind_ReplaceProperty&#8211;Pass the property object you are replacing to this method. Call the PropertyObject.SetPropertyObject method to replace a property object.</para></para></param>
      <seealso cref="EditKinds" />
      <seealso cref="Engine.NewUndoItemCreator" />
      <seealso cref="PropertyObject" />
      <seealso cref="PropertyObject.DeleteSubProperty" />
      <seealso cref="PropertyObject.InsertSubProperty" />
      <seealso cref="PropertyObject.SetPropertyObject" />
      <seealso cref="&quot;Sequence File Properties dialog box&quot;javascript:RefLink('/InfoTopics/DB_Seq_File_Prop.htm')" />
      <seealso cref="&quot;Sequence Properties dialog box&quot;javascript:RefLink('/InfoTopics/DB_Seq_Prop.htm')" />
      <seealso cref="Sequence.DeleteStep" />
      <seealso cref="Sequence.InsertStep" />
      <seealso cref="SequenceFile.DeleteSequence" />
      <seealso cref="SequenceFile.InsertSequenceEx" />
      <seealso cref="SequenceFile.RemoveSequence" />
      <seealso cref="&quot;Step Properties dialog box&quot;javascript:RefLink('/InfoTopics/DB_Step_Prop.htm')" />
      <seealso cref="Step.SetRunModeEx" />
      <seealso cref="TypeUsageList.InsertType" />
      <seealso cref="UndoItemCreator.BeginBatchEdit" />
      <seealso cref="UndoItemCreator.BeginEditEx" />
      <seealso cref="UndoItemCreator.EndEdit" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.UndoItemCreator.EndEdit">
      <summary>Call this method after you modify a TestStand object.</summary>
      <seealso cref="UndoItemCreator.BeginEditEx" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.UndoItemCreator.BeginBatchEdit(System.Object[])">
      <summary>Call this method before you modify a batch of TestStand objects.</summary>
      <remarks>Instead of calling this method and the UndoItemCreator.EndBatchEdit method, you could call the UndoItemCreator.BeginEditEx and UndoItemCreator.EndEdit methods once for every object you pass to this method. However, it is somewhat more efficient to insert, delete, and move steps using the <c>UndoItemCreator.BeginBatchEdit</c> and <c>UndoItemCreator.EndBatchEdit</c> methods.</remarks>
      <param name="objs">Specifies the objects you are about to modify. The objects you pass depend on which EditKinds you passed to the  Engine.NewUndoItemCreator method. Because you pass the same object to this method as you would pass to the <c>UndoItemCreator.BeginEdit</c> method, see the <c>UndoItemCreator.BeginEdit</c> method for more information about which objects to pass to this method.</param>
      <seealso cref="Engine.NewUndoItemCreator" />
      <seealso cref="UndoItemCreator.BeginEditEx" />
      <seealso cref="UndoItemCreator.EndBatchEdit" />
      <seealso cref="UndoItemCreator.EndEdit" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.UndoItemCreator.EndBatchEdit">
      <summary>Call this method after you modify a batch of TestStand objects.</summary>
      <seealso cref="UndoItemCreator.BeginBatchEdit" />
      <seealso cref="UndoItemCreator.EndEdit" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.UndoItemCreator.CreateAndPostUndoItem(NationalInstruments.TestStand.Interop.API.UndoItem,NationalInstruments.TestStand.Interop.API.ApplicationSites,System.Object)">
      <summary>Call this method to create an undo item that can undo and redo edits. This method sends the undo item to the sequence editor using a synchronous <c>UIMsg_PushUndoItem</c> user interface message and then returns the created undo item.</summary>
      <remarks>Do not call this method if the UndoItemCreator.HaveEditsBeenMade property is <c>False</c>. You also need to increment the change count of the edited file before calling this method.</remarks>
      <returns>Specifies any combination of CreateUndoItemOptions.</returns>
      <param name=""></param>
      <param name="locationsApplicationSite">Specifies the value of the Locations.ApplicationSite properties of the undo item this method creates.</param>
      <param name="locationsUserData">Specifies the value of the Locations.UserData properties of the undo item this method creates.</param>
      <seealso cref="ApplicationSites" />
      <seealso cref="CreateUndoItemOptions" />
      <seealso cref="Locations.ApplicationSite" />
      <seealso cref="Locations.UserData" />
      <seealso cref="&quot;Omitting Optional Parameters&quot;javascript:APILink('/InfoTopics/Optional_Parameters.htm')" />
      <seealso cref="PropertyObjectFile.IncChangeCount" />
      <seealso cref="UIMessageCodes" />
      <seealso cref="UndoItem" />
      <seealso cref="UndoItemCreator.HaveEditsBeenMade" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.UndoItemCreator.BeginEditEx(NationalInstruments.TestStand.Interop.API.PropertyObject,System.String)">
      <summary>Call this method before you modify a TestStand object.</summary>
      <remarks>The object you specify with the obj and lookupString parameters depends on which EditKinds enumeration value you passed to the Engine.NewUndoItemCreator method. For each of the following EditKinds enumeration values, pass the specified object.
<para><para>&#160;&#160;&#160;&#160;* EditKind_ChangeNumericFormat&#8211;Pass the property object with the numeric format you are changing to this method.</para><para>&#160;&#160;&#160;&#160;* EditKind_ChangeObject&#8211;Pass the object you are modifying to this method. For this EditKind, an UndoItemCreator creates an undo item that restores all subproperties of the property object you pass in.</para><para>&#160;&#160;&#160;&#160;* EditKind_ChangeRunMode&#8211;Pass the step you are changing the run mode of to this method. Call Step.SetRunModeEx to change the run mode of a step.</para><para>&#160;&#160;&#160;&#160;* EditKind_ChangeSequenceFileProperties&#8211;Pass the sequence file you are modifying through the Sequence File Properties Dialog Box to this method.</para><para>&#160;&#160;&#160;&#160;* EditKind_ChangeSequenceProperties&#8211;Pass the sequence you are modifying through the Sequence Properties Dialog Box to this method.</para><para>&#160;&#160;&#160;&#160;* EditKind_ChangeStep&#8211;Pass the step with the properties you are changing to this method. For example, you could pass a step you are modifying through the Step Properties Dialog Box to this method.</para><para>&#160;&#160;&#160;&#160;* EditKind_ChangeValue&#8211;Pass the property object with the value you are changing to this method. Call a <c>PropertyObject.SetVal</c> method to change the value of a property object.</para><para>&#160;&#160;&#160;&#160;* EditKind_DeleteProperty&#8211;Pass the property object you are deleting to this method. Call the  PropertyObject.DeleteSubProperty method to delete a property object.</para><para>&#160;&#160;&#160;&#160;* EditKind_DeleteSequence&#8211;Pass the sequence you are deleting to this method. Call the  SequenceFile.DeleteSequence or SequenceFile.RemoveSequence method to delete a sequence.</para><para>&#160;&#160;&#160;&#160;* EditKind_DeleteStep&#8211;Pass the step you are deleting to this method. Call the Sequence.DeleteStep method to delete a step.</para><para>&#160;&#160;&#160;&#160;* EditKind_InsertProperty&#8211;Pass the property object you are inserting to this method. Call the PropertyObject.InsertSubProperty method to insert a property object.</para><para>&#160;&#160;&#160;&#160;* EditKind_InsertSequence&#8211;Pass the sequence you are inserting to this method. Call the SequenceFile.InsertSequenceEx method to insert a sequence.</para><para>&#160;&#160;&#160;&#160;* EditKind_InsertStep&#8211;Pass the step you are inserting to this method. Call the Sequence.InsertStep method to insert a step.</para><para>&#160;&#160;&#160;&#160;* EditKind_InsertType&#8211;Pass the type you are inserting to this method. Call the TypeUsageList.InsertType method to insert a type.</para><para>&#160;&#160;&#160;&#160;* EditKind_ModifyComment&#8211;Pass the property object with the comment you are changing to this method.</para><para>&#160;&#160;&#160;&#160;* EditKind_ModifyFlags&#8211;Pass the property object with the flags you are changing to this method.</para><para>&#160;&#160;&#160;&#160;* EditKind_MoveProperty&#8211;Pass the property object you are moving to this method. Call the <c>PropertyObject.DeleteSubProperty</c> method and then the <c>PropertyObject.InsertSubProperty</c> method to move a property object.</para><para>&#160;&#160;&#160;&#160;* EditKind_MoveSequence&#8211;Pass the sequence you are moving to this method. Call the <c>SequenceFile.DeleteSequence</c> or <c>SequenceFile.RemoveSequence</c> method and then the <c>SequenceFile.InsertSequenceEx</c> method to move a sequence.</para><para>&#160;&#160;&#160;&#160;* EditKind_MoveStep&#8211;Pass the step you are moving to this method. Call the <c>Sequence.DeleteStep</c> method and then the <c>Sequence.InsertStep</c> method to move a step.</para><para>&#160;&#160;&#160;&#160;* EditKind_Rename&#8211;Pass the property object you are renaming to this method.</para><para>&#160;&#160;&#160;&#160;* EditKind_ReplaceProperty&#8211;Pass the property object you are replacing to this method. Call the PropertyObject.SetPropertyObject method to replace a property object.</para></para></remarks>
      <param name="obj">Specifies an object that contains the location the lookupString parameter specifies. If you are modifying an element of an array object, pass the array object or an object that contains the array object. </param>
      <param name="lookupString">Pass an empty string to denote the obj parameter, or pass the name of a subproperty within obj for the object you are modifying or the array index if obj is an array object. Array index strings are a list of numbers, enclosed in brackets, that index each dimension of the array. For example, <c>[0][1]</c> is an array index for a two-dimensional array.</param>
      <seealso cref="EditKinds" />
      <seealso cref="Engine.NewUndoItemCreator" />
      <seealso cref="PropertyObject" />
      <seealso cref="PropertyObject.DeleteSubProperty" />
      <seealso cref="PropertyObject.InsertSubProperty" />
      <seealso cref="PropertyObject.SetPropertyObject" />
      <seealso cref="&quot;Sequence File Properties dialog box&quot;javascript:RefLink('/InfoTopics/DB_Seq_File_Prop.htm')" />
      <seealso cref="&quot;Sequence Properties dialog box&quot;javascript:RefLink('/InfoTopics/DB_Seq_Prop.htm')" />
      <seealso cref="Sequence.DeleteStep" />
      <seealso cref="Sequence.InsertStep" />
      <seealso cref="SequenceFile.DeleteSequence" />
      <seealso cref="SequenceFile.InsertSequenceEx" />
      <seealso cref="SequenceFile.RemoveSequence" />
      <seealso cref="&quot;Step Properties dialog box&quot;javascript:RefLink('/InfoTopics/DB_Step_Prop.htm')" />
      <seealso cref="Step.SetRunModeEx" />
      <seealso cref="TypeUsageList.InsertType" />
      <seealso cref="UndoItemCreator.BeginBatchEdit" />
      <seealso cref="UndoItemCreator.EndEdit" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.OutputMessage">
      <summary>An OutputMessage object specifies the details about an output message. The object lets you specify the message text, timestamp, category, severity, color, icon, and location. When you call the OutputMessage.Post method, TestStand copies the OutputMessage object and adds the copy to the collection TestStand maintains. You can access the collection using the reference the Engine.GetOutputMessages method returns.</summary>
      <seealso cref="Engine.GetOutputMessages" />
      <seealso cref="&quot;Output Messages (Example)&quot;javascript:TSExamplesLink('/InfoTopics/Output_Messages_Examples.htm')" />
      <seealso cref="OutputMessage.Post" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.OutputMessage.TimeInSeconds">
      <summary>Specifies the creation time of the output message.</summary>
      <remarks>When creating a new OutputMessage object, TestStand initializes this property to the current value of the Engine.SecondsSinceStart property.</remarks>
      <seealso cref="Engine.SecondsSinceStart" />
      <seealso cref="OutputMessage.TimeStamp" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.OutputMessage.Id">
      <summary>Returns a unique ID number for the output message.
<para>Note: The ID number is never zero.</para></summary>
      <remarks>The ID number is unique with respect to all output messages the TestStand Engine creates in an operating system process. Use this ID number to compare two OutputMessage object references to determine whether they refer to the same underlying output message.</remarks>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.OutputMessage.AsPropertyObject">
      <summary>Returns the underlying PropertyObject that represents the OutputMessage object. </summary>
      <remarks>Use the PropertyObject to modify, add, or remove custom properties of the object.</remarks>
      <seealso cref="PropertyObject" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.OutputMessage.Category">
      <summary>Specifies the output message category. Applications typically use the category to filter or sort messages. If you do not define a category when you create an output message, the output message is considered uncategorized. You can specify any value for this property.</summary>
      <seealso cref="Engine.NewOutputMessage" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.OutputMessage.Severity">
      <summary>Specifies the output message severity. Applications typically use the category to filter or sort messages.</summary>
      <seealso cref="Engine.NewOutputMessage" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.OutputMessage.Message">
      <summary>Specifies the text of the output message.</summary>
      <seealso cref="Engine.NewOutputMessage" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.OutputMessage.TextColor">
      <summary>Specifies the text color associated with the output message.</summary>
      <remarks>An application uses the specified color when displaying the text message.</remarks>
      <seealso cref="Engine.NewOutputMessage" />
      <seealso cref="OutputMessage.Message" />
      <seealso cref="&#xD;&#xA;" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.OutputMessage.TimeStamp">
      <summary>Specifies the timestamp of the output message.</summary>
      <remarks>When creating a new OutputMessage object, TestStand initializes the TimeStamp property to the current time.</remarks>
      <seealso cref="Engine.NewOutputMessage" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.OutputMessage.IconName">
      <summary>Specifies the icon filename assigned to the output message.</summary>
      <remarks>The TestStand Engine maintains a list of images that contain all the icons located in the <c>&lt;TestStand&gt;\Components\Icons</c> and <c>&lt;TestStand&#160;Public&gt;\Components\Icons</c> directories and images you add using the Engine.AddImage method. 

When creating a new OutputMessage object, TestStand initializes the <c>IconName</c> property based on the following severity types:
<para><para>&#160;&#160;&#160;&#160;* Information&#8212;Generic.ico</para><para>&#160;&#160;&#160;&#160;* Warning&#8212;Warning.ico</para><para>&#160;&#160;&#160;&#160;* Error&#8212;Error.ico</para></para>
TestStand Sequence Editor displays the icon next to the output message.</remarks>
      <seealso cref="Engine.AddImage" />
      <seealso cref="Engine.NewOutputMessage" />
      <seealso cref="&#xD;&#xA;" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.OutputMessage.FileLocations">
      <summary>Specifies a collection of locations used to identify the step in the sequence file that generated the output message. </summary>
      <remarks>When you pass a SequenceContext object to the sequenceContext parameter of the Engine.NewOutputMessage method, TestStand automatically adds a new Location object to the Locations collection. Otherwise, the collection is empty.</remarks>
      <seealso cref="Engine.NewOutputMessage" />
      <seealso cref="Execution" />
      <seealso cref="Location" />
      <seealso cref="Locations" />
      <seealso cref="&#xD;&#xA;" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.OutputMessage.Post">
      <summary>Appends a reference to the OutputMessage into an OutputMessages collection that TestStand maintains. Periodically, TestStand checks to see if this collection is not empty. If the collection is not empty, TestStand attaches the entire collection to the ActiveXData member of a user interface message posted with the <c>UIMsg_OutputMessages</c> event code.</summary>
      <remarks>TestStand adds the message to the output messages collection and sends <c>UIMsg_OutputMessages</c> messages only if you enable the Engine.OutputMessagesEnabled property. In TestStand 4.0 and 4.0.1, this method appended a copy of the OutputMessage, and the caller of this method could not access this copy directly. In TestStand 4.1 or later, this method adds a reference to the message.</remarks>
      <seealso cref="Engine.OutputMessagesEnabled" />
      <seealso cref="&quot;Output Messages (Example)&quot;javascript:TSExamplesLink('/InfoTopics/Output_Messages_Examples.htm')" />
      <seealso cref="OutputMessage.AsPropertyObject" />
      <seealso cref="OutputMessages" />
      <seealso cref="UIMessageCodes" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.OutputMessage.ExecutionLocations">
      <summary>Specifies a collection of locations used to identify the step, thread and execution that generated the output message.</summary>
      <remarks>When you pass a SequenceContext object to the sequenceContext parameter of the Engine.NewOutputMessage method, TestStand automatically adds a new Location object to the Locations collection, otherwise, the collection is empty.</remarks>
      <seealso cref="Engine.NewOutputMessage" />
      <seealso cref="Location" />
      <seealso cref="Locations" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.OutputMessages">
      <summary>This collection class contains elements of the OutputMessage type. You can post an output message to TestStand by calling the Engine.NewOutputMessage method to create a new message object and by calling the OutputMessage.Post method on the object. You can also call the OutputMessage expression function.

When the number of items in the collection changes from zero to one, TestStand sends a <c>UIMsg_OutputMessages</c> message to the TestStand application.

TestStand adds only messages to the collection and sends a <c>UIMsg_OutputMessages</c> message if you enable the Engine.OutputMessagesEnabled property.

An application can retrieve the latest output messages by transferring messages from the collection TestStand maintains to a new collection the application creates, as shown in the following pseudocode:
<para><code>// C# example</code></para><para><code>if (uiMsg.Event == UIMessageCodes.UIMsg_OutputMessages)</code></para><para><code>{</code></para><para><code>&#160;&#160;&#160;&#160;&#160;OutputMessages outputMessages = uiMsg.ActiveXData as OutputMessages;</code></para><para><code>&#160;&#160;&#160;&#160;&#160;OutputMessages appOutputMessages = engine.NewOutputMessages();</code></para>
<para><code>&#160;&#160;&#160;&#160;&#160;outputMessages.CopyMessagesToCollection(appOutputMessages);</code></para><para><code>&#160;&#160;&#160;&#160;&#160;for(i = 0; i &lt; appOutputMessages.Count; i++)</code></para><para><code>&#160;&#160;&#160;&#160;&#160;{</code></para><para><code>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uiControl.Add(appOutputMessages[i].Message);</code></para><para><code>&#160;&#160;&#160;&#160;&#160;}</code></para><para><code>}</code></para>
<para><code>// C++ example</code></para><para><code>if (uiMsg-&gt;Event == UIMsg_OutputMessages)</code></para><para><code>{</code></para><para><code>&#160;&#160;&#160;&#160;&#160;TS::OutputMessagesPtr outputMessages = uiMsg-&gt;ActiveXData;</code></para><para><code>&#160;&#160;&#160;&#160;&#160;TS::OutputMessagesPtr appOutputMessages = engine-&gt;NewOutputMessages();</code></para>
<para><code>&#160;&#160;&#160;&#160;&#160;outputMessages-&gt;CopyMessagesToCollection(appOutputMessages);</code></para><para><code>&#160;&#160;&#160;&#160;&#160;for(i = 0; i &lt; appOutputMessages-&gt;Count; i++)</code></para><para><code>&#160;&#160;&#160;&#160;&#160;{</code></para><para><code>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uiControl.Add(appOutputMessages-&gt;Item[i]-&gt;Message);</code></para><para><code>&#160;&#160;&#160;&#160;&#160;}</code></para><para><code>}</code></para><br/><br/>TestStand always sends output messages to a debugger if you enable the <c>DebugOptions_SendOutputMessagesToDebugger</c> option of the StationOptions.DebugOptions property.
</summary>
      <seealso cref="DebugOptions" />
      <seealso cref="Engine.NewOutputMessage" />
      <seealso cref="Engine.GetOutputMessages" />
      <seealso cref="Engine.OutputMessagesEnabled" />
      <seealso cref="&quot;Expression Functions&quot;javascript:TSFundLink('/InfoTopics/Operators_Function_Expr.htm')" />
      <seealso cref="&quot;Output Messages (Example)&quot;javascript:TSExamplesLink('/InfoTopics/Output_Messages_Examples.htm')" />
      <seealso cref="OutputMessage.Post" />
      <seealso cref="StationOptions.DebugOptions" />
      <seealso cref="UIMessageCodes" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.OutputMessages.CopyMessagesToCollection(NationalInstruments.TestStand.Interop.API.OutputMessages)">
      <summary>Copies all OutputMessage object references in the collection to the end of the target collection.</summary>
      <remarks>Use this method in an application that handles the <c>UIMsg_OutputMessages</c> event to copy the messages from the collection in UIMessage.ActiveXData to a private collection. This method is thread-safe with respect to the source collection in that the source collection cannot be modified from another thread while the copy is in progress.</remarks>
      <param name="target">Specifies the target collection to receive the OutputMessage objects references.</param>
      <seealso cref="OutputMessage" />
      <seealso cref="OutputMessages" />
      <seealso cref="UIMessage.ActiveXData" />
      <seealso cref="UIMessageCodes" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.OutputMessages.FindIndex(System.Int32)">
      <summary>Returns the index of the OutputMessage in the collection. If the OutputMessage is not in the collection, the return value is <c>-1</c>.</summary>
      <param name="outputMessageId">Specifies the ID of the OutputMessage to search for in the collection.</param>
      <seealso cref="OutputMessage.Id" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.OutputMessages.ToPropertyObject(System.Boolean)">
      <summary>Returns a PropertyObject representation of the collection. You can use the PropertyObject to persist the collection. 
<para>Note: The PropertyObject representation does not store the value of the UserData property for any Locations objects OutputMessages hold in the OutputMessages collection.</para></summary>
      <param name="storeExecutionLocations">To reduce the size of the PropertyObject, you can pass <c>False</c> to omit the values of the OutputMessage.ExecutionLocations property from the property object representation of the OutputMessages collection.</param>
      <seealso cref="Locations" />
      <seealso cref="OutputMessage.ExecutionLocations" />
      <seealso cref="OutputMessages" />
      <seealso cref="OutputMessages.FromPropertyObject" />
      <seealso cref="PropertyObject" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.OutputMessages.FromPropertyObject(NationalInstruments.TestStand.Interop.API.PropertyObject)">
      <summary>Restores the collection state that was stored in the PropertyObject by a call to the OutputMessages.ToPropertyObject method.</summary>
      <param name="val">Specifies the PropertyObject.</param>
      <seealso cref="OutputMessages.ToPropertyObject" />
      <seealso cref="PropertyObject" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.OutputMessages.Item(System.Object)">
      <summary>Returns a reference to an item at the specified index in the collection.</summary>
      <param name="index">Specifies a zero-based index.</param>
      <seealso cref="OutputMessage" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.OutputMessages.Count">
      <summary>Returns the number of items in the collection.</summary>
      <seealso cref="Engine.GetOutputMessages" />
      <seealso cref="OutputMessages.TransferMessagesToCollection" />
      <seealso cref="&#xD;&#xA;" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.OutputMessages.Add(NationalInstruments.TestStand.Interop.API.OutputMessage)">
      <summary>Adds an OutputMessage object to the collection.</summary>
      <remarks>The OutputMessage object is appended to the end of the collection.</remarks>
      <param name="outputMessage">Specifies the OutputMessage object to add.</param>
      <seealso cref="Engine.NewOutputMessage" />
      <seealso cref="OutputMessage" />
      <seealso cref="OutputMessages.Remove" />
      <seealso cref="OutputMessages.TransferMessagesToCollection" />
      <seealso cref="&#xD;&#xA;" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.OutputMessages.Remove(System.Int32)">
      <summary>Removes the specified item from this collection, if it exists.</summary>
      <remarks>This method releases only the reference to the OutputMessage object the collection holds. To delete the OutputMessage object, you must release all other references.</remarks>
      <param name="index">Specifies the zero-based index of the item to remove.</param>
      <seealso cref="OutputMessages.Add" />
      <seealso cref="OutputMessages.Clear" />
      <seealso cref="OutputMessages.TransferMessagesToCollection" />
      <seealso cref="&#xD;&#xA;" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.OutputMessages.Clear">
      <summary>Removes all items from the collection.</summary>
      <remarks>This method releases only the references to the OutputMessage objects the collection holds. To delete the OutputMessage objects, you must release all other references.</remarks>
      <seealso cref="OutputMessages.Remove" />
      <seealso cref="OutputMessages.TransferMessagesToCollection" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.OutputMessages.TransferMessagesToCollection(NationalInstruments.TestStand.Interop.API.OutputMessages)">
      <summary>Transfers all OutputMessage objects in the collection to a target collection. The collection is empty after you call this method.
</summary>
      <remarks>This method is thread-safe with respect to the source collection in that the source collection cannot be modified from another thread while the transfer is in progress.</remarks>
      <param name="target">Specifies the target collection to receive the OutputMessage objects.</param>
      <seealso cref="OutputMessages" />
      <seealso cref="OutputMessages.Clear" />
      <seealso cref="OutputMessages.Remove" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.EvaluationTypes">
      <summary>This interface specifies expected types for evaluating an expression. Obtain an EvaluationTypes object by calling the Engine.NewEvaluationTypes method or through a property of a parameter for a module call such as the LabVIEWParameter.ValidEvaluationTypes property. Pass an instance of EvaluationTypes to the Expression.ValidateEvaluationType method to perform type checking on an expression.</summary>
      <seealso cref="&quot;ActiveXParameter.ValidEvaluationTypes&quot;ActiveXParameter_ValidEvaluationTypes_P.htm" />
      <seealso cref="&quot;CommonCParameter.ValidEvaluationTypes&quot;CommonCParameter_ValidEvaluationTypes_P.htm" />
      <seealso cref="&quot;DotNetParameter.ValidEvaluationTypes&quot;DotNetParameter_ValidEvaluationTypes_P.htm" />
      <seealso cref="Engine.NewEvaluationTypes" />
      <seealso cref="Expression.ValidateEvaluationType" />
      <seealso cref="&quot;ExpressionEdit.GetValidEvaluationTypes&quot;javascript:UILink('/RefTopics/ExpressionEdit_GetValidEvaluationTypes_M.htm')" />
      <seealso cref="&quot;ExpressionEdit.SetValidEvaluationTypes&quot;javascript:UILink('/RefTopics/ExpressionEdit_SetValidEvaluationTypes_M.htm')" />
      <seealso cref="&quot;LabVIEWParameter.ValidEvaluationTypes&quot;LabVIEWParameter_ValidEvaluationTypes_P.htm" />
      <seealso cref="&quot;LabVIEWParameterElement.ValidEvaluationTypes&quot;LabVIEWParameterElement_ValidEvaluationTypes_P.htm" />
      <seealso cref="&quot;SequenceCallParameter.ValidEvaluationTypes&quot;SequenceCallParameter_ValidEvaluationTypes_P.htm" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EvaluationTypes.PropertyValueTypeFlags">
      <summary>Specifies the expected types for an expression. Use any combination of property value type flags with this property. The Expression.ValidateEvaluationType method returns <c>TS_Err_NoError</c> if the expression evaluates to any type this property specifies.</summary>
      <seealso cref="EvaluationTypes.ArrayOfNamedTypes" />
      <seealso cref="EvaluationTypes.NamedTypes" />
      <seealso cref="Expression.ValidateEvaluationType" />
      <seealso cref="PropertyValueTypeFlags" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EvaluationTypes.NamedTypes">
      <summary>Specifies the expected named types for an expression. the Expression.ValidateEvaluationType method returns <c>TS_Err_NoError</c> if the expression evaluates to a named type specified by any element of this property. For example, if the elements of this property are CommonResults and Error, the <c>Expression.ValidateEvaluationType</c> method returns <c>TS_Err_NoError</c> if the expression evaluates to PropertyObject using a CommonResults or Error type.</summary>
      <remarks>The EvaluationTypes.PropertyValueTypeFlags property must include <c>PropValTypeFlag_NamedType</c> to use this property.</remarks>
      <seealso cref="EvaluationTypes.ArrayOfNamedTypes" />
      <seealso cref="EvaluationTypes.PropertyValueTypeFlags" />
      <seealso cref="Expression.ValidateEvaluationType" />
      <seealso cref="TSError" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EvaluationTypes.ArrayOfNamedTypes">
      <summary>Represents an array of named types. An expression expects an array of these types. the Expression.ValidateEvaluationType method returns <c>TS_Err_NoError</c> if the expression evaluates to an array of a named type specified by any element of this property. For example, if the elements of this property are CommonResults and Error, the <c>Expression.ValidateEvaluationType</c> method returns <c>TS_Err_NoError</c> if the expression evaluates to PropertyObject using an array of CommonResults type or an array of Error type.</summary>
      <remarks>The EvaluationTypes.PropertyValueTypeFlags property must include <c>PropValTypeFlag_ArrayOfNamedType</c> to use this property.</remarks>
      <seealso cref="EvaluationTypes.NamedTypes" />
      <seealso cref="EvaluationTypes.PropertyValueTypeFlags" />
      <seealso cref="Expression.ValidateEvaluationType" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EvaluationTypes.AllowedRepresentations">
      <summary>Specifies the expected representation for an expression. The Expression.ValidateEvaluationType method returns <c>TS_Err_NoError</c> if the expression evaluates to a numeric property with a representation that any element of this property specifies.</summary>
      <remarks>The EvaluationTypes.PropertyValueTypeFlags property must include <c>PropValTypeFlag_Number</c> to use this property.</remarks>
      <seealso cref="EvaluationTypes.AllowedArrayRepresentations" />
      <seealso cref="Expression.ValidateEvaluationType" />
      <seealso cref="PropertyValueTypeFlags" />
      <seealso cref="TSError" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.EvaluationTypes.AllowedArrayRepresentations">
      <summary>Specifies the expected representation for an expression. The Expression.ValidateEvaluationType method returns <c>TS_Err_NoError</c> if the expression evaluates to a numeric array property with a representation that any element of this property specifies.</summary>
      <remarks>The EvaluationTypes.PropertyValueTypeFlags property must include <c>PropValTypeFlag_NumberArray</c> to use this property.</remarks>
      <seealso cref="EvaluationTypes.AllowedRepresentations" />
      <seealso cref="Expression.ValidateEvaluationType" />
      <seealso cref="PropertyValueTypeFlags" />
      <seealso cref="TSError" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.FindFileSearchListOptions">
      <summary>Use these constants to specify the srchListOption parameter of the Engine.FindFileEx method.
The <c>FindFile_AddDirSearchList</c> constants specify whether TestStand adds the directory of the file you select to the search directory paths. It also changes the dimmed state of the Add Directory to Search Directory List option.</summary>
      <seealso cref="Engine.DisplaySearchDirDialog" />
      <seealso cref="Engine.FindFileEx" />
      <seealso cref="Engine.SearchDirectories" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.FindFileSearchListOptions.FindFile_AddDirToSrchList_Ask">
      <summary>(Value: 1) Enables the Add Directory to Search Directory List option so you can choose whether to append the directory that contains the file to the list of search directories. If the current user does not have configured engine privileges, the Engine.FindFileEx method behaves as if you passed <c>FindFile_AddDirToSrchList_No</c>.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.FindFileSearchListOptions.FindFile_AddDirToSrchList_Yes">
      <summary>(Value: 3) Adds the directory to the search paths and dims the Add Directory to Search Directory List option. If the current user does not have configure engine privileges, the <c>Engine.FindFileEx</c> method behaves as if you passed <c>FindFile_AddDirToSrchList_No</c>.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.FindFileSearchListOptions.FindFile_AddDirToSrchList_No">
      <summary>(Value: 2) Does not add the directory to the search path and disables and dims the Add Directory to Search Directory List option.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.FindFileSearchListOptions.FindFile_AddDirToSrchList_Ask_IgnorePrivileges">
      <summary>(Value: 4) The same as <c>FindFile_AddDirToSrchList_Ask</c> but does not check user privileges.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.FindFileSearchListOptions.FindFile_AddDirToSrchList_Yes_IgnorePrivileges">
      <summary>(Value: 5) The same as <c>FindFile_AddDirToSrchList_Yes</c> but does not check user privileges.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.SwitchExecOperations">
      <summary>This data type contains values that specify a switch connection operation. Use the values of this enumeration with the Step.SwitchExecOperation and StepType.SwitchExecOperation properties. </summary>
      <seealso cref="Step.SwitchExecOperation" />
      <seealso cref="Step.SwitchExecOperationOrder" />
      <seealso cref="Step.SwitchExecRoutesToConnect" />
      <seealso cref="Step.SwitchExecRoutesToDisconnect" />
      <seealso cref="StepType.SwitchExecOperation" />
      <seealso cref="StepType.SwitchExecOperationOrder" />
      <seealso cref="StepType.SwitchExecRoutesToConnect" />
      <seealso cref="StepType.SwitchExecRoutesToDisconnect" />
      <seealso cref="&#xD;&#xA;" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SwitchExecOperations.SwitchExecOperation_Connect">
      <summary>(Value: 1) Creates the paths for the specified routes in the Step.SwitchExecRoutesToConnect property. </summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SwitchExecOperations.SwitchExecOperation_Disconnect">
      <summary>(Value: 2) Destroys the paths the specified routes define in the <c>Step.SwitchExecRoutesToDisconnect</c> property.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SwitchExecOperations.SwitchExecOperation_DisconnectAll">
      <summary>(Value: 3) Disconnects all previously created paths.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SwitchExecOperations.SwitchExecOperation_ConnectDisconnect">
      <summary>(Value: 4) Creates the paths for the routes specified in the <c>Step.SwitchExecRoutesToConnect</c> property and destroys the paths for the routes specified in the Step.SwitchExecRoutesToDisconnect property. Use the Step.SwitchExecOperationOrder property to specify whether the Disconnect operation occurs before or after the Connect operation. </summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.SwitchExecLifetimes">
      <summary>This data type contains values that specify a switch connection lifetime. Use the values of this enumeration with the Step.SwitchExecConnectionLifetime and StepType.SwitchExecConnectionLifetime properties. </summary>
      <seealso cref="Step.SwitchExecConnectionLifetime" />
      <seealso cref="StepType.SwitchExecConnectionLifetime" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SwitchExecLifetimes.SwitchExecLifetime_Manual">
      <summary>(Value: 0) Specifies that the route is connected until manually disconnected. </summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SwitchExecLifetimes.SwitchExecLifetime_Execution">
      <summary>(Value: 1) Specifies that the route is connected until the execution completes. </summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SwitchExecLifetimes.SwitchExecLifetime_Thread">
      <summary>(Value: 2) Specifies that the route is connected until the thread completes. </summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SwitchExecLifetimes.SwitchExecLifetime_Sequence">
      <summary>(Value: 3) Specifies that the route is connected until the sequence completes executing. </summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SwitchExecLifetimes.SwitchExecLifetime_Step">
      <summary>(Value: 4) Specifies that the route is connected until the step completes executing. </summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.SwitchExecMulticonnectModes">
      <summary>This data type contains values that specify multiconnect behavior. Use the values of this enumeration with the Step.SwitchExecMulticonnectMode and StepType.SwitchExecMulticonnectMode properties. </summary>
      <seealso cref="Step.SwitchExecMulticonnectMode" />
      <seealso cref="StepType.SwitchExecMulticonnectMode" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SwitchExecMulticonnectModes.SwitchExecMulticonnectMode_None">
      <summary>(Value: 0) A route can connect only once. </summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SwitchExecMulticonnectModes.SwitchExecMulticonnectMode_Multiconnect">
      <summary>(Value: 1) A route can connect multiple times. The route must contain the same endpoints and path. NI Switch Executive automatically reference counts the routes. If you issue multiple Connect operations for a specific route, the route is not physically disconnected until an equal number of Disconnect operations occur. You can either issue the Disconnect operation manually or use a lifetime setting for the route. The Disconnect All operation disconnects a route even if the route reference count is greater than one.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SwitchExecMulticonnectModes.SwitchExecMulticonnectMode_Default">
      <summary>(Value: -1) Defaults to the multiconnect mode as predefined for each route in the NI Switch Executive.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.OutputMessageSeverityTypes">
      <summary>Use these constants to specify the OutputMessage.Category property and the category parameter of the Engine.NewOutputMessage method.</summary>
      <seealso cref="Engine.NewOutputMessage" />
      <seealso cref="OutputMessage.Category" />
      <seealso cref="&#xD;&#xA;&#xD;&#xA;" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.OutputMessageSeverityTypes.OutputMessageSeverity_Information">
      <summary>(Value: 0) Specifies that the message is additional information.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.OutputMessageSeverityTypes.OutputMessageSeverity_Warning">
      <summary>(Value: 1) Specifies that the message is an warning. </summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.OutputMessageSeverityTypes.OutputMessageSeverity_Error">
      <summary>(Value: 2) Specifies that the message is an error. </summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.PropertyObjectElements">
      <summary>Use this enumeration to refer to specific parts of a PropertyObject with methods and properties such as Location.Element and SequenceContext.GetMultipleValues.</summary>
      <seealso cref="Location.Element" />
      <seealso cref="PropertyObject" />
      <seealso cref="PropertyObject.Comment" />
      <seealso cref="PropertyObject.GetFlags" />
      <seealso cref="PropertyObject.GetValBinary" />
      <seealso cref="PropertyObject.Name" />
      <seealso cref="PropertyObject.NumericFormat" />
      <seealso cref="PropertyObject.SetFlags" />
      <seealso cref="PropertyObject.SetValBinary" />
      <seealso cref="SequenceContext.GetMultipleValues" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyObjectElements.PropertyObjectElement_None">
      <summary>(Value: 0) Does not specify any part of a PropertyObject.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyObjectElements.PropertyObjectElement_Value">
      <summary>(Value: 1) Specifies the value of a PropertyObject, which you access with GetVal and SetVal methods.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyObjectElements.PropertyObjectElement_Name">
      <summary>(Value: 2) Specifies the name of a PropertyObject, which you access through the PropertyObject.Name property.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyObjectElements.PropertyObjectElement_Comment">
      <summary>(Value: 3) Specifies the comment of a PropertyObject, which you access through the PropertyObject.Comment property.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyObjectElements.PropertyObjectElement_Flags">
      <summary>(Value: 4) Specifies the flags of a PropertyObject, which you access through the PropertyObject.GetFlags and PropertyObject.SetFlags methods.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyObjectElements.PropertyObjectElement_NumericFormat">
      <summary>(Value: 5) Specifies the numeric format of a PropertyObject, which you access through the PropertyObject.NumericFormat property.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyObjectElements.PropertyObjectElement_Representation">
      <summary>(Value: 6) Specifies the representation of PropertyObject, which you access with the  PropertyObjectType.Representation property.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyObjectElements.PropertyObjectElement_Attributes">
      <summary>(Value: 7) Specifies the attributes of the PropertyObject, which you access through the PropertyObject.Attributes property.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.LocationKinds">
      <summary>Use this enumeration with the Location.Kind property.</summary>
      <seealso cref="Location.Kind" />
      <seealso cref="SequenceContext" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.LocationKinds.LocationKind_File">
      <summary>(Value: 1) Specifies a location in a file.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.LocationKinds.LocationKind_Execution">
      <summary>(Value: 2) Specifies a location in a SequenceContext.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.LocationKinds.LocationKind_Type">
      <summary>(Value: 3) Specifies a location in a type.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.LocationKinds.LocationKind_IOConfiguration">
      <summary>(Value: 4) Specifies a location in an IO Configuration.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.EditKinds">
      <summary>Use this enumeration to refer to a specific kind of edit for the Engine.NewUndoItemCreator, UndoItem.RedoEditKind, UndoItem.UndoEditKind, UndoItemCreator.BeginBatchEdit, and UndoItemCreator.BeginEditEx methods, and the BeginEdit, CanEdit and EndEdit methods and events of the ApplicationMgr class.</summary>
      <seealso cref="&quot;ApplicationMgr&quot;javascript:UILink('/RefTopics/ApplicationMgr.htm')" />
      <seealso cref="Engine.NewUndoItemCreator" />
      <seealso cref="&quot;Sequence File Properties dialog box&quot;javascript:RefLink('/InfoTopics/DB_Seq_File_Prop.htm')" />
      <seealso cref="&quot;Sequence Properties dialog box&quot;javascript:RefLink('/InfoTopics/DB_Seq_Prop.htm')" />
      <seealso cref="UndoItem.RedoEditKind" />
      <seealso cref="UndoItem.UndoEditKind" />
      <seealso cref="UndoItemCreator.BeginBatchEdit" />
      <seealso cref="UndoItemCreator.BeginEditEx" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.EditKinds.EditKind_None">
      <summary>(Value: 0) No edit.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.EditKinds.EditKind_ChangeValue">
      <summary>(Value: 1) Specifies changing the value of a PropertyObject.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.EditKinds.EditKind_Rename">
      <summary>(Value: 2) Specifies renaming a PropertyObject.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.EditKinds.EditKind_ModifyComment">
      <summary>(Value: 3) Specifies modifying the comment of a PropertyObject.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.EditKinds.EditKind_ModifyFlags">
      <summary>(Value: 4) Specifies modifying the flags of a PropertyObject.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.EditKinds.EditKind_ChangeNumericFormat">
      <summary>(Value: 5) Specifies changing the numeric format of a PropertyObject.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.EditKinds.EditKind_InsertProperty">
      <summary>(Value: 6) Specifies inserting a PropertyObject.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.EditKinds.EditKind_DeleteProperty">
      <summary>(Value: 7) Specifies deleting a PropertyObject.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.EditKinds.EditKind_MoveProperty">
      <summary>(Value: 8) Specifies moving a PropertyObject.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.EditKinds.EditKind_ReplaceProperty">
      <summary>(Value: 9) Specifies replacing a PropertyObject.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.EditKinds.EditKind_InsertStep">
      <summary>(Value: 10) Specifies inserting a step.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.EditKinds.EditKind_DeleteStep">
      <summary>(Value: 11) Specifies deleting a step.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.EditKinds.EditKind_MoveStep">
      <summary>(Value: 12) Specifies moving a step.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.EditKinds.EditKind_InsertSequence">
      <summary>(Value: 13) Specifies inserting a sequence.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.EditKinds.EditKind_DeleteSequence">
      <summary>(Value: 14) Specifies deleting a sequence.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.EditKinds.EditKind_MoveSequence">
      <summary>(Value: 15) Specifies moving a sequence.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.EditKinds.EditKind_ChangeObject">
      <summary>(Value: 16) Specifies any change to a TestStand object.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.EditKinds.EditKind_ChangeStep">
      <summary>(Value: 17) Specifies modifying subproperties of a step.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.EditKinds.EditKind_ChangeSequenceProperties">
      <summary>(Value: 18) Specifies modifying a sequence though the Sequence Properties dialog box.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.EditKinds.EditKind_ChangeSequenceFileProperties">
      <summary>(Value: 19) Specifies modifying a sequence file though the Sequence File Properties dialog box.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.EditKinds.EditKind_ChangeRunMode">
      <summary>(Value: 20) Specifies changing the run mode of a step. </summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.EditKinds.EditKind_InsertType">
      <summary>(Value: 21) Specifies inserting a new type.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.EditKinds.EditKind_ModifyAttributes">
      <summary>(Value: 23) Specifies modifying the attributes of a PropertyObject.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.EditKinds.EditKind_ChangeRepresentation">
      <summary>(Value: 22)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.EditKinds.EditKind_MoveType">
      <summary>(Value: #) Specifies moving a type. Does not support undo.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.PerformActionOptions">
      <summary>Use these constants with the ApplicationMgr.SaveOnClose, and ApplicationMgr.PromptForOverwrite properties to  specify whether to perform an action.</summary>
      <seealso cref="&quot;ApplicationMgr.PromptForOverwrite&quot;javascript:UILink('/RefTopics/ApplicationMgr_PromptForOverwrite_P.htm')" />
      <seealso cref="&quot;ApplicationMgr.SaveOnClose&quot;javascript:UILink('/RefTopics/ApplicationMgr_SaveOnClose_P.htm')" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PerformActionOptions.PerformActionOption_Prompt">
      <summary>(Value: 2) Specifies to prompt the user to determine whether to perform an action. </summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PerformActionOptions.PerformActionOption_Yes">
      <summary>(Value: 0) Specifies to perform an action without prompting the user.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PerformActionOptions.PerformActionOption_No">
      <summary>(Value: 1) Specifies to not perform an action.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.FileWritingFormats">
      <summary>Use these constants with the PropertyObjectFile.FileWritingFormat property, the StationOptions.DefaultFileWritingFormat property, and the return value to the FileInformation.GetFileFormatVersion method.</summary>
      <seealso cref="FileInformation.GetFileFormatVersion" />
      <seealso cref="PropertyObjectFile.FileWritingFormat" />
      <seealso cref="StationOptions.DefaultFileWritingFormat" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.FileWritingFormats.FileWritingFormat_Ini">
      <summary>(Value: 1) Specifies that TestStand writes the file in an INI format. This format is used by previous versions of TestStand (3.x or earlier). Use this format when necessary to support existing code that reads the INI file directly. <para>Note: The INI format is deprecated in TestStand 2019 and may not be supported in future releases. There is no behavior change.</para></summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.FileWritingFormats.FileWritingFormat_Binary">
      <summary>(Value: 2) Specifies that TestStand writes the file in a binary format. This format is the fastest and most memory-efficient format.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.FileWritingFormats.FileWritingFormat_Xml">
      <summary>(Value: 3) Specifies that TestStand writes the file in an XML format. Use this format if you want to read, parse, or create files as XML. This option is the most readable and parseable format.</summary>
      <remarks>If you change a file that you store in a source control system from XML or INI to Binary, make sure you update your source code control system to set the file type as binary. If you do not need to read, parse, or create files externally from TestStand, National Instruments recommends that you use <c>FileWritingFormat_Binary</c>.</remarks>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.CodeTemplate">
      <summary>Use this interface to obtain information about a code template. Code templates are associated with adapters and represent the default code that modules use when creating code for an instance of a step type. Use the StepType.CodeTemplates property to obtain a collection of CodeTemplate objects associated with a step type.</summary>
      <seealso cref="&quot;CommonCModule.CodeTemplateName&quot;CommonCModule_CodeTemplateName_P.htm" />
      <seealso cref="StepType.CodeTemplates" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.CodeTemplate.Type">
      <summary>Returns the type of this code template. The code template type determines which adapter the code module is associated with.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.CodeTemplate.Name">
      <summary>Returns the name of this code template. You can use this name when you set the CommonCModule.CodeTemplateName property before calling the Module.CreateCode or CommonCModule.LoadPrototypeFromCodeTemplate methods.</summary>
      <seealso cref="&quot;CommonCModule.CodeTemplateName&quot;CommonCModule_CodeTemplateName_P.htm" />
      <seealso cref="&quot;CommonCModule.LoadPrototypeFromCodeTemplate&quot;CommonCModule_LoadPrototypeFromCodeTemplate_M.htm" />
      <seealso cref="Module.CreateCode" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.CodeTemplate.Description">
      <summary>Returns the description of this code template.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.CodeTemplates">
      <summary>A collection of CodeTemplate objects. Code templates are associated with adapters and represent the default code that modules use when creating code for an instance of a step type. Use the StepType.CodeTemplates property to obtain a collection of CodeTemplate objects associated with a step type.</summary>
      <seealso cref="CodeTemplate" />
      <seealso cref="StepType.CodeTemplates" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.CodeTemplates.Item(System.Object)">
      <summary>Returns a reference to an item at the specified index in the collection.</summary>
      <param name="index">Specifies the zero-based index of the item to retrieve.</param>
      <seealso cref="CodeTemplate" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.CodeTemplates.Count">
      <summary>Returns the number of items in the collection.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.UnmappedArgumentValues">
      <summary>Use objects from the UnmappedArgumentValues class to obtain a list of the current arguments not used as inputs and outputs of the corresponding module. Use the Module.UnmappedArgumentValues and DotNetCall.UnmappedArgumentValues properties to obtain the collection of unmapped argument values for a module.

When a module prototype changes, TestStand attempts to map the current module arguments to the new prototype by looking for matching argument names and data types, and by matching argument positions and data types. If TestStand fails to assign an argument to the new prototype, the argument is added to this collection.

TestStand does not clear the collection when you load a new prototype. Use the UnmappedArgumentValues.Clear method to clear the collection before calling the Module.LoadPrototype  or DotNetCall.LoadPrototypeFromSignature method.</summary>
      <seealso cref="&quot;DotNetCall.LoadPrototypeFromSignature&quot;DotNetCall_LoadPrototypeFromSignature_M.htm" />
      <seealso cref="DotNetCall.UnmappedArgumentValues&quot;RefTopics/DotNetCall_UnmappedArgumentValues_P.htm" />
      <seealso cref="Module.LoadPrototype" />
      <seealso cref="Module.UnmappedArgumentValues" />
      <seealso cref="UnmappedArgumentValue" />
      <seealso cref="UnmappedArgumentValues.Clear" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.UnmappedArgumentValues.Item(System.Object)">
      <summary>Returns a reference to an item at the specified index in the collection.</summary>
      <param name="index">Specifies the zero-based index of the item to retrieve.</param>
      <seealso cref="UnmappedArgumentValue" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.UnmappedArgumentValues.Count">
      <summary>Returns the number of items in the collection.</summary>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.UnmappedArgumentValues.Clear">
      <summary>Removes all items from this collection.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.UnmappedArgumentValue">
      <summary>Use objects from the UnmappedArgumentValue class to obtain specific information for an item in the UnmappedArgumentValues collection class. </summary>
      <seealso cref="Module.UnmappedArgumentValues" />
      <seealso cref="UnmappedArgumentValues" />
      <seealso cref="&#xD;&#xA;" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.UnmappedArgumentValue.Name">
      <summary>Returns the symbolic name for the argument.</summary>
      <seealso cref="UnmappedArgumentValue.TypeName" />
      <seealso cref="UnmappedArgumentValue.ValueExpr" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.UnmappedArgumentValue.ValueExpr">
      <summary>Returns the value expression for the argument.</summary>
      <seealso cref="UnmappedArgumentValue.Name" />
      <seealso cref="UnmappedArgumentValue.TypeName" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.UnmappedArgumentValue.TypeName">
      <summary>Returns the type name of the argument.</summary>
      <seealso cref="UnmappedArgumentValue.Name" />
      <seealso cref="UnmappedArgumentValue.ValueExpr" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.UnmappedArgumentValue.UnmappedArgumentValues">
      <summary>Returns the UnmappedArgumentValues for fields of a container or elements of an array.</summary>
      <seealso cref="UnmappedArgumentValues" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.SwitchExecOperationOrders">
      <summary>This data type contains values that specify whether the Disconnect operation occurs before or after the Connect operation. Use the values of this enumeration with the Step.SwitchExecOperationOrder and StepType.SwitchExecOperationOrder properties. </summary>
      <seealso cref="Step.SwitchExecOperationOrder" />
      <seealso cref="StepType.SwitchExecOperationOrder" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SwitchExecOperationOrders.SwitchExecOperationOrder_DisconnectBeforeConnect">
      <summary>(Value: 1) Specifies to disconnect routes before connecting any routes. This is the typical mode of operation.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SwitchExecOperationOrders.SwitchExecOperationOrder_DisconnectAfterConnect">
      <summary>(Value: 2) Specifies to connect routes before disconnecting any routes. Use this mode of operation when you are switching electric current and want to ensure that a load is always connected to the source. </summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.CreateUndoItemOptions">
      <summary>Use these constants with the UndoItemCreator.CreateAndPostUndoItem method.</summary>
      <seealso cref="UndoItemCreator.CreateAndPostUndoItem" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.CreateUndoItemOptions.CreateUndoItemOption_NoOptions">
      <summary>(Value: 0x0): No options.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.CreateUndoItemOptions.CreateUndoItemOption_CreateOnly">
      <summary>(Value: 0x1): Use this option to prevent the UndoItemCreator.CreateAndPostUndoItem method from sending the created undo item to the sequence editor.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.SerializationOptions">
      <summary>Use these constants with the Engine.SerializeObjects method.</summary>
      <seealso cref="Engine.SerializeObjects" />
      <seealso cref="Engine.UnserializeObjects" />
      <seealso cref=" Engine.UnserializeObjectsAndTypes" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SerializationOptions.SerializationOption_NoOptions">
      <summary>(Value: 0) TestStand uses the INI format by default if you specify no options.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SerializationOptions.SerializationOption_UseBinary">
      <summary>(Value: 1) Use this option to greatly enhance the speed of both serialization and unserialization. This option is the fastest and most memory efficient format. </summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SerializationOptions.SerializationOption_UseXml">
      <summary>(Value: 2) Use this option if you want to read or parse the data as XML. This option is the most readable and parseable format. Normally, the data from the Engine.SerializeObjects method is passed as input to the Engine.UnserializeObjects and Engine.UnserializeObjectsAndTypes methods. In this case, National Instruments recommends using <c>SerializationOption_UseBinary</c> because that option is faster and more memory efficient.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.SerializationOptions.SerializationOption_SupportNonTypedefMatchingInstances">
      <summary>(Value: 4) Normally, type instances must match the structure of the underlying type definitions. Although you can use the PropertyObject properties and methods to modify a type instance so it no longer matches the structure of the underlying type definition, National Instruments does not recommend doing so even though it can be useful in some limited cases. Use the <c>SerializationOption_SupportNonTypedefMatchingInstances</c> option only when you must serialize objects that contain these types of instances to preserve the modifications during unserialization. 
If you do not use this option when you serialize objects, TestStand makes the type instances conform to the underlying type definition during unserialization. You do not need to use this option when unserializing the data. TestStand makes type instances conform to type definitions and removes any structural modifications you programmatically make in the following situations, even when you use the <c>SerializationOption_SupportNonTypedefMatchingInstances</c> option:<para><para>&#160;&#160;&#160;&#160;* When you modify the structure of a type definition or use the Apply to All Loaded Instances of the Type option to modify a type definition, TestStand makes all type instances in memory conform to the type definition.</para><para>&#160;&#160;&#160;&#160;* When you load a file and use automatic or manual type conflict resolution to replace the existing global definition of the type with a new version of the type definition, TestStand makes all instances of the type in memory conform to the new version of the type definition.</para></para> Instead of creating type instances that do not match type definitions, create a container property in the type definition, set the PropFlags_UnstructuredProperty property flag, and place all the custom, per-instance properties in the container. National Instruments recommends that you use unstructured containers to hold properties that do not match the definition to use type instances that differ from type definitions. <para>Note: The <c>SerializationOption_SupportNonTypedefMatchingInstances</c> option does not support the <c>.ini</c> format. You must use this option with the bitwise-OR operator with the <c>SerializationOption_UseXml</c> or <c>SerializationOption_UseBinary</c> option.</para></summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.NewThreadOptions">
      <summary>Use these constants to specify the options parameter of the Execution.NewThread method.</summary>
      <seealso cref="Execution.NewThread" />
      <seealso cref="&#xD;&#xA;&quot;Run Options tab&quot;javascript:RefLink('/InfoTopics/DB_Step_Prop_Run_Opt_Tab.htm')" />
      <seealso cref="&quot;Step Properties dialog box&quot;javascript:RefLink('/InfoTopics/DB_Step_Prop.htm')" />
      <seealso cref="Thread.Resume" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.NewThreadOptions.NewThreadOption_NoOptions">
      <summary>(Value: 0x0) No options.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.NewThreadOptions.NewThreadOption_AutoWaitAtEndOfSequence">
      <summary>(Value: 0x1) Use this option to have the calling sequence wait for the launching thread to complete before the calling sequence returns. You must specify a SequenceContext when you call the Execution.NewThread method to apply this option.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.NewThreadOptions.NewThreadOption_InitiallySuspended">
      <summary>(Value: 0x2) Use this option to specify that TestStand creates the new thread in a suspended state. Call the Thread.Resume method to start the thread, or use an ActiveX/COM step to call the <c>Thread.Resume</c> method from a sequence.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.NewThreadOptions.NewThreadOption_UseSTA">
      <summary>(Value: 0x4) Use this option to specify whether the concurrency model of the thread is initialized as single-threaded apartment (STA) or multi-threaded apartment (MTA). By default, TestStand initializes new executions and threads to use the MTA model. A thread must use the STA model if the thread creates or launches a dialog box that contains ActiveX controls. 
If you use this option to launch a sequence with a step displaying an ActiveX control, you might need to set the Load Option on the Run Options tab of the Step Properties dialog box to Load dynamically. This ensures that TestStand loads the module the step calls in the thread initialized as STA. </summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.CodeTemplateTypes">
      <summary>Use these constants with the CodeTemplate.Type property.</summary>
      <seealso cref="CodeTemplate.Type" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.CodeTemplateTypes.CodeTemplateType_Legacy">
      <summary>(Value: 1) Specifies the legacy template for the LabVIEW or LabWindows/CVI Adapter. The legacy code template has a fixed prototype that takes a TestData and a TestError parameter.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.CodeTemplateTypes.CodeTemplateType_LabVIEW">
      <summary>(Value: 2) Specifies a code template for the LabVIEW Adapter.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.CodeTemplateTypes.CodeTemplateType_CVI">
      <summary>(Value: 3) Specifies a code template for the LabWindows/CVI Adapter.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.CodeTemplateTypes.CodeTemplateType_CppOrC">
      <summary>(Value: 4) Specifies a code template for the C/C++ DLL Adapter and specifies that the C/C++ Module creates code in a text file.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.CodeTemplateTypes.CodeTemplateType_VisualCppDotNet">
      <summary>(Value: 5) Specifies a code template for the C/C++ DLL Adapter and specifies that the C/C++ Module creates code in Microsoft Visual Studio.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.CodeTemplateTypes.CodeTemplateType_VisualCSharpDotNet">
      <summary>(Value: 6) Specifies a code template for the .NET Adapter and specifies that the .NET Module creates C# code.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.CodeTemplateTypes.CodeTemplateType_VisualBasicDotNet">
      <summary>(Value: 7) Specifies a code template for the .NET Adapter and specifies that the .NET Module creates Visual Basic .NET code.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.CodeTemplateTypes.CodeTemplateType_HTBasic">
      <summary>(Value: 8) Specifies a code template for the HTBasic Adapter.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.CodeTemplateTypes.CodeTemplateType_LabVIEWNXG">
      <summary>(Value: 9) Specifies a code template for the LabVIEW NXG Adapter.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.CopyLocationsOptions">
      <summary>Use these constants with the Locations.AddLocations method.</summary>
      <seealso cref="Locations.AddLocations" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.CopyLocationsOptions.CopyLocationsOption_ShallowCopy">
      <summary>(Value: 1) Specifies that the <c>Locations.AddLocations</c> method adds the locations you pass to the collection without making a copy of the locations.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.CopyLocationsOptions.CopyLocationsOption_DeepCopy">
      <summary>(Value: 2) Specifies that the Locations.AddLocations method adds a copy of the locations you pass to the collection.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.InputStream">
      <summary>Objects of the InputStream class represent an abstract stream of data. In a sequence file translator, this stream reads the content of a user file. The InputStream class allows the translators to read, seek, and query the size of a file. 
You cannot create an InputStream object externally, and you can obtain a reference only in the DLL interface exposed to a sequence file translator. The TestStand Engine creates an InputStream object and passes the object to various callbacks in the DLL interface.  </summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.InputStream.Path">
      <summary>Returns the pathname TestStand used when it loaded the user file.</summary>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.InputStream.ReadBytes(System.Int32)">
      <summary>Obtains an array of bytes that contains the data read from the stream. This method reads the specified number of bytes from the stream and stores them in a byte array.</summary>
      <remarks>This method increments the Offset of the stream reader by using the number of bytes read from the stream. 
The actual number of bytes read from the stream can be less than the number of bytes specified for reading. You can use the stream reader Offset before and after the read to determine the actual number of bytes read.
</remarks>
      <returns>An array of bytes that contains the data read from the stream.</returns>
      <param name="numBytes">Specifies the maximum number of bytes to read from the stream.</param>
      <seealso cref="InputStream.Offset" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.InputStream.IsEndofStream">
      <summary>Indicates if the end of the stream has been reached. </summary>
      <remarks>Use this property to determine whether the end of stream has been reached.</remarks>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.InputStream.Length">
      <summary>Returns the size of the stream in bytes. </summary>
      <remarks>Use this property to obtain the size of the stream. You can use this value to determine how many characters to allocate for a buffer or to read from the stream.</remarks>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.InputStream.Offset">
      <summary>Specifies the current position of the reader in the stream. The offset is always from the start of the stream.</summary>
      <remarks>Use this property to query the current position in the stream or to move the reader to a different position in the stream. The InputStream.ReadBytes method updates the stream reader position by using the number of bytes read from the stream.</remarks>
      <seealso cref="InputStream.ReadBytes" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.OpenWorkspaceFileOptions">
      <summary>These constants represent the options you can use with the options parameter of the Engine.OpenWorkspaceFile method. Use the bitwise-OR operator to specify more than one option.</summary>
      <seealso cref="Engine.OpenWorkspaceFile" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.OpenWorkspaceFileOptions.OpenWorkspaceFile_NoOptions">
      <summary>(Value: 0x0) No options. </summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.OpenWorkspaceFileOptions.OpenWorkspaceFile_IgnoreMissingFiles">
      <summary>(Value: 0x1) Specifies that the method does not prompt the user if any of the files in the workspace are not found on disk.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.OpenWorkspaceFileOptions.OpenWorkspaceFile_SearchCurrentDirectory">
      <summary>(Value: 2) Instructs TestStand to use the directory where the workspace file resides to resolve the paths of the files in the workspace when loaded.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.OpenWorkspaceFileOptions.OpenWorkspaceFile_UseSearchDirectories">
      <summary>(Value: 4) Instructs TestStand to use the TestStand search to resolve the paths of the files in the workspace when loaded.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.LoadPrototypeOptions">
      <summary>These constants represent the options you can use with the options parameter of the Module.LoadPrototype, SequenceCallModule.LoadPrototypeFromSequence and DotNetCall.LoadPrototypeFromSignature methods.</summary>
      <seealso cref="DotNetCall.LoadPrototypeFromSignature" />
      <seealso cref="Module.LoadPrototype" />
      <seealso cref="Module.UnmappedArgumentValues" />
      <seealso cref="SequenceCallModule.LoadPrototypeFromSequence" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.LoadPrototypeOptions.LoadPrototypeOption_NoOptions ">
      <summary>(Value: 0x0) No Options.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.LoadPrototypeOptions.LoadPrototypeOption_MapExistingParameters ">
      <summary>(value: 0x1) If this flag is set, the Module.LoadPrototype method attempts to keep the existing argument value expressions by mapping them to the parameters in the new prototype. Any arguments that cannot be mapped are added to the Module.UnmappedArgumentValues collection.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.PropertyValueTypeFlags">
      <summary>Use these constants with properties like EvaluationTypes.NamedTypes, EvaluationTypes.ArrayOfNamedTypes and EvaluationTypes.PropertyValueTypeFlags to specify any combination of the types of values that a PropertyObject can store. These constants are compatible with the ValidExpressionTypes constants.</summary>
      <seealso cref="EvaluationTypes.ArrayOfNamedTypes" />
      <seealso cref="EvaluationTypes.NamedTypes" />
      <seealso cref="EvaluationTypes.PropertyValueTypeFlags" />
      <seealso cref="PropertyObject" />
      <seealso cref="PropertyValueTypes" />
      <seealso cref="&quot;ValidExpressionTypes&quot;javascript:UILink('/RefTopics/ValidExpressionTypes.htm')" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyValueTypeFlags.PropValTypeFlag_Any">
      <summary>(Value: -1) Any type.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyValueTypeFlags.PropValTypeFlag_Boolean">
      <summary>(Value: 0x1) A Boolean type.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyValueTypeFlags.PropValTypeFlag_Number">
      <summary>(Value: 0x2) A numeric type.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyValueTypeFlags.PropValTypeFlag_String">
      <summary>(Value: 0x4) A string type.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyValueTypeFlags.PropValTypeFlag_Reference">
      <summary>(Value: 0x8) A reference type.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyValueTypeFlags.PropValTypeFlag_Container">
      <summary>(Value: 0x10) A container type.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyValueTypeFlags.PropValTypeFlag_NamedType">
      <summary>(Value: 0x20) A named type.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyValueTypeFlags.PropValTypeFlag_BooleanArray">
      <summary>(Value: 0x40) A Boolean array type.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyValueTypeFlags.PropValTypeFlag_NumberArray">
      <summary>(Value: 0x80) A numeric array type.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyValueTypeFlags.PropValTypeFlag_StringArray">
      <summary>(Value: 0x100) A string array type.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyValueTypeFlags.PropValTypeFlag_ReferenceArray">
      <summary>(Value: 0x200) A reference array type.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyValueTypeFlags.PropValTypeFlag_ContainerArray">
      <summary>(Value: 0x400) A container array type.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyValueTypeFlags.PropValTypeFlag_ArrayOfNamedType">
      <summary>(Value: 0x800) An array of a named type.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyValueTypeFlags.PropValTypeFlag_Object">
      <summary>(Value: 0x4000) A PropertyObject. An element of an array of a basic type is not a PropertyObject.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyValueTypeFlags.PropValTypeFlag_PlainReference">
      <summary>(Value: 0x8000) A reference type that is not a named type.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyValueTypeFlags.PropValTypeFlag_PlainContainer">
      <summary>(Value: 0x10000) A container type that is not a named type.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyValueTypeFlags.PropValTypeFlag_Nothing">
      <summary>(Value: 0x1000) A reference type with a value of <c>Nothing</c>.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PropertyValueTypeFlags.PropValTypeFlag_Enum">
      <summary>(Value: 0x20000)</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.ParseLookupStringOptions">
      <summary>Use these options with the Engine.ParseLookupString method.</summary>
      <seealso cref="Engine.ParseLookupString" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ParseLookupStringOptions.ParseLookupStringOption_NoOptions">
      <summary>(Value: 0x0) No options. </summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ParseLookupStringOptions.ParseLookupStringOption_TreatArrayIndicesAsSeparateTokens">
      <summary>(Value: 0x1) This option specifies that the Engine.ParseLookupString method parses array names and array indices as separate strings in the returned String Array. If you do not use this option, the <c>Engine.ParseLookupString</c> method parses an array name and array index as one string.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.ApplicationSites">
      <summary>Use these constants to specify how to display a location a user interface can display in more than one place. Use these constants with the Locations.ApplicationSite property and the UndoItemCreator.CreateAndPostUndoItem method.

</summary>
      <seealso cref="Locations.ApplicationSite" />
      <seealso cref="UndoItemCreator.CreateAndPostUndoItem" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ApplicationSites.ApplicationSite_DefaultSite">
      <summary>(Value: 0) Specifies that the user interface determines where to display the location.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ApplicationSites.ApplicationSite_ItemList">
      <summary>(Value: 1) Specifies that the user interface displays the location in a list control, such as a list of steps or a list of sequences.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ApplicationSites.ApplicationSite_Variables">
      <summary>(Value: 2) Specifies that the user interface displays the location in a variables control.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ApplicationSites.ApplicationSite_PropertyBrowser">
      <summary>(Value: 3) Specifies that the user interface displays the location in a control that displays a hierarchy of properties and subproperties.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ApplicationSites.ApplicationSite_Settings">
      <summary>(Value: 4) Specifies that the user interface displays the location in a settings panel or dialog.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.FileInformation">
      <summary>Use FileInformation objects to obtain file information, such as file version, file format version, and file type, on files TestStand recognizes without fully loading the files into memory. When you call methods and properties on a FileInformation object, TestStand can cache the information. For changes made to a file on disk to be reflected in a FileInformation object, you must release the object and use the Engine.GetFileInformation method to obtain a new FileInformation object.</summary>
      <seealso cref="Engine.GetFileInformation" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.FileInformation.IsCustomFile">
      <summary>Returns <c>True</c> if the file is a custom format file TestStand can load using a custom sequence file translator.</summary>
      <remarks>Files in native TestStand formats always return <c>False</c> for this property.
This property throws an exception if TestStand cannot locate the file when it is first accessed. Use the FileInformation.FileExists property to determine whether the file is available. </remarks>
      <seealso cref="FileInformation.FileExists" />
      <seealso cref="FileInformation.IsPropertyObjectFile" />
      <seealso cref="FileInformation.IsSequenceFile" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.FileInformation.IsSequenceFile">
      <summary>Returns <c>True</c> if the file is a TestStand sequence file or a custom sequence file TestStand can load with a custom sequence file translator.</summary>
      <remarks>Use this property to determine whether you can load the file using the Engine.GetSequenceFileEx method.
This property throws an exception if TestStand cannot locate the file when it is first accessed. Use the FileExists property to determine whether the file is available.</remarks>
      <seealso cref="Engine.GetSequenceFileEx" />
      <seealso cref="FileInformation.FileExists" />
      <seealso cref="FileInformation.IsCustomFile" />
      <seealso cref="FileInformation.IsPropertyObjectFile" />
      <seealso cref="&#xD;&#xA;" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.FileInformation.IsPropertyObjectFile">
      <summary>Returns <c>True</c> if the file is a TestStand PropertyObjectFile. </summary>
      <remarks>Use this property to determine whether you can load the file using the  PropertyObjectFile.ReadFile method.
This property throws an exception if TestStand cannot locate the file when it is first accessed. Use the FileInformation.FileExists property to determine whether the file is available.</remarks>
      <seealso cref="FileInformation.FileExists" />
      <seealso cref="FileInformation.IsCustomFile" />
      <seealso cref="FileInformation.IsSequenceFile" />
      <seealso cref="PropertyObjectFile" />
      <seealso cref="PropertyObjectFile.ReadFile" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.FileInformation.FileWritingFormat">
      <summary>Returns the format in which TestStand wrote a property object file, such as binary, INI, or XML.</summary>
      <remarks>This method is valid only for native TestStand files. Use the FileInformation.IsPropertyObjectFile property to determine whether you can safely access this property.
This property throws an exception if TestStand cannot locate the file when it is first accessed. Use the FileInformation.FileExists property to determine whether the file is available. </remarks>
      <seealso cref="FileInformation.FileExists" />
      <seealso cref="FileInformation.IsPropertyObjectFile" />
      <seealso cref="PropertyObjectFile.FileWritingFormat" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.FileInformation.GetFileFormatVersion">
      <summary>Returns the format version of the file. If no format version is available, the method returns an empty string.</summary>
      <remarks>Generally, the file format version is the format of the file. The method returns the TestStand Engine version that saved a TestStand file, the LabVIEW server version that saved a VI file, or the type of binary file for DLL and executable files. For example, the file format version of a Microsoft Windows XP binary executable is usually <c>PE</c> (Portable Executable), the file format version of a .NET assembly is <c>.NET</c>, the file format version of a LabVIEW VI is the version of the LabVIEW development system that saved the VI, such as 12.0.0, and the file format version of a TestStand sequence file is the version of the TestStand Engine that saved the file, such as 5.0.0.
This property throws an exception if TestStand cannot locate the file when it is first accessed. Use the FileInformation.FileExists property to determine whether the file is available.</remarks>
      <seealso cref="FileInformation.FileExists" />
      <seealso cref="FileInformation.GetFileVersion" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.FileInformation.GetFileVersion(System.String@)">
      <summary>Obtains the version of the file. The method returns <c>True</c> if the file has a file version.  Otherwise it returns <c>False</c>. </summary>
      <remarks>Generally, the file version is the version or revision of the file. The method returns the PropertyObjectFile.Version property value for TestStand files, the revision from a LabVIEW VI, and file version value in the resource of DLL and executable files. 
The version number usually appears in the <c>MajorVersion.MinorVersion.RevisionVersion</c> format, such as <c>1.0.2</c>.
This method throws an exception if the file cannot be located when it is first accessed. Use the FileExists property to determine whether the file is available.</remarks>
      <returns>Returns <c>True</c> if the file has a file version. Otherwise, returns <c>False</c>.</returns>
      <param name="val">Returns the version of the file. If no version is available, the method returns an empty string.</param>
      <seealso cref="FileInformation.FileExists" />
      <seealso cref="FileInformation.GetFileFormatVersion" />
      <seealso cref="PropertyObjectFile.Version" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.FileInformation.FileExists">
      <summary>Returns <c>True</c> if a file exists and is accessible at the path specified for this FileInformation object. This property is not cached. TestStand attempts to locate the file on disk every time you call this property. </summary>
      <remarks>Use this property to determine whether you can use the other properties and methods on the <c>FileInformation</c> object.</remarks>
      <seealso cref="FileInformation" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.FileInformation.IsDotNetAssembly">
      <summary>Returns <c>True</c> if the file is a .NET assembly.</summary>
      <remarks>Use this property to determine whether you can use the file to specify the assembly for a DotNetModule object.
This property returns an error if TestStand cannot locate the file when TestStand first attempts to access the file. Use the FileInformation.FileExists property to determine whether the file is available.</remarks>
      <seealso cref="DotNetModule" />
      <seealso cref="DotNetModule.SetAssembly" />
      <seealso cref="Engine.GetFileInformation" />
      <seealso cref="FileInformation.FileExists" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.FileInformation.IsCVIDll">
      <summary>Returns <c>True</c> if the file is a LabWindows/CVI DLL.</summary>
      <remarks>This property returns an error if TestStand cannot locate the file when TestStand first attempts to access the file. Use the FileInformation.FileExists property to determine whether the file is available.</remarks>
      <seealso cref="FileInformation.FileExists" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.FileInformation.PropertyObjectFileType">
      <summary>Returns the file type of the file.</summary>
      <remarks>Use this property to determine the type of file to create before using the PropertyObjectFile.ReadFile method.
This property returns an error if TestStand cannot locate the file when it is first accessed or if the file is not a PropertyObjectFile. Use the FileInformation.FileExists property to determine if the file is available and the FileInformation.IsPropertyObjectFile property to determine if the file is a <c>PropertyObjectFile</c>.</remarks>
      <seealso cref="Engine.NewPropertyObjectFile" />
      <seealso cref="Engine.ReadPropertyObjectFile" />
      <seealso cref="FileInformation.FileExists" />
      <seealso cref="FileInformation.IsPropertyObjectFile" />
      <seealso cref="PropertyObjectFile" />
      <seealso cref="PropertyObjectFile.ReadFile" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.FileInformation.GetFileFormatDisplayVersion">
      <summary>Returns the format display version of the file if the FileInformation.IsPropertyObjectFile property is <c>True</c> for the file, otherwise this method returns the value from the FileInformation.GetFileFormatVersion method. If no format version is available, the method returns an empty string.</summary>
      <remarks>For a property object file, this method returns the TestStand version in which the file was created.
This method returns an error if TestStand cannot locate the file when it is first accessed. Use the FileInformation.FileExists property to determine whether the file is available.</remarks>
      <seealso cref="FileInformation.FileExists" />
      <seealso cref="FileInformation.GetFileFormatVersion" />
      <seealso cref="FileInformation.IsPropertyObjectFile" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.WorkspaceBrowserDialogOptions">
      <summary>Use these constants with the dlgOptions parameter of the Engine.DisplayWorkspaceBrowserDialog method.

</summary>
      <seealso cref="Engine.AppMainHwnd" />
      <seealso cref="Engine.DisplayWorkspaceBrowserDialog" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.WorkspaceBrowserDialogOptions.WorkspaceBrowserDlgOption_NoOptions">
      <summary>(Value: 0) No options.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.WorkspaceBrowserDialogOptions.WorkspaceBrowserDlgOption_ModalToAppMainWind">
      <summary>(Value: 0x00010000) By default, the dialog box is modal to the last active window of the calling thread, or if none exists, to the last active window from AppMainHwnd. If you set this option, the dialog box is modal with respect to the window handle of the Engine.AppMainHwnd property. Typically, you do not need to set this option.</summary>
      <seealso cref="Engine.AppMainHwnd" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.WorkspaceBrowserDialogOptions.WorkspaceBrowserDlgOption_Editable">
      <summary>(Value: 1) Enable the dialog box to edit the contents of the currently loaded workspace and the project files in the workspace.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.GetTemplatesFileOptions">
      <summary>Use these options to specify whether the Engine.GetTemplatesFile method creates the templates file if the templates file does not exist.</summary>
      <seealso cref="Engine.GetTemplatesFile" />
      <seealso cref="PropertyObjectFile" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.GetTemplatesFileOptions.GetTemplatesFileOption_NoOptions">
      <summary>(Value: 0x0) Specifies that the <c>Engine.GetTemplatesFile</c> method returns a value of <c>NULL</c> for PropertyObjectFile if the templates file does not exist.</summary>
      <seealso cref="Engine.GetTemplatesFile" />
      <seealso cref="PropertyObjectFile" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.GetTemplatesFileOptions.GetTemplatesFileOption_LoadIfNotLoaded">
      <summary>(Value: 0x1) Specifies that the engine loads the templates file if it has not been loaded. If no templates file exists, the engine creates a default templates file. Omit this option to determine whether a templates file has been previously loaded. When you omit this option, the Engine.GetTemplatesFile method returns <c>NULL</c> if no templates file is loaded. </summary>
      <seealso cref="Engine.GetTemplatesFile" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.ApplicationLicenses">
      <summary>Use these constants to specify a type of license the application requires. Use these constants with the licenses parameter of the Engine.AcquireLicense method.</summary>
      <seealso cref="Engine.AcquireLicense" />
      <seealso cref="&quot;TestStand Licensing Options&quot;javascript:TSHelpLink('/InfoTopics/Licensing_Options.html')" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ApplicationLicenses.ApplicationLicense_Unspecified">
      <summary>(Value: 0) Specifies that the application license requirements are unspecified.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ApplicationLicenses.ApplicationLicense_OperatorInterface">
      <summary>(Value: 100) Specifies that the application requires a license to perform non-editing operations.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ApplicationLicenses.ApplicationLicense_CustomEditor">
      <summary>(Value: 200) Specifies that the application requires a license to perform custom editor operations, such as editing and saving sequence files.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ApplicationLicenses.ApplicationLicense_SequenceEditor">
      <summary>(Value: 300) Specifies that the application requires a license to use the TestStand Sequence Editor.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.AcquireLicenseOptions">
      <summary>Use these constants with the options parameter of the Engine.AcquireLicense method.</summary>
      <seealso cref="Engine.AcquireLicense" />
      <seealso cref="&quot;TestStand Licensing Options&quot;javascript:TSHelpLink('/InfoTopics/Licensing_Options.html')" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.AcquireLicenseOptions.AcquireLicenseOption_NoOptions">
      <summary>(Value: 0x0) Does not specify any options.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.AcquireLicenseOptions.AcquireLicenseOption_SuppressStartupDialog">
      <summary>(Value: 0x1) Instructs TestStand not to launch a dialog box for evaluating, activating, or purchasing TestStand when the license is not properly activated.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.AcquireLicenseOptions.AcquireLicenseOption_SuppressStartupDialogIfAlreadyShown">
      <summary>(Value: 0x2) Instructs TestStand not to launch a dialog box for evaluating, activating, or purchasing TestStand when a currently running process has already launched the dialog box and the user activated a license or selected to evaluate TestStand. If the license cannot be acquired and the user did not previously select to evaluate TestStand in an already running process, TestStand launches the dialog box.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.AcquireLicenseOptions.AcquireLicenseOption_ShowExitButton">
      <summary>(Value: 0x4) Pass this option if you want the startup dialog box to display an Exit button instead of a Close button. The application exits if the call to the Engine.AcquireLicense method fails, and error messages reflect this behavior.</summary>
      <seealso cref="Engine.AcquireLicense" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.PromptResults">
      <summary></summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PromptResults.PromptResult_Yes">
      <summary></summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PromptResults.PromptResult_No">
      <summary></summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.PromptResults.PromptResult_Cancel">
      <summary></summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.GotoLocationOptions">
      <summary>Use these constants with the Locations.GotoLocation method.</summary>
      <seealso cref="Locations.GotoLocation" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.GotoLocationOptions.GotoLocationOption_NoOptions">
      <summary>(Value: 0x0) No options.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.GotoLocationOptions.GotoLocationOption_DoNotDisplayMessageIfLocationNotFound">
      <summary>(Value: 0x1) Use this option to specify that the Locations.GotoLocation method takes no action instead of launching an information dialog box when the user interface cannot go to the location.</summary>
      <seealso cref="Locations.GotoLocation" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.CheckedStates">
      <summary>Use these constants with the AdditionalResult.CheckedState property.</summary>
      <seealso cref="AdditionalResult.CheckedState" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.CheckedStates.CheckedState_Unchecked">
      <summary>(Value: 1) Specifies not to log the additional result.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.CheckedStates.CheckedState_Checked">
      <summary>(Value: 2) Specifies to log the additional result.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.CheckedStates.CheckedState_Indeterminate">
      <summary>(Value: 3) Specifies to log the additional result for some but not all members of the <c>AdditionalResult.Elements</c> collection.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.TestStandPaths">
      <summary>Use the values of this enumeration to determine specific TestStand directory paths.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TestStandPaths.TestStandPath_TestStand">
      <summary>(Value: 1) Directory where TestStand installs the majority of components, typically <c>&lt;Program Files&gt;\National Instruments\TestStand &lt;Version&gt;</c>.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TestStandPaths.TestStandPath_Bin">
      <summary>(Value: 2) Directory where TestStand stores executables and DLLs, typically <c>&lt;TestStand&gt;\Bin</c>.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TestStandPaths.TestStandPath_Config">
      <summary>(Value: 3) Directory where TestStand stores configuration files, typically <c>&lt;TestStand&#160;Application&#160;Data&gt;\Cfg</c>.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TestStandPaths.TestStandPath_Public">
      <summary>(Value: 4) Directory where TestStand stores publicly editable files, typically <c>C:\Users\Public\Documents\National Instruments\TestStand</c> on Windows 8.1/8/7.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TestStandPaths.TestStandPath_CommonAppData">
      <summary>(Value: 5) Directory where TestStand stores common application data, such as configuration information, typically <c>C:\ProgramData\National Instruments\TestStand</c> on Windows 8.1/8/7.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TestStandPaths.TestStandPath_LocalAppData">
      <summary>(Value: 6) Directory where TestStand stores per-user application data, typically <c>&lt;User Directory&gt;\AppData\Local\National Instruments\TestStand</c> on Windows 8.1/8/7.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TestStandPaths.TestStandPath_PublicComponents">
      <summary>(Value: 7) Directory where TestStand looks for user-defined components to override National Instruments components, such as callbacks, icons, language files, step types, and type palettes, typically, <c>&lt;TestStand&#160;Public&gt;\Components</c>.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TestStandPaths.TestStandPath_NIComponents">
      <summary>(Value: 8) Directory where TestStand stores components, such as callbacks, icons, language files, step types, and type palettes, typically <c>&lt;TestStand&gt;\Components</c>.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TestStandPaths.TestStandPath_Temporary">
      <summary>(Value: 10) Directory where TestStand stores temporary files. TestStand does not clean up files that you create in this directory but does erase files you create with the  Engine.CreateTempFile method.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TestStandPaths.TestStandPath_Temp">
      <summary>(Value: 9) This value is obsolete. Returns the directory path with a trailing backslash where TestStand stores temporary files. TestStand does not clean up files that you create in this directory but does erase files you create with the  Engine.CreateTempFile method.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TestStandPaths.TestStandPath_GlobalConfig">
      <summary>(Value: 11) Directory where TestStand stores configuration files for the global environment, typically <c>&lt;TestStand&#160;Application&#160;Data&gt;\Cfg</c>.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TestStandPaths.TestStandPath_GlobalPublic">
      <summary>(Value: 12) Directory where TestStand stores publicly editable files for the global environment, typically C:\Users\Public\Documents\National Instruments\TestStand on Windows 10/8.1/7.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TestStandPaths.TestStandPath_GlobalCommonAppData">
      <summary>(Value: 13) Directory where TestStand stores common application data for the global environment (&lt;TestStand&#160;Application&#160;Data&gt;), such as configuration information, typically C:\ProgramData\National Instruments\TestStand.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TestStandPaths.TestStandPath_GlobalLocalAppData">
      <summary>(Value: 14) Directory where TestStand stores user-specific application data for the global environment, typically &lt;User Directory&gt;\AppData\Local\National Instruments\TestStand on Windows 10/8.1/7.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.StepAdditionalResults">
      <summary>Use the Step.AdditionalResults property to obtain an instance of this class, which contains collections for the parameter additional results and custom additional results of a step.</summary>
      <seealso cref="Step.AdditionalResults" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StepAdditionalResults.ParameterResults">
      <summary>Returns the parameter results for a step. You cannot directly add or remove additional results in this collection. The parameters in the step module determine the items in this collection.</summary>
      <remarks>This collection contains an item for every [In] parameter and for every [Out] parameter. For every [In/Out] parameter, this collection contains one item for the [In] value and another item for the [Out] value.</remarks>
      <seealso cref="AdditionalResults" />
      <seealso cref=".CustomResults" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.StepAdditionalResults.CustomResults">
      <summary>Returns the custom additional results for a step.</summary>
      <seealso cref="AdditionalResults" />
      <seealso cref="StepAdditionalResults.ParameterResults" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.AdditionalResult">
      <summary>An AdditionalResult specifies additional data to add to the result list when a step executes. An AdditionalResult can be an arbitrary piece of data or the value of a module parameter. An AdditionalResult is a member of the <c>Step.AdditionalResults.ParameterResults </c> collection, the <c>Step.AdditionalResults.CustomResults</c> collection, or the <c>AdditionalResult.Elements</c> collection.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.AdditionalResult.Name">
      <summary>An expression that evaluates to the name of the additional result.</summary>
      <remarks>The name is usually a string literal or uses the <c>ResStr</c> expression function to specify a localized string.</remarks>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.AdditionalResult.CheckedState">
      <summary>Specifies to log the additional result. If the CheckedState property is <c>CheckedState_Unchecked</c>, TestStand does not log the additional result. The value of the CheckedState property reflects the CheckedState of the AdditionalResult.Elements collection when the Elements collection is not empty. If all the Elements have the same CheckedState value, the CheckedState property uses the CheckedState value of the Elements. If all the Elements do not have the same CheckedState value, the value of the <c>AdditionalResult.CheckedState</c> property is <c>CheckedState_Indeterminate</c>.
Setting the CheckedState property value sets the CheckedState value of all Elements to the same value and updates the CheckedState value of the AdditionalResult.ParentAdditionalResult property.</summary>
      <seealso cref="AdditionalResult.Condition" />
      <seealso cref="AdditionalResult.Elements" />
      <seealso cref="AdditionalResult.ParentAdditionalResult" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.AdditionalResult.ValueToLog">
      <summary>An expression that specifies the value to log for the additional result.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.AdditionalResult.AreElementsIncompatibleWithType">
      <summary>Returns <c>True</c> if the members of the AdditionalResult.Elements collection are incompatible with the fields defined in the type that the AdditionalResult.Type property specifies.</summary>
      <remarks>Setting the AdditionalResult.IsAnyType property or the <c>Type</c> property updates the members in the <c>Elements</c> collection. The members of <c>Elements</c> are compatible with the <c>Type</c> property as long as the number of <c>Elements</c> is the same as the number of fields the <c>Type</c> property defines and the AdditionalResult.Name and <c>Type</c> properties of each member of <c>Elements</c> match a corresponding field the <c>Type</c> defines.</remarks>
      <seealso cref="AdditionalResult.Elements" />
      <seealso cref="AdditionalResult.IsAnyType" />
      <seealso cref="AdditionalResult.Name" />
      <seealso cref="AdditionalResult.Type" />
      <seealso cref="AdditionalResult.UnmappedAdditionalResults" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.AdditionalResult.UnmappedAdditionalResults">
      <summary>A collection of AdditionalResult objects from an AdditionalResult.Elements collection that TestStand could not map to an updated <c>Elements</c> collection when you set the AdditionalResult.Type property. TestStand does not record the <c>AdditionalResult</c> objects in this collection.</summary>
      <seealso cref="AdditionalResult" />
      <seealso cref="AdditionalResult.AreElementsIncompatibleWithType" />
      <seealso cref="AdditionalResult.Elements" />
      <seealso cref="AdditionalResult.Type" />
      <seealso cref="AdditionalResults" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.AdditionalResult.Condition">
      <summary>An expression that must be empty or evaluate to <c>True</c> to log the additional result.</summary>
      <seealso cref="AdditionalResult.CheckedState" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.AdditionalResult.Flags">
      <summary>Specifies the PropertyFlags TestStand sets when it logs the additional result. You can use any combination of the <c>PropFlags_IncludeInReport</c>, <c>PropFlags_IsMeasurementValue</c>, and <c>PropFlags_IsLimit</c> property flags.</summary>
      <seealso cref="PropertyFlags" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.AdditionalResult.IsAnyType">
      <summary>For a custom additional result, if this property is <c>False</c>, you can set the AdditionalResult.Type property to specify the type of the AdditionalResult.ValueToLog property. If this property is <c>True</c>, the <c>ValueToLog</c> property can be any type. For a parameter additional result, this property is always <c>False</c>.</summary>
      <seealso cref="AdditionalResult.Elements" />
      <seealso cref="AdditionalResult.Type" />
      <seealso cref="AdditionalResult.ValueToLog" />
      <seealso cref="PropertyObjectType" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.AdditionalResult.Elements">
      <summary>If the AdditionalResult.IsAnyType property is <c>False</c>, this property is a collection of AdditionalResult objects that correspond to the fields of the type the AdditionalResult.Type property specifies. If the <c>IsAnyType</c> property is <c>True</c>, this property is an empty collection.</summary>
      <remarks>Setting the <c>IsAnyType</c> property or the <c>Type</c> property updates the members in the Elements collection.</remarks>
      <seealso cref="AdditionalResult" />
      <seealso cref="AdditionalResult.IsAnyType" />
      <seealso cref="AdditionalResult.ParentAdditionalResult" />
      <seealso cref="AdditionalResult.Type" />
      <seealso cref="AdditionalResults" />
      <seealso cref="PropertyObjectType" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.AdditionalResult.Type">
      <summary>For a custom additional result, if the AdditionalResult.IsAnyType property is <c>True</c>, this property returns the type of the AdditionalResult.ValueToLog property. If the <c>AdditionalResult.IsAnyType</c> property is <c>False</c>, set this property to a PropertyObjectType object  to specify the type of the <c>AdditionalResult.ValueToLog</c> property. Use the PropertyObject.Type property or the Engine.NewPropertyObjectType method to obtain a <c>PropertyObjectType</c> object to set this property to. For a parameter additional result, this property returns the type the parameter specifies.</summary>
      <remarks>For a custom additional result, when the <c>AdditionalResult.IsAnyType</c> property is <c>True</c>, this property is <c>NULL</c> if the <c>AdditionalResult.ValueToLog</c> property is empty or contains an error. When the <c>AdditionalResult.IsAnyType</c> property is <c>False</c>, this property is the value you last set the property to.
Setting the AdditionalResult.Type property updates the members in the AdditionalResult.Elements collection and maps existing settings from the old Elements collection to the new Elements collection based on the AdditionalResult.Name and <c>Type</c> properties of the members. TestStand adds Elements from the old collection that do not map to Elements in the new collection to the UnmappedAdditionalResults collection.</remarks>
      <seealso cref="AdditionalResult.Elements" />
      <seealso cref="AdditionalResult.IsAnyType" />
      <seealso cref="AdditionalResult.Name" />
      <seealso cref="AdditionalResult.Type" />
      <seealso cref="AdditionalResult.UnmappedAdditionalResults" />
      <seealso cref="AdditionalResult.ValueToLog" />
      <seealso cref="PropertyObjectType" />
      <seealso cref="PropertyObject.Type" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.AdditionalResult.ParentAdditionalResult">
      <summary>If this property is not <c>NULL</c>, this property returns the AdditionalResult with an AdditionalResult.Elements collection that contains this AdditionalResult.</summary>
      <seealso cref="AdditionalResult" />
      <seealso cref="AdditionalResult.Elements" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.AdditionalResult.Kind">
      <summary>Returns the type of additional result for the object.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.AdditionalResult.ParameterObject">
      <summary>For a parameter additional result, this property returns the module parameter of which the additional result logs the value. This property returns <c>NULL</c> for a custom additional result.</summary>
      <remarks>This property can specify a LabVIEWParameter, LabVIEWParameterElement, CVIParameter, DllParameter, SequenceCallParameter, DotNetParameter, DotNetCall, or ActiveXParameter object, depending on the step adapter and the location of the parameter in the hierarchy of module call parameters. A parameter object that is a <c>CVIParameter</c> or <c>DllParameter</c> object is also a CommonCParameter object.</remarks>
      <seealso cref="&quot;ActiveXParameter&quot;ActiveXParameter.htm" />
      <seealso cref="&quot;CommonCParameter&quot;CommonCParameter.htm" />
      <seealso cref="&quot;CVIParameter&quot;CVIParameter.htm" />
      <seealso cref="&quot;DllParameter&quot;DllParameter.htm" />
      <seealso cref="&quot;DotNetCall&quot;DotNetCall.htm" />
      <seealso cref="&quot;DotNetParameter&quot;DotNetParameter.htm" />
      <seealso cref="&quot;LabVIEWParameter&quot;LabVIEWParameter.htm" />
      <seealso cref="&quot;LabVIEWParameterElement&quot;LabVIEWParameterElement.htm" />
      <seealso cref="&quot;SequenceCallParameter&quot;SequenceCallParameter.htm" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.AdditionalResults">
      <summary>This class represents a collection of AdditionalResult objects. Use the <c>Step.AdditionalResults.ParameterResults</c>, <c>Step.AdditionalResults.CustomResults</c>, or <c>AdditionalResult.Elements</c> properties to obtain an AdditionalResults collection.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.AdditionalResults.Item(System.Object)">
      <summary>Returns a reference to an item at the specified index in the collection.</summary>
      <param name="index">Specifies the zero-based index of the item to retrieve.</param>
      <seealso cref="AdditionalResult" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.AdditionalResults.Count">
      <summary>Returns the number of items in the collection.</summary>
      <seealso cref="AdditionalResults.CheckedItemCount" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.AdditionalResults.CheckedItemCount">
      <summary>Returns the number of items in the collection with an AdditionalResult.CheckedState property of CheckedState_Checked or CheckedState_Indeterminate.</summary>
      <seealso cref="AdditionalResult.CheckedState" />
      <seealso cref="AdditionalResults.Count" />
      <seealso cref="CheckedStates" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.AdditionalResults.Insert(System.String,System.String,System.String,System.Int32,System.Int32)">
      <summary>Adds a new item to the collection.</summary>
      <returns>The additional result this method inserts into the collection.</returns>
      <param name="resultName">Specifies the AdditionalResult.Name property of the new additional result.</param>
      <param name="resultValueToLog">Specifies the AdditionalResult.ValueToLog property for the new additional result.</param>
      <param name="resultCondition">Specifies the AdditionalResult.Condition property of the new additional result.</param>
      <param name="resultFlags">Specifies the AdditionalResult.Flags property of the new additional result.</param>
      <param name="index">Specifies where to insert the new item. Pass <c>-1</c> to insert the item at the end 
of the collection.</param>
      <seealso cref="AdditionalResult" />
      <seealso cref="AdditionalResult.Condition" />
      <seealso cref="AdditionalResult.Flags" />
      <seealso cref="AdditionalResult.Name" />
      <seealso cref="AdditionalResult.ValueToLog" />
      <seealso cref="AdditionalResults.Move" />
      <seealso cref="AdditionalResults.Remove" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.AdditionalResults.Remove(System.Int32)">
      <summary>Removes the specified item from this collection, if it exists.</summary>
      <returns>The additional result this method removes from the collection.</returns>
      <param name="index">Specifies the zero-based index of the item to remove.</param>
      <seealso cref="AdditionalResult" />
      <seealso cref="AdditionalResults.Clear" />
      <seealso cref="AdditionalResults.Insert" />
      <seealso cref="AdditionalResults.Move" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.AdditionalResults.Clear">
      <summary>Removes all the additional results from the collection.</summary>
      <seealso cref="AdditionalResults.Remove" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.AdditionalResults.Move(System.Int32,System.Int32)">
      <summary>Moves an additional result within the collection.</summary>
      <param name="index">Specifies the zero-based index of the item to move.</param>
      <param name="newIndex">Specifies the zero-based index to move the item to.</param>
      <seealso cref="AdditionalResults.Insert" />
      <seealso cref="AdditionalResults.Remove" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.PropertyObjectType">
      <summary>Use the PropertyObjectType class to obtain type information for a PropertyObject. Use the PropertyObject.Type property or the Engine.NewPropertyObjectType method to obtain an instance of this class.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.PropertyObjectType.ClassName">
      <summary></summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.PropertyObjectType.ArrayDimensions">
      <summary>Returns the dimensions for a PropertyObject that is an array. Returns zero dimensions for a <c>PropertyObject</c> that is not an array.</summary>
      <remarks>When you change the dimensions of an array using the <c>ArrayDimensions</c> property, TestStand does not move existing elements to preserve their indices.  Indices of elements in the modified array may differ from the original.
To preserve the element indices of one-dimensional arrays, use methods on the <c>PropertyObject</c> interface.  Use <c>PropertyObject.SetNumElements</c> to set the size of a one-dimensional array.  Use the <c>PropertyObject.Set_ByOffset</c> methods (e.g.  <c>PropertyObject.SetValBooleanByOffset</c>) and specify the <c>PropOption_InsertElement</c> flag to insert new elements into a one-dimensional array.  Use <c>PropertyObject.DeleteElements</c> to delete specific elements from a one-dimensional array.
</remarks>
      <seealso cref="ArrayDimensions" />
      <seealso cref="PropertyObject" />
      <seealso cref="PropertyObjectType.ElementType" />
      <seealso cref="PropertyObjectType.ValueType" />
      <seealso cref="PropertyObject.SetNumElements" />
      <seealso cref="PropertyObject.DeleteElements" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.PropertyObjectType.IsEqualTo(NationalInstruments.TestStand.Interop.API.PropertyObjectType,System.Int32)">
      <summary>Compares this object to another PropertyObjectType.
</summary>
      <remarks>With no options, this method returns <c>True</c> if both PropertyObjectType objects have the same value for every property, the PropertyObjectType.ElementType properties are equal, and the PropertyObjectType.ArrayDimensions properties specify the same array bounds.</remarks>
      <param name="propObjType">Pass a PropertyObjectType to compare to this PropertyObjectType.</param>
      <param name="options">Specify any combination of TypeEqualOptions.</param>
      <seealso cref="PropertyObjectType" />
      <seealso cref="PropertyObjectType.ArrayDimensions" />
      <seealso cref="PropertyObjectType.ElementType" />
      <seealso cref="TypeEqualOptions" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.PropertyObjectType.ValueType">
      <summary>Returns the type of the value of a PropertyObject.</summary>
      <remarks>If the property is an instance of a named type, ValueType does not return <c>PropValType_NamedType</c>. Instead, ValueType returns one of the other property value type constants to indicate the value type of the type definition. Use the PropertyObjectType.TypeName property to determine whether a property is an instance of a named type.</remarks>
      <seealso cref="Engine.NewPropertyObject" />
      <seealso cref="PropertyObjectType.ElementType" />
      <seealso cref="PropertyObjectType.TypeName" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.PropertyObjectType.IsObject">
      <summary>This property is <c>False</c> for array elements that do not have an associated PropertyObject. You can acquire a PropertyObject to these elements through methods such as the PropertyObject.GetPropertyObject method. However, the PropertyObject TestStand returns is an alias to the element that internally accesses the element through the array and a lookup string.</summary>
      <remarks>PropertyObjects that are not objects do not store a value for the PropertyObject.Name, PropertyObject.Comment, or PropertyObject.NumericFormat properties.</remarks>
      <seealso cref="PropertyObject" />
      <seealso cref="PropertyObject.Comment" />
      <seealso cref="PropertyObject.GetPropertyObject" />
      <seealso cref="PropertyObject.Name" />
      <seealso cref="PropertyObject.NumericFormat" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.PropertyObjectType.TypeName">
      <summary>For a PropertyObject that is an instance of a named type, this property is the type name of the named type. Otherwise, this property is an empty string.</summary>
      <seealso cref="PropertyObject" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.PropertyObjectType.ElementType">
      <summary>For a PropertyObject that is an array, this property returns the type of the array elements. Otherwise, this property is <c>NULL</c>.</summary>
      <seealso cref="PropertyObject" />
      <seealso cref="PropertyObjectType" />
      <seealso cref="PropertyObjectType.ArrayDimensions" />
      <seealso cref="PropertyObjectType.ValueType" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.PropertyObjectType.DisplayString">
      <summary>Returns the type of the object.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.PropertyObjectType.Representation">
      <summary>Specifies the representation of the PropertyObject. TestStand uses strict representation matching. Use the expression functions to convert the representation as needed.</summary>
      <remarks>By default, TestStand sets the representation of non-numeric property objects to <c>PropertyRepresentation_None</c>.
TestStand number variables do not have separate numeric representations for 32-bit, 16-bit, and 8-bit integers. Historically, TestStand stored all numeric values, including integers, in a double-precision, floating-point format. However, for 64-bit integers, a double-precision, floating-point format is not sufficient because it cannot store all values of a 64-bit integer. Thus, TestStand now includes 64-bit integer representations. National Instruments recommends storing 32-bit, 16-bit, and 8-bit integer values using the double-precision representation because the double-precision format is sufficient for these data types, and most existing TestStand code expects numeric variables to use the double-precision representation.</remarks>
      <seealso cref="&quot;Expression Functions&quot;javascript:TSFundLink('/InfoTopics/Operators_Function_Expr.htm')" />
      <seealso cref="PropertyObjectType" />
      <seealso cref="PropertyRepresentations" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.ArrayDimensions">
      <summary>Use the ArrayDimensions class to obtain and set array bounds information for a PropertyObject. Use the PropertyObjectType.ArrayDimensions property to obtain an instance of this class.</summary>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.ArrayDimensions.GetLowerBounds">
      <summary>Returns an array of numbers that contains the lowest valid index for each dimension.</summary>
      <remarks>For a PropertyObject that is an empty array, this method returns an array with an element for every dimension in the PropertyObject array.</remarks>
      <seealso cref="ArrayDimensions.GetDimensionsSizes" />
      <seealso cref="ArrayDimensions.GetUpperBounds" />
      <seealso cref="ArrayDimensions.LowerBoundsString" />
      <seealso cref="ArrayDimensions.SetBounds" />
      <seealso cref="PropertyObject" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.ArrayDimensions.GetUpperBounds">
      <summary>Returns an array of numbers that contains the highest valid index for each dimension.</summary>
      <remarks>For a PropertyObject that is an empty array, this method returns an empty array.</remarks>
      <seealso cref="ArrayDimensions.GetDimensionsSizes" />
      <seealso cref="ArrayDimensions.GetLowerBounds" />
      <seealso cref="ArrayDimensions.SetBounds" />
      <seealso cref="ArrayDimensions.UpperBoundsString" />
      <seealso cref="PropertyObject" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.ArrayDimensions.SetBounds(System.Int32[],System.Int32[])">
      <summary>Sets the upper and lower bounds from number arrays for a PropertyObject that is an array.</summary>
      <remarks>The elements in the array retain their values.</remarks>
      <param name="lowerBounds">An array of numbers that specifies the lowest valid index for each dimension.</param>
      <param name="upperBounds">An array of numbers that specifies the highest valid index for each dimension.</param>
      <seealso cref="ArrayDimensions.GetDimensionsSizes" />
      <seealso cref="ArrayDimensions.GetLowerBounds" />
      <seealso cref="ArrayDimensions.GetUpperBounds" />
      <seealso cref="ArrayDimensions.SetBoundsByStrings" />
      <seealso cref="PropertyObject" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.ArrayDimensions.LowerBoundsString">
      <summary>Returns an array index string that specifies the lowest valid index for each dimension. For example, a two-dimensional array with a lower bound of <c>0</c> for the first dimension and <c>2</c> for the second dimension has the lower bound string <c>&quot;[0][2]&quot;</c>.</summary>
      <seealso cref="ArrayDimensions.DisplayString" />
      <seealso cref="ArrayDimensions.GetLowerBounds" />
      <seealso cref="ArrayDimensions.SetBoundsByStrings" />
      <seealso cref="ArrayDimensions.UpperBoundsString" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.ArrayDimensions.UpperBoundsString">
      <summary>Returns an array index string that specifies the highest valid index for each dimension. For example, a two-dimensional array with an upper bound of <c>2</c> for the first dimension and <c>4</c> for the second dimension has the upper bound string <c>&quot;[2][4]&quot;</c>.</summary>
      <seealso cref="ArrayDimensions.DisplayString" />
      <seealso cref="ArrayDimensions.GetUpperBounds" />
      <seealso cref="ArrayDimensions.LowerBoundsString" />
      <seealso cref="ArrayDimensions.SetBoundsByStrings" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.ArrayDimensions.SetBoundsByStrings(System.String,System.String)">
      <summary>Sets the upper and lower bounds from strings for a PropertyObject that is an array.</summary>
      <remarks>The elements in the array retain their values.</remarks>
      <param name="lowerBounds">An array index string that specifies the lowest valid index for each dimension. For example, a two-dimensional array with a lower bound of <c>0</c> for the first dimension and <c>2</c> for the second dimension has the lower bound string <c>&quot;[0][2]&quot;</c>.</param>
      <param name="upperBounds">An array index string that specifies the highest valid index for each dimension. For example, a two-dimensional array with an upper bound of <c>2</c> for the first dimension and <c>4</c> for the second dimension has the upper bound string <c>&quot;[2][4]&quot;</c>.</param>
      <seealso cref="ArrayDimensions.DisplayString" />
      <seealso cref="ArrayDimensions.LowerBoundsString" />
      <seealso cref="ArrayDimensions.SetBounds" />
      <seealso cref="ArrayDimensions.UpperBoundsString" />
      <seealso cref="PropertyObject" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.ArrayDimensions.GetDimensionsSizes">
      <summary>Returns an array of numbers that contains the size of each dimension in the array.</summary>
      <remarks>For a PropertyObject that is an empty array, this method returns an array with an element for every dimension in the PropertyObject array. Each element in the array this method returns has a value of zero.</remarks>
      <seealso cref="ArrayDimensions.GetLowerBounds" />
      <seealso cref="ArrayDimensions.GetUpperBounds" />
      <seealso cref="ArrayDimensions.SetBounds" />
      <seealso cref="PropertyObject" />
      <seealso cref="&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.ArrayDimensions.DisplayString">
      <summary>Returns the upper and lower bounds of each array dimension.</summary>
      <seealso cref="ArrayDimensions.GetLowerBounds" />
      <seealso cref="ArrayDimensions.GetUpperBounds" />
      <seealso cref="ArrayDimensions.LowerBoundsString" />
      <seealso cref="ArrayDimensions.UpperBoundsString" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.ArrayDimensions.NumDimensions">
      <summary>Gets the number of dimensions in the array.</summary>
      <returns>The number of dimensions in the array.</returns>
      <seealso cref="ArrayDimensions.GetDimensionsSizes" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.TypeEqualOptions">
      <summary>Use these constants with the PropertyObjectType.IsEqualTo method.</summary>
      <seealso cref="PropertyObjectType.ArrayDimensions" />
      <seealso cref="PropertyObjectType.IsEqualTo" />
      <seealso cref="PropertyObjectType.IsObject" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TypeEqualOptions.TypeEqualOption_NoOptions">
      <summary>(Value: 0x0) No options.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TypeEqualOptions.TypeEqualOption_DoNotCompareDimensions">
      <summary>(Value: 0x1) Specifies that the PropertyObjectType.IsEqualTo method does not compare the array dimensions that the PropertyObjectType.ArrayDimensions property specifies.</summary>
      <seealso cref="PropertyObjectType.ArrayDimensions" />
      <seealso cref="PropertyObjectType.IsEqualTo" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.TypeEqualOptions.TypeEqualOption_DoNotCompareIsObject">
      <summary>(Value: 0x2) Specifies that the <c>PropertyObjectType.IsEqualTo</c> method does not compare the PropertyObjectType.IsObject property.</summary>
      <seealso cref="PropertyObjectType.IsEqualTo" />
      <seealso cref="PropertyObjectType.IsObject" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.EscapingOptions">
      <summary>Use these constants to specify the options parameter of the Utility.Escape and Utility.Unescape methods. The options parameter specifies to add quotation marks or to remove quotation marks while escaping or unescaping.</summary>
      <seealso cref="Engine.Utility" />
      <seealso cref="Utility.Escape" />
      <seealso cref="Utility.Unescape" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.EscapingOptions.EscapingOption_NoOptions">
      <summary>(Value: 0) Default behavior. TestStand does not add or remove quotation marks after escaping or unescaping. </summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.EscapingOptions.EscapingOption_SurroundedByQuotes">
      <summary>(Value: 1) For the Utility.Escape method, TestStand surrounds the returned string with quotation marks after escaping the string. For the Utility.Unescape method, TestStand removes the surrounding quotation marks before unescaping the string. The <c>Utility.Unescape</c> method returns an error if you use this option and the string to unescape is not surrounded by quotation marks.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.Utility">
      <summary>Use this class to perform utility functions. Use the Engine.Utility property to obtain an instance of this class.</summary>
      <seealso cref="Engine.Utility" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Utility.Escape(System.String,System.Int32)">
      <summary>Replaces special characters with the following escaping sequences:
@table(2,7,True,Sequence!Purpose!\n!New line!\r!Carriage return!\r\n!Carriage return/new line!\&quot;!Quotation marks!\\!Backslash character!\t!Tab)</summary>
      <returns>The escaped string.</returns>
      <param name="stringToEscape">Specifies the string to escape.</param>
      <param name="options">Specifies the EscapingOptions constants to surround the returned string in quotation marks.</param>
      <seealso cref="Engine.Utility" />
      <seealso cref="EscapingOptions" />
      <seealso cref="Utility.Unescape" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Utility.Unescape(System.String,System.Int32)">
      <summary>Converts escaping sequences to special characters as follows:
@table(2,7,True,Sequence!Purpose!\n!New line!\r!Carriage return!\r\n!Carriage return/new line!\&quot;!Quotation marks!\\!Backslash character!\t!Tab)</summary>
      <returns>The unescaped string.</returns>
      <param name="stringToUnescape">Specifies the string to unescape.</param>
      <param name="options">Specifies the EscapingOptions constants to remove surrounding quotation marks before unescaping the string.</param>
      <seealso cref="Engine.Utility" />
      <seealso cref="EscapingOptions" />
      <seealso cref="Utility.Escape" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.Utility.CreateDebugLogs(System.Int32)">
      <summary>Creates TestStand logs.</summary>
      <remarks>Call this method to create TestStand crash log and NIER dump files. After an application crash, this method creates the crash log in <c>&lt;TestStand_LocalAppData&gt;\CrashLogs</c> and the NIER dump file in <c>&lt;TestStand_LocalAppData&gt;\NIERDump</c>. The contents of these files depend on the settings you specify in the configuration INI file for the application.</remarks>
      <param name="reserved">Pass <c>0</c> for this parameter.</param>
      <seealso cref="&quot;TestStand Crash Log and Dump File&quot;javascript:TSFundLink('/InfoTopics/CrashRecoveryandDumpFile.htm')" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.ReportSection">
      <summary>Use objects of this class to store, update, and transfer reports. You typically use <c>ReportSection</c> objects to avoid creating copies of a report as the report is transferred between the report generator, process models, Report object, and ReportView control. You can create a new <c>ReportSection</c> object by calling the Report.NewReportSection method. <c>ReportSection</c> objects can contain other <c>ReportSection</c> objects.
Typically, a process model creates and updates the <c>ReportSection</c> object and assigns it to the <c>Report</c> object by setting the Report.ReportSection property.</summary>
      <seealso cref="Report" />
      <seealso cref="Report.NewReportSection" />
      <seealso cref="Report.ReportSection" />
      <seealso cref="&quot;ReportView&quot;javascript:UILink('/RefTopics/ReportView.htm')" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.ReportSection.ReportSubsections">
      <summary>Specifies a reference to the ReportSections object, which is a collection that contains a list of child <c>ReportSection</c> objects to the current object.</summary>
      <seealso cref="ReportSections" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.ReportSection.Body">
      <summary>Specifies the string stored in the body of the <c>ReportSection</c>.</summary>
      <seealso cref="ReportSection.Footer" />
      <seealso cref="ReportSection.GetAllText" />
      <seealso cref="ReportSection.Header" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.ReportSection.IsEmpty">
      <summary>Returns <c>True</c> only if the header, body, and footer of the ReportSection and the children are empty.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.ReportSection.Id">
      <summary>Returns a unique ID that distinguishes the <c>ReportSection</c> from all other <c>ReportSection</c> objects.
<para>Note: The ID number is never zero.</para></summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.ReportSection.Header">
      <summary>Specifies the string stored in the header of the <c>ReportSection</c>.</summary>
      <seealso cref="ReportSection.Body" />
      <seealso cref="ReportSection.Footer" />
      <seealso cref="ReportSection.GetAllText" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.ReportSection.Footer">
      <summary>Specifies the string stored in the footer of the <c>ReportSection</c>.</summary>
      <seealso cref="ReportSection.Body" />
      <seealso cref="ReportSection.GetAllText" />
      <seealso cref="ReportSection.Header" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.ReportSection.GetAllText">
      <summary>Returns all the content of the <c>ReportSection</c> as a string.</summary>
      <remarks>The returned string is a concatenation of the ReportSection.Header, ReportSection.Body, and <c>ReportSection.GetAllText</c> strings of all child <c>ReportSection</c> objects and the ReportSectionFooter string, in that order.</remarks>
      <seealso cref="ReportSection.Body" />
      <seealso cref="ReportSection.Footer" />
      <seealso cref="ReportSection.Header" />
      <seealso cref="ReportSection.IsEmpty" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.ReportSections">
      <summary>This class is a collection of ReportSection objects. The collection contains a list of <c>ReportSection</c> objects that are children of the <c>ReportSection</c> object from which the <c>ReportSections</c> object was obtained.</summary>
      <seealso cref="ReportSection" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.ReportSections.Item(System.Object)">
      <summary>Returns a reference to an item at the specified index in the collection.</summary>
      <param name="index">Specifies the zero-based index of the item to retrieve.</param>
      <seealso cref="ReportSection" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.ReportSections.Count">
      <summary>Returns the number of items in the collection.</summary>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.ReportSections.Insert(System.Int32,System.String,System.String,System.String)">
      <summary>Adds a new item to the collection.</summary>
      <returns>The ReportSection this method inserts into the collection.</returns>
      <param name="index">Specifies the zero-based index at which to insert the new item. Pass <c>-1</c> to insert the item at the end of the collection.</param>
      <param name="Header">Specifies the ReportSection.Header property of the new <c>ReportSection</c>.</param>
      <param name="Body">Specifies the ReportSection.Body property of the new <c>ReportSection</c>.</param>
      <param name="Footer">Specifies the ReportSection.Footer property of the new <c>ReportSection</c>.</param>
      <seealso cref="Report.NewReportSection" />
      <seealso cref="ReportSection" />
      <seealso cref="ReportSection.Body" />
      <seealso cref="ReportSection.Footer" />
      <seealso cref="ReportSection.Header" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.ReportSections.Remove(System.Int32)">
      <summary>Removes the specified item from this collection, if it exists.</summary>
      <returns>The ReportSection this method removes from the collection.</returns>
      <param name="index">Specifies the zero-based index of the item to remove.</param>
      <seealso cref="ReportSection" />
      <seealso cref="ReportSections.Clear" />
      <seealso cref="ReportSections.Insert" />
      <seealso cref="ReportSections.InsertExisting" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.ReportSections.Clear">
      <summary>Removes all items from the collection.</summary>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.ReportSections.InsertExisting(NationalInstruments.TestStand.Interop.API.ReportSection,System.Int32)">
      <summary>Inserts an existing ReportSection object into the collection.</summary>
      <param name="val">Specifies existing <c>ReportSection</c> to insert into the collection.</param>
      <param name="index">Specifies the zero-based index at which to insert the new item. Pass <c>-1</c> to insert the item at the end of the collection.</param>
      <seealso cref="Report.NewReportSection" />
      <seealso cref="ReportSection" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.AllowAutomaticTypeConflictResolutionOptions">
      <summary>Use these options with the StationOptions.AllowAutomaticTypeConflictResolution property.</summary>
      <seealso cref="StationOptions.AllowAutomaticTypeConflictResolution" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.AllowAutomaticTypeConflictResolutionOptions.AllowAutomaticTypeConflictResolutionOption_Always ">
      <summary>(Value: 0) Always allows automatic type conflict resolution, which can cause unintended propagation of types between files. For example, if you open a sequence file with a version of a type that is higher than the version of the type currently in a type palette file, TestStand updates the type palette file and every file you subsequently open to use the higher version. The updated type propagates to other files without warning or notifying you. This behavior is the default behavior in TestStand 4.0.x or earlier.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.AllowAutomaticTypeConflictResolutionOptions.AllowAutomaticTypeConflictResolutionOption_OnlyIfTypePaletteFilesWillNotBeModified">
      <summary>(Value: 1) Disallows automatic type conflict resolution when the outcome of the resolution modifies a type palette file. This ensures that the application never uses a version of a type that is different than the version of the type in the type palette file without your explicit confirmation. This is the default behavior.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.AllowAutomaticTypeConflictResolutionOptions.AllowAutomaticTypeConflictResolutionOption_OnlyIfATypePaletteFileHasTheHigherVersion">
      <summary>(Value: 2) Includes the same restrictions as the Only if Type Palette Files will not be Modified (default) option, but also includes the restriction that the type must be in a type palette file for automatic type conflict resolution to occur. Effectively, this option allows automatic type conflict resolution only when a type palette file has the higher version of the type and a non-type palette file has the lower version of the type.
For example, this option does not allow automatic type conflict resolution between two sequence files for types that are not in type palette files, but the Only if Type Palette Files will not be Modified (default) option does allow this.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.AllowAutomaticTypeConflictResolutionOptions.AllowAutomaticTypeConflictResolutionOption_Never">
      <summary>(Value: 3) Disallows all automatic type conflict resolution. When TestStand loads two different versions of a type, TestStand always prompts you or reports a type conflict error. When you select this option, opening files from TestStand versions earlier than the current version almost always results in type conflict prompts. Use this option only for debugging purposes or to ensure that all files have exactly the same version of every type.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.CPUAffinityForNewThreadOptions">
      <summary>Use this enumeration to specify the CPUs on which a new thread executes.</summary>
      <seealso cref="SequenceCallModule.CPUAffinityForNewThreadOption" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.CPUAffinityForNewThreadOptions.CPUAffinityForNewThreadOption_UseStationOption">
      <summary>(Value: 0) Specifies to use the StationOptions.DefaultCPUAffinityForThreadsEx property as the CPU affinity of the new thread.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.CPUAffinityForNewThreadOptions.CPUAffinityForNewThreadOption_UseAffinityOfCaller">
      <summary>(Value: 1) Specifies to use the CPU affinity of the calling sequence as the CPU affinity of the new thread.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.CPUAffinityForNewThreadOptions.CPUAffinityForNewThreadOption_UseAllCPUs">
      <summary>(Value: 2) Specifies to use all CPUs available to the process as the CPU affinity of the new thread.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.CPUAffinityForNewThreadOptions.CPUAffinityForNewThreadOption_UseCustomAffinity">
      <summary>(Value: 3) Specifies to use an expression to determine the CPU affinity of the new thread.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.FileModificationIndicatorPolicies">
      <summary>Use the constants with the StationOptions.FileModificationIndicatorPolicy property.</summary>
      <seealso cref="StationOptions.FileModificationIndicatorPolicy" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.FileModificationIndicatorPolicies.FileModificationIndicatorPolicy_DefaultPolicy">
      <summary>(Value: 0x0) TestStand indicates that any file with modifications is modified.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.FileModificationIndicatorPolicies.FileModificationIndicatorPolicy_ExcludeTestStandVersionUpgrade">
      <summary>(Value: 0x1) TestStand does not indicate that a file is modified if the only changes are from non-editable NI type upgrades, or file data format upgrades.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.ExecutionOutputRecordStream">
      <summary></summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.ExecutionOutputRecordStream.Name">
      <summary>Get the name of this <c>ExecutionOutputRecordStream</c>.</summary>
      <remarks>You can specify an <c>ExecutionOutputRecordStream</c> by name in the Write Record step type.  You can also retrieve an <c>ExecutionOutputRecordStream</c> from the current execution by name by calling <c>ExecutionOutputRecordStreams.GetStream()</c>.</remarks>
      <returns>The name of this <c>ExecutionOutputRecordStream</c>.</returns>
      <seealso cref="ExecutionOutputRecordStreams.GetStream" />
      <seealso cref="&#xD;&#xA;" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.ExecutionOutputRecordStream.Insert(NationalInstruments.TestStand.Interop.API.OutputRecordStream)">
      <summary>Add an <c>OutputRecordStream</c> to this <c>ExecutionOutputRecordStream</c>.</summary>
      <param name="stream">A non-null reference to an <c>OutputRecordStream</c> to add to this <c>ExecutionOutputRecordStream</c>.</param>
      <seealso cref="OutputRecordStream" />
      <seealso cref="ExecutionOutputRecordStream" />
      <seealso cref="ExecutionOutputRecordStream.Remove" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.ExecutionOutputRecordStream.Remove(NationalInstruments.TestStand.Interop.API.OutputRecordStream)">
      <summary>Remove an <c>OutputRecordStream</c> from this <c>ExecutionOutputRecordStream</c>.</summary>
      <remarks>The <c>OutputRecordStream</c> is not automatically closed when it is removed.  To close the <c>OutputRecordStream</c>, call <c>OutputRecordStream.Close()</c> on the stream itself.</remarks>
      <param name="stream">A non-null reference to an <c>OutputRecordStream</c> to remove from this <c>ExecutionOutputRecordStream</c>.</param>
      <seealso cref="ExecutionOutputRecordStream.Insert" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.ExecutionOutputRecordStream.RemoveAllStreams">
      <summary>Remove all <c>OutputRecordStream</c> objects from this <c>ExecutionOutputRecordStream</c>.</summary>
      <remarks>Streams are not automatically closed when they are removed.  To close the streams, call <c>ExecutionOutputRecordStream.Close</c> before removing them.</remarks>
      <seealso cref="ExecutionOutputRecordStream.Insert" />
      <seealso cref="ExecutionOutputRecordStream.Remove" />
      <seealso cref="&#xD;&#xA;" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.ExecutionOutputRecordStream.DefineFields(NationalInstruments.TestStand.Interop.API.PropertyObject,System.String)">
      <summary>Define the field names for records displayed in the Report View.</summary>
      <remarks>Defining the fields names for the <c>ExecutionOutputRecordStream</c> does not define them for the contained <c>OutputRecordStream</c> objects. It only specifies names for display in the Report View. Field names are not a part of the base <c>OutputRecordStream</c> interface, and may or may not be applicable for a specific <c>OutputRecordStream</c> implementation.  To define the field names for a <c>CsvFileOutputRecordStream</c>, call <c>CsvFileOutputRecordStream.WriteFieldHeaders()</c>.</remarks>
      <param name="fieldDefinitions">A container or array defining the field names. If the fields parameter is a container, the container is the record, and each subproperty is a field.  The names of the subproperties are the field names.  If the record parameter is an array, the entire array is the record, and each array element is a field.  The values of the array elements coerced to strings are the field names.</param>
      <param name="mapping">Specifies the mapping from elements (either subproperties or array elements) in the fields parameter to fields in the stream.

The mapping is a comma-separated list of index ranges.  For example, "0, 3-5, 8-7" specifies that elements 0, 3, 4, 5, 8, and 7 specify the field names.  The final range in the list may be open-ended.  For example, "2, 3-" indicates that elements 2, 3, and all elements beyond 3 specify the field names. For convenience, you may specify an empty string to specify all elements be used in order. That is, an empty string is equivalent to "0-". The default value is an empty string.
</param>
      <seealso cref="CsvFileOutputRecordStream.WriteFieldHeaders" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.ExecutionOutputRecordStream.WriteRecord(NationalInstruments.TestStand.Interop.API.PropertyObject,System.String)">
      <summary>Write a record to the <c>ExecutionOutputRecordStream</c>.</summary>
      <remarks><c>ExecutionOutputRecordStream.WriteRecord</c> invokes <c>OutputRecordStream.WriteRecord</c> on each <c>OutputRecordStream</c> it contains, using the specified parameters.  In addition, it updates the Report View with data from the new record.</remarks>
      <param name="record">The record to write.  The record parameter may be either a container or an array. If the record parameter is a container, the container represents the record, and each subproperty is a field.  If the record parameter is an array, the entire array represents the record, and each array element is a field.
</param>
      <param name="mapping">Specifies the mapping from elements (either subproperties or array elements) in the record parameter to fields in the stream. The mapping is a comma-separated list of index ranges.  For example, "0, 3-5, 8-7" specifies that elements 0, 3, 4, 5, 8, and 7 be written as the fields to the stream.  The final range in the list may be open-ended.  For example, "2, 3-" indicates that elements 2, 3, and all elements beyond 3 be written to the stream. If the record parameter is a container, the range list may include individual subproperty names.  For example, "Temperature, Pressure, 0-1" specifies that the subproperties "Temperature" and "Pressure" as well as elements 0 and 1 be written as fields to the stream. For convenience, you may specify an empty string to specify all elements be written in order.  That is, an empty string is equivalent to "0-". The default value is an empty string.
</param>
      <seealso cref="ExecutionOutputRecordStream.WriteRecordFrom" />
      <seealso cref="OutputRecordStream.WriteRecord" />
      <seealso cref="ExecutionOutputRecordStream.NumRecordsToDisplayInReportView" />
      <seealso cref="&#xD;&#xA;" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.ExecutionOutputRecordStream.WriteRecordFrom(NationalInstruments.TestStand.Interop.API.SequenceContext,System.Object[])">
      <summary>Write a record to the <c>ExecutionOutputRecordStream</c>.</summary>
      <remarks><c>ExecutionOutputRecordStream.WriteRecordFrom()</c> invokes <c>OutputRecordStream.WriteRecordFrom()</c> on each <c>OutputRecordStream</c> it contains, using the specified parameters.  In addition, it updates the Report View with data from the new record.</remarks>
      <param name="context">Specifies the <c>SequenceContext</c> against which to evaluate the lookup strings specified by the record parameter. </param>
      <param name="record">An array of lookup strings specifying the fields to write to the stream.  The lookup strings are evaluated relative to the <c>SequenceContext</c> specified by the context parameter.</param>
      <seealso cref="ExecutionOutputRecordStream.WriteRecord" />
      <seealso cref="OutputRecordStream.WriteRecordFrom" />
      <seealso cref="ExecutionOutputRecordStream.NumRecordsToDisplayInReportView" />
      <seealso cref="&#xD;&#xA;" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.ExecutionOutputRecordStream.Flush">
      <summary>Flush the <c>OutputRecordStream</c> objects contained in this <c>ExecutionOutputRecordStream</c>.</summary>
      <remarks><c>ExecutionOutputRecordStream.Flush</c> invokes <c>OutputRecordStream.Flush</c> on all of its contained <c>OutputRecordStream</c> objects.</remarks>
      <seealso cref="OutputRecordStream.Flush" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.ExecutionOutputRecordStream.Close">
      <summary>Close the <c>OutputRecordStream</c> objects contained in this <c>ExecutionOutputRecordStream</c>.</summary>
      <remarks><c>ExecutionOutputRecordStream.Close</c> invokes <c>OutputRecordStream.Close</c> on all of the <c>OutputRecordStream</c> objects contained by this <c>ExecutionOutputRecordStream</c>.</remarks>
      <seealso cref="OutputRecordStream" />
      <seealso cref="ExecutionOutputRecordStream.Close" />
      <seealso cref="ExecutionOutputRecordStream" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.ExecutionOutputRecordStream.NumRecordsToDisplayInReportView">
      <summary>Get or set the number of records to display in the Report View.</summary>
      <remarks>A value greater than <c>0</c> specifies the upper limit to the number of records to display in the Report View. Once this limit is reached, each new record written to the Report View causes the oldest record to be removed. Specify a value greater than <c>0</c> to display recently written records while bounding the memory used by the Report View.

A value of <c>0</c> disables updates to the Report View. Specify <c>0</c> for maximum performance when you do not need to view records in the Report View.

A value of <c>-1</c> specifies no limit to the number of records displayed in the Report View. Specify <c>-1</c> when you are not concerned about memory use and wish to review all records written to the Report View.

<para>Note: Specifying <c>-1</c> allows an unlimited amount of data to be written to the Report View. With this setting, writing too many records will cause TestStand to run out of memory.</para></remarks>
      <returns>The number of records to display in the Report View.</returns>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.ExecutionOutputRecordStream.SetActiveReport">
      <summary>Make this <c>ExecutionOutputRecordStream</c> the active (displayed) report in the Report View.</summary>
      <remarks><c>SetActiveReport</c> can conflict with the settings for the active report in TestStand process models.  National Instruments recommends against calling <c>SetActiveReport</c> from process model callbacks.</remarks>
      <seealso cref="ExecutionOutputRecordStream.NumRecordsToDisplayInReportView" />
      <seealso cref="ExecutionOutputRecordStream.ClearRecordsFromReportView" />
      <seealso cref="Reports.ActiveReport" />
      <seealso cref="&#xD;&#xA;" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.ExecutionOutputRecordStream.ClearRecordsFromReportView">
      <summary>Clear records for this <c>ExecutionOutputRecordStream</c> from the Report View.</summary>
      <seealso cref="ExecutionOutputRecordStream.NumRecordsToDisplayInReportView" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.ExecutionOutputRecordStream.CloseAtNextUUTOrBatch">
      <summary>Indicate to the process model if it should clean up this <c>ExecutionOutputRecordStream</c> before starting the next UUT or batch.</summary>
      <remarks><c>CloseAtNextUUTOrBatch</c> indicates whether <c>ExecutionOutputRecordStreams.BeginNextUUTOrBatch</c> should close and remove this <c>ExecutionOutputRecordStream</c>.

<para>Note: Modifying this property has no direct effect on the behavior of the <c>ExecutionOutputRecordStream</c>. It is simply a flag that can be set or tested. The behavior described here relies on the process model calling <c>ExecutionOutputRecordStreams.BeginNextUUTOrBatch</c> on the <c>ExecutionOutputRecordStreams</c> collection associated with an execution at the appropriate time. Factory models shipped with TestStand support this behavior. Custom process models may or may not support this behavior.</para></remarks>
      <returns><c>True</c> if the process model should close this <c>ExecutionOutputRecordStream</c> and remove it from the execution before beginning the next UUT (for test sockets) or batch (for the controller socket in the batch model). <c>False</c> if the process model should not clean up this <c>ExecutionOutputRecordStream</c>.</returns>
      <seealso cref="ExecutionOutputRecordStream" />
      <seealso cref="ExecutionOutputRecordStreams.BeginNextUUTOrBatch" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.ExecutionOutputRecordStream.Format">
      <summary>Sets or retrieves the display format in the Report View.</summary>
      <remarks>Allowed values are:
<para><para>&#160;&#160;&#160;&#160;* <c>&quot;txt&quot;</c>&#8211;(default) Plain ASCII text format</para><para>&#160;&#160;&#160;&#160;* <c>&quot;html&quot;</c>&#8211;HTML format that displays CSV data as a table.</para></para></remarks>
      <seealso cref="&quot;Report Pane&quot;javascript:RefLink('/InfoTopics/SeqEditWin_Report_Tab.htm')" />
      <seealso cref="&quot;Report Tab&quot;javascript:RefLink('/InfoTopics/UI_Report_Tab.htm')" />
      <seealso cref="ExecutionOutputRecordStream.NumRecordsToDisplayInReportView" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.ExecutionOutputRecordStreams">
      <summary></summary>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.ExecutionOutputRecordStreams.GetStream(System.String)">
      <summary>Get the <c>ExecutionOutputRecordStream</c> with the specified name.</summary>
      <remarks><c>ExecutionOutputRecordStreams.GetStream</c> throws a run-time error if the specified stream does not exist.</remarks>
      <param name="streamName">The name of the stream to get.  The name is case sensitive.</param>
      <seealso cref="ExecutionOutputRecordStreams.NewStream" />
      <seealso cref="ExecutionOutputRecordStreams.CloseAndRemoveStream" />
      <seealso cref="&#xD;&#xA;" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.ExecutionOutputRecordStreams.CloseAndRemoveStream(System.String)">
      <summary>Close the specified stream and remove it from this collection.</summary>
      <param name="streamName">The name of the stream to close and remove.  The name is case sensitive.

Specifying a stream that does not exist causes a run-time error.
</param>
      <seealso cref="ExecutionOutputRecordStreams.NewStream" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.ExecutionOutputRecordStreams.CloseAll">
      <summary>Close all <c>ExecutionOutputRecordStream</c> objects in this collection.</summary>
      <remarks><para>Note: Note:  The streams are not removed from the collection.  Call <c>ExecutionOutputRecordStreams.RemoveAll</c> to remove them.</para></remarks>
      <seealso cref="ExecutionOutputRecordStreams.RemoveAll" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.ExecutionOutputRecordStreams.RemoveAll">
      <summary>Remove all <c>ExecutionOutputRecordStream</c> objects from this collection.</summary>
      <remarks><para>Note: Note:  The streams are not automatically closed when you remove them.  Call <c>ExecutionOutputRecordStreams.CloseAll</c> first to close them.</para></remarks>
      <seealso cref="ExecutionOutputRecordStreams.CloseAll" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.ExecutionOutputRecordStreams.BeginNextUUTOrBatch">
      <summary>Clean up this <c>ExecutionOutputRecordStreams</c> object before beginning the next UUT or batch.</summary>
      <remarks><c>BeginNextUUTOrBatch</c> iterates over all <c>ExecutionOutputRecordStream</c> objects contained in this collection.  Any streams with the <c>ExecutionOutputRecordStream.CloseAtNextUUTOrBatch</c> property set to true are closed and removed from the collection.  Streams with this property set to false are left unchanged.</remarks>
      <seealso cref="ExecutionOutputRecordStream.CloseAtNextUUTOrBatch" />
      <seealso cref="ExecutionOutputRecordStreams.CloseAndRemoveStream" />
      <seealso cref="&#xD;&#xA;" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.ExecutionOutputRecordStreams.NewStream(System.String)">
      <summary>Create a new <c>ExecutionOutputRecordStream</c> attached to the execution associated with this <c>ExecutionOutputRecordStreams</c> collection.
</summary>
      <remarks>Attempting to create a new stream with the same name as an existing stream that is already part of this <c>ExecutionOutputRecordStreams</c> collection causes a run-time error.</remarks>
      <param name="streamName">The name of the stream to create.  The name must be unique within this <c>ExecutionOutputRecordStreams</c> collection.  Names are case sensitive.</param>
      <seealso cref="ExecutionOutputRecordStreams.GetStream" />
      <seealso cref="ExecutionOutputRecordStreams.CloseAndRemoveStream" />
      <seealso cref="&#xD;&#xA;" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.CsvFileOutputRecordStream">
      <summary></summary>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.CsvFileOutputRecordStream.Open(System.String,System.Int32)">
      <summary>Open the file specified by the absolutePath argument, associating it with this <c>CsvFileOutputRecordStream</c>.</summary>
      <remarks>You will not normally need to call this method, as <c>Engine.NewCsvFileOutputRecordStream</c> returns a stream already associated with an open file. When a <c>CsvFileOutputRecordStream</c> is no longer needed, it should be closed by calling <c>CsvFileOutputRecordStream.Close</c>.  If it is not closed already, the stream will close automatically when the last reference to it is removed.
</remarks>
      <param name="absolutePath">Specifies the absolute path to the CSV file.</param>
      <param name="openMode">Specifies how to open the CSV file.  Supported options include: <para>&#160;&#160;&#160;&#160;* <c>FileOpenMode_NoOptions</c> - Create the file if it does not exist. Fail with a run-time error if the file exists.</para> <para>&#160;&#160;&#160;&#160;* <c>FileOpenMode_Truncate</c> - If the file exists, overwrite it deleting the previous contents. Create a new file if it does not exist.</para> <para>&#160;&#160;&#160;&#160;* <c>FileOpenMode_Append</c> - If the file exists, append to the end of it, preserving the existing contents.  Create a new file if it does not exist.</para> <para>&#160;&#160;&#160;&#160;* <c>FileOpenMode_Uniquify</c> - Create a new file if it does not exist.  If a file with the specified path exists, attempt to make the file name unique by appending "_" (underscore) plus a numeric suffix to the file name. For example, if "AlreadyExists.csv" already exists, "AlreadyExists_2.csv" is tried, then "AlreadyExists_3.csv", etc. until a unique name has been found. If a unique name is not found after 10000 attempts, the method fails and throws a runtime error.</para></param>
      <seealso cref="FileOpenModes" />
      <seealso cref="Engine.NewCsvFileOutputRecordStream" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.CsvFileOutputRecordStream.Path">
      <summary>Get the absolute path of the CSV file associated with this <c>CsvFileOutputRecordStream</c>.</summary>
      <remarks>An empty string is returned if this stream is not currently associated with an open file. Path is set implicitly by calling <c>CsvFileOutputRecordStream.Open</c> and cleared by calling <c>CsvFileOutputRecordStream.Close</c>.</remarks>
      <returns>The path of the CSV file associated with this stream.</returns>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.CsvFileOutputRecordStream.WriteFieldHeaders(NationalInstruments.TestStand.Interop.API.PropertyObject,System.String)">
      <summary>Write the field headers (i.e. column names) for your data to the underlying CSV file.</summary>
      <remarks>WriteFieldHeaders is very similar to <c>CsvFileOutputRecordStream.WriteRecord</c>. The only difference is that if the specified record is a container, the names of the subproperties are written to the CSV file instead of the values.  This makes it straightforward to completely specify records with a container. <c>WriteFieldHeaders</c> will also accept an array, but in this case the behavior is identical to <c>CsvFileOutputRecordStream.WriteRecord</c>. The values in the array specify the field headers.</remarks>
      <param name="fields">A container or array specifying the field headers. If a container is specified, names of the subproperties specify the field headers. If an array is specified, the values of the array elements coerced to strings define the field headers.</param>
      <param name="mapping">Specifies the mapping from elements (either subproperties or array elements) in the <c>fields</c> parameter to fields in the stream. The mapping is a comma-separated list of index ranges. For example, "<c>0, 3-5, 8-7</c>" specifies that elements 0, 3, 4, 5, 8, and 7 define the field headers.  The final range in the list may be open-ended. For example, "<c>2, 3-</c>" indicates that elements 2, 3, and all elements beyond 3 define the field headers. For convenience, you may specify an empty string to specify all elements be written in order. That is, an empty string is equivalent to <c>0-</c>. The default value is an empty string.</param>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.CsvFileOutputRecordStream.SeparatorChar">
      <summary>Get or set the separator character associated with this <c>CsvFileInputRecordStream</c>. By default, the separator character is a "," (comma). 
</summary>
      <remarks><para>Note: Note: The only separator compliant with RFC 4180 is the comma.</para> <c>CsvFileOutputRecordStream</c> supports any single character besides '"' (double quote), as well as null (empty string) for the separator. However, <c>CsvFileInputRecordStream</c> does not support carriage return, new line, or null separator characters. While it is possible to write files using these separator characters with <c>CsvFileOutputRecordStream</c>, <c>CsvFileInputRecordStream</c> cannot parse them. Attempting to set <c>SeparatorChar</c> to a string of two or more characters results in a run-time error. <para>Note: Note: Although this interface accepts any Unicode character, TestStand only supports values that map to ANSI multibyte characters from the current code page.</para> <para>Note: Note: The comma is the only separator compliant with RFC 4180, "Common Format and MIME Type for Comma-Separated Values (CSV) Files."</para>
</remarks>
      <returns>The separator character for the CSV file.</returns>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.CsvFileOutputRecordStream.WriteLine(System.String)">
      <summary>Write a line of text to the file.  A line feed is appended automatically.</summary>
      <remarks><c>WriteLine</c> provides a lower level interface to the underlying file than <c>OutputRecordStream.WriteRecord</c>. The specified string plus a linefeed is written directly to the file without further processing or escaping. Use this method to add formatting or other non-record data to the CSV file.</remarks>
      <param name="lineString">The string to write.</param>
      <seealso cref="OutputRecordStream.WriteRecord" />
      <seealso cref="CsvFileInputRecordStream.ReadLine" />
      <seealso cref="&#xD;&#xA;" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.CsvFileOutputRecordStream.AutoFlush">
      <summary>Set or retrieve the automatic flushing behavior of this <c>CsvFileOutputRecordStream</c>.</summary>
      <remarks>If AutoFlush is <c>false</c>, this <c>CsvFileOutputRecordStream</c> is free to buffer data to improve performance. If AutoFlush is <c>true</c>, write operations (<c>CsvFileOutputRecordStream.WriteRecord</c>, <c>CsvFileOutputRecordStream.WriteRecordFrom</c>, and <c>CsvFileOutputRecordStream.WriteLine</c>) automatically flush before returning, reducing the risk of data loss in the event of a crash or other failure.
Set AutoFlush to <c>true</c> when it is critical that no data be lost in the event of an unexpected crash or internal error. Set AutoFlush to <c>false</c> to achieve better performance. By default AutoFlush is <c>false</c>.
</remarks>
      <returns><c>True</c> makes all write operations flush immediately.  <c>False</c> allows this stream to buffer write operations for better performance.</returns>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.CsvFileOutputRecordStream.WriteRecordPrototype(NationalInstruments.TestStand.Interop.API.PropertyObject,System.String)">
      <summary>Write the specified prototype to the CSV file.</summary>
      <param name="prototype">A container or <c>PropertyObject</c> array defining the prototype for this stream. The name and type of each subproperty or array element define to the name and type of the column in the CSV file with the corresponding index.</param>
      <param name="mapping">Specifies the mapping from fields in the prototype parameter to columns in the CSV file. The mapping is a comma-separated list of index ranges. For example, "0, 3-5, 8-7" specifies that fields 0, 3, 4, 5, 8, and 7 of the container correspond to columns 0-5 of the CSV file. The final range in the list may be open-ended. For example, "2, 3-" indicates that fields 2, 3, and all fields beyond 3 map to columns 0, 1, 2, etc. of the CSV file. The range list may also include individual subproperty or array element names. For example, "Temperature, Pressure, 0-1" specifies that the subproperties or array elements named "Temperature" and "Pressure", followed by those with indices 0 and 1 define columns 0-3 of the CSV file. For convenience, you can specify an empty string to specify all fields from the prototype parameter define the columns in order. That is, an empty string is equivalent to "0-".</param>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.CsvFileInputRecordStream">
      <summary></summary>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.CsvFileInputRecordStream.Open(System.String)">
      <summary>Open the file specified by the absolutePath argument, associating it with this <c>CsvFileInputRecordStream</c>.</summary>
      <remarks>You will not normally need to call this method, as <c>Engine.NewCsvFileInputRecordStream</c> returns a stream already associated with an open file. When a <c>CsvFileInputRecordStream</c> is no longer needed, it should be closed by calling <c>CsvFileInputRecordStream.Close</c>. If it is not closed already, the stream will close automatically when the last reference to it is removed.
</remarks>
      <param name="absolutePath">Specifies the absolute path to the CSV file.</param>
      <seealso cref="InputRecordStream.Close" />
      <seealso cref="Engine.NewCsvFileInputRecordStream" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.CsvFileInputRecordStream.Path">
      <summary>Get the absolute path of the CSV file associated with this <c>CsvFileInputRecordStream</c>.</summary>
      <remarks>An empty string is returned if this stream is not currently associated with an open file. Path is set implicitly by calling <c>CsvFileInputRecordStream.Open</c> and cleared by calling <c>CsvFileInputRecordStream.Close</c>.</remarks>
      <returns>The path of the CSV file associated with this stream.</returns>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.CsvFileInputRecordStream.ReadLine(System.String@)">
      <summary>Read the next line of text from the underlying file.</summary>
      <remarks><c>CsvFileInputRecordStream.ReadLine</c> provides a lower level interface to the underlying file than <c>ReadRecord</c>. The next line of text from the file is stored directly to the lineString parameter with no additional processing. <para>Note: Note: <c>CsvFileInputRecordStream.ReadLine</c> has no special behavior for end of table the way <c>CsvFileInputRecordStream.ReadRecord</c></para> does.
</remarks>
      <returns>Returns <c>0</c> if a line of text was successfully read. Returns non-zero if end of file is encountered.</returns>
      <param name="lineString">Outputs the next line from the CSV file.</param>
      <seealso cref="CsvFileInputRecordStream.SkipLines" />
      <seealso cref="CsvFileOutputRecordStream.WriteLine" />
      <seealso cref="&#xD;&#xA;" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.CsvFileInputRecordStream.SeparatorChar">
      <summary>Get or set the separator character associated with this <c>CsvFileInputRecordStream</c>.  By default, the separator character is a "," (comma).</summary>
      <remarks><para>Note: The only separator compliant with RFC 4180 is the comma.</para> <c>CsvFileInputRecordStream</c> supports any single character for the separator except for '"' (double quote), new line, carriage return, or null (empty string). Attempting to set the separator to an empty string or string of two or more characters causes a run-time error. <para>Note: Although this interface accepts any Unicode character, TestStand only supports values that map to ANSI multibyte characters from the current code page.</para></remarks>
      <returns>The separator character for the CSV file.</returns>
      <seealso cref="CsvFileOutputRecordStream.SeparatorChar" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.CsvFileInputRecordStream.ScanForTag(System.String,System.Boolean)">
      <summary>Search forward through the file for the line beginning with the specified string.  Reading begins from the next line.</summary>
      <remarks>Use <c>CsvFileInputRecordStream.ScanForTag</c> to search through a CSV file for a known string that indicates the location of the records you wish to read.</remarks>
      <returns>Returns <c>0</c> if the tag was found. Returns non-zero if end of file was encountered without finding the tag.</returns>
      <param name="tag">The tag to search for.</param>
      <param name="ignoreCase">Specifies whether to perform case-sensitive or case-insensitive matching.  Specify true to ignore case, or false to perform case-sensitive matching.</param>
      <seealso cref="CsvFileInputRecordStream.SkipLines" />
      <seealso cref="CsvFileInputRecordStream.ReadLine" />
      <seealso cref="&#xD;&#xA;" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.CsvFileInputRecordStream.SkipLines(System.Int32)">
      <summary>Skip the specified number of lines.</summary>
      <remarks>This method provides a lower level interface to the underlying file than <c>InputRecordStream.SkipRecords</c>.  Lines are read from the file and discarded immediately without further processing.  Unlike <c>InputRecordStream.SkipRecords</c>, <c>InputRecordStream.SkipLines</c> has no special behavior for end of table. </remarks>
      <returns>Returns <c>0</c> if numLines were successfully skipped. Returns non-zero if end of file is encountered before numLines could be skipped.</returns>
      <param name="numLines">The number of lines to skip.  A value of 0 indicates to return successfully without skipping any lines.  A negative value causes a run-time error.</param>
      <seealso cref="InputRecordStream.SkipRecords" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.CsvFileInputRecordStream.ReadRecord(NationalInstruments.TestStand.Interop.API.PropertyObject,System.String)">
      <summary>Reads the next record from the stream. Implements <c>InputRecordStream.ReadRecord</c>.</summary>
      <remarks><c>CsvFileInputRecordStream</c> is designed to work with CSV files that contain multiple tables. Strictly speaking, such files are not compliant with RFC 4180, but many common spreadsheet applications support them regardless.
If <c>CsvFileInputRecordStream.ReadRecord</c> encounters an empty line or a line with nothing but separator characters, it returns <c>1</c> to indicate it has reached the end of the current table. <c>CsvFileInputRecordStream.ReadRecord</c> returns <c>-1</c> to indicate it has reached the end of the underlying file.
<para>Note: <c>CsvFileInputRecordStream</c> considers only empty lines and lines that contain nothing but separators as end-of-table markers. Lines containing whitespaces are not interpreted as end of table. A record consisting of only empty strings can be represented by surrounding empty strings with quotes. Such a record is read normally and not interpreted as end of table.</para>
Applications that only need to read the current table do not have to be aware of end-of-table vs. end-of-file distinction, as <c>InputRecordStream.ReadRecord</c> defines end of file to be any non-zero return value. However, applications that are aware they are reading a <c>CsvFileInputRecordStream</c> can distinguish between having reached the end of the current table and the actual end of the file by checking if the return value is <c>+1</c> or <c>-1</c>.
<para>Note: The TestStand For Each, Stream Loop, and Sweep Loop steps operate on the <c>InputRecordStream</c> interface. Loops terminate upon encountering either the end of the current table or the end of the file.</para>
<c>CsvFileInputRecordStream</c> instances without record prototypes store data to fields in the order specified by the mapping parameter.
When the stream has a prototype, columns in the CSV file are mapped by name to fields in the record.  As such, the record must be of a type that supports named fields: either a container or PropertyObject array.  If the record is a container, the prototype field name determines the name of the subproperty the value in its column is stored to.  If the record is an array, the prototype specifies the name of the array element(s) the value in its column is stored to.  The record parameter cannot be a string or other type of array, as these types do not support named fields.  Specifying a field mapping when a prototype is present results in a run-time error.</remarks>
      <returns>Returns 0 if a record was successfully read. Returns -1 if end of file was encountered before reading a record. Returns 1 if the end of a table was encountered before reading a record.</returns>
      <param name="record">Specifies where to store the incoming record. Refer to <c>InputRecordStream.ReadRecord</c> for more information.<para>Note: When a prototype is present, the record parameter must be either a container or an array of containers with named array elements. It cannot be another type of array or a string.</para></param>
      <param name="mapping">Specifies the mapping to elements (subproperties or array elements) in the record parameter from fields in the CSV file. Refer to <c>InputRecordStream.ReadRecord</c> for more information. Passing a non-empty field mapping to a stream that has a record prototype results in a run-time error.</param>
      <seealso cref="InputRecordStream.ReadRecord" />
      <seealso cref="CsvFileInputRecordStream.SetRecordPrototype" />
      <seealso cref="CsvFileInputRecordStream.GetRecordPrototype" />
      <seealso cref="CsvFileInputRecordStream.ReadRecordPrototype" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.CsvFileInputRecordStream.SetRecordPrototype(NationalInstruments.TestStand.Interop.API.PropertyObject,System.String)">
      <summary>Set the prototype associated with this <c>CsvFileInputRecordStream</c>.</summary>
      <param name="prototype">A container defining the prototype for this stream. The name and type of each subproperty correspond to the name and type of the column in the CSV file with the same index as the subproperty.</param>
      <param name="mapping">Specifies the mapping from subproperties in the prototype parameter to columns in the CSV file. The mapping is a comma-separated list of index ranges. For example, "0, 3-5, 8-7" specifies that subproperties 0, 3, 4, 5, 8, and 7 of the container correspond to columns 0-5 of the CSV file. The final range in the list may be open-ended. For example, "2, 3-" indicates that subproperties 2, 3, and all subproperties beyond 3 map to columns 0, 1, 2, etc. of the CSV file. The range list may also include individual subproperty names. For example, "Temperature, Pressure, 0-1" specifies that the subproperties "Temperature" and "Pressure", then subproperties 0 and 1 define columns 0-3 of the CSV file. For convenience, you can specify an empty string to specify all subproperties of the container define the columns in order. That is, an empty string is equivalent to "0-".</param>
      <seealso cref=".GetRecordPrototype" />
      <seealso cref=".ReadRecordPrototype" />
      <seealso cref="&quot;Record Prototypes&quot;javascript:RefLink('/InfoTopics/RecordPrototypes.html')" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.CsvFileInputRecordStream.GetRecordPrototype(NationalInstruments.TestStand.Interop.API.PropertyObject@,System.Int32)">
      <summary>Get the prototype associated with this <c>CsvFileInputRecordStream</c>.</summary>
      <returns>True if there is a record prototype associated with this CsvFileInputRecordStream. Otherwise, returns false.</returns>
      <param name="prototype">A container defining the prototype for this stream. The name and type of each subproperty correspond to the name and type of the column in the CSV file with the same index as the subproperty.</param>
      <param name="options">This parameter is reserved for future use.</param>
      <seealso cref=".SetRecordPrototype" />
      <seealso cref=".ReadRecordPrototype" />
      <seealso cref="&quot;Record Prototypes&quot;javascript:RefLink('/InfoTopics/RecordPrototypes.html')" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.CsvFileInputRecordStream.ReadRecordPrototype(NationalInstruments.TestStand.Interop.API.PropertyObject@,System.Int32)">
      <summary>Read the record prototype from the CSV file, and set it.</summary>
      <param name="prototype">A container defining the prototype for this stream. The name and type of each subproperty correspond to the name and type of the column in the CSV file with the same index as the subproperty.</param>
      <param name="options">This parameter is reserved for future use.</param>
      <seealso cref=".SetRecordPrototype" />
      <seealso cref=".GetRecordPrototype" />
      <seealso cref="&quot;Record Prototypes&quot;javascript:RefLink('/InfoTopics/RecordPrototypes.html')" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.UpdateModuleFromStepOptions">
      <summary></summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UpdateModuleFromStepOptions.UpdateModuleFromStepOption_None">
      <summary>(Value: 0)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UpdateModuleFromStepOptions.UpdateModuleFromStepOption_CopyParameterValue">
      <summary>(Value: 1)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UpdateModuleFromStepOptions.UpdateModuleFromStepOption_CopyParameterDefaultCheckState">
      <summary>(Value: 2)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UpdateModuleFromStepOptions.UpdateModuleFromStepOption_CopyParameterLogCheckState">
      <summary>(Value: 4)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UpdateModuleFromStepOptions.UpdateModuleFromStepOption_CopyShowFrontPanelState">
      <summary>(Value: 8)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UpdateModuleFromStepOptions.UpdateModuleFromStepOption_CopyStepRTEState">
      <summary>(Value: 10)</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.GetUpdatedStatusOptions">
      <summary>These constants represent the values you can use with the <c>changedProperties</c> parameter of the <c>LabVIEWNXGModule.HavePropertiesChanged</c> method. Use these constants with the <c>bitwise-OR</c> operator on the value returned in the <c>changedProperties</c> parameter to determine what has changed in module. If the <c>bitwise-OR</c> returns <c>true</c>, then that property or value has changed in the module.</summary>
      <seealso cref="LabVIEWNXGModule.HavePropertiesChanged" />
      <seealso cref="CheckUpdatedStatusOptions" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.GetUpdatedStatusOptions.GetUpdatedStatusOption_None">
      <summary>(Value: 0x0) None of the validations specified by the <c>options</c> parameter in <c>LabVIEWNXgModule.HavePropertiesChanged</c> failed.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.GetUpdatedStatusOptions.GetUpdatedStatusOption_GVIDescriptionChanged">
      <summary>(Value: 0x1) The GVI description has changed.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.GetUpdatedStatusOptions.GetUpdatedStatusOption_GVIChecksumChanged">
      <summary>(Value: 0x2) The checksum of the GVI has changed. This indicates that the parameters or namespace of the GVI has changed from when the step was last configured.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.GetUpdatedStatusOptions.GetUpdatedStatusOption_GVIStateChanged">
      <summary>(Value: 0x4) The GVI is broken or not in a runnable state. </summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.GetUpdatedStatusOptions.GetUpdatedStatusOption_ExpectedGLLPathChanged">
      <summary>(Value: 0x8) The GLL specified by the GLL Path property does not match the GLL output path of the component selected in the Module Qualified Name. The GLL specified in the step should exactly match the GLL output determined by the project, target and component selected in the step, if any. A mismatch could mean that two different GVIs are being run when the module is executed in the LabVIEW NXG Development System vs when the module is executed in the Runtime Engine.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.GetUpdatedStatusOptions.GetUpdatedStatusOption_QualifiedNamePresentInGLL">
      <summary>(Value: 0x10) The GVI selected in the Module Name property is absent in the GLL specified in the step.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.GetModuleFromProjectOptions">
      <summary></summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.GetModuleFromProjectOptions.GetModuleFromProjectOption_NoOptions">
      <summary>(Value: 0)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.GetModuleFromProjectOptions.GetModuleFromProjectOption_NoPrompts">
      <summary>(Value: 1)</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.ProfilerStates">
      <summary>Describes the transition that the profiler event records.</summary>
      <seealso cref="Engine.LogProfilerAction" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ProfilerStates.ProfilerState_NotAState">
      <summary>(Value:0)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ProfilerStates.ProfilerState_Blocked">
      <summary>(Value: 1)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ProfilerStates.ProfilerState_InUse">
      <summary>(Value: 2)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ProfilerStates.ProfilerState_Aborted">
      <summary>(Value: 3)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ProfilerStates.ProfilerState_TimedOut">
      <summary>(Value: 4)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ProfilerStates.ProfilerState_Completed">
      <summary>(Value: 5)</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.InternalStartupOptions">
      <summary>Specifies the internal startup options you can set through the <c>EngineInitializationSettings.SetInternalStartupOption</c> method.</summary>
      <seealso cref="EngineInitializationSettings.SetInternalStartupOption" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.InternalStartupOptions.InternalStartupOption_TestStandReserved1">
      <summary>(Value: 0x1) This option is reserved for internal use by National Instruments.  Specifying this option in a user-built application has no effect.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.CheckUpdatedStatusOptions">
      <summary>These constants represent the values you can use with the options parameter of the <c>LabVIEWNXGModule.HavePropertiesChanged</c> method. Use the <c>bitwise-OR</c> operator to specify more than one option.</summary>
      <seealso cref="LabVIEWNXGModule.HavePropertiesChanged" />
      <seealso cref="GetUpdatedStatusOptions" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.CheckUpdatedStatusOptions.CheckUpdatedStatusOption_All">
      <summary>(Value: 0x0) Perform validations for all the options.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.CheckUpdatedStatusOptions.CheckUpdatedStatusOption_GVIDescription">
      <summary>(Value: 0x1) Validate if GVI description changed.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.CheckUpdatedStatusOptions.CheckUpdatedStatusOption_GVIChecksum">
      <summary>(Value: 0x2) Validate that the checksum of the GVI matches the checksum value stored in the module. Checksum changes indicate that the parameters or namespace of the GVI has changed from when the module was configured/last reloaded.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.CheckUpdatedStatusOptions.CheckUpdatedStatusOption_GVIState">
      <summary>(Value: 0x4) Validate if GVI is broken.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.CheckUpdatedStatusOptions.CheckUpdatedStatusOption_ExpectedGLLPath">
      <summary>(Value: 0x8) Validate that the GLL configured in the GLL Path property of the module matches the output path specified in the LabVIEW NXG component (.gcomp) selected in the step.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.CheckUpdatedStatusOptions.CheckUpdatedStatusOption_QualifiedNamePresentInGLL">
      <summary>(Value: 0x10) Validate that the GVI specified in the module is contained in the component(.gcomp) specified in the Module Qualified Name.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.ProfilerOptions">
      <summary>Use these constants with the <c>Engine.ProfilerOptions</c> property to specify the type of data that profiling collects.</summary>
      <seealso cref="Engine.ProfilerOptions" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ProfilerOptions.ProfilerOption_IncludeModulePathsAndEnvironments">
      <summary>(Value: 0x100) Include module paths and environments in the profile.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ProfilerOptions.ProfilerOption_IncludeModuleInputs">
      <summary>(Value: 0x200) Include module input values in the profile.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ProfilerOptions.ProfilerOption_NoOptions">
      <summary>(Value: 0x0) No data is excluded from the profile.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ProfilerOptions.ProfilerOption_ExcludeUnload">
      <summary>(Value: 0x8) Exclude unloaded modules from the profile.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ProfilerOptions.ProfilerOption_ExcludeSynchronization">
      <summary>(Value: 0x20) Exclude synchronization objects from the profile.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ProfilerOptions.ProfilerOption_ExcludeStepTypeModules">
      <summary>(Value: 0x1) Exclude Step types from the profile.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ProfilerOptions.ProfilerOption_ExcludeSteps">
      <summary>(Value: 0x10) Exclude steps from the profile.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ProfilerOptions.ProfilerOption_ExcludeStepModules">
      <summary>(Value: 0x2) Exclude Step modules from the profile.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ProfilerOptions.ProfilerOption_ExcludeProcessModels">
      <summary>(Value: 0x40) Exclude process models from the profile.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ProfilerOptions.ProfilerOption_ExcludeLocationInformation">
      <summary>(Value: 0x80) Exclude location information from the profile.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ProfilerOptions.ProfilerOption_ExcludeLoad">
      <summary>(Value: 0x4) Exclude loaded modules from the profile.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ProfilerOptions.ProfilerOption_IncludeModuleOutputs">
      <summary>(Value: 0x400) Include module output values in the profile.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.ValidateOverrideSettingsOptions">
      <summary></summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ValidateOverrideSettingsOptions.ValidateOverrideSettingsOption_All">
      <summary>(Value: -1)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ValidateOverrideSettingsOptions.ValidateOverrideSettingsOption_OverridePath">
      <summary>(Value: 0x2)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.ValidateOverrideSettingsOptions.ValidateOverrideSettingsOption_OverrideBinaryPath">
      <summary>(Value: 0x1)</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.UIStyle">
      <summary>Use the UIStyle class to configure style settings for dialogs and controls TestStand displays.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.IUIStyle">
      <summary>Use the UIStyle class to configure style settings for dialogs and controls TestStand displays.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.UIStyleClass">
      <summary>Use the UIStyle class to configure style settings for dialogs and controls TestStand displays.</summary>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IUIStyle.SetStyle(System.String)">
      <summary></summary>
      <param name="styleString"></param>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.UIStyleClass.SetStyle(System.String)">
      <summary></summary>
      <param name="styleString"></param>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IUIStyle.FontName">
      <summary>Returns the name of the font.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.UIStyleClass.FontName">
      <summary>Returns the name of the font.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IUIStyle.FontSize">
      <summary>Returns the size of the font.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.UIStyleClass.FontSize">
      <summary>Returns the size of the font.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IUIStyle.BackgroundColor">
      <summary>Returns the background color.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.UIStyleClass.BackgroundColor">
      <summary>Returns the background color.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IUIStyle.ForegroundColor">
      <summary>Returns the foreground color.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.UIStyleClass.ForegroundColor">
      <summary>Returns the foreground color.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IUIStyle.SelectedBackgroundColor">
      <summary>Returns the background color for an item you select in the TestStand Sequence Editor or a TestStand User Interface.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.UIStyleClass.SelectedBackgroundColor">
      <summary>Returns the background color for an item you select in the TestStand Sequence Editor or a TestStand User Interface.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IUIStyle.SelectedForegroundColor">
      <summary>Returns the foreground color for an item you select in the TestStand Sequence Editor or a TestStand User Interface.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.UIStyleClass.SelectedForegroundColor">
      <summary>Returns the foreground color for an item you select in the TestStand Sequence Editor or a TestStand User Interface.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IUIStyle.HeaderForegroundColor">
      <summary>Returns the text color for table headers.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.UIStyleClass.HeaderForegroundColor">
      <summary>Returns the text color for table headers.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IUIStyle.GridLineColor">
      <summary>Returns the color of the grid lines in tables.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.UIStyleClass.GridLineColor">
      <summary>Returns the color of the grid lines in tables.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IUIStyle.SectionHeaderFontName">
      <summary>Returns the name of the section header font.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.UIStyleClass.SectionHeaderFontName">
      <summary>Returns the name of the section header font.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.IUIStyle.SectionHeaderFontSize">
      <summary>Returns the size of the section header font.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.API.UIStyleClass.SectionHeaderFontSize">
      <summary>Returns the size of the section header font.</summary>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IUIStyle.GetColor(NationalInstruments.TestStand.Interop.API.UIStyleColors)">
      <summary>Returns the color for the <c>UIStyleColor</c> the parameter specifies.</summary>
      <param name="color">Specifies the style color to return.</param>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.UIStyleClass.GetColor(NationalInstruments.TestStand.Interop.API.UIStyleColors)">
      <summary>Returns the color for the <c>UIStyleColor</c> the parameter specifies.</summary>
      <param name="color">Specifies the style color to return.</param>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IUIStyle.GetFontTypeName(NationalInstruments.TestStand.Interop.API.UIStyleFontTypes)">
      <summary>Returns the font name for the <c>fontType</c> parameter.</summary>
      <param name="fontType">Specifies the font type to return.</param>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.UIStyleClass.GetFontTypeName(NationalInstruments.TestStand.Interop.API.UIStyleFontTypes)">
      <summary>Returns the font name for the <c>fontType</c> parameter.</summary>
      <param name="fontType">Specifies the font type to return.</param>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.IUIStyle.GetFontTypeSize(NationalInstruments.TestStand.Interop.API.UIStyleFontTypes)">
      <summary>Returns the font size for the <c>fontType</c> parameter.</summary>
      <param name="fontType">Specifies the font type to return.</param>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.API.UIStyleClass.GetFontTypeSize(NationalInstruments.TestStand.Interop.API.UIStyleFontTypes)">
      <summary>Returns the font size for the <c>fontType</c> parameter.</summary>
      <param name="fontType">Specifies the font type to return.</param>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.FeatureToggle">
      <summary></summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.IFeatureToggle">
      <summary></summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.FeatureToggleClass">
      <summary></summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.AutoCreateVariableLocationOptions">
      <summary>Use the following constants with the <c>StationOptions.AutoCreateVariableLocation</c> property.</summary>
      <seealso cref="StationOptions.AutoCreateVariableLocation" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.AutoCreateVariableLocationOptions.AutoCreateVariableLocationOption_Locals">
      <summary>(Value: 1) Use Locals as the location.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.AutoCreateVariableLocationOptions.AutoCreateVariableLocationOption_Parameters">
      <summary>(Value: 2) Use Parameters as the location.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.AutoCreateVariableLocationOptions.AutoCreateVariableLocationOption_FileGlobals">
      <summary>(Value: 3) Use FileGlobals as the location.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.AutoCreateVariableLocationOptions.AutoCreateVariableLocationOption_StationGlobals">
      <summary>(Value: 4) Use StationGlobals as the location.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.StepTypeCategories">
      <summary></summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.StepTypeCategories.StepTypeCategory_None">
      <summary>(Value: 0)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.StepTypeCategories.StepTypeCategory_Action">
      <summary>(Value: 1)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.StepTypeCategories.StepTypeCategory_Test">
      <summary>(Value: 2)</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.UIStyleColors">
      <summary>Use these constants with <c>UIStyle.GetColor</c> to specify which color to get.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UIStyleColors.UIStyleColor_Background">
      <summary>(Value: 0) Get the background color.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UIStyleColors.UIStyleColor_Background2">
      <summary>(Value: 1) Get the second background color. Provides an alternative color that a control can use. Some controls use <c>BackroundColor2</c> to fill empty space.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UIStyleColors.UIStyleColor_Foreground">
      <summary>(Value: 2) Get foreground color.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UIStyleColors.UIStyleColor_GridLine">
      <summary>(Value: 3) Get grid line color.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UIStyleColors.UIStyleColor_HeaderForeground">
      <summary>(Value: 4) Get header foreground color.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UIStyleColors.UIStyleColor_SelectedBackground">
      <summary>(Value: 5) Get selected background color.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UIStyleColors.UIStyleColor_SelectedForeground">
      <summary>(Value: 6) Get selected foreground color.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UIStyleColors.UIStyleColor_MatchedDelimiterBackground">
      <summary>(Value: 7) Get background color to highlight matching delimiters.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.UIStyleFontTypes">
      <summary>Use these constants to specify the font type.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UIStyleFontTypes.UIStyleFontType_Proportional">
      <summary>(Value: 0) Specifies the general proportional GUI font.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UIStyleFontTypes.UIStyleFontType_Monospaced">
      <summary>(Value: 1) Specifies the monospaced GUI font.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.UIStyleFontTypes.UIStyleFontType_SectionHeader">
      <summary>(Value: 2) Specifies the section header.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.CrashCallbackOptions">
      <summary>These constants represent the options for the <c>Engine.RegisterSequenceToExecuteOnCrash</c> method.</summary>
      <seealso cref="Engine.RegisterSequenceToExecuteOnCrash" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.CrashCallbackOptions.CrashCallbackOption_NoOptions">
      <summary>(Value: 0x0) No options.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.CrashCallbackOptions.CrashCallbackOption_PreloadFile">
      <summary>(Value: 0x1) Load the sequence file while registering for crash recovery callback.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.API.FileOpenModes">
      <summary>Use these constants to specify different methods of opening files.</summary>
      <seealso cref="CsvFileOutputRecordStream.Open" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.FileOpenModes.FileOpenMode_Append">
      <summary>(Value: 0x2) Append to the end of an existing file.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.FileOpenModes.FileOpenMode_NoOptions">
      <summary>(Value 0x0) No options.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.FileOpenModes.FileOpenMode_Truncate">
      <summary>(Value 0x1) Overwrite an existing file, deleting its contents.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.API.FileOpenModes.FileOpenMode_Uniquify">
      <summary>(Value 0x4) Create a new file it does not exist.  If the file already exists, attempt to make the file name unique.  The algorithm for creating a unique filename depends on the specific function being invoked.</summary>
    </member>
  </members>
</doc>